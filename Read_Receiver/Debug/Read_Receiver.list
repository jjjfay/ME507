
Read_Receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005140  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080052e0  080052e0  000062e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800542c  0800542c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  0800542c  0800542c  0000642c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005434  08005434  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005434  08005434  00006434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005438  08005438  00006438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800543c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000068  080054a4  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080054a4  000073a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d206  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8f  00000000  00000000  0001429e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00016130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009da  00000000  00000000  00016dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017476  00000000  00000000  000177aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e62f  00000000  00000000  0002ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fc58  00000000  00000000  0003d24f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ccea7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e04  00000000  00000000  000cceec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d0cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052c8 	.word	0x080052c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	080052c8 	.word	0x080052c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <check_delta>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int check_delta(int16_t delta)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
	//if the delta value is invalid, return -5000 as this is outside the range
	//for pwm values and can be checked in an if statement later in the code to
	//indicate that the signal is invalid
	if(delta < 950)
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8000582:	4293      	cmp	r3, r2
 8000584:	dc01      	bgt.n	800058a <check_delta+0x1a>
	{
		return -50000;
 8000586:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <check_delta+0x60>)
 8000588:	e01b      	b.n	80005c2 <check_delta+0x52>
	}
	else if(delta > 2050)
 800058a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800058e:	f640 0202 	movw	r2, #2050	@ 0x802
 8000592:	4293      	cmp	r3, r2
 8000594:	dd01      	ble.n	800059a <check_delta+0x2a>
	{
		return -50000;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <check_delta+0x60>)
 8000598:	e013      	b.n	80005c2 <check_delta+0x52>
	}
	else
	{
			//convert delta into a valid range for pwm generation
			pwm_sig = ((delta-1500)*4799)/500;
 800059a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800059e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 80005a2:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 80005a6:	fb02 f303 	mul.w	r3, r2, r3
 80005aa:	4a0a      	ldr	r2, [pc, #40]	@ (80005d4 <check_delta+0x64>)
 80005ac:	fb82 1203 	smull	r1, r2, r2, r3
 80005b0:	1152      	asrs	r2, r2, #5
 80005b2:	17db      	asrs	r3, r3, #31
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	b21a      	sxth	r2, r3
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <check_delta+0x68>)
 80005ba:	801a      	strh	r2, [r3, #0]
			return pwm_sig;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <check_delta+0x68>)
 80005be:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	ffff3cb0 	.word	0xffff3cb0
 80005d4:	10624dd3 	.word	0x10624dd3
 80005d8:	200001b0 	.word	0x200001b0

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b590      	push	{r4, r7, lr}
 80005de:	b089      	sub	sp, #36	@ 0x24
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 ff43 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f925 	bl	8000834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fb3d 	bl	8000c68 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005ee:	f000 f989 	bl	8000904 <MX_TIM1_Init>
  MX_TIM3_Init();
 80005f2:	f000 fa8d 	bl	8000b10 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 fb0d 	bl	8000c14 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005fa:	f000 fa07 	bl	8000a0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	motor_t mot1 = {.duty    = 0,
 80005fe:	4b78      	ldr	r3, [pc, #480]	@ (80007e0 <main+0x204>)
 8000600:	f107 0410 	add.w	r4, r7, #16
 8000604:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000606:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.channel1 = TIM_CHANNEL_1,
			.channel2 = TIM_CHANNEL_2,
			.hal_tim = &htim2
	};
	motor_t mot2 = {.duty    = 0,
 800060a:	4b76      	ldr	r3, [pc, #472]	@ (80007e4 <main+0x208>)
 800060c:	463c      	mov	r4, r7
 800060e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000610:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			.channel2 = TIM_CHANNEL_2,
			.hal_tim = &htim3
	};


  start_PWM(&mot1, 1);
 8000614:	f107 0310 	add.w	r3, r7, #16
 8000618:	2101      	movs	r1, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f000 fb9e 	bl	8000d5c <start_PWM>
  start_PWM(&mot1, 2);
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	2102      	movs	r1, #2
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fb98 	bl	8000d5c <start_PWM>
  start_PWM(&mot2, 1);
 800062c:	463b      	mov	r3, r7
 800062e:	2101      	movs	r1, #1
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fb93 	bl	8000d5c <start_PWM>
  start_PWM(&mot2, 2);
 8000636:	463b      	mov	r3, r7
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fb8e 	bl	8000d5c <start_PWM>
  set_duty(&mot1,0);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f000 fba6 	bl	8000d98 <set_duty>
  set_duty(&mot2,0);
 800064c:	463b      	mov	r3, r7
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f000 fba1 	bl	8000d98 <set_duty>

  HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_1);
 8000656:	2100      	movs	r1, #0
 8000658:	4863      	ldr	r0, [pc, #396]	@ (80007e8 <main+0x20c>)
 800065a:	f002 f80f 	bl	800267c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_2);
 800065e:	2104      	movs	r1, #4
 8000660:	4861      	ldr	r0, [pc, #388]	@ (80007e8 <main+0x20c>)
 8000662:	f002 f80b 	bl	800267c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_3);
 8000666:	2108      	movs	r1, #8
 8000668:	485f      	ldr	r0, [pc, #380]	@ (80007e8 <main+0x20c>)
 800066a:	f002 f807 	bl	800267c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_4);
 800066e:	210c      	movs	r1, #12
 8000670:	485d      	ldr	r0, [pc, #372]	@ (80007e8 <main+0x20c>)
 8000672:	f002 f803 	bl	800267c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  n = sprintf(print_buff,"\n\rThe Motor 1 delta is %d",m1_d);
 8000676:	4b5d      	ldr	r3, [pc, #372]	@ (80007ec <main+0x210>)
 8000678:	881b      	ldrh	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	495c      	ldr	r1, [pc, #368]	@ (80007f0 <main+0x214>)
 800067e:	485d      	ldr	r0, [pc, #372]	@ (80007f4 <main+0x218>)
 8000680:	f003 fdf0 	bl	8004264 <siprintf>
 8000684:	4603      	mov	r3, r0
 8000686:	4a5c      	ldr	r2, [pc, #368]	@ (80007f8 <main+0x21c>)
 8000688:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 800068a:	4b5b      	ldr	r3, [pc, #364]	@ (80007f8 <main+0x21c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	b29a      	uxth	r2, r3
 8000690:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000694:	4957      	ldr	r1, [pc, #348]	@ (80007f4 <main+0x218>)
 8000696:	4859      	ldr	r0, [pc, #356]	@ (80007fc <main+0x220>)
 8000698:	f003 f954 	bl	8003944 <HAL_UART_Transmit>

	  n = sprintf(print_buff,"\n\rThe Channel 1 value is %d",ch1_p);
 800069c:	4b58      	ldr	r3, [pc, #352]	@ (8000800 <main+0x224>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4958      	ldr	r1, [pc, #352]	@ (8000804 <main+0x228>)
 80006a4:	4853      	ldr	r0, [pc, #332]	@ (80007f4 <main+0x218>)
 80006a6:	f003 fddd 	bl	8004264 <siprintf>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a52      	ldr	r2, [pc, #328]	@ (80007f8 <main+0x21c>)
 80006ae:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 80006b0:	4b51      	ldr	r3, [pc, #324]	@ (80007f8 <main+0x21c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006ba:	494e      	ldr	r1, [pc, #312]	@ (80007f4 <main+0x218>)
 80006bc:	484f      	ldr	r0, [pc, #316]	@ (80007fc <main+0x220>)
 80006be:	f003 f941 	bl	8003944 <HAL_UART_Transmit>

	  n = sprintf(print_buff,"\n\rThe Channel 2 value is %d",ch1_val);
 80006c2:	4b51      	ldr	r3, [pc, #324]	@ (8000808 <main+0x22c>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	461a      	mov	r2, r3
 80006c8:	4950      	ldr	r1, [pc, #320]	@ (800080c <main+0x230>)
 80006ca:	484a      	ldr	r0, [pc, #296]	@ (80007f4 <main+0x218>)
 80006cc:	f003 fdca 	bl	8004264 <siprintf>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a49      	ldr	r2, [pc, #292]	@ (80007f8 <main+0x21c>)
 80006d4:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 80006d6:	4b48      	ldr	r3, [pc, #288]	@ (80007f8 <main+0x21c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	b29a      	uxth	r2, r3
 80006dc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80006e0:	4944      	ldr	r1, [pc, #272]	@ (80007f4 <main+0x218>)
 80006e2:	4846      	ldr	r0, [pc, #280]	@ (80007fc <main+0x220>)
 80006e4:	f003 f92e 	bl	8003944 <HAL_UART_Transmit>

	  n = sprintf(print_buff,"\n\rThe Motor 2 delta is %d",m2_d);
 80006e8:	4b49      	ldr	r3, [pc, #292]	@ (8000810 <main+0x234>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4949      	ldr	r1, [pc, #292]	@ (8000814 <main+0x238>)
 80006f0:	4840      	ldr	r0, [pc, #256]	@ (80007f4 <main+0x218>)
 80006f2:	f003 fdb7 	bl	8004264 <siprintf>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a3f      	ldr	r2, [pc, #252]	@ (80007f8 <main+0x21c>)
 80006fa:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 80006fc:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <main+0x21c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	b29a      	uxth	r2, r3
 8000702:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000706:	493b      	ldr	r1, [pc, #236]	@ (80007f4 <main+0x218>)
 8000708:	483c      	ldr	r0, [pc, #240]	@ (80007fc <main+0x220>)
 800070a:	f003 f91b 	bl	8003944 <HAL_UART_Transmit>

	  n = sprintf(print_buff,"\n\rThe Channel 3 value is %d",ch2_p);
 800070e:	4b42      	ldr	r3, [pc, #264]	@ (8000818 <main+0x23c>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	4941      	ldr	r1, [pc, #260]	@ (800081c <main+0x240>)
 8000716:	4837      	ldr	r0, [pc, #220]	@ (80007f4 <main+0x218>)
 8000718:	f003 fda4 	bl	8004264 <siprintf>
 800071c:	4603      	mov	r3, r0
 800071e:	4a36      	ldr	r2, [pc, #216]	@ (80007f8 <main+0x21c>)
 8000720:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000722:	4b35      	ldr	r3, [pc, #212]	@ (80007f8 <main+0x21c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	b29a      	uxth	r2, r3
 8000728:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800072c:	4931      	ldr	r1, [pc, #196]	@ (80007f4 <main+0x218>)
 800072e:	4833      	ldr	r0, [pc, #204]	@ (80007fc <main+0x220>)
 8000730:	f003 f908 	bl	8003944 <HAL_UART_Transmit>

	  n = sprintf(print_buff,"\n\rThe Channel 4 value is %d",ch2_val);
 8000734:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <main+0x244>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	493a      	ldr	r1, [pc, #232]	@ (8000824 <main+0x248>)
 800073c:	482d      	ldr	r0, [pc, #180]	@ (80007f4 <main+0x218>)
 800073e:	f003 fd91 	bl	8004264 <siprintf>
 8000742:	4603      	mov	r3, r0
 8000744:	4a2c      	ldr	r2, [pc, #176]	@ (80007f8 <main+0x21c>)
 8000746:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000748:	4b2b      	ldr	r3, [pc, #172]	@ (80007f8 <main+0x21c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	b29a      	uxth	r2, r3
 800074e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000752:	4928      	ldr	r1, [pc, #160]	@ (80007f4 <main+0x218>)
 8000754:	4829      	ldr	r0, [pc, #164]	@ (80007fc <main+0x220>)
 8000756:	f003 f8f5 	bl	8003944 <HAL_UART_Transmit>

	  n = sprintf(print_buff,"\n\rThe PWM value is %d",pwm_sig);
 800075a:	4b33      	ldr	r3, [pc, #204]	@ (8000828 <main+0x24c>)
 800075c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000760:	461a      	mov	r2, r3
 8000762:	4932      	ldr	r1, [pc, #200]	@ (800082c <main+0x250>)
 8000764:	4823      	ldr	r0, [pc, #140]	@ (80007f4 <main+0x218>)
 8000766:	f003 fd7d 	bl	8004264 <siprintf>
 800076a:	4603      	mov	r3, r0
 800076c:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <main+0x21c>)
 800076e:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000770:	4b21      	ldr	r3, [pc, #132]	@ (80007f8 <main+0x21c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	b29a      	uxth	r2, r3
 8000776:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800077a:	491e      	ldr	r1, [pc, #120]	@ (80007f4 <main+0x218>)
 800077c:	481f      	ldr	r0, [pc, #124]	@ (80007fc <main+0x220>)
 800077e:	f003 f8e1 	bl	8003944 <HAL_UART_Transmit>

	  if(check_delta(m1_d) != -5000)
 8000782:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <main+0x210>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	b21b      	sxth	r3, r3
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fef1 	bl	8000570 <check_delta>
 800078e:	4603      	mov	r3, r0
 8000790:	4a27      	ldr	r2, [pc, #156]	@ (8000830 <main+0x254>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d00c      	beq.n	80007b0 <main+0x1d4>
	  {
		  set_duty(&mot1,check_delta(m1_d));
 8000796:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <main+0x210>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b21b      	sxth	r3, r3
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fee7 	bl	8000570 <check_delta>
 80007a2:	4602      	mov	r2, r0
 80007a4:	f107 0310 	add.w	r3, r7, #16
 80007a8:	4611      	mov	r1, r2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 faf4 	bl	8000d98 <set_duty>
	  }
	  if(check_delta(m2_d) != -5000)
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <main+0x234>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff feda 	bl	8000570 <check_delta>
 80007bc:	4603      	mov	r3, r0
 80007be:	4a1c      	ldr	r2, [pc, #112]	@ (8000830 <main+0x254>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	f43f af58 	beq.w	8000676 <main+0x9a>
	  	  {
	  		  set_duty(&mot2,check_delta(m2_d));
 80007c6:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <main+0x234>)
 80007c8:	881b      	ldrh	r3, [r3, #0]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fecf 	bl	8000570 <check_delta>
 80007d2:	4602      	mov	r2, r0
 80007d4:	463b      	mov	r3, r7
 80007d6:	4611      	mov	r1, r2
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fadd 	bl	8000d98 <set_duty>
	  n = sprintf(print_buff,"\n\rThe Motor 1 delta is %d",m1_d);
 80007de:	e74a      	b.n	8000676 <main+0x9a>
 80007e0:	080053a0 	.word	0x080053a0
 80007e4:	080053b0 	.word	0x080053b0
 80007e8:	20000084 	.word	0x20000084
 80007ec:	200001ac 	.word	0x200001ac
 80007f0:	080052e0 	.word	0x080052e0
 80007f4:	200001b4 	.word	0x200001b4
 80007f8:	2000024c 	.word	0x2000024c
 80007fc:	2000015c 	.word	0x2000015c
 8000800:	200001a8 	.word	0x200001a8
 8000804:	080052fc 	.word	0x080052fc
 8000808:	200001a4 	.word	0x200001a4
 800080c:	08005318 	.word	0x08005318
 8000810:	200001ae 	.word	0x200001ae
 8000814:	08005334 	.word	0x08005334
 8000818:	200001aa 	.word	0x200001aa
 800081c:	08005350 	.word	0x08005350
 8000820:	200001a6 	.word	0x200001a6
 8000824:	0800536c 	.word	0x0800536c
 8000828:	200001b0 	.word	0x200001b0
 800082c:	08005388 	.word	0x08005388
 8000830:	ffffec78 	.word	0xffffec78

08000834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b094      	sub	sp, #80	@ 0x50
 8000838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083a:	f107 0320 	add.w	r3, r7, #32
 800083e:	2230      	movs	r2, #48	@ 0x30
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fd71 	bl	800432a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <SystemClock_Config+0xc8>)
 800085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000860:	4a26      	ldr	r2, [pc, #152]	@ (80008fc <SystemClock_Config+0xc8>)
 8000862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000866:	6413      	str	r3, [r2, #64]	@ 0x40
 8000868:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <SystemClock_Config+0xc8>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	4b21      	ldr	r3, [pc, #132]	@ (8000900 <SystemClock_Config+0xcc>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <SystemClock_Config+0xcc>)
 800087e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b1e      	ldr	r3, [pc, #120]	@ (8000900 <SystemClock_Config+0xcc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80008a4:	2319      	movs	r3, #25
 80008a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80008a8:	23c0      	movs	r3, #192	@ 0xc0
 80008aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ac:	2302      	movs	r3, #2
 80008ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0320 	add.w	r3, r7, #32
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 f8df 	bl	8001a7c <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008c4:	f000 fa44 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2103      	movs	r1, #3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f001 fb41 	bl	8001f6c <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80008f0:	f000 fa2e 	bl	8000d50 <Error_Handler>
  }
}
 80008f4:	bf00      	nop
 80008f6:	3750      	adds	r7, #80	@ 0x50
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40007000 	.word	0x40007000

08000904 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000914:	463b      	mov	r3, r7
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000920:	4b38      	ldr	r3, [pc, #224]	@ (8000a04 <MX_TIM1_Init+0x100>)
 8000922:	4a39      	ldr	r2, [pc, #228]	@ (8000a08 <MX_TIM1_Init+0x104>)
 8000924:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8000926:	4b37      	ldr	r3, [pc, #220]	@ (8000a04 <MX_TIM1_Init+0x100>)
 8000928:	225f      	movs	r2, #95	@ 0x5f
 800092a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <MX_TIM1_Init+0x100>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000932:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <MX_TIM1_Init+0x100>)
 8000934:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000938:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b32      	ldr	r3, [pc, #200]	@ (8000a04 <MX_TIM1_Init+0x100>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000940:	4b30      	ldr	r3, [pc, #192]	@ (8000a04 <MX_TIM1_Init+0x100>)
 8000942:	2200      	movs	r2, #0
 8000944:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b2f      	ldr	r3, [pc, #188]	@ (8000a04 <MX_TIM1_Init+0x100>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800094c:	482d      	ldr	r0, [pc, #180]	@ (8000a04 <MX_TIM1_Init+0x100>)
 800094e:	f001 fe45 	bl	80025dc <HAL_TIM_IC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000958:	f000 f9fa 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4826      	ldr	r0, [pc, #152]	@ (8000a04 <MX_TIM1_Init+0x100>)
 800096c:	f002 ff18 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000976:	f000 f9eb 	bl	8000d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800097e:	2301      	movs	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000982:	2300      	movs	r3, #0
 8000984:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	481c      	ldr	r0, [pc, #112]	@ (8000a04 <MX_TIM1_Init+0x100>)
 8000992:	f002 f87d 	bl	8002a90 <HAL_TIM_IC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800099c:	f000 f9d8 	bl	8000d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009a0:	2302      	movs	r3, #2
 80009a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	2204      	movs	r2, #4
 80009ac:	4619      	mov	r1, r3
 80009ae:	4815      	ldr	r0, [pc, #84]	@ (8000a04 <MX_TIM1_Init+0x100>)
 80009b0:	f002 f86e 	bl	8002a90 <HAL_TIM_IC_ConfigChannel>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 80009ba:	f000 f9c9 	bl	8000d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80009c2:	2301      	movs	r3, #1
 80009c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80009c6:	463b      	mov	r3, r7
 80009c8:	2208      	movs	r2, #8
 80009ca:	4619      	mov	r1, r3
 80009cc:	480d      	ldr	r0, [pc, #52]	@ (8000a04 <MX_TIM1_Init+0x100>)
 80009ce:	f002 f85f 	bl	8002a90 <HAL_TIM_IC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80009d8:	f000 f9ba 	bl	8000d50 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80009dc:	2302      	movs	r3, #2
 80009de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009e0:	2302      	movs	r3, #2
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	220c      	movs	r2, #12
 80009e8:	4619      	mov	r1, r3
 80009ea:	4806      	ldr	r0, [pc, #24]	@ (8000a04 <MX_TIM1_Init+0x100>)
 80009ec:	f002 f850 	bl	8002a90 <HAL_TIM_IC_ConfigChannel>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009f6:	f000 f9ab 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000084 	.word	0x20000084
 8000a08:	40010000 	.word	0x40010000

08000a0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08e      	sub	sp, #56	@ 0x38
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a12:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a20:	f107 0320 	add.w	r3, r7, #32
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
 8000a38:	615a      	str	r2, [r3, #20]
 8000a3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a3c:	4b33      	ldr	r3, [pc, #204]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a44:	4b31      	ldr	r3, [pc, #196]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4799;
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a52:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a58:	4b2c      	ldr	r3, [pc, #176]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a64:	4829      	ldr	r0, [pc, #164]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a66:	f001 fc61 	bl	800232c <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a70:	f000 f96e 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4822      	ldr	r0, [pc, #136]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a82:	f002 f963 	bl	8002d4c <HAL_TIM_ConfigClockSource>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a8c:	f000 f960 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a90:	481e      	ldr	r0, [pc, #120]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000a92:	f001 fc9a 	bl	80023ca <HAL_TIM_PWM_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000a9c:	f000 f958 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa8:	f107 0320 	add.w	r3, r7, #32
 8000aac:	4619      	mov	r1, r3
 8000aae:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000ab0:	f002 fe76 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000aba:	f000 f949 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000abe:	2360      	movs	r3, #96	@ 0x60
 8000ac0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2400;
 8000ac2:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000ac6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000ad8:	f002 f876 	bl	8002bc8 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000ae2:	f000 f935 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2204      	movs	r2, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000aee:	f002 f86b 	bl	8002bc8 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000af8:	f000 f92a 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <MX_TIM2_Init+0x100>)
 8000afe:	f000 faf5 	bl	80010ec <HAL_TIM_MspPostInit>

}
 8000b02:	bf00      	nop
 8000b04:	3738      	adds	r7, #56	@ 0x38
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000cc 	.word	0x200000cc

08000b10 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08e      	sub	sp, #56	@ 0x38
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	f107 0320 	add.w	r3, r7, #32
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
 8000b38:	60da      	str	r2, [r3, #12]
 8000b3a:	611a      	str	r2, [r3, #16]
 8000b3c:	615a      	str	r2, [r3, #20]
 8000b3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b40:	4b32      	ldr	r3, [pc, #200]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b42:	4a33      	ldr	r2, [pc, #204]	@ (8000c10 <MX_TIM3_Init+0x100>)
 8000b44:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b46:	4b31      	ldr	r3, [pc, #196]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4799;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b54:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8000b58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b60:	4b2a      	ldr	r3, [pc, #168]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b66:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b68:	f001 fbe0 	bl	800232c <HAL_TIM_Base_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000b72:	f000 f8ed 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b80:	4619      	mov	r1, r3
 8000b82:	4822      	ldr	r0, [pc, #136]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b84:	f002 f8e2 	bl	8002d4c <HAL_TIM_ConfigClockSource>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000b8e:	f000 f8df 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b92:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000b94:	f001 fc19 	bl	80023ca <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000b9e:	f000 f8d7 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4816      	ldr	r0, [pc, #88]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bb2:	f002 fdf5 	bl	80037a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000bbc:	f000 f8c8 	bl	8000d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc0:	2360      	movs	r3, #96	@ 0x60
 8000bc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2400;
 8000bc4:	f44f 6316 	mov.w	r3, #2400	@ 0x960
 8000bc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bda:	f001 fff5 	bl	8002bc8 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000be4:	f000 f8b4 	bl	8000d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	2204      	movs	r2, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000bf0:	f001 ffea 	bl	8002bc8 <HAL_TIM_PWM_ConfigChannel>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000bfa:	f000 f8a9 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000bfe:	4803      	ldr	r0, [pc, #12]	@ (8000c0c <MX_TIM3_Init+0xfc>)
 8000c00:	f000 fa74 	bl	80010ec <HAL_TIM_MspPostInit>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	@ 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000114 	.word	0x20000114
 8000c10:	40000400 	.word	0x40000400

08000c14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <MX_USART2_UART_Init+0x50>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b09      	ldr	r3, [pc, #36]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4805      	ldr	r0, [pc, #20]	@ (8000c60 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	f002 fe2a 	bl	80038a4 <HAL_UART_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c56:	f000 f87b 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000015c 	.word	0x2000015c
 8000c64:	40004400 	.word	0x40004400

08000c68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	4b10      	ldr	r3, [pc, #64]	@ (8000cb4 <MX_GPIO_Init+0x4c>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb4 <MX_GPIO_Init+0x4c>)
 8000c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb4 <MX_GPIO_Init+0x4c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	@ (8000cb4 <MX_GPIO_Init+0x4c>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <MX_GPIO_Init+0x4c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <MX_GPIO_Init+0x4c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800

08000cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
   *
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	7f1b      	ldrb	r3, [r3, #28]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d117      	bne.n	8000cf8 <HAL_TIM_IC_CaptureCallback+0x40>
          //store the previous value and read the captured value from the input capture register
	  	  ch1_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cc8:	2100      	movs	r1, #0
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f002 f906 	bl	8002edc <HAL_TIM_ReadCapturedValue>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000cd6:	801a      	strh	r2, [r3, #0]
	      ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000cd8:	2104      	movs	r1, #4
 8000cda:	6878      	ldr	r0, [r7, #4]
 8000cdc:	f002 f8fe 	bl	8002edc <HAL_TIM_ReadCapturedValue>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000ce6:	801a      	strh	r2, [r3, #0]

	      //calculate the width of the pwm pulse generated by the radio transmitter
	      m1_d = ch1_val - ch1_p;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <HAL_TIM_IC_CaptureCallback+0x84>)
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	4b12      	ldr	r3, [pc, #72]	@ (8000d38 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0x88>)
 8000cf6:	801a      	strh	r2, [r3, #0]
  }
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7f1b      	ldrb	r3, [r3, #28]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	d117      	bne.n	8000d30 <HAL_TIM_IC_CaptureCallback+0x78>
	      //store the previous value and read the captured value from the input capture register
	  	  ch2_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000d00:	2108      	movs	r1, #8
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f002 f8ea 	bl	8002edc <HAL_TIM_ReadCapturedValue>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000d0e:	801a      	strh	r2, [r3, #0]
	      ch2_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000d10:	210c      	movs	r1, #12
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f002 f8e2 	bl	8002edc <HAL_TIM_ReadCapturedValue>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d1e:	801a      	strh	r2, [r3, #0]

	      //calculate the width of the pwm pulse generated by the radio transmitter
	      m2_d = ch2_val - ch2_p;
 8000d20:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000d22:	881a      	ldrh	r2, [r3, #0]
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0x8c>)
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	b29a      	uxth	r2, r3
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0x94>)
 8000d2e:	801a      	strh	r2, [r3, #0]
  }


}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200001a8 	.word	0x200001a8
 8000d3c:	200001a4 	.word	0x200001a4
 8000d40:	200001ac 	.word	0x200001ac
 8000d44:	200001aa 	.word	0x200001aa
 8000d48:	200001a6 	.word	0x200001a6
 8000d4c:	200001ae 	.word	0x200001ae

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <start_PWM>:

#include "motor_driver.h"

//A function to enable one of the motor driver channels
void start_PWM(motor_t* p_mot, uint32_t channel)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	if (channel==1){
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d108      	bne.n	8000d7e <start_PWM+0x22>

		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel1);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	4619      	mov	r1, r3
 8000d76:	4610      	mov	r0, r2
 8000d78:	f001 fb80 	bl	800247c <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel2);
	}

}
 8000d7c:	e007      	b.n	8000d8e <start_PWM+0x32>
		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel2);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	4619      	mov	r1, r3
 8000d88:	4610      	mov	r0, r2
 8000d8a:	f001 fb77 	bl	800247c <HAL_TIM_PWM_Start>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <set_duty>:
		}

}

void set_duty(motor_t* p_mot, int32_t duty)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %ld", duty);
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	4879      	ldr	r0, [pc, #484]	@ (8000f8c <set_duty+0x1f4>)
 8000da6:	f003 fa4b 	bl	8004240 <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->duty = duty;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	601a      	str	r2, [r3, #0]
    // dereferencing and accessing struct fields
    // p_mot->duty = duty;
    // is shorthand for
    // (*p_mot).duty = duty;

    if (duty > 0) {
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	dd46      	ble.n	8000e44 <set_duty+0xac>

    	//forwards
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,duty);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d105      	bne.n	8000dca <set_duty+0x32>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000dc8:	e018      	b.n	8000dfc <set_duty+0x64>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	d105      	bne.n	8000dde <set_duty+0x46>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ddc:	e00e      	b.n	8000dfc <set_duty+0x64>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d105      	bne.n	8000df2 <set_duty+0x5a>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000df0:	e004      	b.n	8000dfc <set_duty+0x64>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <set_duty+0x78>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	635a      	str	r2, [r3, #52]	@ 0x34
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,0);
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-duty);
      }


}
 8000e0e:	e0b9      	b.n	8000f84 <set_duty+0x1ec>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d105      	bne.n	8000e24 <set_duty+0x8c>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e22:	e0af      	b.n	8000f84 <set_duty+0x1ec>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d105      	bne.n	8000e38 <set_duty+0xa0>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e36:	e0a5      	b.n	8000f84 <set_duty+0x1ec>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	2300      	movs	r3, #0
 8000e40:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000e42:	e09f      	b.n	8000f84 <set_duty+0x1ec>
    else if(duty == 0){
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d14e      	bne.n	8000ee8 <set_duty+0x150>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,640);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <set_duty+0xc8>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e5e:	e01b      	b.n	8000e98 <set_duty+0x100>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d106      	bne.n	8000e76 <set_duty+0xde>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e72:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e74:	e010      	b.n	8000e98 <set_duty+0x100>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d106      	bne.n	8000e8c <set_duty+0xf4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e88:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e8a:	e005      	b.n	8000e98 <set_duty+0x100>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e96:	6413      	str	r3, [r2, #64]	@ 0x40
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d106      	bne.n	8000eae <set_duty+0x116>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000eaa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000eac:	e06a      	b.n	8000f84 <set_duty+0x1ec>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d106      	bne.n	8000ec4 <set_duty+0x12c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ec0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ec2:	e05f      	b.n	8000f84 <set_duty+0x1ec>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b08      	cmp	r3, #8
 8000eca:	d106      	bne.n	8000eda <set_duty+0x142>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ed6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000ed8:	e054      	b.n	8000f84 <set_duty+0x1ec>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68db      	ldr	r3, [r3, #12]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ee4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ee6:	e04d      	b.n	8000f84 <set_duty+0x1ec>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,0);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d105      	bne.n	8000efc <set_duty+0x164>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000efa:	e018      	b.n	8000f2e <set_duty+0x196>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d105      	bne.n	8000f10 <set_duty+0x178>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f0e:	e00e      	b.n	8000f2e <set_duty+0x196>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d105      	bne.n	8000f24 <set_duty+0x18c>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f22:	e004      	b.n	8000f2e <set_duty+0x196>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-duty);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d106      	bne.n	8000f44 <set_duty+0x1ac>
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	425a      	negs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000f42:	e01f      	b.n	8000f84 <set_duty+0x1ec>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-duty);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d107      	bne.n	8000f5c <set_duty+0x1c4>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	4259      	negs	r1, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	460b      	mov	r3, r1
 8000f58:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000f5a:	e013      	b.n	8000f84 <set_duty+0x1ec>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-duty);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d107      	bne.n	8000f74 <set_duty+0x1dc>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	4259      	negs	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000f72:	e007      	b.n	8000f84 <set_duty+0x1ec>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-duty);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	4259      	negs	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000f82:	e7ff      	b.n	8000f84 <set_duty+0x1ec>
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	080053c0 	.word	0x080053c0

08000f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b09      	ldr	r3, [pc, #36]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	4a08      	ldr	r2, [pc, #32]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc2:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <HAL_MspInit+0x4c>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800

08000fe0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	@ 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8001074 <HAL_TIM_IC_MspInit+0x94>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d134      	bne.n	800106c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_TIM_IC_MspInit+0x98>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6453      	str	r3, [r2, #68]	@ 0x44
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a14      	ldr	r2, [pc, #80]	@ (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <HAL_TIM_IC_MspInit+0x98>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800103a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800104c:	2301      	movs	r3, #1
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4809      	ldr	r0, [pc, #36]	@ (800107c <HAL_TIM_IC_MspInit+0x9c>)
 8001058:	f000 fb8c 	bl	8001774 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2100      	movs	r1, #0
 8001060:	201b      	movs	r0, #27
 8001062:	f000 fb50 	bl	8001706 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001066:	201b      	movs	r0, #27
 8001068:	f000 fb69 	bl	800173e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40010000 	.word	0x40010000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001090:	d10e      	bne.n	80010b0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <HAL_TIM_Base_MspInit+0x64>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <HAL_TIM_Base_MspInit+0x64>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <HAL_TIM_Base_MspInit+0x64>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ae:	e012      	b.n	80010d6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <HAL_TIM_Base_MspInit+0x68>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d10d      	bne.n	80010d6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_TIM_Base_MspInit+0x64>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_TIM_Base_MspInit+0x64>)
 80010c4:	f043 0302 	orr.w	r3, r3, #2
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_TIM_Base_MspInit+0x64>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	60bb      	str	r3, [r7, #8]
 80010d4:	68bb      	ldr	r3, [r7, #8]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40000400 	.word	0x40000400

080010ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800110c:	d11e      	bne.n	800114c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b22      	ldr	r3, [pc, #136]	@ (800119c <HAL_TIM_MspPostInit+0xb0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a21      	ldr	r2, [pc, #132]	@ (800119c <HAL_TIM_MspPostInit+0xb0>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1f      	ldr	r3, [pc, #124]	@ (800119c <HAL_TIM_MspPostInit+0xb0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800112a:	2303      	movs	r3, #3
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112e:	2302      	movs	r3, #2
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800113a:	2301      	movs	r3, #1
 800113c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	4619      	mov	r1, r3
 8001144:	4816      	ldr	r0, [pc, #88]	@ (80011a0 <HAL_TIM_MspPostInit+0xb4>)
 8001146:	f000 fb15 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800114a:	e022      	b.n	8001192 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <HAL_TIM_MspPostInit+0xb8>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d11d      	bne.n	8001192 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <HAL_TIM_MspPostInit+0xb0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a0f      	ldr	r2, [pc, #60]	@ (800119c <HAL_TIM_MspPostInit+0xb0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_TIM_MspPostInit+0xb0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001182:	2302      	movs	r3, #2
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4804      	ldr	r0, [pc, #16]	@ (80011a0 <HAL_TIM_MspPostInit+0xb4>)
 800118e:	f000 faf1 	bl	8001774 <HAL_GPIO_Init>
}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	@ 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40000400 	.word	0x40000400

080011a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	@ 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	@ (800122c <HAL_UART_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12b      	bne.n	8001222 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011da:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_UART_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <HAL_UART_MspInit+0x8c>)
 800121e:	f000 faa9 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	@ 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40004400 	.word	0x40004400
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <NMI_Handler+0x4>

08001240 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001244:	bf00      	nop
 8001246:	e7fd      	b.n	8001244 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	bf00      	nop
 800124e:	e7fd      	b.n	800124c <MemManage_Handler+0x4>

08001250 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <BusFault_Handler+0x4>

08001258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <UsageFault_Handler+0x4>

08001260 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128e:	f000 f93f 	bl	8001510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <TIM1_CC_IRQHandler+0x10>)
 800129e:	f001 fb07 	bl	80028b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000084 	.word	0x20000084

080012ac <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e00a      	b.n	80012d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012be:	f3af 8000 	nop.w
 80012c2:	4601      	mov	r1, r0
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	1c5a      	adds	r2, r3, #1
 80012c8:	60ba      	str	r2, [r7, #8]
 80012ca:	b2ca      	uxtb	r2, r1
 80012cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf0      	blt.n	80012be <_read+0x12>
  }

  return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e009      	b.n	800130c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	1c5a      	adds	r2, r3, #1
 80012fc:	60ba      	str	r2, [r7, #8]
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	3301      	adds	r3, #1
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	697a      	ldr	r2, [r7, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbf1      	blt.n	80012f8 <_write+0x12>
  }
  return len;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <_close>:

int _close(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132a:	4618      	mov	r0, r3
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001336:	b480      	push	{r7}
 8001338:	b083      	sub	sp, #12
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
 800133e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001346:	605a      	str	r2, [r3, #4]
  return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <_isatty>:

int _isatty(int file)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <_sbrk+0x5c>)
 8001392:	4b15      	ldr	r3, [pc, #84]	@ (80013e8 <_sbrk+0x60>)
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800139c:	4b13      	ldr	r3, [pc, #76]	@ (80013ec <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d102      	bne.n	80013aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a4:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <_sbrk+0x64>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <_sbrk+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d207      	bcs.n	80013c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b8:	f003 f806 	bl	80043c8 <__errno>
 80013bc:	4603      	mov	r3, r0
 80013be:	220c      	movs	r2, #12
 80013c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
 80013c6:	e009      	b.n	80013dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ce:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <_sbrk+0x64>)
 80013d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20020000 	.word	0x20020000
 80013e8:	00000400 	.word	0x00000400
 80013ec:	20000250 	.word	0x20000250
 80013f0:	200003a8 	.word	0x200003a8

080013f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f8:	4b06      	ldr	r3, [pc, #24]	@ (8001414 <SystemInit+0x20>)
 80013fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <SystemInit+0x20>)
 8001400:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001404:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001450 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800141c:	f7ff ffea 	bl	80013f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	@ (8001458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	@ (8001464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f002 ffc5 	bl	80043d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff f8c7 	bl	80005dc <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800145c:	0800543c 	.word	0x0800543c
  ldr r2, =_sbss
 8001460:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001464:	200003a4 	.word	0x200003a4

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <HAL_Init+0x40>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_Init+0x40>)
 8001482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <HAL_Init+0x40>)
 800148e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f92b 	bl	80016f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f000 f808 	bl	80014b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff fd76 	bl	8000f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_InitTick+0x54>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <HAL_InitTick+0x58>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4619      	mov	r1, r3
 80014c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f943 	bl	800175a <HAL_SYSTICK_Config>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e00e      	b.n	80014fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d80a      	bhi.n	80014fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e4:	2200      	movs	r2, #0
 80014e6:	6879      	ldr	r1, [r7, #4]
 80014e8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ec:	f000 f90b 	bl	8001706 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f0:	4a06      	ldr	r2, [pc, #24]	@ (800150c <HAL_InitTick+0x5c>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
 80014f8:	e000      	b.n	80014fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000000 	.word	0x20000000
 8001508:	20000008 	.word	0x20000008
 800150c:	20000004 	.word	0x20000004

08001510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_IncTick+0x20>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_IncTick+0x24>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4413      	add	r3, r2
 8001520:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <HAL_IncTick+0x24>)
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20000008 	.word	0x20000008
 8001534:	20000254 	.word	0x20000254

08001538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <HAL_GetTick+0x14>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000254 	.word	0x20000254

08001550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001560:	4b0c      	ldr	r3, [pc, #48]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800156c:	4013      	ands	r3, r2
 800156e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001578:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800157c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001582:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <__NVIC_SetPriorityGrouping+0x44>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	60d3      	str	r3, [r2, #12]
}
 8001588:	bf00      	nop
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__NVIC_GetPriorityGrouping+0x18>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	0a1b      	lsrs	r3, r3, #8
 80015a2:	f003 0307 	and.w	r3, r3, #7
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	db0b      	blt.n	80015de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 021f 	and.w	r2, r3, #31
 80015cc:	4907      	ldr	r1, [pc, #28]	@ (80015ec <__NVIC_EnableIRQ+0x38>)
 80015ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f202 	lsl.w	r2, r0, r2
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	@ (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	@ 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	@ 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
	...

080016ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016bc:	d301      	bcc.n	80016c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016be:	2301      	movs	r3, #1
 80016c0:	e00f      	b.n	80016e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c2:	4a0a      	ldr	r2, [pc, #40]	@ (80016ec <SysTick_Config+0x40>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ca:	210f      	movs	r1, #15
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f7ff ff8e 	bl	80015f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <SysTick_Config+0x40>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016da:	4b04      	ldr	r3, [pc, #16]	@ (80016ec <SysTick_Config+0x40>)
 80016dc:	2207      	movs	r2, #7
 80016de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	e000e010 	.word	0xe000e010

080016f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff ff29 	bl	8001550 <__NVIC_SetPriorityGrouping>
}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001706:	b580      	push	{r7, lr}
 8001708:	b086      	sub	sp, #24
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	60b9      	str	r1, [r7, #8]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001718:	f7ff ff3e 	bl	8001598 <__NVIC_GetPriorityGrouping>
 800171c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff ff8e 	bl	8001644 <NVIC_EncodePriority>
 8001728:	4602      	mov	r2, r0
 800172a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff5d 	bl	80015f0 <__NVIC_SetPriority>
}
 8001736:	bf00      	nop
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	4603      	mov	r3, r0
 8001746:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff31 	bl	80015b4 <__NVIC_EnableIRQ>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffa2 	bl	80016ac <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e159      	b.n	8001a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8148 	bne.w	8001a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a2 	beq.w	8001a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a56      	ldr	r2, [pc, #344]	@ (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b54      	ldr	r3, [pc, #336]	@ (8001a5c <HAL_GPIO_Init+0x2e8>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001916:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_GPIO_Init+0x2ec>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a49      	ldr	r2, [pc, #292]	@ (8001a64 <HAL_GPIO_Init+0x2f0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x202>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_GPIO_Init+0x2f4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x1fe>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a47      	ldr	r2, [pc, #284]	@ (8001a6c <HAL_GPIO_Init+0x2f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x1fa>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <HAL_GPIO_Init+0x2fc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x1f6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a45      	ldr	r2, [pc, #276]	@ (8001a74 <HAL_GPIO_Init+0x300>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x1f2>
 8001962:	2304      	movs	r3, #4
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001966:	2307      	movs	r3, #7
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	@ (8001a60 <HAL_GPIO_Init+0x2ec>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f aea2 	bls.w	8001790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e267      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d075      	beq.n	8001b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9a:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4b85      	ldr	r3, [pc, #532]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d112      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b82      	ldr	r3, [pc, #520]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001abe:	d10b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d05b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d157      	bne.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e242      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x74>
 8001ae2:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a75      	ldr	r2, [pc, #468]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b70      	ldr	r3, [pc, #448]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6f      	ldr	r2, [pc, #444]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b6d      	ldr	r3, [pc, #436]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001b14:	4b69      	ldr	r3, [pc, #420]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a68      	ldr	r2, [pc, #416]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a65      	ldr	r2, [pc, #404]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fd00 	bl	8001538 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fcfc 	bl	8001538 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e207      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fcec 	bl	8001538 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fce8 	bl	8001538 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1f3      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0xe8>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b44      	ldr	r3, [pc, #272]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x152>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c7      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4937      	ldr	r1, [pc, #220]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_RCC_OscConfig+0x244>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fca1 	bl	8001538 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fc9d 	bl	8001538 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1a8      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4925      	ldr	r1, [pc, #148]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_RCC_OscConfig+0x244>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc80 	bl	8001538 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fc7c 	bl	8001538 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e187      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d036      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_RCC_OscConfig+0x248>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff fc60 	bl	8001538 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc5c 	bl	8001538 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e167      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x200>
 8001c9a:	e01b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_OscConfig+0x248>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fc49 	bl	8001538 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	e00e      	b.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fc45 	bl	8001538 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d907      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e150      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	42470000 	.word	0x42470000
 8001cc4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4b88      	ldr	r3, [pc, #544]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ea      	bne.n	8001caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8097 	beq.w	8001e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b81      	ldr	r3, [pc, #516]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10f      	bne.n	8001d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b7a      	ldr	r3, [pc, #488]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b77      	ldr	r3, [pc, #476]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d118      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1e:	4b74      	ldr	r3, [pc, #464]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a73      	ldr	r2, [pc, #460]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fc05 	bl	8001538 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	f7ff fc01 	bl	8001538 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e10c      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2ea>
 8001d58:	4b64      	ldr	r3, [pc, #400]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5c:	4a63      	ldr	r2, [pc, #396]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x324>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x30c>
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	4a5e      	ldr	r2, [pc, #376]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0x324>
 8001d88:	4b58      	ldr	r3, [pc, #352]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8c:	4a57      	ldr	r2, [pc, #348]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d94:	4b55      	ldr	r3, [pc, #340]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	4a54      	ldr	r2, [pc, #336]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d015      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fbc6 	bl	8001538 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7ff fbc2 	bl	8001538 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0cb      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0ee      	beq.n	8001db0 <HAL_RCC_OscConfig+0x334>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fbb0 	bl	8001538 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fbac 	bl	8001538 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0b5      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ee      	bne.n	8001ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e04:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	4a38      	ldr	r2, [pc, #224]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a1 	beq.w	8001f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e1a:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d05c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d141      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x478>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb80 	bl	8001538 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff fb7c 	bl	8001538 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e087      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	3b01      	subs	r3, #1
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	491b      	ldr	r1, [pc, #108]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x478>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fb55 	bl	8001538 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff fb51 	bl	8001538 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e05c      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x416>
 8001eb0:	e054      	b.n	8001f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x478>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb3e 	bl	8001538 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fb3a 	bl	8001538 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e045      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x444>
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e038      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x4ec>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d028      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d121      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d11a      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d111      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	3b01      	subs	r3, #1
 8001f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0cc      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b68      	ldr	r3, [pc, #416]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d90c      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d044      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d003      	beq.n	800202a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b3f      	ldr	r3, [pc, #252]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e067      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4934      	ldr	r1, [pc, #208]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa6c 	bl	8001538 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa68 	bl	8001538 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e04f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d20c      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	@ (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9cc 	bl	80014b0 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00
 8002128:	40023800 	.word	0x40023800
 800212c:	080053e0 	.word	0x080053e0
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b090      	sub	sp, #64	@ 0x40
 800213e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002148:	2300      	movs	r3, #0
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002150:	4b59      	ldr	r3, [pc, #356]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d00d      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 800215c:	2b08      	cmp	r3, #8
 800215e:	f200 80a1 	bhi.w	80022a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x34>
 8002166:	2b04      	cmp	r3, #4
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x3a>
 800216a:	e09b      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x184>)
 800216e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002170:	e09b      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002172:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002176:	e098      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002178:	4b4f      	ldr	r3, [pc, #316]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002182:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d028      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218e:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	2200      	movs	r2, #0
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	627a      	str	r2, [r7, #36]	@ 0x24
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021a0:	2100      	movs	r1, #0
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021a4:	fb03 f201 	mul.w	r2, r3, r1
 80021a8:	2300      	movs	r3, #0
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b2:	fba0 1202 	umull	r1, r2, r0, r2
 80021b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021b8:	460a      	mov	r2, r1
 80021ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021be:	4413      	add	r3, r2
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c4:	2200      	movs	r2, #0
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	61fa      	str	r2, [r7, #28]
 80021ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021d2:	f7fe f855 	bl	8000280 <__aeabi_uldivmod>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4613      	mov	r3, r2
 80021dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021de:	e053      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e0:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	2200      	movs	r2, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	617a      	str	r2, [r7, #20]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021f2:	f04f 0b00 	mov.w	fp, #0
 80021f6:	4652      	mov	r2, sl
 80021f8:	465b      	mov	r3, fp
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002208:	0150      	lsls	r0, r2, #5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	ebb2 080a 	subs.w	r8, r2, sl
 8002212:	eb63 090b 	sbc.w	r9, r3, fp
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800222a:	ebb2 0408 	subs.w	r4, r2, r8
 800222e:	eb63 0509 	sbc.w	r5, r3, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	00eb      	lsls	r3, r5, #3
 800223c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002240:	00e2      	lsls	r2, r4, #3
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	eb14 030a 	adds.w	r3, r4, sl
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	eb45 030b 	adc.w	r3, r5, fp
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225e:	4629      	mov	r1, r5
 8002260:	028b      	lsls	r3, r1, #10
 8002262:	4621      	mov	r1, r4
 8002264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002268:	4621      	mov	r1, r4
 800226a:	028a      	lsls	r2, r1, #10
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002272:	2200      	movs	r2, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800227c:	f7fe f800 	bl	8000280 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x184>)
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3740      	adds	r7, #64	@ 0x40
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	017d7840 	.word	0x017d7840

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	080053f0 	.word	0x080053f0

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002308:	f7ff ffdc 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0b5b      	lsrs	r3, r3, #13
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	@ (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	080053f0 	.word	0x080053f0

0800232c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e041      	b.n	80023c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fe94 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f000 fe22 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e041      	b.n	8002460 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d106      	bne.n	80023f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f839 	bl	8002468 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3304      	adds	r3, #4
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f000 fdd3 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_TIM_PWM_Start+0x24>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e022      	b.n	80024e6 <HAL_TIM_PWM_Start+0x6a>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d109      	bne.n	80024ba <HAL_TIM_PWM_Start+0x3e>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	bf14      	ite	ne
 80024b2:	2301      	movne	r3, #1
 80024b4:	2300      	moveq	r3, #0
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	e015      	b.n	80024e6 <HAL_TIM_PWM_Start+0x6a>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d109      	bne.n	80024d4 <HAL_TIM_PWM_Start+0x58>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	e008      	b.n	80024e6 <HAL_TIM_PWM_Start+0x6a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b01      	cmp	r3, #1
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e068      	b.n	80025c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_TIM_PWM_Start+0x82>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024fc:	e013      	b.n	8002526 <HAL_TIM_PWM_Start+0xaa>
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	2b04      	cmp	r3, #4
 8002502:	d104      	bne.n	800250e <HAL_TIM_PWM_Start+0x92>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800250c:	e00b      	b.n	8002526 <HAL_TIM_PWM_Start+0xaa>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d104      	bne.n	800251e <HAL_TIM_PWM_Start+0xa2>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800251c:	e003      	b.n	8002526 <HAL_TIM_PWM_Start+0xaa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2202      	movs	r2, #2
 8002522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	6839      	ldr	r1, [r7, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f001 f910 	bl	8003754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <HAL_TIM_PWM_Start+0x14c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d107      	bne.n	800254e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800254c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1d      	ldr	r2, [pc, #116]	@ (80025c8 <HAL_TIM_PWM_Start+0x14c>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d018      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002560:	d013      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_TIM_PWM_Start+0x150>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a17      	ldr	r2, [pc, #92]	@ (80025d0 <HAL_TIM_PWM_Start+0x154>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a16      	ldr	r2, [pc, #88]	@ (80025d4 <HAL_TIM_PWM_Start+0x158>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_TIM_PWM_Start+0x10e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a14      	ldr	r2, [pc, #80]	@ (80025d8 <HAL_TIM_PWM_Start+0x15c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d111      	bne.n	80025ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b06      	cmp	r3, #6
 800259a:	d010      	beq.n	80025be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ac:	e007      	b.n	80025be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0201 	orr.w	r2, r2, #1
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40010000 	.word	0x40010000
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40014000 	.word	0x40014000

080025dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e041      	b.n	8002672 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fcec 	bl	8000fe0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2202      	movs	r2, #2
 800260c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3304      	adds	r3, #4
 8002618:	4619      	mov	r1, r3
 800261a:	4610      	mov	r0, r2
 800261c:	f000 fcca 	bl	8002fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002686:	2300      	movs	r3, #0
 8002688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d104      	bne.n	800269a <HAL_TIM_IC_Start_IT+0x1e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002696:	b2db      	uxtb	r3, r3
 8002698:	e013      	b.n	80026c2 <HAL_TIM_IC_Start_IT+0x46>
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b04      	cmp	r3, #4
 800269e:	d104      	bne.n	80026aa <HAL_TIM_IC_Start_IT+0x2e>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	e00b      	b.n	80026c2 <HAL_TIM_IC_Start_IT+0x46>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d104      	bne.n	80026ba <HAL_TIM_IC_Start_IT+0x3e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	e003      	b.n	80026c2 <HAL_TIM_IC_Start_IT+0x46>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d104      	bne.n	80026d4 <HAL_TIM_IC_Start_IT+0x58>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e013      	b.n	80026fc <HAL_TIM_IC_Start_IT+0x80>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d104      	bne.n	80026e4 <HAL_TIM_IC_Start_IT+0x68>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e00b      	b.n	80026fc <HAL_TIM_IC_Start_IT+0x80>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d104      	bne.n	80026f4 <HAL_TIM_IC_Start_IT+0x78>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	e003      	b.n	80026fc <HAL_TIM_IC_Start_IT+0x80>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80026fe:	7bbb      	ldrb	r3, [r7, #14]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d102      	bne.n	800270a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002704:	7b7b      	ldrb	r3, [r7, #13]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d001      	beq.n	800270e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e0c2      	b.n	8002894 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d104      	bne.n	800271e <HAL_TIM_IC_Start_IT+0xa2>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800271c:	e013      	b.n	8002746 <HAL_TIM_IC_Start_IT+0xca>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b04      	cmp	r3, #4
 8002722:	d104      	bne.n	800272e <HAL_TIM_IC_Start_IT+0xb2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800272c:	e00b      	b.n	8002746 <HAL_TIM_IC_Start_IT+0xca>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d104      	bne.n	800273e <HAL_TIM_IC_Start_IT+0xc2>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2202      	movs	r2, #2
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800273c:	e003      	b.n	8002746 <HAL_TIM_IC_Start_IT+0xca>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_TIM_IC_Start_IT+0xda>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002754:	e013      	b.n	800277e <HAL_TIM_IC_Start_IT+0x102>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d104      	bne.n	8002766 <HAL_TIM_IC_Start_IT+0xea>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002764:	e00b      	b.n	800277e <HAL_TIM_IC_Start_IT+0x102>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b08      	cmp	r3, #8
 800276a:	d104      	bne.n	8002776 <HAL_TIM_IC_Start_IT+0xfa>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002774:	e003      	b.n	800277e <HAL_TIM_IC_Start_IT+0x102>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d841      	bhi.n	8002808 <HAL_TIM_IC_Start_IT+0x18c>
 8002784:	a201      	add	r2, pc, #4	@ (adr r2, 800278c <HAL_TIM_IC_Start_IT+0x110>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027c1 	.word	0x080027c1
 8002790:	08002809 	.word	0x08002809
 8002794:	08002809 	.word	0x08002809
 8002798:	08002809 	.word	0x08002809
 800279c:	080027d3 	.word	0x080027d3
 80027a0:	08002809 	.word	0x08002809
 80027a4:	08002809 	.word	0x08002809
 80027a8:	08002809 	.word	0x08002809
 80027ac:	080027e5 	.word	0x080027e5
 80027b0:	08002809 	.word	0x08002809
 80027b4:	08002809 	.word	0x08002809
 80027b8:	08002809 	.word	0x08002809
 80027bc:	080027f7 	.word	0x080027f7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68da      	ldr	r2, [r3, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0202 	orr.w	r2, r2, #2
 80027ce:	60da      	str	r2, [r3, #12]
      break;
 80027d0:	e01d      	b.n	800280e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0204 	orr.w	r2, r2, #4
 80027e0:	60da      	str	r2, [r3, #12]
      break;
 80027e2:	e014      	b.n	800280e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0208 	orr.w	r2, r2, #8
 80027f2:	60da      	str	r2, [r3, #12]
      break;
 80027f4:	e00b      	b.n	800280e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f042 0210 	orr.w	r2, r2, #16
 8002804:	60da      	str	r2, [r3, #12]
      break;
 8002806:	e002      	b.n	800280e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	bf00      	nop
  }

  if (status == HAL_OK)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d13e      	bne.n	8002892 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2201      	movs	r2, #1
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 ff99 	bl	8003754 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <HAL_TIM_IC_Start_IT+0x220>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d018      	beq.n	800285e <HAL_TIM_IC_Start_IT+0x1e2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002834:	d013      	beq.n	800285e <HAL_TIM_IC_Start_IT+0x1e2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a19      	ldr	r2, [pc, #100]	@ (80028a0 <HAL_TIM_IC_Start_IT+0x224>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d00e      	beq.n	800285e <HAL_TIM_IC_Start_IT+0x1e2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a17      	ldr	r2, [pc, #92]	@ (80028a4 <HAL_TIM_IC_Start_IT+0x228>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d009      	beq.n	800285e <HAL_TIM_IC_Start_IT+0x1e2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a16      	ldr	r2, [pc, #88]	@ (80028a8 <HAL_TIM_IC_Start_IT+0x22c>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_TIM_IC_Start_IT+0x1e2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a14      	ldr	r2, [pc, #80]	@ (80028ac <HAL_TIM_IC_Start_IT+0x230>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d111      	bne.n	8002882 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b06      	cmp	r3, #6
 800286e:	d010      	beq.n	8002892 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f042 0201 	orr.w	r2, r2, #1
 800287e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002880:	e007      	b.n	8002892 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002892:	7bfb      	ldrb	r3, [r7, #15]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40010000 	.word	0x40010000
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40000c00 	.word	0x40000c00
 80028ac:	40014000 	.word	0x40014000

080028b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0202 	mvn.w	r2, #2
 80028e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe f9dc 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fb38 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fb3f 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0204 	mvn.w	r2, #4
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fe f9b6 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fb12 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fb19 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0208 	mvn.w	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7fe f990 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 faec 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 faf3 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0210 	mvn.w	r2, #16
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2208      	movs	r2, #8
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe f96a 	bl	8000cb8 <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 fac6 	bl	8002f78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 facd 	bl	8002f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0201 	mvn.w	r2, #1
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 faa4 	bl	8002f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 ff28 	bl	8003890 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa9e 	bl	8002fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0220 	mvn.w	r2, #32
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fefa 	bl	800387c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_IC_ConfigChannel+0x1e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e088      	b.n	8002bc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d11b      	bne.n	8002af4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002acc:	f000 fc8a 	bl	80033e4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020c 	bic.w	r2, r2, #12
 8002ade:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6999      	ldr	r1, [r3, #24]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	619a      	str	r2, [r3, #24]
 8002af2:	e060      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d11c      	bne.n	8002b34 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002b0a:	f000 fd02 	bl	8003512 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	699a      	ldr	r2, [r3, #24]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6999      	ldr	r1, [r3, #24]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	021a      	lsls	r2, r3, #8
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	619a      	str	r2, [r3, #24]
 8002b32:	e040      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d11b      	bne.n	8002b72 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002b4a:	f000 fd4f 	bl	80035ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69da      	ldr	r2, [r3, #28]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 020c 	bic.w	r2, r2, #12
 8002b5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	69d9      	ldr	r1, [r3, #28]
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	61da      	str	r2, [r3, #28]
 8002b70:	e021      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b0c      	cmp	r3, #12
 8002b76:	d11c      	bne.n	8002bb2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002b88:	f000 fd6c 	bl	8003664 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69da      	ldr	r2, [r3, #28]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002b9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	69d9      	ldr	r1, [r3, #28]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	61da      	str	r2, [r3, #28]
 8002bb0:	e001      	b.n	8002bb6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e0ae      	b.n	8002d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b0c      	cmp	r3, #12
 8002bf2:	f200 809f 	bhi.w	8002d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfc:	08002c31 	.word	0x08002c31
 8002c00:	08002d35 	.word	0x08002d35
 8002c04:	08002d35 	.word	0x08002d35
 8002c08:	08002d35 	.word	0x08002d35
 8002c0c:	08002c71 	.word	0x08002c71
 8002c10:	08002d35 	.word	0x08002d35
 8002c14:	08002d35 	.word	0x08002d35
 8002c18:	08002d35 	.word	0x08002d35
 8002c1c:	08002cb3 	.word	0x08002cb3
 8002c20:	08002d35 	.word	0x08002d35
 8002c24:	08002d35 	.word	0x08002d35
 8002c28:	08002d35 	.word	0x08002d35
 8002c2c:	08002cf3 	.word	0x08002cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f000 fa48 	bl	80030cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699a      	ldr	r2, [r3, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f042 0208 	orr.w	r2, r2, #8
 8002c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0204 	bic.w	r2, r2, #4
 8002c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6999      	ldr	r1, [r3, #24]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	619a      	str	r2, [r3, #24]
      break;
 8002c6e:	e064      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fa8e 	bl	8003198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	021a      	lsls	r2, r3, #8
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	619a      	str	r2, [r3, #24]
      break;
 8002cb0:	e043      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fad9 	bl	8003270 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f042 0208 	orr.w	r2, r2, #8
 8002ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	69da      	ldr	r2, [r3, #28]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0204 	bic.w	r2, r2, #4
 8002cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69d9      	ldr	r1, [r3, #28]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	61da      	str	r2, [r3, #28]
      break;
 8002cf0:	e023      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fb23 	bl	8003344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	69d9      	ldr	r1, [r3, #28]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	021a      	lsls	r2, r3, #8
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	61da      	str	r2, [r3, #28]
      break;
 8002d32:	e002      	b.n	8002d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	75fb      	strb	r3, [r7, #23]
      break;
 8002d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3718      	adds	r7, #24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d101      	bne.n	8002d68 <HAL_TIM_ConfigClockSource+0x1c>
 8002d64:	2302      	movs	r3, #2
 8002d66:	e0b4      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x186>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da0:	d03e      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xd4>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dae:	f000 8086 	beq.w	8002ebe <HAL_TIM_ConfigClockSource+0x172>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002db6:	d87f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002db8:	2b70      	cmp	r3, #112	@ 0x70
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xa6>
 8002dbc:	2b70      	cmp	r3, #112	@ 0x70
 8002dbe:	d87b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc0:	2b60      	cmp	r3, #96	@ 0x60
 8002dc2:	d050      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x11a>
 8002dc4:	2b60      	cmp	r3, #96	@ 0x60
 8002dc6:	d877      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dc8:	2b50      	cmp	r3, #80	@ 0x50
 8002dca:	d03c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xfa>
 8002dcc:	2b50      	cmp	r3, #80	@ 0x50
 8002dce:	d873      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd0:	2b40      	cmp	r3, #64	@ 0x40
 8002dd2:	d058      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x13a>
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d86f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd8:	2b30      	cmp	r3, #48	@ 0x30
 8002dda:	d064      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002ddc:	2b30      	cmp	r3, #48	@ 0x30
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d867      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8002df0:	e062      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e02:	f000 fc87 	bl	8003714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04f      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e30:	f000 fc70 	bl	8003714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e03c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 fb2e 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	@ 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc3d 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8002e64:	e02c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 fb8a 	bl	800358c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	@ 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fc2d 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 fb0e 	bl	80034b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	@ 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fc1d 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 fc14 	bl	80036de <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	d831      	bhi.n	8002f54 <HAL_TIM_ReadCapturedValue+0x78>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08002f55 	.word	0x08002f55
 8002f00:	08002f55 	.word	0x08002f55
 8002f04:	08002f55 	.word	0x08002f55
 8002f08:	08002f37 	.word	0x08002f37
 8002f0c:	08002f55 	.word	0x08002f55
 8002f10:	08002f55 	.word	0x08002f55
 8002f14:	08002f55 	.word	0x08002f55
 8002f18:	08002f41 	.word	0x08002f41
 8002f1c:	08002f55 	.word	0x08002f55
 8002f20:	08002f55 	.word	0x08002f55
 8002f24:	08002f55 	.word	0x08002f55
 8002f28:	08002f4b 	.word	0x08002f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f32:	60fb      	str	r3, [r7, #12]

      break;
 8002f34:	e00f      	b.n	8002f56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3c:	60fb      	str	r3, [r7, #12]

      break;
 8002f3e:	e00a      	b.n	8002f56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f46:	60fb      	str	r3, [r7, #12]

      break;
 8002f48:	e005      	b.n	8002f56 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	60fb      	str	r3, [r7, #12]

      break;
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002f54:	bf00      	nop
  }

  return tmpreg;
 8002f56:	68fb      	ldr	r3, [r7, #12]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80030b0 <TIM_Base_SetConfig+0xfc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00f      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd2:	d00b      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a37      	ldr	r2, [pc, #220]	@ (80030b4 <TIM_Base_SetConfig+0x100>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d007      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a36      	ldr	r2, [pc, #216]	@ (80030b8 <TIM_Base_SetConfig+0x104>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d003      	beq.n	8002fec <TIM_Base_SetConfig+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a35      	ldr	r2, [pc, #212]	@ (80030bc <TIM_Base_SetConfig+0x108>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d108      	bne.n	8002ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <TIM_Base_SetConfig+0xfc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d01b      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800300c:	d017      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <TIM_Base_SetConfig+0x100>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d013      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <TIM_Base_SetConfig+0x104>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d00f      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a26      	ldr	r2, [pc, #152]	@ (80030bc <TIM_Base_SetConfig+0x108>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00b      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a25      	ldr	r2, [pc, #148]	@ (80030c0 <TIM_Base_SetConfig+0x10c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a24      	ldr	r2, [pc, #144]	@ (80030c4 <TIM_Base_SetConfig+0x110>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a23      	ldr	r2, [pc, #140]	@ (80030c8 <TIM_Base_SetConfig+0x114>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d108      	bne.n	8003050 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	4313      	orrs	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <TIM_Base_SetConfig+0xfc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d103      	bne.n	8003084 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b01      	cmp	r3, #1
 8003094:	d105      	bne.n	80030a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f023 0201 	bic.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	611a      	str	r2, [r3, #16]
  }
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400
 80030c8:	40014800 	.word	0x40014800

080030cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 0201 	bic.w	r2, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f023 0302 	bic.w	r3, r3, #2
 8003114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a1c      	ldr	r2, [pc, #112]	@ (8003194 <TIM_OC1_SetConfig+0xc8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d10c      	bne.n	8003142 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	f023 0308 	bic.w	r3, r3, #8
 800312e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a13      	ldr	r2, [pc, #76]	@ (8003194 <TIM_OC1_SetConfig+0xc8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d111      	bne.n	800316e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003150:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003158:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4313      	orrs	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	621a      	str	r2, [r3, #32]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	40010000 	.word	0x40010000

08003198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	f023 0210 	bic.w	r2, r3, #16
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f023 0320 	bic.w	r3, r3, #32
 80031e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a1e      	ldr	r2, [pc, #120]	@ (800326c <TIM_OC2_SetConfig+0xd4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d10d      	bne.n	8003214 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003212:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a15      	ldr	r2, [pc, #84]	@ (800326c <TIM_OC2_SetConfig+0xd4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d113      	bne.n	8003244 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003222:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800322a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	621a      	str	r2, [r3, #32]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40010000 	.word	0x40010000

08003270 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b480      	push	{r7}
 8003272:	b087      	sub	sp, #28
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f023 0303 	bic.w	r3, r3, #3
 80032a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	021b      	lsls	r3, r3, #8
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003340 <TIM_OC3_SetConfig+0xd0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10d      	bne.n	80032ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a14      	ldr	r2, [pc, #80]	@ (8003340 <TIM_OC3_SetConfig+0xd0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d113      	bne.n	800331a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	40010000 	.word	0x40010000

08003344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800337a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4313      	orrs	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800338e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	031b      	lsls	r3, r3, #12
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a10      	ldr	r2, [pc, #64]	@ (80033e0 <TIM_OC4_SetConfig+0x9c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d109      	bne.n	80033b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000

080033e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f023 0201 	bic.w	r2, r3, #1
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a24      	ldr	r2, [pc, #144]	@ (80034a0 <TIM_TI1_SetConfig+0xbc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <TIM_TI1_SetConfig+0x56>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003418:	d00f      	beq.n	800343a <TIM_TI1_SetConfig+0x56>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	4a21      	ldr	r2, [pc, #132]	@ (80034a4 <TIM_TI1_SetConfig+0xc0>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_TI1_SetConfig+0x56>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a20      	ldr	r2, [pc, #128]	@ (80034a8 <TIM_TI1_SetConfig+0xc4>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_TI1_SetConfig+0x56>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ac <TIM_TI1_SetConfig+0xc8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_TI1_SetConfig+0x56>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <TIM_TI1_SetConfig+0xcc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d101      	bne.n	800343e <TIM_TI1_SetConfig+0x5a>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <TIM_TI1_SetConfig+0x5c>
 800343e:	2300      	movs	r3, #0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d008      	beq.n	8003456 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f023 0303 	bic.w	r3, r3, #3
 800344a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4313      	orrs	r3, r2
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	e003      	b.n	800345e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f043 0301 	orr.w	r3, r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003464:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	b2db      	uxtb	r3, r3
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	f023 030a 	bic.w	r3, r3, #10
 8003478:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f003 030a 	and.w	r3, r3, #10
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	621a      	str	r2, [r3, #32]
}
 8003492:	bf00      	nop
 8003494:	371c      	adds	r7, #28
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40010000 	.word	0x40010000
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800
 80034ac:	40000c00 	.word	0x40000c00
 80034b0:	40014000 	.word	0x40014000

080034b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003512:	b480      	push	{r7}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	f023 0210 	bic.w	r2, r3, #16
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	b29b      	uxth	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4313      	orrs	r3, r2
 800355c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003564:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	4313      	orrs	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	621a      	str	r2, [r3, #32]
}
 8003580:	bf00      	nop
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	f023 0210 	bic.w	r2, r3, #16
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	031b      	lsls	r3, r3, #12
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f023 0303 	bic.w	r3, r3, #3
 8003618:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003628:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	b2db      	uxtb	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800363c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	021b      	lsls	r3, r3, #8
 8003642:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003690:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	021b      	lsls	r3, r3, #8
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80036a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	031b      	lsls	r3, r3, #12
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80036b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	031b      	lsls	r3, r3, #12
 80036bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f043 0307 	orr.w	r3, r3, #7
 8003700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	609a      	str	r2, [r3, #8]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
 8003720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800372e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	021a      	lsls	r2, r3, #8
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	431a      	orrs	r2, r3
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4313      	orrs	r3, r2
 8003740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	609a      	str	r2, [r3, #8]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2201      	movs	r2, #1
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6a1a      	ldr	r2, [r3, #32]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	43db      	mvns	r3, r3
 8003776:	401a      	ands	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1a      	ldr	r2, [r3, #32]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	431a      	orrs	r2, r3
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	621a      	str	r2, [r3, #32]
}
 8003792:	bf00      	nop
 8003794:	371c      	adds	r7, #28
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e050      	b.n	800385a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003868 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d018      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003804:	d013      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a18      	ldr	r2, [pc, #96]	@ (800386c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d00e      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a16      	ldr	r2, [pc, #88]	@ (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d009      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a15      	ldr	r2, [pc, #84]	@ (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d004      	beq.n	800382e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a13      	ldr	r2, [pc, #76]	@ (8003878 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d10c      	bne.n	8003848 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003834:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	68ba      	ldr	r2, [r7, #8]
 800383c:	4313      	orrs	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40010000 	.word	0x40010000
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00
 8003878:	40014000 	.word	0x40014000

0800387c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d101      	bne.n	80038b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e042      	b.n	800393c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d106      	bne.n	80038d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7fd fc6c 	bl	80011a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2224      	movs	r2, #36	@ 0x24
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f973 	bl	8003bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	691a      	ldr	r2, [r3, #16]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800390c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800391c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b20      	cmp	r3, #32
 8003962:	d175      	bne.n	8003a50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Transmit+0x2c>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e06e      	b.n	8003a52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	@ 0x21
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003982:	f7fd fdd9 	bl	8001538 <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	88fa      	ldrh	r2, [r7, #6]
 800398c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399c:	d108      	bne.n	80039b0 <HAL_UART_Transmit+0x6c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	e003      	b.n	80039b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b8:	e02e      	b.n	8003a18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	@ 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f848 	bl	8003a5a <UART_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e03a      	b.n	8003a52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d10b      	bne.n	80039fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	3302      	adds	r3, #2
 80039f6:	61bb      	str	r3, [r7, #24]
 80039f8:	e007      	b.n	8003a0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1cb      	bne.n	80039ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	2140      	movs	r1, #64	@ 0x40
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f814 	bl	8003a5a <UART_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e006      	b.n	8003a52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2220      	movs	r2, #32
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	e000      	b.n	8003a52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b086      	sub	sp, #24
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6a:	e03b      	b.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d037      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a74:	f7fd fd60 	bl	8001538 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	6a3a      	ldr	r2, [r7, #32]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d302      	bcc.n	8003a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8003a84:	6a3b      	ldr	r3, [r7, #32]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e03a      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d023      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b80      	cmp	r3, #128	@ 0x80
 8003aa0:	d020      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2b40      	cmp	r3, #64	@ 0x40
 8003aa6:	d01d      	beq.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d116      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f81d 	bl	8003b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e00f      	b.n	8003b04 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	4013      	ands	r3, r2
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	bf0c      	ite	eq
 8003af4:	2301      	moveq	r3, #1
 8003af6:	2300      	movne	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	461a      	mov	r2, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d0b4      	beq.n	8003a6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b095      	sub	sp, #84	@ 0x54
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	330c      	adds	r3, #12
 8003b1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	330c      	adds	r3, #12
 8003b32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b34:	643a      	str	r2, [r7, #64]	@ 0x40
 8003b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3314      	adds	r3, #20
 8003b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	e853 3f00 	ldrex	r3, [r3]
 8003b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3314      	adds	r3, #20
 8003b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b70:	e841 2300 	strex	r3, r2, [r1]
 8003b74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e5      	bne.n	8003b48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d119      	bne.n	8003bb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	330c      	adds	r3, #12
 8003b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	f023 0310 	bic.w	r3, r3, #16
 8003b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba4:	61ba      	str	r2, [r7, #24]
 8003ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	6979      	ldr	r1, [r7, #20]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e5      	bne.n	8003b84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003bc6:	bf00      	nop
 8003bc8:	3754      	adds	r7, #84	@ 0x54
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd8:	b0c0      	sub	sp, #256	@ 0x100
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	68d9      	ldr	r1, [r3, #12]
 8003bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	ea40 0301 	orr.w	r3, r0, r1
 8003bfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003c2c:	f021 010c 	bic.w	r1, r1, #12
 8003c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c4e:	6999      	ldr	r1, [r3, #24]
 8003c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	ea40 0301 	orr.w	r3, r0, r1
 8003c5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b8f      	ldr	r3, [pc, #572]	@ (8003ea0 <UART_SetConfig+0x2cc>)
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d005      	beq.n	8003c74 <UART_SetConfig+0xa0>
 8003c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ea4 <UART_SetConfig+0x2d0>)
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d104      	bne.n	8003c7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe fb46 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8003c78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c7c:	e003      	b.n	8003c86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c7e:	f7fe fb2d 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 8003c82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c90:	f040 810c 	bne.w	8003eac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ca2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ca6:	4622      	mov	r2, r4
 8003ca8:	462b      	mov	r3, r5
 8003caa:	1891      	adds	r1, r2, r2
 8003cac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003cae:	415b      	adcs	r3, r3
 8003cb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003cb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	eb12 0801 	adds.w	r8, r2, r1
 8003cbc:	4629      	mov	r1, r5
 8003cbe:	eb43 0901 	adc.w	r9, r3, r1
 8003cc2:	f04f 0200 	mov.w	r2, #0
 8003cc6:	f04f 0300 	mov.w	r3, #0
 8003cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cd6:	4690      	mov	r8, r2
 8003cd8:	4699      	mov	r9, r3
 8003cda:	4623      	mov	r3, r4
 8003cdc:	eb18 0303 	adds.w	r3, r8, r3
 8003ce0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ce4:	462b      	mov	r3, r5
 8003ce6:	eb49 0303 	adc.w	r3, r9, r3
 8003cea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cfa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003cfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d02:	460b      	mov	r3, r1
 8003d04:	18db      	adds	r3, r3, r3
 8003d06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d08:	4613      	mov	r3, r2
 8003d0a:	eb42 0303 	adc.w	r3, r2, r3
 8003d0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d18:	f7fc fab2 	bl	8000280 <__aeabi_uldivmod>
 8003d1c:	4602      	mov	r2, r0
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4b61      	ldr	r3, [pc, #388]	@ (8003ea8 <UART_SetConfig+0x2d4>)
 8003d22:	fba3 2302 	umull	r2, r3, r3, r2
 8003d26:	095b      	lsrs	r3, r3, #5
 8003d28:	011c      	lsls	r4, r3, #4
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d34:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003d38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003d3c:	4642      	mov	r2, r8
 8003d3e:	464b      	mov	r3, r9
 8003d40:	1891      	adds	r1, r2, r2
 8003d42:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003d44:	415b      	adcs	r3, r3
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb43 0b01 	adc.w	fp, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d6c:	4692      	mov	sl, r2
 8003d6e:	469b      	mov	fp, r3
 8003d70:	4643      	mov	r3, r8
 8003d72:	eb1a 0303 	adds.w	r3, sl, r3
 8003d76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d80:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d90:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d98:	460b      	mov	r3, r1
 8003d9a:	18db      	adds	r3, r3, r3
 8003d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d9e:	4613      	mov	r3, r2
 8003da0:	eb42 0303 	adc.w	r3, r2, r3
 8003da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003daa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003dae:	f7fc fa67 	bl	8000280 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea8 <UART_SetConfig+0x2d4>)
 8003dba:	fba3 2301 	umull	r2, r3, r3, r1
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	2264      	movs	r2, #100	@ 0x64
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	1acb      	subs	r3, r1, r3
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003dce:	4b36      	ldr	r3, [pc, #216]	@ (8003ea8 <UART_SetConfig+0x2d4>)
 8003dd0:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd4:	095b      	lsrs	r3, r3, #5
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ddc:	441c      	add	r4, r3
 8003dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003de8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003dec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	1891      	adds	r1, r2, r2
 8003df6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003df8:	415b      	adcs	r3, r3
 8003dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e00:	4641      	mov	r1, r8
 8003e02:	1851      	adds	r1, r2, r1
 8003e04:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e06:	4649      	mov	r1, r9
 8003e08:	414b      	adcs	r3, r1
 8003e0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e0c:	f04f 0200 	mov.w	r2, #0
 8003e10:	f04f 0300 	mov.w	r3, #0
 8003e14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e18:	4659      	mov	r1, fp
 8003e1a:	00cb      	lsls	r3, r1, #3
 8003e1c:	4651      	mov	r1, sl
 8003e1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e22:	4651      	mov	r1, sl
 8003e24:	00ca      	lsls	r2, r1, #3
 8003e26:	4610      	mov	r0, r2
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4642      	mov	r2, r8
 8003e2e:	189b      	adds	r3, r3, r2
 8003e30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e34:	464b      	mov	r3, r9
 8003e36:	460a      	mov	r2, r1
 8003e38:	eb42 0303 	adc.w	r3, r2, r3
 8003e3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003e50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e54:	460b      	mov	r3, r1
 8003e56:	18db      	adds	r3, r3, r3
 8003e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	eb42 0303 	adc.w	r3, r2, r3
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e6a:	f7fc fa09 	bl	8000280 <__aeabi_uldivmod>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	460b      	mov	r3, r1
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <UART_SetConfig+0x2d4>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	095b      	lsrs	r3, r3, #5
 8003e7a:	2164      	movs	r1, #100	@ 0x64
 8003e7c:	fb01 f303 	mul.w	r3, r1, r3
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	3332      	adds	r3, #50	@ 0x32
 8003e86:	4a08      	ldr	r2, [pc, #32]	@ (8003ea8 <UART_SetConfig+0x2d4>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	f003 0207 	and.w	r2, r3, #7
 8003e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4422      	add	r2, r4
 8003e9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e9c:	e106      	b.n	80040ac <UART_SetConfig+0x4d8>
 8003e9e:	bf00      	nop
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40011400 	.word	0x40011400
 8003ea8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eb6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003eba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ebe:	4642      	mov	r2, r8
 8003ec0:	464b      	mov	r3, r9
 8003ec2:	1891      	adds	r1, r2, r2
 8003ec4:	6239      	str	r1, [r7, #32]
 8003ec6:	415b      	adcs	r3, r3
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003eca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ece:	4641      	mov	r1, r8
 8003ed0:	1854      	adds	r4, r2, r1
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	eb43 0501 	adc.w	r5, r3, r1
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	00eb      	lsls	r3, r5, #3
 8003ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ee6:	00e2      	lsls	r2, r4, #3
 8003ee8:	4614      	mov	r4, r2
 8003eea:	461d      	mov	r5, r3
 8003eec:	4643      	mov	r3, r8
 8003eee:	18e3      	adds	r3, r4, r3
 8003ef0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003ef4:	464b      	mov	r3, r9
 8003ef6:	eb45 0303 	adc.w	r3, r5, r3
 8003efa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	008b      	lsls	r3, r1, #2
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f24:	4621      	mov	r1, r4
 8003f26:	008a      	lsls	r2, r1, #2
 8003f28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003f2c:	f7fc f9a8 	bl	8000280 <__aeabi_uldivmod>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4b60      	ldr	r3, [pc, #384]	@ (80040b8 <UART_SetConfig+0x4e4>)
 8003f36:	fba3 2302 	umull	r2, r3, r3, r2
 8003f3a:	095b      	lsrs	r3, r3, #5
 8003f3c:	011c      	lsls	r4, r3, #4
 8003f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f42:	2200      	movs	r2, #0
 8003f44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003f4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003f50:	4642      	mov	r2, r8
 8003f52:	464b      	mov	r3, r9
 8003f54:	1891      	adds	r1, r2, r2
 8003f56:	61b9      	str	r1, [r7, #24]
 8003f58:	415b      	adcs	r3, r3
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f60:	4641      	mov	r1, r8
 8003f62:	1851      	adds	r1, r2, r1
 8003f64:	6139      	str	r1, [r7, #16]
 8003f66:	4649      	mov	r1, r9
 8003f68:	414b      	adcs	r3, r1
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f78:	4659      	mov	r1, fp
 8003f7a:	00cb      	lsls	r3, r1, #3
 8003f7c:	4651      	mov	r1, sl
 8003f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f82:	4651      	mov	r1, sl
 8003f84:	00ca      	lsls	r2, r1, #3
 8003f86:	4610      	mov	r0, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	189b      	adds	r3, r3, r2
 8003f90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f94:	464b      	mov	r3, r9
 8003f96:	460a      	mov	r2, r1
 8003f98:	eb42 0303 	adc.w	r3, r2, r3
 8003f9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003faa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003fb8:	4649      	mov	r1, r9
 8003fba:	008b      	lsls	r3, r1, #2
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	008a      	lsls	r2, r1, #2
 8003fc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003fca:	f7fc f959 	bl	8000280 <__aeabi_uldivmod>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4611      	mov	r1, r2
 8003fd4:	4b38      	ldr	r3, [pc, #224]	@ (80040b8 <UART_SetConfig+0x4e4>)
 8003fd6:	fba3 2301 	umull	r2, r3, r3, r1
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2264      	movs	r2, #100	@ 0x64
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	1acb      	subs	r3, r1, r3
 8003fe4:	011b      	lsls	r3, r3, #4
 8003fe6:	3332      	adds	r3, #50	@ 0x32
 8003fe8:	4a33      	ldr	r2, [pc, #204]	@ (80040b8 <UART_SetConfig+0x4e4>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	095b      	lsrs	r3, r3, #5
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ff4:	441c      	add	r4, r3
 8003ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003ffe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004000:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	1891      	adds	r1, r2, r2
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	415b      	adcs	r3, r3
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004014:	4641      	mov	r1, r8
 8004016:	1851      	adds	r1, r2, r1
 8004018:	6039      	str	r1, [r7, #0]
 800401a:	4649      	mov	r1, r9
 800401c:	414b      	adcs	r3, r1
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800402c:	4659      	mov	r1, fp
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4651      	mov	r1, sl
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4651      	mov	r1, sl
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4642      	mov	r2, r8
 8004042:	189b      	adds	r3, r3, r2
 8004044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004046:	464b      	mov	r3, r9
 8004048:	460a      	mov	r2, r1
 800404a:	eb42 0303 	adc.w	r3, r2, r3
 800404e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	663b      	str	r3, [r7, #96]	@ 0x60
 800405a:	667a      	str	r2, [r7, #100]	@ 0x64
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004068:	4649      	mov	r1, r9
 800406a:	008b      	lsls	r3, r1, #2
 800406c:	4641      	mov	r1, r8
 800406e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004072:	4641      	mov	r1, r8
 8004074:	008a      	lsls	r2, r1, #2
 8004076:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800407a:	f7fc f901 	bl	8000280 <__aeabi_uldivmod>
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <UART_SetConfig+0x4e4>)
 8004084:	fba3 1302 	umull	r1, r3, r3, r2
 8004088:	095b      	lsrs	r3, r3, #5
 800408a:	2164      	movs	r1, #100	@ 0x64
 800408c:	fb01 f303 	mul.w	r3, r1, r3
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	3332      	adds	r3, #50	@ 0x32
 8004096:	4a08      	ldr	r2, [pc, #32]	@ (80040b8 <UART_SetConfig+0x4e4>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	f003 020f 	and.w	r2, r3, #15
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4422      	add	r2, r4
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80040b2:	46bd      	mov	sp, r7
 80040b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040b8:	51eb851f 	.word	0x51eb851f

080040bc <std>:
 80040bc:	2300      	movs	r3, #0
 80040be:	b510      	push	{r4, lr}
 80040c0:	4604      	mov	r4, r0
 80040c2:	e9c0 3300 	strd	r3, r3, [r0]
 80040c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040ca:	6083      	str	r3, [r0, #8]
 80040cc:	8181      	strh	r1, [r0, #12]
 80040ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80040d0:	81c2      	strh	r2, [r0, #14]
 80040d2:	6183      	str	r3, [r0, #24]
 80040d4:	4619      	mov	r1, r3
 80040d6:	2208      	movs	r2, #8
 80040d8:	305c      	adds	r0, #92	@ 0x5c
 80040da:	f000 f926 	bl	800432a <memset>
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <std+0x58>)
 80040e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80040e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004118 <std+0x5c>)
 80040e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040e6:	4b0d      	ldr	r3, [pc, #52]	@ (800411c <std+0x60>)
 80040e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <std+0x64>)
 80040ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80040ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004124 <std+0x68>)
 80040f0:	6224      	str	r4, [r4, #32]
 80040f2:	429c      	cmp	r4, r3
 80040f4:	d006      	beq.n	8004104 <std+0x48>
 80040f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040fa:	4294      	cmp	r4, r2
 80040fc:	d002      	beq.n	8004104 <std+0x48>
 80040fe:	33d0      	adds	r3, #208	@ 0xd0
 8004100:	429c      	cmp	r4, r3
 8004102:	d105      	bne.n	8004110 <std+0x54>
 8004104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800410c:	f000 b986 	b.w	800441c <__retarget_lock_init_recursive>
 8004110:	bd10      	pop	{r4, pc}
 8004112:	bf00      	nop
 8004114:	080042a5 	.word	0x080042a5
 8004118:	080042c7 	.word	0x080042c7
 800411c:	080042ff 	.word	0x080042ff
 8004120:	08004323 	.word	0x08004323
 8004124:	20000258 	.word	0x20000258

08004128 <stdio_exit_handler>:
 8004128:	4a02      	ldr	r2, [pc, #8]	@ (8004134 <stdio_exit_handler+0xc>)
 800412a:	4903      	ldr	r1, [pc, #12]	@ (8004138 <stdio_exit_handler+0x10>)
 800412c:	4803      	ldr	r0, [pc, #12]	@ (800413c <stdio_exit_handler+0x14>)
 800412e:	f000 b869 	b.w	8004204 <_fwalk_sglue>
 8004132:	bf00      	nop
 8004134:	2000000c 	.word	0x2000000c
 8004138:	08004f6d 	.word	0x08004f6d
 800413c:	2000001c 	.word	0x2000001c

08004140 <cleanup_stdio>:
 8004140:	6841      	ldr	r1, [r0, #4]
 8004142:	4b0c      	ldr	r3, [pc, #48]	@ (8004174 <cleanup_stdio+0x34>)
 8004144:	4299      	cmp	r1, r3
 8004146:	b510      	push	{r4, lr}
 8004148:	4604      	mov	r4, r0
 800414a:	d001      	beq.n	8004150 <cleanup_stdio+0x10>
 800414c:	f000 ff0e 	bl	8004f6c <_fflush_r>
 8004150:	68a1      	ldr	r1, [r4, #8]
 8004152:	4b09      	ldr	r3, [pc, #36]	@ (8004178 <cleanup_stdio+0x38>)
 8004154:	4299      	cmp	r1, r3
 8004156:	d002      	beq.n	800415e <cleanup_stdio+0x1e>
 8004158:	4620      	mov	r0, r4
 800415a:	f000 ff07 	bl	8004f6c <_fflush_r>
 800415e:	68e1      	ldr	r1, [r4, #12]
 8004160:	4b06      	ldr	r3, [pc, #24]	@ (800417c <cleanup_stdio+0x3c>)
 8004162:	4299      	cmp	r1, r3
 8004164:	d004      	beq.n	8004170 <cleanup_stdio+0x30>
 8004166:	4620      	mov	r0, r4
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800416c:	f000 befe 	b.w	8004f6c <_fflush_r>
 8004170:	bd10      	pop	{r4, pc}
 8004172:	bf00      	nop
 8004174:	20000258 	.word	0x20000258
 8004178:	200002c0 	.word	0x200002c0
 800417c:	20000328 	.word	0x20000328

08004180 <global_stdio_init.part.0>:
 8004180:	b510      	push	{r4, lr}
 8004182:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <global_stdio_init.part.0+0x30>)
 8004184:	4c0b      	ldr	r4, [pc, #44]	@ (80041b4 <global_stdio_init.part.0+0x34>)
 8004186:	4a0c      	ldr	r2, [pc, #48]	@ (80041b8 <global_stdio_init.part.0+0x38>)
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	4620      	mov	r0, r4
 800418c:	2200      	movs	r2, #0
 800418e:	2104      	movs	r1, #4
 8004190:	f7ff ff94 	bl	80040bc <std>
 8004194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004198:	2201      	movs	r2, #1
 800419a:	2109      	movs	r1, #9
 800419c:	f7ff ff8e 	bl	80040bc <std>
 80041a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041a4:	2202      	movs	r2, #2
 80041a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041aa:	2112      	movs	r1, #18
 80041ac:	f7ff bf86 	b.w	80040bc <std>
 80041b0:	20000390 	.word	0x20000390
 80041b4:	20000258 	.word	0x20000258
 80041b8:	08004129 	.word	0x08004129

080041bc <__sfp_lock_acquire>:
 80041bc:	4801      	ldr	r0, [pc, #4]	@ (80041c4 <__sfp_lock_acquire+0x8>)
 80041be:	f000 b92e 	b.w	800441e <__retarget_lock_acquire_recursive>
 80041c2:	bf00      	nop
 80041c4:	20000399 	.word	0x20000399

080041c8 <__sfp_lock_release>:
 80041c8:	4801      	ldr	r0, [pc, #4]	@ (80041d0 <__sfp_lock_release+0x8>)
 80041ca:	f000 b929 	b.w	8004420 <__retarget_lock_release_recursive>
 80041ce:	bf00      	nop
 80041d0:	20000399 	.word	0x20000399

080041d4 <__sinit>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4604      	mov	r4, r0
 80041d8:	f7ff fff0 	bl	80041bc <__sfp_lock_acquire>
 80041dc:	6a23      	ldr	r3, [r4, #32]
 80041de:	b11b      	cbz	r3, 80041e8 <__sinit+0x14>
 80041e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041e4:	f7ff bff0 	b.w	80041c8 <__sfp_lock_release>
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <__sinit+0x28>)
 80041ea:	6223      	str	r3, [r4, #32]
 80041ec:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <__sinit+0x2c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f5      	bne.n	80041e0 <__sinit+0xc>
 80041f4:	f7ff ffc4 	bl	8004180 <global_stdio_init.part.0>
 80041f8:	e7f2      	b.n	80041e0 <__sinit+0xc>
 80041fa:	bf00      	nop
 80041fc:	08004141 	.word	0x08004141
 8004200:	20000390 	.word	0x20000390

08004204 <_fwalk_sglue>:
 8004204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004208:	4607      	mov	r7, r0
 800420a:	4688      	mov	r8, r1
 800420c:	4614      	mov	r4, r2
 800420e:	2600      	movs	r6, #0
 8004210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004214:	f1b9 0901 	subs.w	r9, r9, #1
 8004218:	d505      	bpl.n	8004226 <_fwalk_sglue+0x22>
 800421a:	6824      	ldr	r4, [r4, #0]
 800421c:	2c00      	cmp	r4, #0
 800421e:	d1f7      	bne.n	8004210 <_fwalk_sglue+0xc>
 8004220:	4630      	mov	r0, r6
 8004222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004226:	89ab      	ldrh	r3, [r5, #12]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d907      	bls.n	800423c <_fwalk_sglue+0x38>
 800422c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004230:	3301      	adds	r3, #1
 8004232:	d003      	beq.n	800423c <_fwalk_sglue+0x38>
 8004234:	4629      	mov	r1, r5
 8004236:	4638      	mov	r0, r7
 8004238:	47c0      	blx	r8
 800423a:	4306      	orrs	r6, r0
 800423c:	3568      	adds	r5, #104	@ 0x68
 800423e:	e7e9      	b.n	8004214 <_fwalk_sglue+0x10>

08004240 <iprintf>:
 8004240:	b40f      	push	{r0, r1, r2, r3}
 8004242:	b507      	push	{r0, r1, r2, lr}
 8004244:	4906      	ldr	r1, [pc, #24]	@ (8004260 <iprintf+0x20>)
 8004246:	ab04      	add	r3, sp, #16
 8004248:	6808      	ldr	r0, [r1, #0]
 800424a:	f853 2b04 	ldr.w	r2, [r3], #4
 800424e:	6881      	ldr	r1, [r0, #8]
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	f000 fb61 	bl	8004918 <_vfiprintf_r>
 8004256:	b003      	add	sp, #12
 8004258:	f85d eb04 	ldr.w	lr, [sp], #4
 800425c:	b004      	add	sp, #16
 800425e:	4770      	bx	lr
 8004260:	20000018 	.word	0x20000018

08004264 <siprintf>:
 8004264:	b40e      	push	{r1, r2, r3}
 8004266:	b500      	push	{lr}
 8004268:	b09c      	sub	sp, #112	@ 0x70
 800426a:	ab1d      	add	r3, sp, #116	@ 0x74
 800426c:	9002      	str	r0, [sp, #8]
 800426e:	9006      	str	r0, [sp, #24]
 8004270:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004274:	4809      	ldr	r0, [pc, #36]	@ (800429c <siprintf+0x38>)
 8004276:	9107      	str	r1, [sp, #28]
 8004278:	9104      	str	r1, [sp, #16]
 800427a:	4909      	ldr	r1, [pc, #36]	@ (80042a0 <siprintf+0x3c>)
 800427c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004280:	9105      	str	r1, [sp, #20]
 8004282:	6800      	ldr	r0, [r0, #0]
 8004284:	9301      	str	r3, [sp, #4]
 8004286:	a902      	add	r1, sp, #8
 8004288:	f000 fa20 	bl	80046cc <_svfiprintf_r>
 800428c:	9b02      	ldr	r3, [sp, #8]
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
 8004292:	b01c      	add	sp, #112	@ 0x70
 8004294:	f85d eb04 	ldr.w	lr, [sp], #4
 8004298:	b003      	add	sp, #12
 800429a:	4770      	bx	lr
 800429c:	20000018 	.word	0x20000018
 80042a0:	ffff0208 	.word	0xffff0208

080042a4 <__sread>:
 80042a4:	b510      	push	{r4, lr}
 80042a6:	460c      	mov	r4, r1
 80042a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ac:	f000 f868 	bl	8004380 <_read_r>
 80042b0:	2800      	cmp	r0, #0
 80042b2:	bfab      	itete	ge
 80042b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042b6:	89a3      	ldrhlt	r3, [r4, #12]
 80042b8:	181b      	addge	r3, r3, r0
 80042ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80042be:	bfac      	ite	ge
 80042c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80042c2:	81a3      	strhlt	r3, [r4, #12]
 80042c4:	bd10      	pop	{r4, pc}

080042c6 <__swrite>:
 80042c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ca:	461f      	mov	r7, r3
 80042cc:	898b      	ldrh	r3, [r1, #12]
 80042ce:	05db      	lsls	r3, r3, #23
 80042d0:	4605      	mov	r5, r0
 80042d2:	460c      	mov	r4, r1
 80042d4:	4616      	mov	r6, r2
 80042d6:	d505      	bpl.n	80042e4 <__swrite+0x1e>
 80042d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042dc:	2302      	movs	r3, #2
 80042de:	2200      	movs	r2, #0
 80042e0:	f000 f83c 	bl	800435c <_lseek_r>
 80042e4:	89a3      	ldrh	r3, [r4, #12]
 80042e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042ee:	81a3      	strh	r3, [r4, #12]
 80042f0:	4632      	mov	r2, r6
 80042f2:	463b      	mov	r3, r7
 80042f4:	4628      	mov	r0, r5
 80042f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80042fa:	f000 b853 	b.w	80043a4 <_write_r>

080042fe <__sseek>:
 80042fe:	b510      	push	{r4, lr}
 8004300:	460c      	mov	r4, r1
 8004302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004306:	f000 f829 	bl	800435c <_lseek_r>
 800430a:	1c43      	adds	r3, r0, #1
 800430c:	89a3      	ldrh	r3, [r4, #12]
 800430e:	bf15      	itete	ne
 8004310:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800431a:	81a3      	strheq	r3, [r4, #12]
 800431c:	bf18      	it	ne
 800431e:	81a3      	strhne	r3, [r4, #12]
 8004320:	bd10      	pop	{r4, pc}

08004322 <__sclose>:
 8004322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004326:	f000 b809 	b.w	800433c <_close_r>

0800432a <memset>:
 800432a:	4402      	add	r2, r0
 800432c:	4603      	mov	r3, r0
 800432e:	4293      	cmp	r3, r2
 8004330:	d100      	bne.n	8004334 <memset+0xa>
 8004332:	4770      	bx	lr
 8004334:	f803 1b01 	strb.w	r1, [r3], #1
 8004338:	e7f9      	b.n	800432e <memset+0x4>
	...

0800433c <_close_r>:
 800433c:	b538      	push	{r3, r4, r5, lr}
 800433e:	4d06      	ldr	r5, [pc, #24]	@ (8004358 <_close_r+0x1c>)
 8004340:	2300      	movs	r3, #0
 8004342:	4604      	mov	r4, r0
 8004344:	4608      	mov	r0, r1
 8004346:	602b      	str	r3, [r5, #0]
 8004348:	f7fc ffe9 	bl	800131e <_close>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d102      	bne.n	8004356 <_close_r+0x1a>
 8004350:	682b      	ldr	r3, [r5, #0]
 8004352:	b103      	cbz	r3, 8004356 <_close_r+0x1a>
 8004354:	6023      	str	r3, [r4, #0]
 8004356:	bd38      	pop	{r3, r4, r5, pc}
 8004358:	20000394 	.word	0x20000394

0800435c <_lseek_r>:
 800435c:	b538      	push	{r3, r4, r5, lr}
 800435e:	4d07      	ldr	r5, [pc, #28]	@ (800437c <_lseek_r+0x20>)
 8004360:	4604      	mov	r4, r0
 8004362:	4608      	mov	r0, r1
 8004364:	4611      	mov	r1, r2
 8004366:	2200      	movs	r2, #0
 8004368:	602a      	str	r2, [r5, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	f7fc fffe 	bl	800136c <_lseek>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_lseek_r+0x1e>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b103      	cbz	r3, 800437a <_lseek_r+0x1e>
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	20000394 	.word	0x20000394

08004380 <_read_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	@ (80043a0 <_read_r+0x20>)
 8004384:	4604      	mov	r4, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	2200      	movs	r2, #0
 800438c:	602a      	str	r2, [r5, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc ff8c 	bl	80012ac <_read>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_read_r+0x1e>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_read_r+0x1e>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000394 	.word	0x20000394

080043a4 <_write_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d07      	ldr	r5, [pc, #28]	@ (80043c4 <_write_r+0x20>)
 80043a8:	4604      	mov	r4, r0
 80043aa:	4608      	mov	r0, r1
 80043ac:	4611      	mov	r1, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	602a      	str	r2, [r5, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fc ff97 	bl	80012e6 <_write>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_write_r+0x1e>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_write_r+0x1e>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	20000394 	.word	0x20000394

080043c8 <__errno>:
 80043c8:	4b01      	ldr	r3, [pc, #4]	@ (80043d0 <__errno+0x8>)
 80043ca:	6818      	ldr	r0, [r3, #0]
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000018 	.word	0x20000018

080043d4 <__libc_init_array>:
 80043d4:	b570      	push	{r4, r5, r6, lr}
 80043d6:	4d0d      	ldr	r5, [pc, #52]	@ (800440c <__libc_init_array+0x38>)
 80043d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004410 <__libc_init_array+0x3c>)
 80043da:	1b64      	subs	r4, r4, r5
 80043dc:	10a4      	asrs	r4, r4, #2
 80043de:	2600      	movs	r6, #0
 80043e0:	42a6      	cmp	r6, r4
 80043e2:	d109      	bne.n	80043f8 <__libc_init_array+0x24>
 80043e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004414 <__libc_init_array+0x40>)
 80043e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004418 <__libc_init_array+0x44>)
 80043e8:	f000 ff6e 	bl	80052c8 <_init>
 80043ec:	1b64      	subs	r4, r4, r5
 80043ee:	10a4      	asrs	r4, r4, #2
 80043f0:	2600      	movs	r6, #0
 80043f2:	42a6      	cmp	r6, r4
 80043f4:	d105      	bne.n	8004402 <__libc_init_array+0x2e>
 80043f6:	bd70      	pop	{r4, r5, r6, pc}
 80043f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043fc:	4798      	blx	r3
 80043fe:	3601      	adds	r6, #1
 8004400:	e7ee      	b.n	80043e0 <__libc_init_array+0xc>
 8004402:	f855 3b04 	ldr.w	r3, [r5], #4
 8004406:	4798      	blx	r3
 8004408:	3601      	adds	r6, #1
 800440a:	e7f2      	b.n	80043f2 <__libc_init_array+0x1e>
 800440c:	08005434 	.word	0x08005434
 8004410:	08005434 	.word	0x08005434
 8004414:	08005434 	.word	0x08005434
 8004418:	08005438 	.word	0x08005438

0800441c <__retarget_lock_init_recursive>:
 800441c:	4770      	bx	lr

0800441e <__retarget_lock_acquire_recursive>:
 800441e:	4770      	bx	lr

08004420 <__retarget_lock_release_recursive>:
 8004420:	4770      	bx	lr
	...

08004424 <_free_r>:
 8004424:	b538      	push	{r3, r4, r5, lr}
 8004426:	4605      	mov	r5, r0
 8004428:	2900      	cmp	r1, #0
 800442a:	d041      	beq.n	80044b0 <_free_r+0x8c>
 800442c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004430:	1f0c      	subs	r4, r1, #4
 8004432:	2b00      	cmp	r3, #0
 8004434:	bfb8      	it	lt
 8004436:	18e4      	addlt	r4, r4, r3
 8004438:	f000 f8e0 	bl	80045fc <__malloc_lock>
 800443c:	4a1d      	ldr	r2, [pc, #116]	@ (80044b4 <_free_r+0x90>)
 800443e:	6813      	ldr	r3, [r2, #0]
 8004440:	b933      	cbnz	r3, 8004450 <_free_r+0x2c>
 8004442:	6063      	str	r3, [r4, #4]
 8004444:	6014      	str	r4, [r2, #0]
 8004446:	4628      	mov	r0, r5
 8004448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800444c:	f000 b8dc 	b.w	8004608 <__malloc_unlock>
 8004450:	42a3      	cmp	r3, r4
 8004452:	d908      	bls.n	8004466 <_free_r+0x42>
 8004454:	6820      	ldr	r0, [r4, #0]
 8004456:	1821      	adds	r1, r4, r0
 8004458:	428b      	cmp	r3, r1
 800445a:	bf01      	itttt	eq
 800445c:	6819      	ldreq	r1, [r3, #0]
 800445e:	685b      	ldreq	r3, [r3, #4]
 8004460:	1809      	addeq	r1, r1, r0
 8004462:	6021      	streq	r1, [r4, #0]
 8004464:	e7ed      	b.n	8004442 <_free_r+0x1e>
 8004466:	461a      	mov	r2, r3
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	b10b      	cbz	r3, 8004470 <_free_r+0x4c>
 800446c:	42a3      	cmp	r3, r4
 800446e:	d9fa      	bls.n	8004466 <_free_r+0x42>
 8004470:	6811      	ldr	r1, [r2, #0]
 8004472:	1850      	adds	r0, r2, r1
 8004474:	42a0      	cmp	r0, r4
 8004476:	d10b      	bne.n	8004490 <_free_r+0x6c>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	4401      	add	r1, r0
 800447c:	1850      	adds	r0, r2, r1
 800447e:	4283      	cmp	r3, r0
 8004480:	6011      	str	r1, [r2, #0]
 8004482:	d1e0      	bne.n	8004446 <_free_r+0x22>
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	6053      	str	r3, [r2, #4]
 800448a:	4408      	add	r0, r1
 800448c:	6010      	str	r0, [r2, #0]
 800448e:	e7da      	b.n	8004446 <_free_r+0x22>
 8004490:	d902      	bls.n	8004498 <_free_r+0x74>
 8004492:	230c      	movs	r3, #12
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	e7d6      	b.n	8004446 <_free_r+0x22>
 8004498:	6820      	ldr	r0, [r4, #0]
 800449a:	1821      	adds	r1, r4, r0
 800449c:	428b      	cmp	r3, r1
 800449e:	bf04      	itt	eq
 80044a0:	6819      	ldreq	r1, [r3, #0]
 80044a2:	685b      	ldreq	r3, [r3, #4]
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	bf04      	itt	eq
 80044a8:	1809      	addeq	r1, r1, r0
 80044aa:	6021      	streq	r1, [r4, #0]
 80044ac:	6054      	str	r4, [r2, #4]
 80044ae:	e7ca      	b.n	8004446 <_free_r+0x22>
 80044b0:	bd38      	pop	{r3, r4, r5, pc}
 80044b2:	bf00      	nop
 80044b4:	200003a0 	.word	0x200003a0

080044b8 <sbrk_aligned>:
 80044b8:	b570      	push	{r4, r5, r6, lr}
 80044ba:	4e0f      	ldr	r6, [pc, #60]	@ (80044f8 <sbrk_aligned+0x40>)
 80044bc:	460c      	mov	r4, r1
 80044be:	6831      	ldr	r1, [r6, #0]
 80044c0:	4605      	mov	r5, r0
 80044c2:	b911      	cbnz	r1, 80044ca <sbrk_aligned+0x12>
 80044c4:	f000 fe28 	bl	8005118 <_sbrk_r>
 80044c8:	6030      	str	r0, [r6, #0]
 80044ca:	4621      	mov	r1, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	f000 fe23 	bl	8005118 <_sbrk_r>
 80044d2:	1c43      	adds	r3, r0, #1
 80044d4:	d103      	bne.n	80044de <sbrk_aligned+0x26>
 80044d6:	f04f 34ff 	mov.w	r4, #4294967295
 80044da:	4620      	mov	r0, r4
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
 80044de:	1cc4      	adds	r4, r0, #3
 80044e0:	f024 0403 	bic.w	r4, r4, #3
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	d0f8      	beq.n	80044da <sbrk_aligned+0x22>
 80044e8:	1a21      	subs	r1, r4, r0
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 fe14 	bl	8005118 <_sbrk_r>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d1f2      	bne.n	80044da <sbrk_aligned+0x22>
 80044f4:	e7ef      	b.n	80044d6 <sbrk_aligned+0x1e>
 80044f6:	bf00      	nop
 80044f8:	2000039c 	.word	0x2000039c

080044fc <_malloc_r>:
 80044fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004500:	1ccd      	adds	r5, r1, #3
 8004502:	f025 0503 	bic.w	r5, r5, #3
 8004506:	3508      	adds	r5, #8
 8004508:	2d0c      	cmp	r5, #12
 800450a:	bf38      	it	cc
 800450c:	250c      	movcc	r5, #12
 800450e:	2d00      	cmp	r5, #0
 8004510:	4606      	mov	r6, r0
 8004512:	db01      	blt.n	8004518 <_malloc_r+0x1c>
 8004514:	42a9      	cmp	r1, r5
 8004516:	d904      	bls.n	8004522 <_malloc_r+0x26>
 8004518:	230c      	movs	r3, #12
 800451a:	6033      	str	r3, [r6, #0]
 800451c:	2000      	movs	r0, #0
 800451e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045f8 <_malloc_r+0xfc>
 8004526:	f000 f869 	bl	80045fc <__malloc_lock>
 800452a:	f8d8 3000 	ldr.w	r3, [r8]
 800452e:	461c      	mov	r4, r3
 8004530:	bb44      	cbnz	r4, 8004584 <_malloc_r+0x88>
 8004532:	4629      	mov	r1, r5
 8004534:	4630      	mov	r0, r6
 8004536:	f7ff ffbf 	bl	80044b8 <sbrk_aligned>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	4604      	mov	r4, r0
 800453e:	d158      	bne.n	80045f2 <_malloc_r+0xf6>
 8004540:	f8d8 4000 	ldr.w	r4, [r8]
 8004544:	4627      	mov	r7, r4
 8004546:	2f00      	cmp	r7, #0
 8004548:	d143      	bne.n	80045d2 <_malloc_r+0xd6>
 800454a:	2c00      	cmp	r4, #0
 800454c:	d04b      	beq.n	80045e6 <_malloc_r+0xea>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	4639      	mov	r1, r7
 8004552:	4630      	mov	r0, r6
 8004554:	eb04 0903 	add.w	r9, r4, r3
 8004558:	f000 fdde 	bl	8005118 <_sbrk_r>
 800455c:	4581      	cmp	r9, r0
 800455e:	d142      	bne.n	80045e6 <_malloc_r+0xea>
 8004560:	6821      	ldr	r1, [r4, #0]
 8004562:	1a6d      	subs	r5, r5, r1
 8004564:	4629      	mov	r1, r5
 8004566:	4630      	mov	r0, r6
 8004568:	f7ff ffa6 	bl	80044b8 <sbrk_aligned>
 800456c:	3001      	adds	r0, #1
 800456e:	d03a      	beq.n	80045e6 <_malloc_r+0xea>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	442b      	add	r3, r5
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	f8d8 3000 	ldr.w	r3, [r8]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	bb62      	cbnz	r2, 80045d8 <_malloc_r+0xdc>
 800457e:	f8c8 7000 	str.w	r7, [r8]
 8004582:	e00f      	b.n	80045a4 <_malloc_r+0xa8>
 8004584:	6822      	ldr	r2, [r4, #0]
 8004586:	1b52      	subs	r2, r2, r5
 8004588:	d420      	bmi.n	80045cc <_malloc_r+0xd0>
 800458a:	2a0b      	cmp	r2, #11
 800458c:	d917      	bls.n	80045be <_malloc_r+0xc2>
 800458e:	1961      	adds	r1, r4, r5
 8004590:	42a3      	cmp	r3, r4
 8004592:	6025      	str	r5, [r4, #0]
 8004594:	bf18      	it	ne
 8004596:	6059      	strne	r1, [r3, #4]
 8004598:	6863      	ldr	r3, [r4, #4]
 800459a:	bf08      	it	eq
 800459c:	f8c8 1000 	streq.w	r1, [r8]
 80045a0:	5162      	str	r2, [r4, r5]
 80045a2:	604b      	str	r3, [r1, #4]
 80045a4:	4630      	mov	r0, r6
 80045a6:	f000 f82f 	bl	8004608 <__malloc_unlock>
 80045aa:	f104 000b 	add.w	r0, r4, #11
 80045ae:	1d23      	adds	r3, r4, #4
 80045b0:	f020 0007 	bic.w	r0, r0, #7
 80045b4:	1ac2      	subs	r2, r0, r3
 80045b6:	bf1c      	itt	ne
 80045b8:	1a1b      	subne	r3, r3, r0
 80045ba:	50a3      	strne	r3, [r4, r2]
 80045bc:	e7af      	b.n	800451e <_malloc_r+0x22>
 80045be:	6862      	ldr	r2, [r4, #4]
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	bf0c      	ite	eq
 80045c4:	f8c8 2000 	streq.w	r2, [r8]
 80045c8:	605a      	strne	r2, [r3, #4]
 80045ca:	e7eb      	b.n	80045a4 <_malloc_r+0xa8>
 80045cc:	4623      	mov	r3, r4
 80045ce:	6864      	ldr	r4, [r4, #4]
 80045d0:	e7ae      	b.n	8004530 <_malloc_r+0x34>
 80045d2:	463c      	mov	r4, r7
 80045d4:	687f      	ldr	r7, [r7, #4]
 80045d6:	e7b6      	b.n	8004546 <_malloc_r+0x4a>
 80045d8:	461a      	mov	r2, r3
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	42a3      	cmp	r3, r4
 80045de:	d1fb      	bne.n	80045d8 <_malloc_r+0xdc>
 80045e0:	2300      	movs	r3, #0
 80045e2:	6053      	str	r3, [r2, #4]
 80045e4:	e7de      	b.n	80045a4 <_malloc_r+0xa8>
 80045e6:	230c      	movs	r3, #12
 80045e8:	6033      	str	r3, [r6, #0]
 80045ea:	4630      	mov	r0, r6
 80045ec:	f000 f80c 	bl	8004608 <__malloc_unlock>
 80045f0:	e794      	b.n	800451c <_malloc_r+0x20>
 80045f2:	6005      	str	r5, [r0, #0]
 80045f4:	e7d6      	b.n	80045a4 <_malloc_r+0xa8>
 80045f6:	bf00      	nop
 80045f8:	200003a0 	.word	0x200003a0

080045fc <__malloc_lock>:
 80045fc:	4801      	ldr	r0, [pc, #4]	@ (8004604 <__malloc_lock+0x8>)
 80045fe:	f7ff bf0e 	b.w	800441e <__retarget_lock_acquire_recursive>
 8004602:	bf00      	nop
 8004604:	20000398 	.word	0x20000398

08004608 <__malloc_unlock>:
 8004608:	4801      	ldr	r0, [pc, #4]	@ (8004610 <__malloc_unlock+0x8>)
 800460a:	f7ff bf09 	b.w	8004420 <__retarget_lock_release_recursive>
 800460e:	bf00      	nop
 8004610:	20000398 	.word	0x20000398

08004614 <__ssputs_r>:
 8004614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004618:	688e      	ldr	r6, [r1, #8]
 800461a:	461f      	mov	r7, r3
 800461c:	42be      	cmp	r6, r7
 800461e:	680b      	ldr	r3, [r1, #0]
 8004620:	4682      	mov	sl, r0
 8004622:	460c      	mov	r4, r1
 8004624:	4690      	mov	r8, r2
 8004626:	d82d      	bhi.n	8004684 <__ssputs_r+0x70>
 8004628:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800462c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004630:	d026      	beq.n	8004680 <__ssputs_r+0x6c>
 8004632:	6965      	ldr	r5, [r4, #20]
 8004634:	6909      	ldr	r1, [r1, #16]
 8004636:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800463a:	eba3 0901 	sub.w	r9, r3, r1
 800463e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004642:	1c7b      	adds	r3, r7, #1
 8004644:	444b      	add	r3, r9
 8004646:	106d      	asrs	r5, r5, #1
 8004648:	429d      	cmp	r5, r3
 800464a:	bf38      	it	cc
 800464c:	461d      	movcc	r5, r3
 800464e:	0553      	lsls	r3, r2, #21
 8004650:	d527      	bpl.n	80046a2 <__ssputs_r+0x8e>
 8004652:	4629      	mov	r1, r5
 8004654:	f7ff ff52 	bl	80044fc <_malloc_r>
 8004658:	4606      	mov	r6, r0
 800465a:	b360      	cbz	r0, 80046b6 <__ssputs_r+0xa2>
 800465c:	6921      	ldr	r1, [r4, #16]
 800465e:	464a      	mov	r2, r9
 8004660:	f000 fd6a 	bl	8005138 <memcpy>
 8004664:	89a3      	ldrh	r3, [r4, #12]
 8004666:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800466a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800466e:	81a3      	strh	r3, [r4, #12]
 8004670:	6126      	str	r6, [r4, #16]
 8004672:	6165      	str	r5, [r4, #20]
 8004674:	444e      	add	r6, r9
 8004676:	eba5 0509 	sub.w	r5, r5, r9
 800467a:	6026      	str	r6, [r4, #0]
 800467c:	60a5      	str	r5, [r4, #8]
 800467e:	463e      	mov	r6, r7
 8004680:	42be      	cmp	r6, r7
 8004682:	d900      	bls.n	8004686 <__ssputs_r+0x72>
 8004684:	463e      	mov	r6, r7
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	4632      	mov	r2, r6
 800468a:	4641      	mov	r1, r8
 800468c:	f000 fd2a 	bl	80050e4 <memmove>
 8004690:	68a3      	ldr	r3, [r4, #8]
 8004692:	1b9b      	subs	r3, r3, r6
 8004694:	60a3      	str	r3, [r4, #8]
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	4433      	add	r3, r6
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	2000      	movs	r0, #0
 800469e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046a2:	462a      	mov	r2, r5
 80046a4:	f000 fd56 	bl	8005154 <_realloc_r>
 80046a8:	4606      	mov	r6, r0
 80046aa:	2800      	cmp	r0, #0
 80046ac:	d1e0      	bne.n	8004670 <__ssputs_r+0x5c>
 80046ae:	6921      	ldr	r1, [r4, #16]
 80046b0:	4650      	mov	r0, sl
 80046b2:	f7ff feb7 	bl	8004424 <_free_r>
 80046b6:	230c      	movs	r3, #12
 80046b8:	f8ca 3000 	str.w	r3, [sl]
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046c2:	81a3      	strh	r3, [r4, #12]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	e7e9      	b.n	800469e <__ssputs_r+0x8a>
	...

080046cc <_svfiprintf_r>:
 80046cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d0:	4698      	mov	r8, r3
 80046d2:	898b      	ldrh	r3, [r1, #12]
 80046d4:	061b      	lsls	r3, r3, #24
 80046d6:	b09d      	sub	sp, #116	@ 0x74
 80046d8:	4607      	mov	r7, r0
 80046da:	460d      	mov	r5, r1
 80046dc:	4614      	mov	r4, r2
 80046de:	d510      	bpl.n	8004702 <_svfiprintf_r+0x36>
 80046e0:	690b      	ldr	r3, [r1, #16]
 80046e2:	b973      	cbnz	r3, 8004702 <_svfiprintf_r+0x36>
 80046e4:	2140      	movs	r1, #64	@ 0x40
 80046e6:	f7ff ff09 	bl	80044fc <_malloc_r>
 80046ea:	6028      	str	r0, [r5, #0]
 80046ec:	6128      	str	r0, [r5, #16]
 80046ee:	b930      	cbnz	r0, 80046fe <_svfiprintf_r+0x32>
 80046f0:	230c      	movs	r3, #12
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	b01d      	add	sp, #116	@ 0x74
 80046fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046fe:	2340      	movs	r3, #64	@ 0x40
 8004700:	616b      	str	r3, [r5, #20]
 8004702:	2300      	movs	r3, #0
 8004704:	9309      	str	r3, [sp, #36]	@ 0x24
 8004706:	2320      	movs	r3, #32
 8004708:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800470c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004710:	2330      	movs	r3, #48	@ 0x30
 8004712:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80048b0 <_svfiprintf_r+0x1e4>
 8004716:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800471a:	f04f 0901 	mov.w	r9, #1
 800471e:	4623      	mov	r3, r4
 8004720:	469a      	mov	sl, r3
 8004722:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004726:	b10a      	cbz	r2, 800472c <_svfiprintf_r+0x60>
 8004728:	2a25      	cmp	r2, #37	@ 0x25
 800472a:	d1f9      	bne.n	8004720 <_svfiprintf_r+0x54>
 800472c:	ebba 0b04 	subs.w	fp, sl, r4
 8004730:	d00b      	beq.n	800474a <_svfiprintf_r+0x7e>
 8004732:	465b      	mov	r3, fp
 8004734:	4622      	mov	r2, r4
 8004736:	4629      	mov	r1, r5
 8004738:	4638      	mov	r0, r7
 800473a:	f7ff ff6b 	bl	8004614 <__ssputs_r>
 800473e:	3001      	adds	r0, #1
 8004740:	f000 80a7 	beq.w	8004892 <_svfiprintf_r+0x1c6>
 8004744:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004746:	445a      	add	r2, fp
 8004748:	9209      	str	r2, [sp, #36]	@ 0x24
 800474a:	f89a 3000 	ldrb.w	r3, [sl]
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 809f 	beq.w	8004892 <_svfiprintf_r+0x1c6>
 8004754:	2300      	movs	r3, #0
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800475e:	f10a 0a01 	add.w	sl, sl, #1
 8004762:	9304      	str	r3, [sp, #16]
 8004764:	9307      	str	r3, [sp, #28]
 8004766:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800476a:	931a      	str	r3, [sp, #104]	@ 0x68
 800476c:	4654      	mov	r4, sl
 800476e:	2205      	movs	r2, #5
 8004770:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004774:	484e      	ldr	r0, [pc, #312]	@ (80048b0 <_svfiprintf_r+0x1e4>)
 8004776:	f7fb fd33 	bl	80001e0 <memchr>
 800477a:	9a04      	ldr	r2, [sp, #16]
 800477c:	b9d8      	cbnz	r0, 80047b6 <_svfiprintf_r+0xea>
 800477e:	06d0      	lsls	r0, r2, #27
 8004780:	bf44      	itt	mi
 8004782:	2320      	movmi	r3, #32
 8004784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004788:	0711      	lsls	r1, r2, #28
 800478a:	bf44      	itt	mi
 800478c:	232b      	movmi	r3, #43	@ 0x2b
 800478e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004792:	f89a 3000 	ldrb.w	r3, [sl]
 8004796:	2b2a      	cmp	r3, #42	@ 0x2a
 8004798:	d015      	beq.n	80047c6 <_svfiprintf_r+0xfa>
 800479a:	9a07      	ldr	r2, [sp, #28]
 800479c:	4654      	mov	r4, sl
 800479e:	2000      	movs	r0, #0
 80047a0:	f04f 0c0a 	mov.w	ip, #10
 80047a4:	4621      	mov	r1, r4
 80047a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047aa:	3b30      	subs	r3, #48	@ 0x30
 80047ac:	2b09      	cmp	r3, #9
 80047ae:	d94b      	bls.n	8004848 <_svfiprintf_r+0x17c>
 80047b0:	b1b0      	cbz	r0, 80047e0 <_svfiprintf_r+0x114>
 80047b2:	9207      	str	r2, [sp, #28]
 80047b4:	e014      	b.n	80047e0 <_svfiprintf_r+0x114>
 80047b6:	eba0 0308 	sub.w	r3, r0, r8
 80047ba:	fa09 f303 	lsl.w	r3, r9, r3
 80047be:	4313      	orrs	r3, r2
 80047c0:	9304      	str	r3, [sp, #16]
 80047c2:	46a2      	mov	sl, r4
 80047c4:	e7d2      	b.n	800476c <_svfiprintf_r+0xa0>
 80047c6:	9b03      	ldr	r3, [sp, #12]
 80047c8:	1d19      	adds	r1, r3, #4
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	9103      	str	r1, [sp, #12]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfbb      	ittet	lt
 80047d2:	425b      	neglt	r3, r3
 80047d4:	f042 0202 	orrlt.w	r2, r2, #2
 80047d8:	9307      	strge	r3, [sp, #28]
 80047da:	9307      	strlt	r3, [sp, #28]
 80047dc:	bfb8      	it	lt
 80047de:	9204      	strlt	r2, [sp, #16]
 80047e0:	7823      	ldrb	r3, [r4, #0]
 80047e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80047e4:	d10a      	bne.n	80047fc <_svfiprintf_r+0x130>
 80047e6:	7863      	ldrb	r3, [r4, #1]
 80047e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ea:	d132      	bne.n	8004852 <_svfiprintf_r+0x186>
 80047ec:	9b03      	ldr	r3, [sp, #12]
 80047ee:	1d1a      	adds	r2, r3, #4
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	9203      	str	r2, [sp, #12]
 80047f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047f8:	3402      	adds	r4, #2
 80047fa:	9305      	str	r3, [sp, #20]
 80047fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80048c0 <_svfiprintf_r+0x1f4>
 8004800:	7821      	ldrb	r1, [r4, #0]
 8004802:	2203      	movs	r2, #3
 8004804:	4650      	mov	r0, sl
 8004806:	f7fb fceb 	bl	80001e0 <memchr>
 800480a:	b138      	cbz	r0, 800481c <_svfiprintf_r+0x150>
 800480c:	9b04      	ldr	r3, [sp, #16]
 800480e:	eba0 000a 	sub.w	r0, r0, sl
 8004812:	2240      	movs	r2, #64	@ 0x40
 8004814:	4082      	lsls	r2, r0
 8004816:	4313      	orrs	r3, r2
 8004818:	3401      	adds	r4, #1
 800481a:	9304      	str	r3, [sp, #16]
 800481c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004820:	4824      	ldr	r0, [pc, #144]	@ (80048b4 <_svfiprintf_r+0x1e8>)
 8004822:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004826:	2206      	movs	r2, #6
 8004828:	f7fb fcda 	bl	80001e0 <memchr>
 800482c:	2800      	cmp	r0, #0
 800482e:	d036      	beq.n	800489e <_svfiprintf_r+0x1d2>
 8004830:	4b21      	ldr	r3, [pc, #132]	@ (80048b8 <_svfiprintf_r+0x1ec>)
 8004832:	bb1b      	cbnz	r3, 800487c <_svfiprintf_r+0x1b0>
 8004834:	9b03      	ldr	r3, [sp, #12]
 8004836:	3307      	adds	r3, #7
 8004838:	f023 0307 	bic.w	r3, r3, #7
 800483c:	3308      	adds	r3, #8
 800483e:	9303      	str	r3, [sp, #12]
 8004840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004842:	4433      	add	r3, r6
 8004844:	9309      	str	r3, [sp, #36]	@ 0x24
 8004846:	e76a      	b.n	800471e <_svfiprintf_r+0x52>
 8004848:	fb0c 3202 	mla	r2, ip, r2, r3
 800484c:	460c      	mov	r4, r1
 800484e:	2001      	movs	r0, #1
 8004850:	e7a8      	b.n	80047a4 <_svfiprintf_r+0xd8>
 8004852:	2300      	movs	r3, #0
 8004854:	3401      	adds	r4, #1
 8004856:	9305      	str	r3, [sp, #20]
 8004858:	4619      	mov	r1, r3
 800485a:	f04f 0c0a 	mov.w	ip, #10
 800485e:	4620      	mov	r0, r4
 8004860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004864:	3a30      	subs	r2, #48	@ 0x30
 8004866:	2a09      	cmp	r2, #9
 8004868:	d903      	bls.n	8004872 <_svfiprintf_r+0x1a6>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0c6      	beq.n	80047fc <_svfiprintf_r+0x130>
 800486e:	9105      	str	r1, [sp, #20]
 8004870:	e7c4      	b.n	80047fc <_svfiprintf_r+0x130>
 8004872:	fb0c 2101 	mla	r1, ip, r1, r2
 8004876:	4604      	mov	r4, r0
 8004878:	2301      	movs	r3, #1
 800487a:	e7f0      	b.n	800485e <_svfiprintf_r+0x192>
 800487c:	ab03      	add	r3, sp, #12
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	462a      	mov	r2, r5
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <_svfiprintf_r+0x1f0>)
 8004884:	a904      	add	r1, sp, #16
 8004886:	4638      	mov	r0, r7
 8004888:	f3af 8000 	nop.w
 800488c:	1c42      	adds	r2, r0, #1
 800488e:	4606      	mov	r6, r0
 8004890:	d1d6      	bne.n	8004840 <_svfiprintf_r+0x174>
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	065b      	lsls	r3, r3, #25
 8004896:	f53f af2d 	bmi.w	80046f4 <_svfiprintf_r+0x28>
 800489a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800489c:	e72c      	b.n	80046f8 <_svfiprintf_r+0x2c>
 800489e:	ab03      	add	r3, sp, #12
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	462a      	mov	r2, r5
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <_svfiprintf_r+0x1f0>)
 80048a6:	a904      	add	r1, sp, #16
 80048a8:	4638      	mov	r0, r7
 80048aa:	f000 f9bb 	bl	8004c24 <_printf_i>
 80048ae:	e7ed      	b.n	800488c <_svfiprintf_r+0x1c0>
 80048b0:	080053f8 	.word	0x080053f8
 80048b4:	08005402 	.word	0x08005402
 80048b8:	00000000 	.word	0x00000000
 80048bc:	08004615 	.word	0x08004615
 80048c0:	080053fe 	.word	0x080053fe

080048c4 <__sfputc_r>:
 80048c4:	6893      	ldr	r3, [r2, #8]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	b410      	push	{r4}
 80048cc:	6093      	str	r3, [r2, #8]
 80048ce:	da08      	bge.n	80048e2 <__sfputc_r+0x1e>
 80048d0:	6994      	ldr	r4, [r2, #24]
 80048d2:	42a3      	cmp	r3, r4
 80048d4:	db01      	blt.n	80048da <__sfputc_r+0x16>
 80048d6:	290a      	cmp	r1, #10
 80048d8:	d103      	bne.n	80048e2 <__sfputc_r+0x1e>
 80048da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048de:	f000 bb6d 	b.w	8004fbc <__swbuf_r>
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	1c58      	adds	r0, r3, #1
 80048e6:	6010      	str	r0, [r2, #0]
 80048e8:	7019      	strb	r1, [r3, #0]
 80048ea:	4608      	mov	r0, r1
 80048ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <__sfputs_r>:
 80048f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f4:	4606      	mov	r6, r0
 80048f6:	460f      	mov	r7, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	18d5      	adds	r5, r2, r3
 80048fc:	42ac      	cmp	r4, r5
 80048fe:	d101      	bne.n	8004904 <__sfputs_r+0x12>
 8004900:	2000      	movs	r0, #0
 8004902:	e007      	b.n	8004914 <__sfputs_r+0x22>
 8004904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004908:	463a      	mov	r2, r7
 800490a:	4630      	mov	r0, r6
 800490c:	f7ff ffda 	bl	80048c4 <__sfputc_r>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d1f3      	bne.n	80048fc <__sfputs_r+0xa>
 8004914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004918 <_vfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	460d      	mov	r5, r1
 800491e:	b09d      	sub	sp, #116	@ 0x74
 8004920:	4614      	mov	r4, r2
 8004922:	4698      	mov	r8, r3
 8004924:	4606      	mov	r6, r0
 8004926:	b118      	cbz	r0, 8004930 <_vfiprintf_r+0x18>
 8004928:	6a03      	ldr	r3, [r0, #32]
 800492a:	b90b      	cbnz	r3, 8004930 <_vfiprintf_r+0x18>
 800492c:	f7ff fc52 	bl	80041d4 <__sinit>
 8004930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004932:	07d9      	lsls	r1, r3, #31
 8004934:	d405      	bmi.n	8004942 <_vfiprintf_r+0x2a>
 8004936:	89ab      	ldrh	r3, [r5, #12]
 8004938:	059a      	lsls	r2, r3, #22
 800493a:	d402      	bmi.n	8004942 <_vfiprintf_r+0x2a>
 800493c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800493e:	f7ff fd6e 	bl	800441e <__retarget_lock_acquire_recursive>
 8004942:	89ab      	ldrh	r3, [r5, #12]
 8004944:	071b      	lsls	r3, r3, #28
 8004946:	d501      	bpl.n	800494c <_vfiprintf_r+0x34>
 8004948:	692b      	ldr	r3, [r5, #16]
 800494a:	b99b      	cbnz	r3, 8004974 <_vfiprintf_r+0x5c>
 800494c:	4629      	mov	r1, r5
 800494e:	4630      	mov	r0, r6
 8004950:	f000 fb72 	bl	8005038 <__swsetup_r>
 8004954:	b170      	cbz	r0, 8004974 <_vfiprintf_r+0x5c>
 8004956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004958:	07dc      	lsls	r4, r3, #31
 800495a:	d504      	bpl.n	8004966 <_vfiprintf_r+0x4e>
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	b01d      	add	sp, #116	@ 0x74
 8004962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004966:	89ab      	ldrh	r3, [r5, #12]
 8004968:	0598      	lsls	r0, r3, #22
 800496a:	d4f7      	bmi.n	800495c <_vfiprintf_r+0x44>
 800496c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800496e:	f7ff fd57 	bl	8004420 <__retarget_lock_release_recursive>
 8004972:	e7f3      	b.n	800495c <_vfiprintf_r+0x44>
 8004974:	2300      	movs	r3, #0
 8004976:	9309      	str	r3, [sp, #36]	@ 0x24
 8004978:	2320      	movs	r3, #32
 800497a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800497e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004982:	2330      	movs	r3, #48	@ 0x30
 8004984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004b34 <_vfiprintf_r+0x21c>
 8004988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800498c:	f04f 0901 	mov.w	r9, #1
 8004990:	4623      	mov	r3, r4
 8004992:	469a      	mov	sl, r3
 8004994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004998:	b10a      	cbz	r2, 800499e <_vfiprintf_r+0x86>
 800499a:	2a25      	cmp	r2, #37	@ 0x25
 800499c:	d1f9      	bne.n	8004992 <_vfiprintf_r+0x7a>
 800499e:	ebba 0b04 	subs.w	fp, sl, r4
 80049a2:	d00b      	beq.n	80049bc <_vfiprintf_r+0xa4>
 80049a4:	465b      	mov	r3, fp
 80049a6:	4622      	mov	r2, r4
 80049a8:	4629      	mov	r1, r5
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff ffa1 	bl	80048f2 <__sfputs_r>
 80049b0:	3001      	adds	r0, #1
 80049b2:	f000 80a7 	beq.w	8004b04 <_vfiprintf_r+0x1ec>
 80049b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049b8:	445a      	add	r2, fp
 80049ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80049bc:	f89a 3000 	ldrb.w	r3, [sl]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 809f 	beq.w	8004b04 <_vfiprintf_r+0x1ec>
 80049c6:	2300      	movs	r3, #0
 80049c8:	f04f 32ff 	mov.w	r2, #4294967295
 80049cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049d0:	f10a 0a01 	add.w	sl, sl, #1
 80049d4:	9304      	str	r3, [sp, #16]
 80049d6:	9307      	str	r3, [sp, #28]
 80049d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80049dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80049de:	4654      	mov	r4, sl
 80049e0:	2205      	movs	r2, #5
 80049e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e6:	4853      	ldr	r0, [pc, #332]	@ (8004b34 <_vfiprintf_r+0x21c>)
 80049e8:	f7fb fbfa 	bl	80001e0 <memchr>
 80049ec:	9a04      	ldr	r2, [sp, #16]
 80049ee:	b9d8      	cbnz	r0, 8004a28 <_vfiprintf_r+0x110>
 80049f0:	06d1      	lsls	r1, r2, #27
 80049f2:	bf44      	itt	mi
 80049f4:	2320      	movmi	r3, #32
 80049f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049fa:	0713      	lsls	r3, r2, #28
 80049fc:	bf44      	itt	mi
 80049fe:	232b      	movmi	r3, #43	@ 0x2b
 8004a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a04:	f89a 3000 	ldrb.w	r3, [sl]
 8004a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a0a:	d015      	beq.n	8004a38 <_vfiprintf_r+0x120>
 8004a0c:	9a07      	ldr	r2, [sp, #28]
 8004a0e:	4654      	mov	r4, sl
 8004a10:	2000      	movs	r0, #0
 8004a12:	f04f 0c0a 	mov.w	ip, #10
 8004a16:	4621      	mov	r1, r4
 8004a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a1c:	3b30      	subs	r3, #48	@ 0x30
 8004a1e:	2b09      	cmp	r3, #9
 8004a20:	d94b      	bls.n	8004aba <_vfiprintf_r+0x1a2>
 8004a22:	b1b0      	cbz	r0, 8004a52 <_vfiprintf_r+0x13a>
 8004a24:	9207      	str	r2, [sp, #28]
 8004a26:	e014      	b.n	8004a52 <_vfiprintf_r+0x13a>
 8004a28:	eba0 0308 	sub.w	r3, r0, r8
 8004a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a30:	4313      	orrs	r3, r2
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	46a2      	mov	sl, r4
 8004a36:	e7d2      	b.n	80049de <_vfiprintf_r+0xc6>
 8004a38:	9b03      	ldr	r3, [sp, #12]
 8004a3a:	1d19      	adds	r1, r3, #4
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	9103      	str	r1, [sp, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bfbb      	ittet	lt
 8004a44:	425b      	neglt	r3, r3
 8004a46:	f042 0202 	orrlt.w	r2, r2, #2
 8004a4a:	9307      	strge	r3, [sp, #28]
 8004a4c:	9307      	strlt	r3, [sp, #28]
 8004a4e:	bfb8      	it	lt
 8004a50:	9204      	strlt	r2, [sp, #16]
 8004a52:	7823      	ldrb	r3, [r4, #0]
 8004a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8004a56:	d10a      	bne.n	8004a6e <_vfiprintf_r+0x156>
 8004a58:	7863      	ldrb	r3, [r4, #1]
 8004a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a5c:	d132      	bne.n	8004ac4 <_vfiprintf_r+0x1ac>
 8004a5e:	9b03      	ldr	r3, [sp, #12]
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	9203      	str	r2, [sp, #12]
 8004a66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a6a:	3402      	adds	r4, #2
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004b44 <_vfiprintf_r+0x22c>
 8004a72:	7821      	ldrb	r1, [r4, #0]
 8004a74:	2203      	movs	r2, #3
 8004a76:	4650      	mov	r0, sl
 8004a78:	f7fb fbb2 	bl	80001e0 <memchr>
 8004a7c:	b138      	cbz	r0, 8004a8e <_vfiprintf_r+0x176>
 8004a7e:	9b04      	ldr	r3, [sp, #16]
 8004a80:	eba0 000a 	sub.w	r0, r0, sl
 8004a84:	2240      	movs	r2, #64	@ 0x40
 8004a86:	4082      	lsls	r2, r0
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	3401      	adds	r4, #1
 8004a8c:	9304      	str	r3, [sp, #16]
 8004a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a92:	4829      	ldr	r0, [pc, #164]	@ (8004b38 <_vfiprintf_r+0x220>)
 8004a94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a98:	2206      	movs	r2, #6
 8004a9a:	f7fb fba1 	bl	80001e0 <memchr>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	d03f      	beq.n	8004b22 <_vfiprintf_r+0x20a>
 8004aa2:	4b26      	ldr	r3, [pc, #152]	@ (8004b3c <_vfiprintf_r+0x224>)
 8004aa4:	bb1b      	cbnz	r3, 8004aee <_vfiprintf_r+0x1d6>
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	3307      	adds	r3, #7
 8004aaa:	f023 0307 	bic.w	r3, r3, #7
 8004aae:	3308      	adds	r3, #8
 8004ab0:	9303      	str	r3, [sp, #12]
 8004ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ab4:	443b      	add	r3, r7
 8004ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ab8:	e76a      	b.n	8004990 <_vfiprintf_r+0x78>
 8004aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8004abe:	460c      	mov	r4, r1
 8004ac0:	2001      	movs	r0, #1
 8004ac2:	e7a8      	b.n	8004a16 <_vfiprintf_r+0xfe>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	3401      	adds	r4, #1
 8004ac8:	9305      	str	r3, [sp, #20]
 8004aca:	4619      	mov	r1, r3
 8004acc:	f04f 0c0a 	mov.w	ip, #10
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ad6:	3a30      	subs	r2, #48	@ 0x30
 8004ad8:	2a09      	cmp	r2, #9
 8004ada:	d903      	bls.n	8004ae4 <_vfiprintf_r+0x1cc>
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0c6      	beq.n	8004a6e <_vfiprintf_r+0x156>
 8004ae0:	9105      	str	r1, [sp, #20]
 8004ae2:	e7c4      	b.n	8004a6e <_vfiprintf_r+0x156>
 8004ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ae8:	4604      	mov	r4, r0
 8004aea:	2301      	movs	r3, #1
 8004aec:	e7f0      	b.n	8004ad0 <_vfiprintf_r+0x1b8>
 8004aee:	ab03      	add	r3, sp, #12
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	462a      	mov	r2, r5
 8004af4:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <_vfiprintf_r+0x228>)
 8004af6:	a904      	add	r1, sp, #16
 8004af8:	4630      	mov	r0, r6
 8004afa:	f3af 8000 	nop.w
 8004afe:	4607      	mov	r7, r0
 8004b00:	1c78      	adds	r0, r7, #1
 8004b02:	d1d6      	bne.n	8004ab2 <_vfiprintf_r+0x19a>
 8004b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b06:	07d9      	lsls	r1, r3, #31
 8004b08:	d405      	bmi.n	8004b16 <_vfiprintf_r+0x1fe>
 8004b0a:	89ab      	ldrh	r3, [r5, #12]
 8004b0c:	059a      	lsls	r2, r3, #22
 8004b0e:	d402      	bmi.n	8004b16 <_vfiprintf_r+0x1fe>
 8004b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b12:	f7ff fc85 	bl	8004420 <__retarget_lock_release_recursive>
 8004b16:	89ab      	ldrh	r3, [r5, #12]
 8004b18:	065b      	lsls	r3, r3, #25
 8004b1a:	f53f af1f 	bmi.w	800495c <_vfiprintf_r+0x44>
 8004b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b20:	e71e      	b.n	8004960 <_vfiprintf_r+0x48>
 8004b22:	ab03      	add	r3, sp, #12
 8004b24:	9300      	str	r3, [sp, #0]
 8004b26:	462a      	mov	r2, r5
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <_vfiprintf_r+0x228>)
 8004b2a:	a904      	add	r1, sp, #16
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 f879 	bl	8004c24 <_printf_i>
 8004b32:	e7e4      	b.n	8004afe <_vfiprintf_r+0x1e6>
 8004b34:	080053f8 	.word	0x080053f8
 8004b38:	08005402 	.word	0x08005402
 8004b3c:	00000000 	.word	0x00000000
 8004b40:	080048f3 	.word	0x080048f3
 8004b44:	080053fe 	.word	0x080053fe

08004b48 <_printf_common>:
 8004b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	4616      	mov	r6, r2
 8004b4e:	4698      	mov	r8, r3
 8004b50:	688a      	ldr	r2, [r1, #8]
 8004b52:	690b      	ldr	r3, [r1, #16]
 8004b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	bfb8      	it	lt
 8004b5c:	4613      	movlt	r3, r2
 8004b5e:	6033      	str	r3, [r6, #0]
 8004b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004b64:	4607      	mov	r7, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	b10a      	cbz	r2, 8004b6e <_printf_common+0x26>
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	6033      	str	r3, [r6, #0]
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	0699      	lsls	r1, r3, #26
 8004b72:	bf42      	ittt	mi
 8004b74:	6833      	ldrmi	r3, [r6, #0]
 8004b76:	3302      	addmi	r3, #2
 8004b78:	6033      	strmi	r3, [r6, #0]
 8004b7a:	6825      	ldr	r5, [r4, #0]
 8004b7c:	f015 0506 	ands.w	r5, r5, #6
 8004b80:	d106      	bne.n	8004b90 <_printf_common+0x48>
 8004b82:	f104 0a19 	add.w	sl, r4, #25
 8004b86:	68e3      	ldr	r3, [r4, #12]
 8004b88:	6832      	ldr	r2, [r6, #0]
 8004b8a:	1a9b      	subs	r3, r3, r2
 8004b8c:	42ab      	cmp	r3, r5
 8004b8e:	dc26      	bgt.n	8004bde <_printf_common+0x96>
 8004b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004b94:	6822      	ldr	r2, [r4, #0]
 8004b96:	3b00      	subs	r3, #0
 8004b98:	bf18      	it	ne
 8004b9a:	2301      	movne	r3, #1
 8004b9c:	0692      	lsls	r2, r2, #26
 8004b9e:	d42b      	bmi.n	8004bf8 <_printf_common+0xb0>
 8004ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ba4:	4641      	mov	r1, r8
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	47c8      	blx	r9
 8004baa:	3001      	adds	r0, #1
 8004bac:	d01e      	beq.n	8004bec <_printf_common+0xa4>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	6922      	ldr	r2, [r4, #16]
 8004bb2:	f003 0306 	and.w	r3, r3, #6
 8004bb6:	2b04      	cmp	r3, #4
 8004bb8:	bf02      	ittt	eq
 8004bba:	68e5      	ldreq	r5, [r4, #12]
 8004bbc:	6833      	ldreq	r3, [r6, #0]
 8004bbe:	1aed      	subeq	r5, r5, r3
 8004bc0:	68a3      	ldr	r3, [r4, #8]
 8004bc2:	bf0c      	ite	eq
 8004bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc8:	2500      	movne	r5, #0
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	bfc4      	itt	gt
 8004bce:	1a9b      	subgt	r3, r3, r2
 8004bd0:	18ed      	addgt	r5, r5, r3
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	341a      	adds	r4, #26
 8004bd6:	42b5      	cmp	r5, r6
 8004bd8:	d11a      	bne.n	8004c10 <_printf_common+0xc8>
 8004bda:	2000      	movs	r0, #0
 8004bdc:	e008      	b.n	8004bf0 <_printf_common+0xa8>
 8004bde:	2301      	movs	r3, #1
 8004be0:	4652      	mov	r2, sl
 8004be2:	4641      	mov	r1, r8
 8004be4:	4638      	mov	r0, r7
 8004be6:	47c8      	blx	r9
 8004be8:	3001      	adds	r0, #1
 8004bea:	d103      	bne.n	8004bf4 <_printf_common+0xac>
 8004bec:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	e7c6      	b.n	8004b86 <_printf_common+0x3e>
 8004bf8:	18e1      	adds	r1, r4, r3
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	2030      	movs	r0, #48	@ 0x30
 8004bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c02:	4422      	add	r2, r4
 8004c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	e7c7      	b.n	8004ba0 <_printf_common+0x58>
 8004c10:	2301      	movs	r3, #1
 8004c12:	4622      	mov	r2, r4
 8004c14:	4641      	mov	r1, r8
 8004c16:	4638      	mov	r0, r7
 8004c18:	47c8      	blx	r9
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d0e6      	beq.n	8004bec <_printf_common+0xa4>
 8004c1e:	3601      	adds	r6, #1
 8004c20:	e7d9      	b.n	8004bd6 <_printf_common+0x8e>
	...

08004c24 <_printf_i>:
 8004c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c28:	7e0f      	ldrb	r7, [r1, #24]
 8004c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c2c:	2f78      	cmp	r7, #120	@ 0x78
 8004c2e:	4691      	mov	r9, r2
 8004c30:	4680      	mov	r8, r0
 8004c32:	460c      	mov	r4, r1
 8004c34:	469a      	mov	sl, r3
 8004c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c3a:	d807      	bhi.n	8004c4c <_printf_i+0x28>
 8004c3c:	2f62      	cmp	r7, #98	@ 0x62
 8004c3e:	d80a      	bhi.n	8004c56 <_printf_i+0x32>
 8004c40:	2f00      	cmp	r7, #0
 8004c42:	f000 80d2 	beq.w	8004dea <_printf_i+0x1c6>
 8004c46:	2f58      	cmp	r7, #88	@ 0x58
 8004c48:	f000 80b9 	beq.w	8004dbe <_printf_i+0x19a>
 8004c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004c54:	e03a      	b.n	8004ccc <_printf_i+0xa8>
 8004c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004c5a:	2b15      	cmp	r3, #21
 8004c5c:	d8f6      	bhi.n	8004c4c <_printf_i+0x28>
 8004c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8004c64 <_printf_i+0x40>)
 8004c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c64:	08004cbd 	.word	0x08004cbd
 8004c68:	08004cd1 	.word	0x08004cd1
 8004c6c:	08004c4d 	.word	0x08004c4d
 8004c70:	08004c4d 	.word	0x08004c4d
 8004c74:	08004c4d 	.word	0x08004c4d
 8004c78:	08004c4d 	.word	0x08004c4d
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004c4d 	.word	0x08004c4d
 8004c84:	08004c4d 	.word	0x08004c4d
 8004c88:	08004c4d 	.word	0x08004c4d
 8004c8c:	08004c4d 	.word	0x08004c4d
 8004c90:	08004dd1 	.word	0x08004dd1
 8004c94:	08004cfb 	.word	0x08004cfb
 8004c98:	08004d8b 	.word	0x08004d8b
 8004c9c:	08004c4d 	.word	0x08004c4d
 8004ca0:	08004c4d 	.word	0x08004c4d
 8004ca4:	08004df3 	.word	0x08004df3
 8004ca8:	08004c4d 	.word	0x08004c4d
 8004cac:	08004cfb 	.word	0x08004cfb
 8004cb0:	08004c4d 	.word	0x08004c4d
 8004cb4:	08004c4d 	.word	0x08004c4d
 8004cb8:	08004d93 	.word	0x08004d93
 8004cbc:	6833      	ldr	r3, [r6, #0]
 8004cbe:	1d1a      	adds	r2, r3, #4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6032      	str	r2, [r6, #0]
 8004cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e09d      	b.n	8004e0c <_printf_i+0x1e8>
 8004cd0:	6833      	ldr	r3, [r6, #0]
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	1d19      	adds	r1, r3, #4
 8004cd6:	6031      	str	r1, [r6, #0]
 8004cd8:	0606      	lsls	r6, r0, #24
 8004cda:	d501      	bpl.n	8004ce0 <_printf_i+0xbc>
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	e003      	b.n	8004ce8 <_printf_i+0xc4>
 8004ce0:	0645      	lsls	r5, r0, #25
 8004ce2:	d5fb      	bpl.n	8004cdc <_printf_i+0xb8>
 8004ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ce8:	2d00      	cmp	r5, #0
 8004cea:	da03      	bge.n	8004cf4 <_printf_i+0xd0>
 8004cec:	232d      	movs	r3, #45	@ 0x2d
 8004cee:	426d      	negs	r5, r5
 8004cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cf4:	4859      	ldr	r0, [pc, #356]	@ (8004e5c <_printf_i+0x238>)
 8004cf6:	230a      	movs	r3, #10
 8004cf8:	e011      	b.n	8004d1e <_printf_i+0xfa>
 8004cfa:	6821      	ldr	r1, [r4, #0]
 8004cfc:	6833      	ldr	r3, [r6, #0]
 8004cfe:	0608      	lsls	r0, r1, #24
 8004d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d04:	d402      	bmi.n	8004d0c <_printf_i+0xe8>
 8004d06:	0649      	lsls	r1, r1, #25
 8004d08:	bf48      	it	mi
 8004d0a:	b2ad      	uxthmi	r5, r5
 8004d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d0e:	4853      	ldr	r0, [pc, #332]	@ (8004e5c <_printf_i+0x238>)
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	bf14      	ite	ne
 8004d14:	230a      	movne	r3, #10
 8004d16:	2308      	moveq	r3, #8
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d1e:	6866      	ldr	r6, [r4, #4]
 8004d20:	60a6      	str	r6, [r4, #8]
 8004d22:	2e00      	cmp	r6, #0
 8004d24:	bfa2      	ittt	ge
 8004d26:	6821      	ldrge	r1, [r4, #0]
 8004d28:	f021 0104 	bicge.w	r1, r1, #4
 8004d2c:	6021      	strge	r1, [r4, #0]
 8004d2e:	b90d      	cbnz	r5, 8004d34 <_printf_i+0x110>
 8004d30:	2e00      	cmp	r6, #0
 8004d32:	d04b      	beq.n	8004dcc <_printf_i+0x1a8>
 8004d34:	4616      	mov	r6, r2
 8004d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8004d3e:	5dc7      	ldrb	r7, [r0, r7]
 8004d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d44:	462f      	mov	r7, r5
 8004d46:	42bb      	cmp	r3, r7
 8004d48:	460d      	mov	r5, r1
 8004d4a:	d9f4      	bls.n	8004d36 <_printf_i+0x112>
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d10b      	bne.n	8004d68 <_printf_i+0x144>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	07df      	lsls	r7, r3, #31
 8004d54:	d508      	bpl.n	8004d68 <_printf_i+0x144>
 8004d56:	6923      	ldr	r3, [r4, #16]
 8004d58:	6861      	ldr	r1, [r4, #4]
 8004d5a:	4299      	cmp	r1, r3
 8004d5c:	bfde      	ittt	le
 8004d5e:	2330      	movle	r3, #48	@ 0x30
 8004d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004d68:	1b92      	subs	r2, r2, r6
 8004d6a:	6122      	str	r2, [r4, #16]
 8004d6c:	f8cd a000 	str.w	sl, [sp]
 8004d70:	464b      	mov	r3, r9
 8004d72:	aa03      	add	r2, sp, #12
 8004d74:	4621      	mov	r1, r4
 8004d76:	4640      	mov	r0, r8
 8004d78:	f7ff fee6 	bl	8004b48 <_printf_common>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	d14a      	bne.n	8004e16 <_printf_i+0x1f2>
 8004d80:	f04f 30ff 	mov.w	r0, #4294967295
 8004d84:	b004      	add	sp, #16
 8004d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	f043 0320 	orr.w	r3, r3, #32
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	4833      	ldr	r0, [pc, #204]	@ (8004e60 <_printf_i+0x23c>)
 8004d94:	2778      	movs	r7, #120	@ 0x78
 8004d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	6831      	ldr	r1, [r6, #0]
 8004d9e:	061f      	lsls	r7, r3, #24
 8004da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004da4:	d402      	bmi.n	8004dac <_printf_i+0x188>
 8004da6:	065f      	lsls	r7, r3, #25
 8004da8:	bf48      	it	mi
 8004daa:	b2ad      	uxthmi	r5, r5
 8004dac:	6031      	str	r1, [r6, #0]
 8004dae:	07d9      	lsls	r1, r3, #31
 8004db0:	bf44      	itt	mi
 8004db2:	f043 0320 	orrmi.w	r3, r3, #32
 8004db6:	6023      	strmi	r3, [r4, #0]
 8004db8:	b11d      	cbz	r5, 8004dc2 <_printf_i+0x19e>
 8004dba:	2310      	movs	r3, #16
 8004dbc:	e7ac      	b.n	8004d18 <_printf_i+0xf4>
 8004dbe:	4827      	ldr	r0, [pc, #156]	@ (8004e5c <_printf_i+0x238>)
 8004dc0:	e7e9      	b.n	8004d96 <_printf_i+0x172>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f023 0320 	bic.w	r3, r3, #32
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	e7f6      	b.n	8004dba <_printf_i+0x196>
 8004dcc:	4616      	mov	r6, r2
 8004dce:	e7bd      	b.n	8004d4c <_printf_i+0x128>
 8004dd0:	6833      	ldr	r3, [r6, #0]
 8004dd2:	6825      	ldr	r5, [r4, #0]
 8004dd4:	6961      	ldr	r1, [r4, #20]
 8004dd6:	1d18      	adds	r0, r3, #4
 8004dd8:	6030      	str	r0, [r6, #0]
 8004dda:	062e      	lsls	r6, r5, #24
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	d501      	bpl.n	8004de4 <_printf_i+0x1c0>
 8004de0:	6019      	str	r1, [r3, #0]
 8004de2:	e002      	b.n	8004dea <_printf_i+0x1c6>
 8004de4:	0668      	lsls	r0, r5, #25
 8004de6:	d5fb      	bpl.n	8004de0 <_printf_i+0x1bc>
 8004de8:	8019      	strh	r1, [r3, #0]
 8004dea:	2300      	movs	r3, #0
 8004dec:	6123      	str	r3, [r4, #16]
 8004dee:	4616      	mov	r6, r2
 8004df0:	e7bc      	b.n	8004d6c <_printf_i+0x148>
 8004df2:	6833      	ldr	r3, [r6, #0]
 8004df4:	1d1a      	adds	r2, r3, #4
 8004df6:	6032      	str	r2, [r6, #0]
 8004df8:	681e      	ldr	r6, [r3, #0]
 8004dfa:	6862      	ldr	r2, [r4, #4]
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f7fb f9ee 	bl	80001e0 <memchr>
 8004e04:	b108      	cbz	r0, 8004e0a <_printf_i+0x1e6>
 8004e06:	1b80      	subs	r0, r0, r6
 8004e08:	6060      	str	r0, [r4, #4]
 8004e0a:	6863      	ldr	r3, [r4, #4]
 8004e0c:	6123      	str	r3, [r4, #16]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e14:	e7aa      	b.n	8004d6c <_printf_i+0x148>
 8004e16:	6923      	ldr	r3, [r4, #16]
 8004e18:	4632      	mov	r2, r6
 8004e1a:	4649      	mov	r1, r9
 8004e1c:	4640      	mov	r0, r8
 8004e1e:	47d0      	blx	sl
 8004e20:	3001      	adds	r0, #1
 8004e22:	d0ad      	beq.n	8004d80 <_printf_i+0x15c>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	079b      	lsls	r3, r3, #30
 8004e28:	d413      	bmi.n	8004e52 <_printf_i+0x22e>
 8004e2a:	68e0      	ldr	r0, [r4, #12]
 8004e2c:	9b03      	ldr	r3, [sp, #12]
 8004e2e:	4298      	cmp	r0, r3
 8004e30:	bfb8      	it	lt
 8004e32:	4618      	movlt	r0, r3
 8004e34:	e7a6      	b.n	8004d84 <_printf_i+0x160>
 8004e36:	2301      	movs	r3, #1
 8004e38:	4632      	mov	r2, r6
 8004e3a:	4649      	mov	r1, r9
 8004e3c:	4640      	mov	r0, r8
 8004e3e:	47d0      	blx	sl
 8004e40:	3001      	adds	r0, #1
 8004e42:	d09d      	beq.n	8004d80 <_printf_i+0x15c>
 8004e44:	3501      	adds	r5, #1
 8004e46:	68e3      	ldr	r3, [r4, #12]
 8004e48:	9903      	ldr	r1, [sp, #12]
 8004e4a:	1a5b      	subs	r3, r3, r1
 8004e4c:	42ab      	cmp	r3, r5
 8004e4e:	dcf2      	bgt.n	8004e36 <_printf_i+0x212>
 8004e50:	e7eb      	b.n	8004e2a <_printf_i+0x206>
 8004e52:	2500      	movs	r5, #0
 8004e54:	f104 0619 	add.w	r6, r4, #25
 8004e58:	e7f5      	b.n	8004e46 <_printf_i+0x222>
 8004e5a:	bf00      	nop
 8004e5c:	08005409 	.word	0x08005409
 8004e60:	0800541a 	.word	0x0800541a

08004e64 <__sflush_r>:
 8004e64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e6c:	0716      	lsls	r6, r2, #28
 8004e6e:	4605      	mov	r5, r0
 8004e70:	460c      	mov	r4, r1
 8004e72:	d454      	bmi.n	8004f1e <__sflush_r+0xba>
 8004e74:	684b      	ldr	r3, [r1, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	dc02      	bgt.n	8004e80 <__sflush_r+0x1c>
 8004e7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	dd48      	ble.n	8004f12 <__sflush_r+0xae>
 8004e80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004e82:	2e00      	cmp	r6, #0
 8004e84:	d045      	beq.n	8004f12 <__sflush_r+0xae>
 8004e86:	2300      	movs	r3, #0
 8004e88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004e8c:	682f      	ldr	r7, [r5, #0]
 8004e8e:	6a21      	ldr	r1, [r4, #32]
 8004e90:	602b      	str	r3, [r5, #0]
 8004e92:	d030      	beq.n	8004ef6 <__sflush_r+0x92>
 8004e94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004e96:	89a3      	ldrh	r3, [r4, #12]
 8004e98:	0759      	lsls	r1, r3, #29
 8004e9a:	d505      	bpl.n	8004ea8 <__sflush_r+0x44>
 8004e9c:	6863      	ldr	r3, [r4, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ea2:	b10b      	cbz	r3, 8004ea8 <__sflush_r+0x44>
 8004ea4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ea6:	1ad2      	subs	r2, r2, r3
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004eac:	6a21      	ldr	r1, [r4, #32]
 8004eae:	4628      	mov	r0, r5
 8004eb0:	47b0      	blx	r6
 8004eb2:	1c43      	adds	r3, r0, #1
 8004eb4:	89a3      	ldrh	r3, [r4, #12]
 8004eb6:	d106      	bne.n	8004ec6 <__sflush_r+0x62>
 8004eb8:	6829      	ldr	r1, [r5, #0]
 8004eba:	291d      	cmp	r1, #29
 8004ebc:	d82b      	bhi.n	8004f16 <__sflush_r+0xb2>
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	@ (8004f68 <__sflush_r+0x104>)
 8004ec0:	410a      	asrs	r2, r1
 8004ec2:	07d6      	lsls	r6, r2, #31
 8004ec4:	d427      	bmi.n	8004f16 <__sflush_r+0xb2>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	6062      	str	r2, [r4, #4]
 8004eca:	04d9      	lsls	r1, r3, #19
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	d504      	bpl.n	8004edc <__sflush_r+0x78>
 8004ed2:	1c42      	adds	r2, r0, #1
 8004ed4:	d101      	bne.n	8004eda <__sflush_r+0x76>
 8004ed6:	682b      	ldr	r3, [r5, #0]
 8004ed8:	b903      	cbnz	r3, 8004edc <__sflush_r+0x78>
 8004eda:	6560      	str	r0, [r4, #84]	@ 0x54
 8004edc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ede:	602f      	str	r7, [r5, #0]
 8004ee0:	b1b9      	cbz	r1, 8004f12 <__sflush_r+0xae>
 8004ee2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ee6:	4299      	cmp	r1, r3
 8004ee8:	d002      	beq.n	8004ef0 <__sflush_r+0x8c>
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7ff fa9a 	bl	8004424 <_free_r>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ef4:	e00d      	b.n	8004f12 <__sflush_r+0xae>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b0      	blx	r6
 8004efc:	4602      	mov	r2, r0
 8004efe:	1c50      	adds	r0, r2, #1
 8004f00:	d1c9      	bne.n	8004e96 <__sflush_r+0x32>
 8004f02:	682b      	ldr	r3, [r5, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0c6      	beq.n	8004e96 <__sflush_r+0x32>
 8004f08:	2b1d      	cmp	r3, #29
 8004f0a:	d001      	beq.n	8004f10 <__sflush_r+0xac>
 8004f0c:	2b16      	cmp	r3, #22
 8004f0e:	d11e      	bne.n	8004f4e <__sflush_r+0xea>
 8004f10:	602f      	str	r7, [r5, #0]
 8004f12:	2000      	movs	r0, #0
 8004f14:	e022      	b.n	8004f5c <__sflush_r+0xf8>
 8004f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f1a:	b21b      	sxth	r3, r3
 8004f1c:	e01b      	b.n	8004f56 <__sflush_r+0xf2>
 8004f1e:	690f      	ldr	r7, [r1, #16]
 8004f20:	2f00      	cmp	r7, #0
 8004f22:	d0f6      	beq.n	8004f12 <__sflush_r+0xae>
 8004f24:	0793      	lsls	r3, r2, #30
 8004f26:	680e      	ldr	r6, [r1, #0]
 8004f28:	bf08      	it	eq
 8004f2a:	694b      	ldreq	r3, [r1, #20]
 8004f2c:	600f      	str	r7, [r1, #0]
 8004f2e:	bf18      	it	ne
 8004f30:	2300      	movne	r3, #0
 8004f32:	eba6 0807 	sub.w	r8, r6, r7
 8004f36:	608b      	str	r3, [r1, #8]
 8004f38:	f1b8 0f00 	cmp.w	r8, #0
 8004f3c:	dde9      	ble.n	8004f12 <__sflush_r+0xae>
 8004f3e:	6a21      	ldr	r1, [r4, #32]
 8004f40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004f42:	4643      	mov	r3, r8
 8004f44:	463a      	mov	r2, r7
 8004f46:	4628      	mov	r0, r5
 8004f48:	47b0      	blx	r6
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	dc08      	bgt.n	8004f60 <__sflush_r+0xfc>
 8004f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f56:	81a3      	strh	r3, [r4, #12]
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f60:	4407      	add	r7, r0
 8004f62:	eba8 0800 	sub.w	r8, r8, r0
 8004f66:	e7e7      	b.n	8004f38 <__sflush_r+0xd4>
 8004f68:	dfbffffe 	.word	0xdfbffffe

08004f6c <_fflush_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	690b      	ldr	r3, [r1, #16]
 8004f70:	4605      	mov	r5, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	b913      	cbnz	r3, 8004f7c <_fflush_r+0x10>
 8004f76:	2500      	movs	r5, #0
 8004f78:	4628      	mov	r0, r5
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	b118      	cbz	r0, 8004f86 <_fflush_r+0x1a>
 8004f7e:	6a03      	ldr	r3, [r0, #32]
 8004f80:	b90b      	cbnz	r3, 8004f86 <_fflush_r+0x1a>
 8004f82:	f7ff f927 	bl	80041d4 <__sinit>
 8004f86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f3      	beq.n	8004f76 <_fflush_r+0xa>
 8004f8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004f90:	07d0      	lsls	r0, r2, #31
 8004f92:	d404      	bmi.n	8004f9e <_fflush_r+0x32>
 8004f94:	0599      	lsls	r1, r3, #22
 8004f96:	d402      	bmi.n	8004f9e <_fflush_r+0x32>
 8004f98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004f9a:	f7ff fa40 	bl	800441e <__retarget_lock_acquire_recursive>
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	f7ff ff5f 	bl	8004e64 <__sflush_r>
 8004fa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fa8:	07da      	lsls	r2, r3, #31
 8004faa:	4605      	mov	r5, r0
 8004fac:	d4e4      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fae:	89a3      	ldrh	r3, [r4, #12]
 8004fb0:	059b      	lsls	r3, r3, #22
 8004fb2:	d4e1      	bmi.n	8004f78 <_fflush_r+0xc>
 8004fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fb6:	f7ff fa33 	bl	8004420 <__retarget_lock_release_recursive>
 8004fba:	e7dd      	b.n	8004f78 <_fflush_r+0xc>

08004fbc <__swbuf_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	460e      	mov	r6, r1
 8004fc0:	4614      	mov	r4, r2
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	b118      	cbz	r0, 8004fce <__swbuf_r+0x12>
 8004fc6:	6a03      	ldr	r3, [r0, #32]
 8004fc8:	b90b      	cbnz	r3, 8004fce <__swbuf_r+0x12>
 8004fca:	f7ff f903 	bl	80041d4 <__sinit>
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	60a3      	str	r3, [r4, #8]
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	071a      	lsls	r2, r3, #28
 8004fd6:	d501      	bpl.n	8004fdc <__swbuf_r+0x20>
 8004fd8:	6923      	ldr	r3, [r4, #16]
 8004fda:	b943      	cbnz	r3, 8004fee <__swbuf_r+0x32>
 8004fdc:	4621      	mov	r1, r4
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 f82a 	bl	8005038 <__swsetup_r>
 8004fe4:	b118      	cbz	r0, 8004fee <__swbuf_r+0x32>
 8004fe6:	f04f 37ff 	mov.w	r7, #4294967295
 8004fea:	4638      	mov	r0, r7
 8004fec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	6922      	ldr	r2, [r4, #16]
 8004ff2:	1a98      	subs	r0, r3, r2
 8004ff4:	6963      	ldr	r3, [r4, #20]
 8004ff6:	b2f6      	uxtb	r6, r6
 8004ff8:	4283      	cmp	r3, r0
 8004ffa:	4637      	mov	r7, r6
 8004ffc:	dc05      	bgt.n	800500a <__swbuf_r+0x4e>
 8004ffe:	4621      	mov	r1, r4
 8005000:	4628      	mov	r0, r5
 8005002:	f7ff ffb3 	bl	8004f6c <_fflush_r>
 8005006:	2800      	cmp	r0, #0
 8005008:	d1ed      	bne.n	8004fe6 <__swbuf_r+0x2a>
 800500a:	68a3      	ldr	r3, [r4, #8]
 800500c:	3b01      	subs	r3, #1
 800500e:	60a3      	str	r3, [r4, #8]
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	6022      	str	r2, [r4, #0]
 8005016:	701e      	strb	r6, [r3, #0]
 8005018:	6962      	ldr	r2, [r4, #20]
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	429a      	cmp	r2, r3
 800501e:	d004      	beq.n	800502a <__swbuf_r+0x6e>
 8005020:	89a3      	ldrh	r3, [r4, #12]
 8005022:	07db      	lsls	r3, r3, #31
 8005024:	d5e1      	bpl.n	8004fea <__swbuf_r+0x2e>
 8005026:	2e0a      	cmp	r6, #10
 8005028:	d1df      	bne.n	8004fea <__swbuf_r+0x2e>
 800502a:	4621      	mov	r1, r4
 800502c:	4628      	mov	r0, r5
 800502e:	f7ff ff9d 	bl	8004f6c <_fflush_r>
 8005032:	2800      	cmp	r0, #0
 8005034:	d0d9      	beq.n	8004fea <__swbuf_r+0x2e>
 8005036:	e7d6      	b.n	8004fe6 <__swbuf_r+0x2a>

08005038 <__swsetup_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4b29      	ldr	r3, [pc, #164]	@ (80050e0 <__swsetup_r+0xa8>)
 800503c:	4605      	mov	r5, r0
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	460c      	mov	r4, r1
 8005042:	b118      	cbz	r0, 800504c <__swsetup_r+0x14>
 8005044:	6a03      	ldr	r3, [r0, #32]
 8005046:	b90b      	cbnz	r3, 800504c <__swsetup_r+0x14>
 8005048:	f7ff f8c4 	bl	80041d4 <__sinit>
 800504c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005050:	0719      	lsls	r1, r3, #28
 8005052:	d422      	bmi.n	800509a <__swsetup_r+0x62>
 8005054:	06da      	lsls	r2, r3, #27
 8005056:	d407      	bmi.n	8005068 <__swsetup_r+0x30>
 8005058:	2209      	movs	r2, #9
 800505a:	602a      	str	r2, [r5, #0]
 800505c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005060:	81a3      	strh	r3, [r4, #12]
 8005062:	f04f 30ff 	mov.w	r0, #4294967295
 8005066:	e033      	b.n	80050d0 <__swsetup_r+0x98>
 8005068:	0758      	lsls	r0, r3, #29
 800506a:	d512      	bpl.n	8005092 <__swsetup_r+0x5a>
 800506c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800506e:	b141      	cbz	r1, 8005082 <__swsetup_r+0x4a>
 8005070:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005074:	4299      	cmp	r1, r3
 8005076:	d002      	beq.n	800507e <__swsetup_r+0x46>
 8005078:	4628      	mov	r0, r5
 800507a:	f7ff f9d3 	bl	8004424 <_free_r>
 800507e:	2300      	movs	r3, #0
 8005080:	6363      	str	r3, [r4, #52]	@ 0x34
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005088:	81a3      	strh	r3, [r4, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	6063      	str	r3, [r4, #4]
 800508e:	6923      	ldr	r3, [r4, #16]
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	89a3      	ldrh	r3, [r4, #12]
 8005094:	f043 0308 	orr.w	r3, r3, #8
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	b94b      	cbnz	r3, 80050b2 <__swsetup_r+0x7a>
 800509e:	89a3      	ldrh	r3, [r4, #12]
 80050a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a8:	d003      	beq.n	80050b2 <__swsetup_r+0x7a>
 80050aa:	4621      	mov	r1, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 f8a5 	bl	80051fc <__smakebuf_r>
 80050b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b6:	f013 0201 	ands.w	r2, r3, #1
 80050ba:	d00a      	beq.n	80050d2 <__swsetup_r+0x9a>
 80050bc:	2200      	movs	r2, #0
 80050be:	60a2      	str	r2, [r4, #8]
 80050c0:	6962      	ldr	r2, [r4, #20]
 80050c2:	4252      	negs	r2, r2
 80050c4:	61a2      	str	r2, [r4, #24]
 80050c6:	6922      	ldr	r2, [r4, #16]
 80050c8:	b942      	cbnz	r2, 80050dc <__swsetup_r+0xa4>
 80050ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80050ce:	d1c5      	bne.n	800505c <__swsetup_r+0x24>
 80050d0:	bd38      	pop	{r3, r4, r5, pc}
 80050d2:	0799      	lsls	r1, r3, #30
 80050d4:	bf58      	it	pl
 80050d6:	6962      	ldrpl	r2, [r4, #20]
 80050d8:	60a2      	str	r2, [r4, #8]
 80050da:	e7f4      	b.n	80050c6 <__swsetup_r+0x8e>
 80050dc:	2000      	movs	r0, #0
 80050de:	e7f7      	b.n	80050d0 <__swsetup_r+0x98>
 80050e0:	20000018 	.word	0x20000018

080050e4 <memmove>:
 80050e4:	4288      	cmp	r0, r1
 80050e6:	b510      	push	{r4, lr}
 80050e8:	eb01 0402 	add.w	r4, r1, r2
 80050ec:	d902      	bls.n	80050f4 <memmove+0x10>
 80050ee:	4284      	cmp	r4, r0
 80050f0:	4623      	mov	r3, r4
 80050f2:	d807      	bhi.n	8005104 <memmove+0x20>
 80050f4:	1e43      	subs	r3, r0, #1
 80050f6:	42a1      	cmp	r1, r4
 80050f8:	d008      	beq.n	800510c <memmove+0x28>
 80050fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005102:	e7f8      	b.n	80050f6 <memmove+0x12>
 8005104:	4402      	add	r2, r0
 8005106:	4601      	mov	r1, r0
 8005108:	428a      	cmp	r2, r1
 800510a:	d100      	bne.n	800510e <memmove+0x2a>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005116:	e7f7      	b.n	8005108 <memmove+0x24>

08005118 <_sbrk_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	@ (8005134 <_sbrk_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fc f930 	bl	8001388 <_sbrk>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_sbrk_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_sbrk_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	20000394 	.word	0x20000394

08005138 <memcpy>:
 8005138:	440a      	add	r2, r1
 800513a:	4291      	cmp	r1, r2
 800513c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005140:	d100      	bne.n	8005144 <memcpy+0xc>
 8005142:	4770      	bx	lr
 8005144:	b510      	push	{r4, lr}
 8005146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514e:	4291      	cmp	r1, r2
 8005150:	d1f9      	bne.n	8005146 <memcpy+0xe>
 8005152:	bd10      	pop	{r4, pc}

08005154 <_realloc_r>:
 8005154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005158:	4680      	mov	r8, r0
 800515a:	4615      	mov	r5, r2
 800515c:	460c      	mov	r4, r1
 800515e:	b921      	cbnz	r1, 800516a <_realloc_r+0x16>
 8005160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005164:	4611      	mov	r1, r2
 8005166:	f7ff b9c9 	b.w	80044fc <_malloc_r>
 800516a:	b92a      	cbnz	r2, 8005178 <_realloc_r+0x24>
 800516c:	f7ff f95a 	bl	8004424 <_free_r>
 8005170:	2400      	movs	r4, #0
 8005172:	4620      	mov	r0, r4
 8005174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005178:	f000 f89e 	bl	80052b8 <_malloc_usable_size_r>
 800517c:	4285      	cmp	r5, r0
 800517e:	4606      	mov	r6, r0
 8005180:	d802      	bhi.n	8005188 <_realloc_r+0x34>
 8005182:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005186:	d8f4      	bhi.n	8005172 <_realloc_r+0x1e>
 8005188:	4629      	mov	r1, r5
 800518a:	4640      	mov	r0, r8
 800518c:	f7ff f9b6 	bl	80044fc <_malloc_r>
 8005190:	4607      	mov	r7, r0
 8005192:	2800      	cmp	r0, #0
 8005194:	d0ec      	beq.n	8005170 <_realloc_r+0x1c>
 8005196:	42b5      	cmp	r5, r6
 8005198:	462a      	mov	r2, r5
 800519a:	4621      	mov	r1, r4
 800519c:	bf28      	it	cs
 800519e:	4632      	movcs	r2, r6
 80051a0:	f7ff ffca 	bl	8005138 <memcpy>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff f93c 	bl	8004424 <_free_r>
 80051ac:	463c      	mov	r4, r7
 80051ae:	e7e0      	b.n	8005172 <_realloc_r+0x1e>

080051b0 <__swhatbuf_r>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	460c      	mov	r4, r1
 80051b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b8:	2900      	cmp	r1, #0
 80051ba:	b096      	sub	sp, #88	@ 0x58
 80051bc:	4615      	mov	r5, r2
 80051be:	461e      	mov	r6, r3
 80051c0:	da0d      	bge.n	80051de <__swhatbuf_r+0x2e>
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80051c8:	f04f 0100 	mov.w	r1, #0
 80051cc:	bf14      	ite	ne
 80051ce:	2340      	movne	r3, #64	@ 0x40
 80051d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80051d4:	2000      	movs	r0, #0
 80051d6:	6031      	str	r1, [r6, #0]
 80051d8:	602b      	str	r3, [r5, #0]
 80051da:	b016      	add	sp, #88	@ 0x58
 80051dc:	bd70      	pop	{r4, r5, r6, pc}
 80051de:	466a      	mov	r2, sp
 80051e0:	f000 f848 	bl	8005274 <_fstat_r>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	dbec      	blt.n	80051c2 <__swhatbuf_r+0x12>
 80051e8:	9901      	ldr	r1, [sp, #4]
 80051ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80051ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80051f2:	4259      	negs	r1, r3
 80051f4:	4159      	adcs	r1, r3
 80051f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80051fa:	e7eb      	b.n	80051d4 <__swhatbuf_r+0x24>

080051fc <__smakebuf_r>:
 80051fc:	898b      	ldrh	r3, [r1, #12]
 80051fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005200:	079d      	lsls	r5, r3, #30
 8005202:	4606      	mov	r6, r0
 8005204:	460c      	mov	r4, r1
 8005206:	d507      	bpl.n	8005218 <__smakebuf_r+0x1c>
 8005208:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	6123      	str	r3, [r4, #16]
 8005210:	2301      	movs	r3, #1
 8005212:	6163      	str	r3, [r4, #20]
 8005214:	b003      	add	sp, #12
 8005216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005218:	ab01      	add	r3, sp, #4
 800521a:	466a      	mov	r2, sp
 800521c:	f7ff ffc8 	bl	80051b0 <__swhatbuf_r>
 8005220:	9f00      	ldr	r7, [sp, #0]
 8005222:	4605      	mov	r5, r0
 8005224:	4639      	mov	r1, r7
 8005226:	4630      	mov	r0, r6
 8005228:	f7ff f968 	bl	80044fc <_malloc_r>
 800522c:	b948      	cbnz	r0, 8005242 <__smakebuf_r+0x46>
 800522e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005232:	059a      	lsls	r2, r3, #22
 8005234:	d4ee      	bmi.n	8005214 <__smakebuf_r+0x18>
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	f043 0302 	orr.w	r3, r3, #2
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	e7e2      	b.n	8005208 <__smakebuf_r+0xc>
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	6020      	str	r0, [r4, #0]
 8005246:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800524a:	81a3      	strh	r3, [r4, #12]
 800524c:	9b01      	ldr	r3, [sp, #4]
 800524e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005252:	b15b      	cbz	r3, 800526c <__smakebuf_r+0x70>
 8005254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005258:	4630      	mov	r0, r6
 800525a:	f000 f81d 	bl	8005298 <_isatty_r>
 800525e:	b128      	cbz	r0, 800526c <__smakebuf_r+0x70>
 8005260:	89a3      	ldrh	r3, [r4, #12]
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	f043 0301 	orr.w	r3, r3, #1
 800526a:	81a3      	strh	r3, [r4, #12]
 800526c:	89a3      	ldrh	r3, [r4, #12]
 800526e:	431d      	orrs	r5, r3
 8005270:	81a5      	strh	r5, [r4, #12]
 8005272:	e7cf      	b.n	8005214 <__smakebuf_r+0x18>

08005274 <_fstat_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	@ (8005294 <_fstat_r+0x20>)
 8005278:	2300      	movs	r3, #0
 800527a:	4604      	mov	r4, r0
 800527c:	4608      	mov	r0, r1
 800527e:	4611      	mov	r1, r2
 8005280:	602b      	str	r3, [r5, #0]
 8005282:	f7fc f858 	bl	8001336 <_fstat>
 8005286:	1c43      	adds	r3, r0, #1
 8005288:	d102      	bne.n	8005290 <_fstat_r+0x1c>
 800528a:	682b      	ldr	r3, [r5, #0]
 800528c:	b103      	cbz	r3, 8005290 <_fstat_r+0x1c>
 800528e:	6023      	str	r3, [r4, #0]
 8005290:	bd38      	pop	{r3, r4, r5, pc}
 8005292:	bf00      	nop
 8005294:	20000394 	.word	0x20000394

08005298 <_isatty_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d06      	ldr	r5, [pc, #24]	@ (80052b4 <_isatty_r+0x1c>)
 800529c:	2300      	movs	r3, #0
 800529e:	4604      	mov	r4, r0
 80052a0:	4608      	mov	r0, r1
 80052a2:	602b      	str	r3, [r5, #0]
 80052a4:	f7fc f857 	bl	8001356 <_isatty>
 80052a8:	1c43      	adds	r3, r0, #1
 80052aa:	d102      	bne.n	80052b2 <_isatty_r+0x1a>
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	b103      	cbz	r3, 80052b2 <_isatty_r+0x1a>
 80052b0:	6023      	str	r3, [r4, #0]
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	20000394 	.word	0x20000394

080052b8 <_malloc_usable_size_r>:
 80052b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052bc:	1f18      	subs	r0, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	bfbc      	itt	lt
 80052c2:	580b      	ldrlt	r3, [r1, r0]
 80052c4:	18c0      	addlt	r0, r0, r3
 80052c6:	4770      	bx	lr

080052c8 <_init>:
 80052c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ca:	bf00      	nop
 80052cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ce:	bc08      	pop	{r3}
 80052d0:	469e      	mov	lr, r3
 80052d2:	4770      	bx	lr

080052d4 <_fini>:
 80052d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052d6:	bf00      	nop
 80052d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052da:	bc08      	pop	{r3}
 80052dc:	469e      	mov	lr, r3
 80052de:	4770      	bx	lr
