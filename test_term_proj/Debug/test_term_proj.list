
test_term_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a90  08005a90  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a90  08005a90  00006a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a98  08005a98  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a98  08005a98  00006a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005aa0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  08005aac  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08005aac  0000726c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f8d  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002475  00000000  00000000  0001afc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  0001d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e73  00000000  00000000  0001e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024d1  00000000  00000000  0001f513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014808  00000000  00000000  000219e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f77  00000000  00000000  000361ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c163  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f6c  00000000  00000000  0013c1a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00141114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a30 	.word	0x08005a30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a30 	.word	0x08005a30

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fdcf 	bl	800105e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f812 	bl	80004e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c4:	f000 f861 	bl	800058a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 faf2 	bl	8000ab0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004cc:	f000 f888 	bl	80005e0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 fabe 	bl	8000a50 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80004d4:	f000 f8fc 	bl	80006d0 <MX_ADC2_Init>
  MX_TIM1_Init();
 80004d8:	f000 f95e 	bl	8000798 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004dc:	f000 f9e6 	bl	80008ac <MX_TIM2_Init>
  MX_TIM4_Init();
 80004e0:	f000 fa60 	bl	80009a4 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <main+0x2c>

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b096      	sub	sp, #88	@ 0x58
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	f107 0314 	add.w	r3, r7, #20
 80004f2:	2244      	movs	r2, #68	@ 0x44
 80004f4:	2100      	movs	r1, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	f005 fa6d 	bl	80059d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fc:	463b      	mov	r3, r7
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800050e:	f002 f889 	bl	8002624 <HAL_PWREx_ControlVoltageScaling>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000518:	f000 fb24 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051c:	2302      	movs	r3, #2
 800051e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000520:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000524:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000526:	2310      	movs	r3, #16
 8000528:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052e:	2302      	movs	r3, #2
 8000530:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000536:	230a      	movs	r3, #10
 8000538:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053a:	2307      	movs	r3, #7
 800053c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f8c0 	bl	80026d0 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000556:	f000 fb05 	bl	8000b64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	2104      	movs	r1, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fc88 	bl	8002e88 <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800057e:	f000 faf1 	bl	8000b64 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3758      	adds	r7, #88	@ 0x58
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b0a2      	sub	sp, #136	@ 0x88
 800058e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2288      	movs	r2, #136	@ 0x88
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fa1d 	bl	80059d6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800059c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 fe81 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80005d4:	f000 fac6 	bl	8000b64 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3788      	adds	r7, #136	@ 0x88
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b30      	ldr	r3, [pc, #192]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000604:	4a30      	ldr	r2, [pc, #192]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000608:	4b2e      	ldr	r3, [pc, #184]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 800060a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000616:	4b2b      	ldr	r3, [pc, #172]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061c:	4b29      	ldr	r3, [pc, #164]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b28      	ldr	r3, [pc, #160]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000624:	2204      	movs	r2, #4
 8000626:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b26      	ldr	r3, [pc, #152]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000634:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000642:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000644:	2200      	movs	r2, #0
 8000646:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 800064a:	2200      	movs	r2, #0
 800064c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065c:	4b19      	ldr	r3, [pc, #100]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	4817      	ldr	r0, [pc, #92]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000666:	f000 fefb 	bl	8001460 <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000670:	f000 fa78 	bl	8000b64 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	4811      	ldr	r0, [pc, #68]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000680:	f001 fc56 	bl	8001f30 <HAL_ADCEx_MultiModeConfigChannel>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068a:	f000 fa6b 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068e:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_ADC1_Init+0xec>)
 8000690:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000692:	2306      	movs	r3, #6
 8000694:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069a:	237f      	movs	r3, #127	@ 0x7f
 800069c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069e:	2304      	movs	r3, #4
 80006a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 80006ac:	f001 f828 	bl	8001700 <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80006b6:	f000 fa55 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3728      	adds	r7, #40	@ 0x28
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000028 	.word	0x20000028
 80006c8:	50040000 	.word	0x50040000
 80006cc:	04300002 	.word	0x04300002

080006d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b086      	sub	sp, #24
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
 80006e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e6:	4b29      	ldr	r3, [pc, #164]	@ (800078c <MX_ADC2_Init+0xbc>)
 80006e8:	4a29      	ldr	r2, [pc, #164]	@ (8000790 <MX_ADC2_Init+0xc0>)
 80006ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_ADC2_Init+0xbc>)
 80006ee:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80006f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006f4:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_ADC2_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006fa:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_ADC2_Init+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000700:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000706:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000708:	2204      	movs	r2, #4
 800070a:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ADC2_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000712:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000714:	2200      	movs	r2, #0
 8000716:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000718:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_ADC2_Init+0xbc>)
 800071a:	2201      	movs	r2, #1
 800071c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800071e:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000720:	2200      	movs	r2, #0
 8000722:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000728:	2200      	movs	r2, #0
 800072a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072c:	4b17      	ldr	r3, [pc, #92]	@ (800078c <MX_ADC2_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073a:	4b14      	ldr	r3, [pc, #80]	@ (800078c <MX_ADC2_Init+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000740:	4b12      	ldr	r3, [pc, #72]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000748:	4810      	ldr	r0, [pc, #64]	@ (800078c <MX_ADC2_Init+0xbc>)
 800074a:	f000 fe89 	bl	8001460 <HAL_ADC_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000754:	f000 fa06 	bl	8000b64 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_ADC2_Init+0xc4>)
 800075a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800075c:	2306      	movs	r3, #6
 800075e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000764:	237f      	movs	r3, #127	@ 0x7f
 8000766:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000768:	2304      	movs	r3, #4
 800076a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_ADC2_Init+0xbc>)
 8000776:	f000 ffc3 	bl	8001700 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000780:	f000 f9f0 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3718      	adds	r7, #24
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000008c 	.word	0x2000008c
 8000790:	50040100 	.word	0x50040100
 8000794:	08600004 	.word	0x08600004

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b090      	sub	sp, #64	@ 0x40
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2224      	movs	r2, #36	@ 0x24
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 f915 	bl	80059d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 0310 	add.w	r3, r7, #16
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c4:	4b37      	ldr	r3, [pc, #220]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007c6:	4a38      	ldr	r2, [pc, #224]	@ (80008a8 <MX_TIM1_Init+0x110>)
 80007c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ca:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007d6:	4b33      	ldr	r3, [pc, #204]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007de:	4b31      	ldr	r3, [pc, #196]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e4:	4b2f      	ldr	r3, [pc, #188]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80007f0:	482c      	ldr	r0, [pc, #176]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 80007f2:	f003 fa80 	bl	8003cf6 <HAL_TIM_IC_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80007fc:	f000 f9b2 	bl	8000b64 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000800:	2303      	movs	r3, #3
 8000802:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000804:	2300      	movs	r3, #0
 8000806:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000808:	2301      	movs	r3, #1
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000818:	2301      	movs	r3, #1
 800081a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 800082c:	f003 faba 	bl	8003da4 <HAL_TIM_Encoder_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000836:	f000 f995 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000846:	f107 0310 	add.w	r3, r7, #16
 800084a:	4619      	mov	r1, r3
 800084c:	4815      	ldr	r0, [pc, #84]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 800084e:	f004 fb01 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000858:	f000 f984 	bl	8000b64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800085c:	2300      	movs	r3, #0
 800085e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000860:	2301      	movs	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	2208      	movs	r2, #8
 8000870:	4619      	mov	r1, r3
 8000872:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 8000874:	f003 fc3e 	bl	80040f4 <HAL_TIM_IC_ConfigChannel>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 800087e:	f000 f971 	bl	8000b64 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000882:	2302      	movs	r3, #2
 8000884:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000886:	463b      	mov	r3, r7
 8000888:	220c      	movs	r2, #12
 800088a:	4619      	mov	r1, r3
 800088c:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_TIM1_Init+0x10c>)
 800088e:	f003 fc31 	bl	80040f4 <HAL_TIM_IC_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8000898:	f000 f964 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800089c:	bf00      	nop
 800089e:	3740      	adds	r7, #64	@ 0x40
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200000f0 	.word	0x200000f0
 80008a8:	40012c00 	.word	0x40012c00

080008ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008d0:	4b32      	ldr	r3, [pc, #200]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008d8:	4b30      	ldr	r3, [pc, #192]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008de:	4b2f      	ldr	r3, [pc, #188]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 80008e4:	4b2d      	ldr	r3, [pc, #180]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008e6:	4a2e      	ldr	r2, [pc, #184]	@ (80009a0 <MX_TIM2_Init+0xf4>)
 80008e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b2c      	ldr	r3, [pc, #176]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008f6:	4829      	ldr	r0, [pc, #164]	@ (800099c <MX_TIM2_Init+0xf0>)
 80008f8:	f003 f9a6 	bl	8003c48 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000902:	f000 f92f 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4821      	ldr	r0, [pc, #132]	@ (800099c <MX_TIM2_Init+0xf0>)
 8000916:	f004 fa9d 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000920:	f000 f920 	bl	8000b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	@ 0x60
 8000926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	4818      	ldr	r0, [pc, #96]	@ (800099c <MX_TIM2_Init+0xf0>)
 800093c:	f003 fc76 	bl	800422c <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000946:	f000 f90d 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800094a:	463b      	mov	r3, r7
 800094c:	2204      	movs	r2, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4812      	ldr	r0, [pc, #72]	@ (800099c <MX_TIM2_Init+0xf0>)
 8000952:	f003 fc6b 	bl	800422c <HAL_TIM_PWM_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800095c:	f000 f902 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2208      	movs	r2, #8
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	@ (800099c <MX_TIM2_Init+0xf0>)
 8000968:	f003 fc60 	bl	800422c <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000972:	f000 f8f7 	bl	8000b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000976:	463b      	mov	r3, r7
 8000978:	220c      	movs	r2, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <MX_TIM2_Init+0xf0>)
 800097e:	f003 fc55 	bl	800422c <HAL_TIM_PWM_ConfigChannel>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000988:	f000 f8ec 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <MX_TIM2_Init+0xf0>)
 800098e:	f000 fa41 	bl	8000e14 <HAL_TIM_MspPostInit>

}
 8000992:	bf00      	nop
 8000994:	3728      	adds	r7, #40	@ 0x28
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	2000013c 	.word	0x2000013c
 80009a0:	000c34ff 	.word	0x000c34ff

080009a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009aa:	f107 030c 	add.w	r3, r7, #12
 80009ae:	2224      	movs	r2, #36	@ 0x24
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f005 f80f 	bl	80059d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 80009c4:	4a21      	ldr	r2, [pc, #132]	@ (8000a4c <MX_TIM4_Init+0xa8>)
 80009c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 80009d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80009e8:	2303      	movs	r3, #3
 80009ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009ec:	2300      	movs	r3, #0
 80009ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f0:	2301      	movs	r3, #1
 80009f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a00:	2301      	movs	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 8000a14:	f003 f9c6 	bl	8003da4 <HAL_TIM_Encoder_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a1e:	f000 f8a1 	bl	8000b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a2a:	463b      	mov	r3, r7
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <MX_TIM4_Init+0xa4>)
 8000a30:	f004 fa10 	bl	8004e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a3a:	f000 f893 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	@ 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000188 	.word	0x20000188
 8000a4c:	40000800 	.word	0x40000800

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_USART2_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a94:	f004 fa84 	bl	8004fa0 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f861 	bl	8000b64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001d4 	.word	0x200001d4
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab6:	4b15      	ldr	r3, [pc, #84]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aba:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac2:	4b12      	ldr	r3, [pc, #72]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ada:	4b0c      	ldr	r3, [pc, #48]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aea:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000aec:	f043 0302 	orr.w	r3, r3, #2
 8000af0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_GPIO_Init+0x5c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	      //ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     // radio_pulse = ch1_val - ch1_p;
  //}
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	7f1b      	ldrb	r3, [r3, #28]
 8000b1c:	2b08      	cmp	r3, #8
 8000b1e:	d117      	bne.n	8000b50 <HAL_TIM_IC_CaptureCallback+0x40>
	      //store the previous value and read the captured value from the input capture register
	  	  ch2_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000b20:	2108      	movs	r1, #8
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f003 fc96 	bl	8004454 <HAL_TIM_ReadCapturedValue>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	b29a      	uxth	r2, r3
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000b2e:	801a      	strh	r2, [r3, #0]
	      ch2_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8000b30:	210c      	movs	r1, #12
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f003 fc8e 	bl	8004454 <HAL_TIM_ReadCapturedValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000b3e:	801a      	strh	r2, [r3, #0]

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     radio_pulse = ch2_val - ch2_p;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000b42:	881a      	ldrh	r2, [r3, #0]
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	4b04      	ldr	r3, [pc, #16]	@ (8000b60 <HAL_TIM_IC_CaptureCallback+0x50>)
 8000b4e:	801a      	strh	r2, [r3, #0]
  }

}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000025e 	.word	0x2000025e
 8000b5c:	2000025c 	.word	0x2000025c
 8000b60:	20000260 	.word	0x20000260

08000b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <Error_Handler+0x8>

08000b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b98:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_MspInit+0x44>)
 8000b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40021000 	.word	0x40021000

08000bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08c      	sub	sp, #48	@ 0x30
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a33      	ldr	r2, [pc, #204]	@ (8000ca4 <HAL_ADC_MspInit+0xec>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12d      	bne.n	8000c36 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000bda:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	4a31      	ldr	r2, [pc, #196]	@ (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000be2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000be4:	4b30      	ldr	r3, [pc, #192]	@ (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d10b      	bne.n	8000c04 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000bec:	4b2f      	ldr	r3, [pc, #188]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000bee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000bf2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000bf6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bfc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c04:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c08:	4a28      	ldr	r2, [pc, #160]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c0a:	f043 0304 	orr.w	r3, r3, #4
 8000c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c10:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MYO1_Pin;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c20:	230b      	movs	r3, #11
 8000c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MYO1_GPIO_Port, &GPIO_InitStruct);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4820      	ldr	r0, [pc, #128]	@ (8000cb0 <HAL_ADC_MspInit+0xf8>)
 8000c30:	f001 fb40 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000c34:	e031      	b.n	8000c9a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000cb4 <HAL_ADC_MspInit+0xfc>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d12c      	bne.n	8000c9a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c40:	4b19      	ldr	r3, [pc, #100]	@ (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	4a18      	ldr	r2, [pc, #96]	@ (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000c48:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ca8 <HAL_ADC_MspInit+0xf0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d10b      	bne.n	8000c6a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c52:	4b16      	ldr	r3, [pc, #88]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a15      	ldr	r2, [pc, #84]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <HAL_ADC_MspInit+0xf4>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MYO2_Pin;
 8000c82:	2302      	movs	r3, #2
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c86:	230b      	movs	r3, #11
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MYO2_GPIO_Port, &GPIO_InitStruct);
 8000c8e:	f107 031c 	add.w	r3, r7, #28
 8000c92:	4619      	mov	r1, r3
 8000c94:	4806      	ldr	r0, [pc, #24]	@ (8000cb0 <HAL_ADC_MspInit+0xf8>)
 8000c96:	f001 fb0d 	bl	80022b4 <HAL_GPIO_Init>
}
 8000c9a:	bf00      	nop
 8000c9c:	3730      	adds	r7, #48	@ 0x30
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	50040000 	.word	0x50040000
 8000ca8:	20000264 	.word	0x20000264
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	50040100 	.word	0x50040100

08000cb8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000d48 <HAL_TIM_IC_MspInit+0x90>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d131      	bne.n	8000d3e <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <HAL_TIM_IC_MspInit+0x94>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a1b      	ldr	r2, [pc, #108]	@ (8000d4c <HAL_TIM_IC_MspInit+0x94>)
 8000ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <HAL_TIM_IC_MspInit+0x94>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b16      	ldr	r3, [pc, #88]	@ (8000d4c <HAL_TIM_IC_MspInit+0x94>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	4a15      	ldr	r2, [pc, #84]	@ (8000d4c <HAL_TIM_IC_MspInit+0x94>)
 8000cf8:	f043 0301 	orr.w	r3, r3, #1
 8000cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <HAL_TIM_IC_MspInit+0x94>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAND_ENC_B_Pin|HAND_ENC_A_Pin|RADIO_Pin;
 8000d0a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000d0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d2a:	f001 fac3 	bl	80022b4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201b      	movs	r0, #27
 8000d34:	f001 fa87 	bl	8002246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d38:	201b      	movs	r0, #27
 8000d3a:	f001 faa0 	bl	800227e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d60:	d10b      	bne.n	8000d7a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x38>)
 8000d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d66:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x38>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_TIM_PWM_MspInit+0x38>)
 8000d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08a      	sub	sp, #40	@ 0x28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a17      	ldr	r2, [pc, #92]	@ (8000e08 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d127      	bne.n	8000dfe <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db2:	4a16      	ldr	r2, [pc, #88]	@ (8000e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbe:	f003 0304 	and.w	r3, r3, #4
 8000dc2:	613b      	str	r3, [r7, #16]
 8000dc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dca:	4a10      	ldr	r2, [pc, #64]	@ (8000e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e0c <HAL_TIM_Encoder_MspInit+0x80>)
 8000dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_ENC_A_Pin|MOTOR_ENC_B_Pin;
 8000dde:	23c0      	movs	r3, #192	@ 0xc0
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dee:	2302      	movs	r3, #2
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <HAL_TIM_Encoder_MspInit+0x84>)
 8000dfa:	f001 fa5b 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dfe:	bf00      	nop
 8000e00:	3728      	adds	r7, #40	@ 0x28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40000800 	.word	0x40000800
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400

08000e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08a      	sub	sp, #40	@ 0x28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e34:	d139      	bne.n	8000eaa <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e36:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e42:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	4b19      	ldr	r3, [pc, #100]	@ (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e52:	4a18      	ldr	r2, [pc, #96]	@ (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5a:	4b16      	ldr	r3, [pc, #88]	@ (8000eb4 <HAL_TIM_MspPostInit+0xa0>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = HPWMB_Pin|HPWMA_Pin;
 8000e66:	2322      	movs	r3, #34	@ 0x22
 8000e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e76:	2301      	movs	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7a:	f107 0314 	add.w	r3, r7, #20
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e84:	f001 fa16 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPINPWMA_Pin|SPINPWMB_Pin;
 8000e88:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9e:	f107 0314 	add.w	r3, r7, #20
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4804      	ldr	r0, [pc, #16]	@ (8000eb8 <HAL_TIM_MspPostInit+0xa4>)
 8000ea6:	f001 fa05 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	@ 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	48000400 	.word	0x48000400

08000ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0ac      	sub	sp, #176	@ 0xb0
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	2288      	movs	r2, #136	@ 0x88
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fd7a 	bl	80059d6 <memset>
  if(huart->Instance==USART2)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a21      	ldr	r2, [pc, #132]	@ (8000f6c <HAL_UART_MspInit+0xb0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d13b      	bne.n	8000f64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eec:	2302      	movs	r3, #2
 8000eee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f002 f9e9 	bl	80032d0 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f04:	f7ff fe2e 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f08:	4b19      	ldr	r3, [pc, #100]	@ (8000f70 <HAL_UART_MspInit+0xb4>)
 8000f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f0c:	4a18      	ldr	r2, [pc, #96]	@ (8000f70 <HAL_UART_MspInit+0xb4>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f14:	4b16      	ldr	r3, [pc, #88]	@ (8000f70 <HAL_UART_MspInit+0xb4>)
 8000f16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <HAL_UART_MspInit+0xb4>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <HAL_UART_MspInit+0xb4>)
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2c:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <HAL_UART_MspInit+0xb4>)
 8000f2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f38:	230c      	movs	r3, #12
 8000f3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f50:	2307      	movs	r3, #7
 8000f52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f60:	f001 f9a8 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	37b0      	adds	r7, #176	@ 0xb0
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40004400 	.word	0x40004400
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <NMI_Handler+0x4>

08000f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	bf00      	nop
 8000f9a:	e7fd      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 f89d 	bl	8001108 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <TIM1_CC_IRQHandler+0x10>)
 8000fda:	f002 ff89 	bl	8003ef0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000f0 	.word	0x200000f0

08000fe8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001044 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001010:	f7ff ffea 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001014:	480c      	ldr	r0, [pc, #48]	@ (8001048 <LoopForever+0x6>)
  ldr r1, =_edata
 8001016:	490d      	ldr	r1, [pc, #52]	@ (800104c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001018:	4a0d      	ldr	r2, [pc, #52]	@ (8001050 <LoopForever+0xe>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800101c:	e002      	b.n	8001024 <LoopCopyDataInit>

0800101e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800101e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001022:	3304      	adds	r3, #4

08001024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001028:	d3f9      	bcc.n	800101e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102a:	4a0a      	ldr	r2, [pc, #40]	@ (8001054 <LoopForever+0x12>)
  ldr r4, =_ebss
 800102c:	4c0a      	ldr	r4, [pc, #40]	@ (8001058 <LoopForever+0x16>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001030:	e001      	b.n	8001036 <LoopFillZerobss>

08001032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001034:	3204      	adds	r2, #4

08001036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001038:	d3fb      	bcc.n	8001032 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800103a:	f004 fcd5 	bl	80059e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800103e:	f7ff fa3b 	bl	80004b8 <main>

08001042 <LoopForever>:

LoopForever:
    b LoopForever
 8001042:	e7fe      	b.n	8001042 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001044:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800104c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001050:	08005aa0 	.word	0x08005aa0
  ldr r2, =_sbss
 8001054:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001058:	2000026c 	.word	0x2000026c

0800105c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC1_2_IRQHandler>

0800105e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f001 f8e1 	bl	8002230 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800106e:	200f      	movs	r0, #15
 8001070:	f000 f80e 	bl	8001090 <HAL_InitTick>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	71fb      	strb	r3, [r7, #7]
 800107e:	e001      	b.n	8001084 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001080:	f7ff fd76 	bl	8000b70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001084:	79fb      	ldrb	r3, [r7, #7]
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001098:	2300      	movs	r3, #0
 800109a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800109c:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <HAL_InitTick+0x6c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d023      	beq.n	80010ec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010a4:	4b16      	ldr	r3, [pc, #88]	@ (8001100 <HAL_InitTick+0x70>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <HAL_InitTick+0x6c>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 f8ed 	bl	800229a <HAL_SYSTICK_Config>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10f      	bne.n	80010e6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d809      	bhi.n	80010e0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f001 f8b7 	bl	8002246 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <HAL_InitTick+0x74>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e007      	b.n	80010f0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
 80010e4:	e004      	b.n	80010f0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	73fb      	strb	r3, [r7, #15]
 80010ea:	e001      	b.n	80010f0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000008 	.word	0x20000008
 8001100:	20000000 	.word	0x20000000
 8001104:	20000004 	.word	0x20000004

08001108 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <HAL_IncTick+0x20>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <HAL_IncTick+0x24>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4413      	add	r3, r2
 8001118:	4a04      	ldr	r2, [pc, #16]	@ (800112c <HAL_IncTick+0x24>)
 800111a:	6013      	str	r3, [r2, #0]
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000008 	.word	0x20000008
 800112c:	20000268 	.word	0x20000268

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b03      	ldr	r3, [pc, #12]	@ (8001144 <HAL_GetTick+0x14>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	4618      	mov	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	20000268 	.word	0x20000268

08001148 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	609a      	str	r2, [r3, #8]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	609a      	str	r2, [r3, #8]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
 80011bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3360      	adds	r3, #96	@ 0x60
 80011c2:	461a      	mov	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4413      	add	r3, r2
 80011ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <LL_ADC_SetOffset+0x44>)
 80011d2:	4013      	ands	r3, r2
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	4313      	orrs	r3, r2
 80011e0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80011e8:	bf00      	nop
 80011ea:	371c      	adds	r7, #28
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	03fff000 	.word	0x03fff000

080011f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3360      	adds	r3, #96	@ 0x60
 8001206:	461a      	mov	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001218:	4618      	mov	r0, r3
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3360      	adds	r3, #96	@ 0x60
 8001234:	461a      	mov	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	431a      	orrs	r2, r3
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800124e:	bf00      	nop
 8001250:	371c      	adds	r7, #28
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800125a:	b480      	push	{r7}
 800125c:	b087      	sub	sp, #28
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3330      	adds	r3, #48	@ 0x30
 800126a:	461a      	mov	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	0a1b      	lsrs	r3, r3, #8
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	4413      	add	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	211f      	movs	r1, #31
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	401a      	ands	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0e9b      	lsrs	r3, r3, #26
 8001292:	f003 011f 	and.w	r1, r3, #31
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	431a      	orrs	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b087      	sub	sp, #28
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3314      	adds	r3, #20
 80012c2:	461a      	mov	r2, r3
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	0e5b      	lsrs	r3, r3, #25
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	4413      	add	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	0d1b      	lsrs	r3, r3, #20
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	2107      	movs	r1, #7
 80012e0:	fa01 f303 	lsl.w	r3, r1, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	401a      	ands	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	0d1b      	lsrs	r3, r3, #20
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	6879      	ldr	r1, [r7, #4]
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	431a      	orrs	r2, r3
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80012fc:	bf00      	nop
 80012fe:	371c      	adds	r7, #28
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001320:	43db      	mvns	r3, r3
 8001322:	401a      	ands	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f003 0318 	and.w	r3, r3, #24
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <LL_ADC_SetChannelSingleDiff+0x44>)
 800132c:	40d9      	lsrs	r1, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	400b      	ands	r3, r1
 8001332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001336:	431a      	orrs	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	0007ffff 	.word	0x0007ffff

08001350 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001360:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6093      	str	r3, [r2, #8]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001388:	d101      	bne.n	800138e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800138a:	2301      	movs	r3, #1
 800138c:	e000      	b.n	8001390 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80013ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80013b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80013d8:	d101      	bne.n	80013de <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <LL_ADC_IsEnabled+0x18>
 8001400:	2301      	movs	r3, #1
 8001402:	e000      	b.n	8001406 <LL_ADC_IsEnabled+0x1a>
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001412:	b480      	push	{r7}
 8001414:	b083      	sub	sp, #12
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b04      	cmp	r3, #4
 8001424:	d101      	bne.n	800142a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	2b08      	cmp	r3, #8
 800144a:	d101      	bne.n	8001450 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800144c:	2301      	movs	r3, #1
 800144e:	e000      	b.n	8001452 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b089      	sub	sp, #36	@ 0x24
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800146c:	2300      	movs	r3, #0
 800146e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d101      	bne.n	800147a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e130      	b.n	80016dc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001484:	2b00      	cmp	r3, #0
 8001486:	d109      	bne.n	800149c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff fb95 	bl	8000bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff ff67 	bl	8001374 <LL_ADC_IsDeepPowerDownEnabled>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff4d 	bl	8001350 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff ff82 	bl	80013c4 <LL_ADC_IsInternalRegulatorEnabled>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d115      	bne.n	80014f2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff66 	bl	800139c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014d0:	4b84      	ldr	r3, [pc, #528]	@ (80016e4 <HAL_ADC_Init+0x284>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	4a84      	ldr	r2, [pc, #528]	@ (80016e8 <HAL_ADC_Init+0x288>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	3301      	adds	r3, #1
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014e4:	e002      	b.n	80014ec <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f9      	bne.n	80014e6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ff64 	bl	80013c4 <LL_ADC_IsInternalRegulatorEnabled>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001506:	f043 0210 	orr.w	r2, r3, #16
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	f043 0201 	orr.w	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff ff75 	bl	8001412 <LL_ADC_REG_IsConversionOngoing>
 8001528:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152e:	f003 0310 	and.w	r3, r3, #16
 8001532:	2b00      	cmp	r3, #0
 8001534:	f040 80c9 	bne.w	80016ca <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 80c5 	bne.w	80016ca <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001544:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001548:	f043 0202 	orr.w	r2, r3, #2
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff49 	bl	80013ec <LL_ADC_IsEnabled>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d115      	bne.n	800158c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001560:	4862      	ldr	r0, [pc, #392]	@ (80016ec <HAL_ADC_Init+0x28c>)
 8001562:	f7ff ff43 	bl	80013ec <LL_ADC_IsEnabled>
 8001566:	4604      	mov	r4, r0
 8001568:	4861      	ldr	r0, [pc, #388]	@ (80016f0 <HAL_ADC_Init+0x290>)
 800156a:	f7ff ff3f 	bl	80013ec <LL_ADC_IsEnabled>
 800156e:	4603      	mov	r3, r0
 8001570:	431c      	orrs	r4, r3
 8001572:	4860      	ldr	r0, [pc, #384]	@ (80016f4 <HAL_ADC_Init+0x294>)
 8001574:	f7ff ff3a 	bl	80013ec <LL_ADC_IsEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	4323      	orrs	r3, r4
 800157c:	2b00      	cmp	r3, #0
 800157e:	d105      	bne.n	800158c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	4619      	mov	r1, r3
 8001586:	485c      	ldr	r0, [pc, #368]	@ (80016f8 <HAL_ADC_Init+0x298>)
 8001588:	f7ff fdde 	bl	8001148 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	7e5b      	ldrb	r3, [r3, #25]
 8001590:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001596:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800159c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80015a2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015aa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d106      	bne.n	80015c8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015be:	3b01      	subs	r3, #1
 80015c0:	045b      	lsls	r3, r3, #17
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d009      	beq.n	80015e4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015d4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015dc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <HAL_ADC_Init+0x29c>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	69b9      	ldr	r1, [r7, #24]
 80015f4:	430b      	orrs	r3, r1
 80015f6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff1b 	bl	8001438 <LL_ADC_INJ_IsConversionOngoing>
 8001602:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13d      	bne.n	8001686 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d13a      	bne.n	8001686 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001614:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800161c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800162c:	f023 0302 	bic.w	r3, r3, #2
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	69b9      	ldr	r1, [r7, #24]
 8001636:	430b      	orrs	r3, r1
 8001638:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001640:	2b01      	cmp	r3, #1
 8001642:	d118      	bne.n	8001676 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800164e:	f023 0304 	bic.w	r3, r3, #4
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800165a:	4311      	orrs	r1, r2
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001660:	4311      	orrs	r1, r2
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001666:	430a      	orrs	r2, r1
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	e007      	b.n	8001686 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0201 	bic.w	r2, r2, #1
 8001684:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10c      	bne.n	80016a8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001694:	f023 010f 	bic.w	r1, r3, #15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	1e5a      	subs	r2, r3, #1
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80016a6:	e007      	b.n	80016b8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 020f 	bic.w	r2, r2, #15
 80016b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016bc:	f023 0303 	bic.w	r3, r3, #3
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80016c8:	e007      	b.n	80016da <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ce:	f043 0210 	orr.w	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016da:	7ffb      	ldrb	r3, [r7, #31]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3724      	adds	r7, #36	@ 0x24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	20000000 	.word	0x20000000
 80016e8:	053e2d63 	.word	0x053e2d63
 80016ec:	50040000 	.word	0x50040000
 80016f0:	50040100 	.word	0x50040100
 80016f4:	50040200 	.word	0x50040200
 80016f8:	50040300 	.word	0x50040300
 80016fc:	fff0c007 	.word	0xfff0c007

08001700 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b0b6      	sub	sp, #216	@ 0xd8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800171a:	2b01      	cmp	r3, #1
 800171c:	d101      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x22>
 800171e:	2302      	movs	r3, #2
 8001720:	e3c9      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x7b6>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe6f 	bl	8001412 <LL_ADC_REG_IsConversionOngoing>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 83aa 	bne.w	8001e90 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	3b02      	subs	r3, #2
 8001752:	2b03      	cmp	r3, #3
 8001754:	d81b      	bhi.n	800178e <HAL_ADC_ConfigChannel+0x8e>
 8001756:	a201      	add	r2, pc, #4	@ (adr r2, 800175c <HAL_ADC_ConfigChannel+0x5c>)
 8001758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175c:	0800176d 	.word	0x0800176d
 8001760:	08001775 	.word	0x08001775
 8001764:	0800177d 	.word	0x0800177d
 8001768:	08001785 	.word	0x08001785
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800176c:	230c      	movs	r3, #12
 800176e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001772:	e010      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001774:	2312      	movs	r3, #18
 8001776:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800177a:	e00c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800177c:	2318      	movs	r3, #24
 800177e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001782:	e008      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001784:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001788:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800178c:	e003      	b.n	8001796 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800178e:	2306      	movs	r3, #6
 8001790:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001794:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80017a4:	f7ff fd59 	bl	800125a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe30 	bl	8001412 <LL_ADC_REG_IsConversionOngoing>
 80017b2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fe3c 	bl	8001438 <LL_ADC_INJ_IsConversionOngoing>
 80017c0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 81a4 	bne.w	8001b16 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f040 819f 	bne.w	8001b16 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	461a      	mov	r2, r3
 80017e6:	f7ff fd64 	bl	80012b2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	08db      	lsrs	r3, r3, #3
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d00a      	beq.n	8001822 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	6919      	ldr	r1, [r3, #16]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800181c:	f7ff fcc8 	bl	80011b0 <LL_ADC_SetOffset>
 8001820:	e179      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fce5 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 800182e:	4603      	mov	r3, r0
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_ADC_ConfigChannel+0x14e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fcda 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	0e9b      	lsrs	r3, r3, #26
 8001848:	f003 021f 	and.w	r2, r3, #31
 800184c:	e01e      	b.n	800188c <HAL_ADC_ConfigChannel+0x18c>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fccf 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001864:	fa93 f3a3 	rbit	r3, r3
 8001868:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800186c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001870:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001874:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001878:	2b00      	cmp	r3, #0
 800187a:	d101      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800187c:	2320      	movs	r3, #32
 800187e:	e004      	b.n	800188a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001880:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001894:	2b00      	cmp	r3, #0
 8001896:	d105      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1a4>
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	0e9b      	lsrs	r3, r3, #26
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	e018      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1d6>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80018b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80018bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80018c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80018c8:	2320      	movs	r3, #32
 80018ca:	e004      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80018cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d106      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fc9e 	bl	8001224 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fc82 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_ADC_ConfigChannel+0x214>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc77 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	0e9b      	lsrs	r3, r3, #26
 800190e:	f003 021f 	and.w	r2, r3, #31
 8001912:	e01e      	b.n	8001952 <HAL_ADC_ConfigChannel+0x252>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2101      	movs	r1, #1
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fc6c 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001932:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800193a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001942:	2320      	movs	r3, #32
 8001944:	e004      	b.n	8001950 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001946:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800195a:	2b00      	cmp	r3, #0
 800195c:	d105      	bne.n	800196a <HAL_ADC_ConfigChannel+0x26a>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	0e9b      	lsrs	r3, r3, #26
 8001964:	f003 031f 	and.w	r3, r3, #31
 8001968:	e018      	b.n	800199c <HAL_ADC_ConfigChannel+0x29c>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001972:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001976:	fa93 f3a3 	rbit	r3, r3
 800197a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800197e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001982:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001986:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800198e:	2320      	movs	r3, #32
 8001990:	e004      	b.n	800199c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001992:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800199c:	429a      	cmp	r2, r3
 800199e:	d106      	bne.n	80019ae <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2200      	movs	r2, #0
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fc3b 	bl	8001224 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2102      	movs	r1, #2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fc1f 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10a      	bne.n	80019da <HAL_ADC_ConfigChannel+0x2da>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2102      	movs	r1, #2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fc14 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 80019d0:	4603      	mov	r3, r0
 80019d2:	0e9b      	lsrs	r3, r3, #26
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	e01e      	b.n	8001a18 <HAL_ADC_ConfigChannel+0x318>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2102      	movs	r1, #2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff fc09 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 80019e6:	4603      	mov	r3, r0
 80019e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80019f0:	fa93 f3a3 	rbit	r3, r3
 80019f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80019f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80019fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	e004      	b.n	8001a16 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d105      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x330>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e9b      	lsrs	r3, r3, #26
 8001a2a:	f003 031f 	and.w	r3, r3, #31
 8001a2e:	e014      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a38:	fa93 f3a3 	rbit	r3, r3
 8001a3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001a3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001a4c:	2320      	movs	r3, #32
 8001a4e:	e004      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d106      	bne.n	8001a6c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2200      	movs	r2, #0
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fbdc 	bl	8001224 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2103      	movs	r1, #3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fbc0 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10a      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x398>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2103      	movs	r1, #3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fbb5 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	0e9b      	lsrs	r3, r3, #26
 8001a92:	f003 021f 	and.w	r2, r3, #31
 8001a96:	e017      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x3c8>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2103      	movs	r1, #3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fbaa 	bl	80011f8 <LL_ADC_GetOffsetChannel>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ab2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001ab4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e003      	b.n	8001ac6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001abe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x3e0>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	0e9b      	lsrs	r3, r3, #26
 8001ada:	f003 031f 	and.w	r3, r3, #31
 8001ade:	e011      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x404>
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001aee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001af0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001af2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001af8:	2320      	movs	r3, #32
 8001afa:	e003      	b.n	8001b04 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d106      	bne.n	8001b16 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2103      	movs	r1, #3
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fb87 	bl	8001224 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fc66 	bl	80013ec <LL_ADC_IsEnabled>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 8140 	bne.w	8001da8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6818      	ldr	r0, [r3, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	6819      	ldr	r1, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	461a      	mov	r2, r3
 8001b36:	f7ff fbe7 	bl	8001308 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	4a8f      	ldr	r2, [pc, #572]	@ (8001d7c <HAL_ADC_ConfigChannel+0x67c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	f040 8131 	bne.w	8001da8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10b      	bne.n	8001b6e <HAL_ADC_ConfigChannel+0x46e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	0e9b      	lsrs	r3, r3, #26
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	bf94      	ite	ls
 8001b66:	2301      	movls	r3, #1
 8001b68:	2300      	movhi	r3, #0
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	e019      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x4a2>
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b76:	fa93 f3a3 	rbit	r3, r3
 8001b7a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001b80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001b86:	2320      	movs	r3, #32
 8001b88:	e003      	b.n	8001b92 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b8c:	fab3 f383 	clz	r3, r3
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2b09      	cmp	r3, #9
 8001b9a:	bf94      	ite	ls
 8001b9c:	2301      	movls	r3, #1
 8001b9e:	2300      	movhi	r3, #0
 8001ba0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d079      	beq.n	8001c9a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d107      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x4c2>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	3301      	adds	r3, #1
 8001bba:	069b      	lsls	r3, r3, #26
 8001bbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bc0:	e015      	b.n	8001bee <HAL_ADC_ConfigChannel+0x4ee>
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001bca:	fa93 f3a3 	rbit	r3, r3
 8001bce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001bd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001bd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001bda:	2320      	movs	r3, #32
 8001bdc:	e003      	b.n	8001be6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	069b      	lsls	r3, r3, #26
 8001bea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x50e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2101      	movs	r1, #1
 8001c08:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0c:	e017      	b.n	8001c3e <HAL_ADC_ConfigChannel+0x53e>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c16:	fa93 f3a3 	rbit	r3, r3
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001c20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001c26:	2320      	movs	r3, #32
 8001c28:	e003      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2101      	movs	r1, #1
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	ea42 0103 	orr.w	r1, r2, r3
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10a      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x564>
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0e9b      	lsrs	r3, r3, #26
 8001c54:	3301      	adds	r3, #1
 8001c56:	f003 021f 	and.w	r2, r3, #31
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	051b      	lsls	r3, r3, #20
 8001c62:	e018      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x596>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c6c:	fa93 f3a3 	rbit	r3, r3
 8001c70:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c74:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001c7c:	2320      	movs	r3, #32
 8001c7e:	e003      	b.n	8001c88 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	3301      	adds	r3, #1
 8001c8a:	f003 021f 	and.w	r2, r3, #31
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c96:	430b      	orrs	r3, r1
 8001c98:	e081      	b.n	8001d9e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x5b6>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb4:	e015      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x5e2>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	069b      	lsls	r3, r3, #26
 8001cde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x602>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	e017      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x632>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e003      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	ea42 0103 	orr.w	r1, r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10d      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x65e>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	3b1e      	subs	r3, #30
 8001d56:	051b      	lsls	r3, r3, #20
 8001d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d5c:	e01e      	b.n	8001d9c <HAL_ADC_ConfigChannel+0x69c>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	60fb      	str	r3, [r7, #12]
  return result;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d104      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e006      	b.n	8001d88 <HAL_ADC_ConfigChannel+0x688>
 8001d7a:	bf00      	nop
 8001d7c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f003 021f 	and.w	r2, r3, #31
 8001d8e:	4613      	mov	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	3b1e      	subs	r3, #30
 8001d96:	051b      	lsls	r3, r3, #20
 8001d98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d9c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7ff fa85 	bl	80012b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b44      	ldr	r3, [pc, #272]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x7c0>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d07a      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001db4:	4843      	ldr	r0, [pc, #268]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001db6:	f7ff f9ed 	bl	8001194 <LL_ADC_GetCommonPathInternalCh>
 8001dba:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a41      	ldr	r2, [pc, #260]	@ (8001ec8 <HAL_ADC_ConfigChannel+0x7c8>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d12c      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dcc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d126      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8001ecc <HAL_ADC_ConfigChannel+0x7cc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d004      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x6e8>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d15d      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001de8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001dec:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001df0:	4619      	mov	r1, r3
 8001df2:	4834      	ldr	r0, [pc, #208]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001df4:	f7ff f9bb 	bl	800116e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001df8:	4b36      	ldr	r3, [pc, #216]	@ (8001ed4 <HAL_ADC_ConfigChannel+0x7d4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	099b      	lsrs	r3, r3, #6
 8001dfe:	4a36      	ldr	r2, [pc, #216]	@ (8001ed8 <HAL_ADC_ConfigChannel+0x7d8>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e12:	e002      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1f9      	bne.n	8001e14 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e20:	e040      	b.n	8001ea4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <HAL_ADC_ConfigChannel+0x7dc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d118      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d112      	bne.n	8001e5e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a23      	ldr	r2, [pc, #140]	@ (8001ecc <HAL_ADC_ConfigChannel+0x7cc>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d004      	beq.n	8001e4c <HAL_ADC_ConfigChannel+0x74c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d12d      	bne.n	8001ea8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e50:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e54:	4619      	mov	r1, r3
 8001e56:	481b      	ldr	r0, [pc, #108]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e58:	f7ff f989 	bl	800116e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001e5c:	e024      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_ADC_ConfigChannel+0x7e0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d120      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d11a      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a14      	ldr	r2, [pc, #80]	@ (8001ecc <HAL_ADC_ConfigChannel+0x7cc>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d115      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e86:	4619      	mov	r1, r3
 8001e88:	480e      	ldr	r0, [pc, #56]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e8a:	f7ff f970 	bl	800116e <LL_ADC_SetCommonPathInternalCh>
 8001e8e:	e00c      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e94:	f043 0220 	orr.w	r2, r3, #32
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ea4:	bf00      	nop
 8001ea6:	e000      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ea8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001eb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	37d8      	adds	r7, #216	@ 0xd8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	80080000 	.word	0x80080000
 8001ec4:	50040300 	.word	0x50040300
 8001ec8:	c7520000 	.word	0xc7520000
 8001ecc:	50040000 	.word	0x50040000
 8001ed0:	50040200 	.word	0x50040200
 8001ed4:	20000000 	.word	0x20000000
 8001ed8:	053e2d63 	.word	0x053e2d63
 8001edc:	cb840000 	.word	0xcb840000
 8001ee0:	80000001 	.word	0x80000001

08001ee4 <LL_ADC_IsEnabled>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d101      	bne.n	8001efc <LL_ADC_IsEnabled+0x18>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <LL_ADC_IsEnabled+0x1a>
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_ADC_REG_IsConversionOngoing>:
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b04      	cmp	r3, #4
 8001f1c:	d101      	bne.n	8001f22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e000      	b.n	8001f24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b09f      	sub	sp, #124	@ 0x7c
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e093      	b.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001f56:	2300      	movs	r3, #0
 8001f58:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a47      	ldr	r2, [pc, #284]	@ (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d102      	bne.n	8001f6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001f68:	4b46      	ldr	r3, [pc, #280]	@ (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	e001      	b.n	8001f72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e072      	b.n	8002076 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ffb9 	bl	8001f0a <LL_ADC_REG_IsConversionOngoing>
 8001f98:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffb3 	bl	8001f0a <LL_ADC_REG_IsConversionOngoing>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d154      	bne.n	8002054 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8001faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d151      	bne.n	8002054 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001fb0:	4b35      	ldr	r3, [pc, #212]	@ (8002088 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8001fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d02c      	beq.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fce:	035b      	lsls	r3, r3, #13
 8001fd0:	430b      	orrs	r3, r1
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fd8:	4829      	ldr	r0, [pc, #164]	@ (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8001fda:	f7ff ff83 	bl	8001ee4 <LL_ADC_IsEnabled>
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4828      	ldr	r0, [pc, #160]	@ (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8001fe2:	f7ff ff7f 	bl	8001ee4 <LL_ADC_IsEnabled>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	431c      	orrs	r4, r3
 8001fea:	4828      	ldr	r0, [pc, #160]	@ (800208c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8001fec:	f7ff ff7a 	bl	8001ee4 <LL_ADC_IsEnabled>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4323      	orrs	r3, r4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d137      	bne.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002000:	f023 030f 	bic.w	r3, r3, #15
 8002004:	683a      	ldr	r2, [r7, #0]
 8002006:	6811      	ldr	r1, [r2, #0]
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	6892      	ldr	r2, [r2, #8]
 800200c:	430a      	orrs	r2, r1
 800200e:	431a      	orrs	r2, r3
 8002010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002012:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002014:	e028      	b.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800201e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002020:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002022:	4817      	ldr	r0, [pc, #92]	@ (8002080 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002024:	f7ff ff5e 	bl	8001ee4 <LL_ADC_IsEnabled>
 8002028:	4604      	mov	r4, r0
 800202a:	4816      	ldr	r0, [pc, #88]	@ (8002084 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800202c:	f7ff ff5a 	bl	8001ee4 <LL_ADC_IsEnabled>
 8002030:	4603      	mov	r3, r0
 8002032:	431c      	orrs	r4, r3
 8002034:	4815      	ldr	r0, [pc, #84]	@ (800208c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002036:	f7ff ff55 	bl	8001ee4 <LL_ADC_IsEnabled>
 800203a:	4603      	mov	r3, r0
 800203c:	4323      	orrs	r3, r4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d112      	bne.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800204a:	f023 030f 	bic.w	r3, r3, #15
 800204e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002050:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002052:	e009      	b.n	8002068 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002066:	e000      	b.n	800206a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002068:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002072:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002076:	4618      	mov	r0, r3
 8002078:	377c      	adds	r7, #124	@ 0x7c
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop
 8002080:	50040000 	.word	0x50040000
 8002084:	50040100 	.word	0x50040100
 8002088:	50040300 	.word	0x50040300
 800208c:	50040200 	.word	0x50040200

08002090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020ac:	4013      	ands	r3, r2
 80020ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c2:	4a04      	ldr	r2, [pc, #16]	@ (80020d4 <__NVIC_SetPriorityGrouping+0x44>)
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	60d3      	str	r3, [r2, #12]
}
 80020c8:	bf00      	nop
 80020ca:	3714      	adds	r7, #20
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <__NVIC_GetPriorityGrouping+0x18>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0307 	and.w	r3, r3, #7
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	e000ed00 	.word	0xe000ed00

080020f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0b      	blt.n	800211e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	f003 021f 	and.w	r2, r3, #31
 800210c:	4907      	ldr	r1, [pc, #28]	@ (800212c <__NVIC_EnableIRQ+0x38>)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	095b      	lsrs	r3, r3, #5
 8002114:	2001      	movs	r0, #1
 8002116:	fa00 f202 	lsl.w	r2, r0, r2
 800211a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
	...

080021ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021fc:	d301      	bcc.n	8002202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021fe:	2301      	movs	r3, #1
 8002200:	e00f      	b.n	8002222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002202:	4a0a      	ldr	r2, [pc, #40]	@ (800222c <SysTick_Config+0x40>)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800220a:	210f      	movs	r1, #15
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f7ff ff8e 	bl	8002130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002214:	4b05      	ldr	r3, [pc, #20]	@ (800222c <SysTick_Config+0x40>)
 8002216:	2200      	movs	r2, #0
 8002218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800221a:	4b04      	ldr	r3, [pc, #16]	@ (800222c <SysTick_Config+0x40>)
 800221c:	2207      	movs	r2, #7
 800221e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	e000e010 	.word	0xe000e010

08002230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff ff29 	bl	8002090 <__NVIC_SetPriorityGrouping>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b086      	sub	sp, #24
 800224a:	af00      	add	r7, sp, #0
 800224c:	4603      	mov	r3, r0
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
 8002252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002258:	f7ff ff3e 	bl	80020d8 <__NVIC_GetPriorityGrouping>
 800225c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	6978      	ldr	r0, [r7, #20]
 8002264:	f7ff ff8e 	bl	8002184 <NVIC_EncodePriority>
 8002268:	4602      	mov	r2, r0
 800226a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff5d 	bl	8002130 <__NVIC_SetPriority>
}
 8002276:	bf00      	nop
 8002278:	3718      	adds	r7, #24
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227e:	b580      	push	{r7, lr}
 8002280:	b082      	sub	sp, #8
 8002282:	af00      	add	r7, sp, #0
 8002284:	4603      	mov	r3, r0
 8002286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff31 	bl	80020f4 <__NVIC_EnableIRQ>
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffa2 	bl	80021ec <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022c2:	e17f      	b.n	80025c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	2101      	movs	r1, #1
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	4013      	ands	r3, r2
 80022d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f000 8171 	beq.w	80025be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f003 0303 	and.w	r3, r3, #3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d005      	beq.n	80022f4 <HAL_GPIO_Init+0x40>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d130      	bne.n	8002356 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2203      	movs	r2, #3
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4013      	ands	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68da      	ldr	r2, [r3, #12]
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800232a:	2201      	movs	r2, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	693a      	ldr	r2, [r7, #16]
 8002336:	4013      	ands	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 0201 	and.w	r2, r3, #1
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b03      	cmp	r3, #3
 8002360:	d118      	bne.n	8002394 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002366:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002368:	2201      	movs	r2, #1
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	08db      	lsrs	r3, r3, #3
 800237e:	f003 0201 	and.w	r2, r3, #1
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	4313      	orrs	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f003 0303 	and.w	r3, r3, #3
 800239c:	2b03      	cmp	r3, #3
 800239e:	d017      	beq.n	80023d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	2203      	movs	r2, #3
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43db      	mvns	r3, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d123      	bne.n	8002424 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	08da      	lsrs	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3208      	adds	r2, #8
 80023e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	220f      	movs	r2, #15
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	6939      	ldr	r1, [r7, #16]
 8002420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	2203      	movs	r2, #3
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	43db      	mvns	r3, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4013      	ands	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0203 	and.w	r2, r3, #3
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80ac 	beq.w	80025be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	4b5f      	ldr	r3, [pc, #380]	@ (80025e4 <HAL_GPIO_Init+0x330>)
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	4a5e      	ldr	r2, [pc, #376]	@ (80025e4 <HAL_GPIO_Init+0x330>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6613      	str	r3, [r2, #96]	@ 0x60
 8002472:	4b5c      	ldr	r3, [pc, #368]	@ (80025e4 <HAL_GPIO_Init+0x330>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800247e:	4a5a      	ldr	r2, [pc, #360]	@ (80025e8 <HAL_GPIO_Init+0x334>)
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	3302      	adds	r3, #2
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0303 	and.w	r3, r3, #3
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4013      	ands	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024a8:	d025      	beq.n	80024f6 <HAL_GPIO_Init+0x242>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4f      	ldr	r2, [pc, #316]	@ (80025ec <HAL_GPIO_Init+0x338>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d01f      	beq.n	80024f2 <HAL_GPIO_Init+0x23e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4e      	ldr	r2, [pc, #312]	@ (80025f0 <HAL_GPIO_Init+0x33c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d019      	beq.n	80024ee <HAL_GPIO_Init+0x23a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a4d      	ldr	r2, [pc, #308]	@ (80025f4 <HAL_GPIO_Init+0x340>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0x236>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a4c      	ldr	r2, [pc, #304]	@ (80025f8 <HAL_GPIO_Init+0x344>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00d      	beq.n	80024e6 <HAL_GPIO_Init+0x232>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a4b      	ldr	r2, [pc, #300]	@ (80025fc <HAL_GPIO_Init+0x348>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0x22e>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002600 <HAL_GPIO_Init+0x34c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_GPIO_Init+0x22a>
 80024da:	2306      	movs	r3, #6
 80024dc:	e00c      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024de:	2307      	movs	r3, #7
 80024e0:	e00a      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024e2:	2305      	movs	r3, #5
 80024e4:	e008      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024e6:	2304      	movs	r3, #4
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024ea:	2303      	movs	r3, #3
 80024ec:	e004      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <HAL_GPIO_Init+0x244>
 80024f6:	2300      	movs	r3, #0
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	f002 0203 	and.w	r2, r2, #3
 80024fe:	0092      	lsls	r2, r2, #2
 8002500:	4093      	lsls	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002508:	4937      	ldr	r1, [pc, #220]	@ (80025e8 <HAL_GPIO_Init+0x334>)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	089b      	lsrs	r3, r3, #2
 800250e:	3302      	adds	r3, #2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002516:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_GPIO_Init+0x350>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	43db      	mvns	r3, r3
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4013      	ands	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800253a:	4a32      	ldr	r2, [pc, #200]	@ (8002604 <HAL_GPIO_Init+0x350>)
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002540:	4b30      	ldr	r3, [pc, #192]	@ (8002604 <HAL_GPIO_Init+0x350>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002564:	4a27      	ldr	r2, [pc, #156]	@ (8002604 <HAL_GPIO_Init+0x350>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_GPIO_Init+0x350>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800258e:	4a1d      	ldr	r2, [pc, #116]	@ (8002604 <HAL_GPIO_Init+0x350>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002594:	4b1b      	ldr	r3, [pc, #108]	@ (8002604 <HAL_GPIO_Init+0x350>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <HAL_GPIO_Init+0x350>)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa22 f303 	lsr.w	r3, r2, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f47f ae78 	bne.w	80022c4 <HAL_GPIO_Init+0x10>
  }
}
 80025d4:	bf00      	nop
 80025d6:	bf00      	nop
 80025d8:	371c      	adds	r7, #28
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40010000 	.word	0x40010000
 80025ec:	48000400 	.word	0x48000400
 80025f0:	48000800 	.word	0x48000800
 80025f4:	48000c00 	.word	0x48000c00
 80025f8:	48001000 	.word	0x48001000
 80025fc:	48001400 	.word	0x48001400
 8002600:	48001800 	.word	0x48001800
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800260c:	4b04      	ldr	r3, [pc, #16]	@ (8002620 <HAL_PWREx_GetVoltageRange+0x18>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002614:	4618      	mov	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40007000 	.word	0x40007000

08002624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002632:	d130      	bne.n	8002696 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800263c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002640:	d038      	beq.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800264a:	4a1e      	ldr	r2, [pc, #120]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002652:	4b1d      	ldr	r3, [pc, #116]	@ (80026c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2232      	movs	r2, #50	@ 0x32
 8002658:	fb02 f303 	mul.w	r3, r2, r3
 800265c:	4a1b      	ldr	r2, [pc, #108]	@ (80026cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	0c9b      	lsrs	r3, r3, #18
 8002664:	3301      	adds	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002668:	e002      	b.n	8002670 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3b01      	subs	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002670:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002678:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800267c:	d102      	bne.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x60>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1f2      	bne.n	800266a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002690:	d110      	bne.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e00f      	b.n	80026b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800269e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026a2:	d007      	beq.n	80026b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026a4:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ac:	4a05      	ldr	r2, [pc, #20]	@ (80026c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40007000 	.word	0x40007000
 80026c8:	20000000 	.word	0x20000000
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b088      	sub	sp, #32
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e3ca      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e2:	4b97      	ldr	r3, [pc, #604]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ec:	4b94      	ldr	r3, [pc, #592]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80e4 	beq.w	80028cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_RCC_OscConfig+0x4a>
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	f040 808b 	bne.w	8002828 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2b01      	cmp	r3, #1
 8002716:	f040 8087 	bne.w	8002828 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800271a:	4b89      	ldr	r3, [pc, #548]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <HAL_RCC_OscConfig+0x62>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e3a2      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	4b82      	ldr	r3, [pc, #520]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <HAL_RCC_OscConfig+0x7c>
 8002742:	4b7f      	ldr	r3, [pc, #508]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800274a:	e005      	b.n	8002758 <HAL_RCC_OscConfig+0x88>
 800274c:	4b7c      	ldr	r3, [pc, #496]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800274e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002758:	4293      	cmp	r3, r2
 800275a:	d223      	bcs.n	80027a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fd55 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e383      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002770:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a72      	ldr	r2, [pc, #456]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002776:	f043 0308 	orr.w	r3, r3, #8
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b70      	ldr	r3, [pc, #448]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	496d      	ldr	r1, [pc, #436]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800278a:	4313      	orrs	r3, r2
 800278c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800278e:	4b6c      	ldr	r3, [pc, #432]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	021b      	lsls	r3, r3, #8
 800279c:	4968      	ldr	r1, [pc, #416]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	604b      	str	r3, [r1, #4]
 80027a2:	e025      	b.n	80027f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027a4:	4b66      	ldr	r3, [pc, #408]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a65      	ldr	r2, [pc, #404]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027aa:	f043 0308 	orr.w	r3, r3, #8
 80027ae:	6013      	str	r3, [r2, #0]
 80027b0:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a1b      	ldr	r3, [r3, #32]
 80027bc:	4960      	ldr	r1, [pc, #384]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c2:	4b5f      	ldr	r3, [pc, #380]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	495b      	ldr	r1, [pc, #364]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d109      	bne.n	80027f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fd15 	bl	8003210 <RCC_SetFlashLatencyFromMSIRange>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e343      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f0:	f000 fc4a 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80027f4:	4602      	mov	r2, r0
 80027f6:	4b52      	ldr	r3, [pc, #328]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	091b      	lsrs	r3, r3, #4
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	4950      	ldr	r1, [pc, #320]	@ (8002944 <HAL_RCC_OscConfig+0x274>)
 8002802:	5ccb      	ldrb	r3, [r1, r3]
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	4a4e      	ldr	r2, [pc, #312]	@ (8002948 <HAL_RCC_OscConfig+0x278>)
 800280e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002810:	4b4e      	ldr	r3, [pc, #312]	@ (800294c <HAL_RCC_OscConfig+0x27c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7fe fc3b 	bl	8001090 <HAL_InitTick>
 800281a:	4603      	mov	r3, r0
 800281c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d052      	beq.n	80028ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	e327      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d032      	beq.n	8002896 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002830:	4b43      	ldr	r3, [pc, #268]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a42      	ldr	r2, [pc, #264]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800283c:	f7fe fc78 	bl	8001130 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002844:	f7fe fc74 	bl	8001130 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e310      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002856:	4b3a      	ldr	r3, [pc, #232]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002862:	4b37      	ldr	r3, [pc, #220]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a36      	ldr	r2, [pc, #216]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	4b34      	ldr	r3, [pc, #208]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	4931      	ldr	r1, [pc, #196]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800287c:	4313      	orrs	r3, r2
 800287e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002880:	4b2f      	ldr	r3, [pc, #188]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	021b      	lsls	r3, r3, #8
 800288e:	492c      	ldr	r1, [pc, #176]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
 8002894:	e01a      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002896:	4b2a      	ldr	r3, [pc, #168]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a29      	ldr	r2, [pc, #164]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800289c:	f023 0301 	bic.w	r3, r3, #1
 80028a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028a2:	f7fe fc45 	bl	8001130 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028aa:	f7fe fc41 	bl	8001130 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e2dd      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028bc:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d1f0      	bne.n	80028aa <HAL_RCC_OscConfig+0x1da>
 80028c8:	e000      	b.n	80028cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d074      	beq.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2b08      	cmp	r3, #8
 80028dc:	d005      	beq.n	80028ea <HAL_RCC_OscConfig+0x21a>
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b0c      	cmp	r3, #12
 80028e2:	d10e      	bne.n	8002902 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d10b      	bne.n	8002902 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d064      	beq.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d160      	bne.n	80029c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e2ba      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290a:	d106      	bne.n	800291a <HAL_RCC_OscConfig+0x24a>
 800290c:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0b      	ldr	r2, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002912:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	e026      	b.n	8002968 <HAL_RCC_OscConfig+0x298>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002922:	d115      	bne.n	8002950 <HAL_RCC_OscConfig+0x280>
 8002924:	4b06      	ldr	r3, [pc, #24]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a05      	ldr	r2, [pc, #20]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 800292a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b03      	ldr	r3, [pc, #12]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a02      	ldr	r2, [pc, #8]	@ (8002940 <HAL_RCC_OscConfig+0x270>)
 8002936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293a:	6013      	str	r3, [r2, #0]
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x298>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	08005a48 	.word	0x08005a48
 8002948:	20000000 	.word	0x20000000
 800294c:	20000004 	.word	0x20000004
 8002950:	4ba0      	ldr	r3, [pc, #640]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a9f      	ldr	r2, [pc, #636]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	4b9d      	ldr	r3, [pc, #628]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a9c      	ldr	r2, [pc, #624]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002962:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d013      	beq.n	8002998 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7fe fbde 	bl	8001130 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002978:	f7fe fbda 	bl	8001130 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	@ 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e276      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800298a:	4b92      	ldr	r3, [pc, #584]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCC_OscConfig+0x2a8>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fbca 	bl	8001130 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fbc6 	bl	8001130 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	@ 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e262      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029b2:	4b88      	ldr	r3, [pc, #544]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x2d0>
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d060      	beq.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b04      	cmp	r3, #4
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x310>
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d119      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d116      	bne.n	8002a0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e0:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d005      	beq.n	80029f8 <HAL_RCC_OscConfig+0x328>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d101      	bne.n	80029f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	e23f      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f8:	4b76      	ldr	r3, [pc, #472]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	061b      	lsls	r3, r3, #24
 8002a06:	4973      	ldr	r1, [pc, #460]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a0c:	e040      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d023      	beq.n	8002a5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a16:	4b6f      	ldr	r3, [pc, #444]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a22:	f7fe fb85 	bl	8001130 <HAL_GetTick>
 8002a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a28:	e008      	b.n	8002a3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a2a:	f7fe fb81 	bl	8001130 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e21d      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a3c:	4b65      	ldr	r3, [pc, #404]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a48:	4b62      	ldr	r3, [pc, #392]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	061b      	lsls	r3, r3, #24
 8002a56:	495f      	ldr	r1, [pc, #380]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	604b      	str	r3, [r1, #4]
 8002a5c:	e018      	b.n	8002a90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a5e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a5c      	ldr	r2, [pc, #368]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fb61 	bl	8001130 <HAL_GetTick>
 8002a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a70:	e008      	b.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a72:	f7fe fb5d 	bl	8001130 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1f9      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a84:	4b53      	ldr	r3, [pc, #332]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1f0      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0308 	and.w	r3, r3, #8
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d03c      	beq.n	8002b16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d01c      	beq.n	8002ade <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fb3c 	bl	8001130 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fb38 	bl	8001130 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1d4      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ace:	4b41      	ldr	r3, [pc, #260]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002ad0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0ef      	beq.n	8002abc <HAL_RCC_OscConfig+0x3ec>
 8002adc:	e01b      	b.n	8002b16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f023 0301 	bic.w	r3, r3, #1
 8002aea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aee:	f7fe fb1f 	bl	8001130 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe fb1b 	bl	8001130 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e1b7      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b08:	4b32      	ldr	r3, [pc, #200]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1ef      	bne.n	8002af6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 80a6 	beq.w	8002c70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b28:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d10d      	bne.n	8002b50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b34:	4b27      	ldr	r3, [pc, #156]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	4a26      	ldr	r2, [pc, #152]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b40:	4b24      	ldr	r3, [pc, #144]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b50:	4b21      	ldr	r3, [pc, #132]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d118      	bne.n	8002b8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1d      	ldr	r2, [pc, #116]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fae2 	bl	8001130 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b70:	f7fe fade 	bl	8001130 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e17a      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b82:	4b15      	ldr	r3, [pc, #84]	@ (8002bd8 <HAL_RCC_OscConfig+0x508>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4d8>
 8002b96:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002b9e:	f043 0301 	orr.w	r3, r3, #1
 8002ba2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ba6:	e029      	b.n	8002bfc <HAL_RCC_OscConfig+0x52c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d115      	bne.n	8002bdc <HAL_RCC_OscConfig+0x50c>
 8002bb0:	4b08      	ldr	r3, [pc, #32]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb6:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bb8:	f043 0304 	orr.w	r3, r3, #4
 8002bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bc0:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc6:	4a03      	ldr	r2, [pc, #12]	@ (8002bd4 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_OscConfig+0x52c>
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	4b9c      	ldr	r3, [pc, #624]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a9b      	ldr	r2, [pc, #620]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002be4:	f023 0301 	bic.w	r3, r3, #1
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002bec:	4b98      	ldr	r3, [pc, #608]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a97      	ldr	r2, [pc, #604]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fa94 	bl	8001130 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7fe fa90 	bl	8001130 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e12a      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c22:	4b8b      	ldr	r3, [pc, #556]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ed      	beq.n	8002c0c <HAL_RCC_OscConfig+0x53c>
 8002c30:	e015      	b.n	8002c5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fa7d 	bl	8001130 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fa79 	bl	8001130 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e113      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c50:	4b7f      	ldr	r3, [pc, #508]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1ed      	bne.n	8002c3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d105      	bne.n	8002c70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c64:	4b7a      	ldr	r3, [pc, #488]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	4a79      	ldr	r2, [pc, #484]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c6e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80fe 	beq.w	8002e76 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	f040 80d0 	bne.w	8002e24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c84:	4b72      	ldr	r3, [pc, #456]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f003 0203 	and.w	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d130      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d127      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11f      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cc4:	2a07      	cmp	r2, #7
 8002cc6:	bf14      	ite	ne
 8002cc8:	2201      	movne	r2, #1
 8002cca:	2200      	moveq	r2, #0
 8002ccc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d113      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d109      	bne.n	8002cfa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d06e      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d069      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d00:	4b53      	ldr	r3, [pc, #332]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d105      	bne.n	8002d18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002d0c:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0ad      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4b      	ldr	r2, [pc, #300]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d28:	f7fe fa02 	bl	8001130 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d30:	f7fe f9fe 	bl	8001130 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e09a      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d42:	4b43      	ldr	r3, [pc, #268]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d4e:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b40      	ldr	r3, [pc, #256]	@ (8002e54 <HAL_RCC_OscConfig+0x784>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d5e:	3a01      	subs	r2, #1
 8002d60:	0112      	lsls	r2, r2, #4
 8002d62:	4311      	orrs	r1, r2
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d68:	0212      	lsls	r2, r2, #8
 8002d6a:	4311      	orrs	r1, r2
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d70:	0852      	lsrs	r2, r2, #1
 8002d72:	3a01      	subs	r2, #1
 8002d74:	0552      	lsls	r2, r2, #21
 8002d76:	4311      	orrs	r1, r2
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d7c:	0852      	lsrs	r2, r2, #1
 8002d7e:	3a01      	subs	r2, #1
 8002d80:	0652      	lsls	r2, r2, #25
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d88:	0912      	lsrs	r2, r2, #4
 8002d8a:	0452      	lsls	r2, r2, #17
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	4930      	ldr	r1, [pc, #192]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d94:	4b2e      	ldr	r3, [pc, #184]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a2d      	ldr	r2, [pc, #180]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002da0:	4b2b      	ldr	r3, [pc, #172]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a2a      	ldr	r2, [pc, #168]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dac:	f7fe f9c0 	bl	8001130 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7fe f9bc 	bl	8001130 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e058      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dc6:	4b22      	ldr	r3, [pc, #136]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dd2:	e050      	b.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e04f      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d148      	bne.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002de4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a19      	ldr	r2, [pc, #100]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002dea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df0:	4b17      	ldr	r3, [pc, #92]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	4a16      	ldr	r2, [pc, #88]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dfc:	f7fe f998 	bl	8001130 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f994 	bl	8001130 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e030      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0f0      	beq.n	8002e04 <HAL_RCC_OscConfig+0x734>
 8002e22:	e028      	b.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b0c      	cmp	r3, #12
 8002e28:	d023      	beq.n	8002e72 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a08      	ldr	r2, [pc, #32]	@ (8002e50 <HAL_RCC_OscConfig+0x780>)
 8002e30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe f97b 	bl	8001130 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e3c:	e00c      	b.n	8002e58 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7fe f977 	bl	8001130 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d905      	bls.n	8002e58 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e013      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_RCC_OscConfig+0x7b0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ec      	bne.n	8002e3e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <HAL_RCC_OscConfig+0x7b0>)
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4905      	ldr	r1, [pc, #20]	@ (8002e80 <HAL_RCC_OscConfig+0x7b0>)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x7b4>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60cb      	str	r3, [r1, #12]
 8002e70:	e001      	b.n	8002e76 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	40021000 	.word	0x40021000
 8002e84:	feeefffc 	.word	0xfeeefffc

08002e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e0e7      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e9c:	4b75      	ldr	r3, [pc, #468]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d910      	bls.n	8002ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eaa:	4b72      	ldr	r3, [pc, #456]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f023 0207 	bic.w	r2, r3, #7
 8002eb2:	4970      	ldr	r1, [pc, #448]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b6e      	ldr	r3, [pc, #440]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cf      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d010      	beq.n	8002efa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d908      	bls.n	8002efa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b63      	ldr	r3, [pc, #396]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4960      	ldr	r1, [pc, #384]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d04c      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d121      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0a6      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	4b54      	ldr	r3, [pc, #336]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d115      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e09a      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e08e      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e086      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f5e:	4b46      	ldr	r3, [pc, #280]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f023 0203 	bic.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	4943      	ldr	r1, [pc, #268]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f70:	f7fe f8de 	bl	8001130 <HAL_GetTick>
 8002f74:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f76:	e00a      	b.n	8002f8e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f78:	f7fe f8da 	bl	8001130 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e06e      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f003 020c 	and.w	r2, r3, #12
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d1eb      	bne.n	8002f78 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b31      	ldr	r3, [pc, #196]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d208      	bcs.n	8002fce <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b2e      	ldr	r3, [pc, #184]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	492b      	ldr	r1, [pc, #172]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fce:	4b29      	ldr	r3, [pc, #164]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d210      	bcs.n	8002ffe <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f023 0207 	bic.w	r2, r3, #7
 8002fe4:	4923      	ldr	r1, [pc, #140]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_RCC_ClockConfig+0x1ec>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d001      	beq.n	8002ffe <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e036      	b.n	800306c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0304 	and.w	r3, r3, #4
 8003006:	2b00      	cmp	r3, #0
 8003008:	d008      	beq.n	800301c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300a:	4b1b      	ldr	r3, [pc, #108]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	4918      	ldr	r1, [pc, #96]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	4313      	orrs	r3, r2
 800301a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	4910      	ldr	r1, [pc, #64]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800303c:	f000 f824 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003040:	4602      	mov	r2, r0
 8003042:	4b0d      	ldr	r3, [pc, #52]	@ (8003078 <HAL_RCC_ClockConfig+0x1f0>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	091b      	lsrs	r3, r3, #4
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	490b      	ldr	r1, [pc, #44]	@ (800307c <HAL_RCC_ClockConfig+0x1f4>)
 800304e:	5ccb      	ldrb	r3, [r1, r3]
 8003050:	f003 031f 	and.w	r3, r3, #31
 8003054:	fa22 f303 	lsr.w	r3, r2, r3
 8003058:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <HAL_RCC_ClockConfig+0x1f8>)
 800305a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800305c:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <HAL_RCC_ClockConfig+0x1fc>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fe f815 	bl	8001090 <HAL_InitTick>
 8003066:	4603      	mov	r3, r0
 8003068:	72fb      	strb	r3, [r7, #11]

  return status;
 800306a:	7afb      	ldrb	r3, [r7, #11]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40022000 	.word	0x40022000
 8003078:	40021000 	.word	0x40021000
 800307c:	08005a48 	.word	0x08005a48
 8003080:	20000000 	.word	0x20000000
 8003084:	20000004 	.word	0x20000004

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
 8003092:	2300      	movs	r3, #0
 8003094:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003096:	4b3e      	ldr	r3, [pc, #248]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 030c 	and.w	r3, r3, #12
 800309e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x34>
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	2b0c      	cmp	r3, #12
 80030b4:	d121      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d11e      	bne.n	80030fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030bc:	4b34      	ldr	r3, [pc, #208]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030c8:	4b31      	ldr	r3, [pc, #196]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030ce:	0a1b      	lsrs	r3, r3, #8
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	e005      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030e4:	4a2b      	ldr	r2, [pc, #172]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d10d      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030f8:	e00a      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d102      	bne.n	8003106 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003100:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x110>)
 8003102:	61bb      	str	r3, [r7, #24]
 8003104:	e004      	b.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b08      	cmp	r3, #8
 800310a:	d101      	bne.n	8003110 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800310c:	4b23      	ldr	r3, [pc, #140]	@ (800319c <HAL_RCC_GetSysClockFreq+0x114>)
 800310e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b0c      	cmp	r3, #12
 8003114:	d134      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0xa6>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	2b03      	cmp	r3, #3
 800312a:	d003      	beq.n	8003134 <HAL_RCC_GetSysClockFreq+0xac>
 800312c:	e005      	b.n	800313a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800312e:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x110>)
 8003130:	617b      	str	r3, [r7, #20]
      break;
 8003132:	e005      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_RCC_GetSysClockFreq+0x114>)
 8003136:	617b      	str	r3, [r7, #20]
      break;
 8003138:	e002      	b.n	8003140 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	617b      	str	r3, [r7, #20]
      break;
 800313e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003140:	4b13      	ldr	r3, [pc, #76]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f003 0307 	and.w	r3, r3, #7
 800314a:	3301      	adds	r3, #1
 800314c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800314e:	4b10      	ldr	r3, [pc, #64]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	fb03 f202 	mul.w	r2, r3, r2
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003166:	4b0a      	ldr	r3, [pc, #40]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x108>)
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	0e5b      	lsrs	r3, r3, #25
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	3301      	adds	r3, #1
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	08005a60 	.word	0x08005a60
 8003198:	00f42400 	.word	0x00f42400
 800319c:	007a1200 	.word	0x007a1200

080031a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a4:	4b03      	ldr	r3, [pc, #12]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031bc:	f7ff fff0 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b06      	ldr	r3, [pc, #24]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4904      	ldr	r1, [pc, #16]	@ (80031e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d8:	4618      	mov	r0, r3
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40021000 	.word	0x40021000
 80031e0:	08005a58 	.word	0x08005a58

080031e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80031e8:	f7ff ffda 	bl	80031a0 <HAL_RCC_GetHCLKFreq>
 80031ec:	4602      	mov	r2, r0
 80031ee:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	0adb      	lsrs	r3, r3, #11
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	4904      	ldr	r1, [pc, #16]	@ (800320c <HAL_RCC_GetPCLK2Freq+0x28>)
 80031fa:	5ccb      	ldrb	r3, [r1, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40021000 	.word	0x40021000
 800320c:	08005a58 	.word	0x08005a58

08003210 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800321c:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800321e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003220:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003228:	f7ff f9ee 	bl	8002608 <HAL_PWREx_GetVoltageRange>
 800322c:	6178      	str	r0, [r7, #20]
 800322e:	e014      	b.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003230:	4b25      	ldr	r3, [pc, #148]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	4a24      	ldr	r2, [pc, #144]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003236:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800323a:	6593      	str	r3, [r2, #88]	@ 0x58
 800323c:	4b22      	ldr	r3, [pc, #136]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800323e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003240:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003248:	f7ff f9de 	bl	8002608 <HAL_PWREx_GetVoltageRange>
 800324c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800324e:	4b1e      	ldr	r3, [pc, #120]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	4a1d      	ldr	r2, [pc, #116]	@ (80032c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003254:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003258:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003260:	d10b      	bne.n	800327a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b80      	cmp	r3, #128	@ 0x80
 8003266:	d919      	bls.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2ba0      	cmp	r3, #160	@ 0xa0
 800326c:	d902      	bls.n	8003274 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800326e:	2302      	movs	r3, #2
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	e013      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003274:	2301      	movs	r3, #1
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	e010      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b80      	cmp	r3, #128	@ 0x80
 800327e:	d902      	bls.n	8003286 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003280:	2303      	movs	r3, #3
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e00a      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b80      	cmp	r3, #128	@ 0x80
 800328a:	d102      	bne.n	8003292 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800328c:	2302      	movs	r3, #2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	e004      	b.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b70      	cmp	r3, #112	@ 0x70
 8003296:	d101      	bne.n	800329c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003298:	2301      	movs	r3, #1
 800329a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 0207 	bic.w	r2, r3, #7
 80032a4:	4909      	ldr	r1, [pc, #36]	@ (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032ac:	4b07      	ldr	r3, [pc, #28]	@ (80032cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d001      	beq.n	80032be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e000      	b.n	80032c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40022000 	.word	0x40022000

080032d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032d8:	2300      	movs	r3, #0
 80032da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032dc:	2300      	movs	r3, #0
 80032de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d041      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032f4:	d02a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80032f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80032fa:	d824      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80032fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003300:	d008      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003302:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003306:	d81e      	bhi.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800330c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003310:	d010      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003312:	e018      	b.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003314:	4b86      	ldr	r3, [pc, #536]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	4a85      	ldr	r2, [pc, #532]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003320:	e015      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	3304      	adds	r3, #4
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fabb 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 800332e:	4603      	mov	r3, r0
 8003330:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003332:	e00c      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3320      	adds	r3, #32
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f000 fba6 	bl	8003a8c <RCCEx_PLLSAI2_Config>
 8003340:	4603      	mov	r3, r0
 8003342:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	74fb      	strb	r3, [r7, #19]
      break;
 800334a:	e000      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800334c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334e:	7cfb      	ldrb	r3, [r7, #19]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10b      	bne.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003354:	4b76      	ldr	r3, [pc, #472]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003362:	4973      	ldr	r1, [pc, #460]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	4313      	orrs	r3, r2
 8003366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800336a:	e001      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d041      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003380:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003384:	d02a      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003386:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800338a:	d824      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800338c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003390:	d008      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003392:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003396:	d81e      	bhi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00a      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800339c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a0:	d010      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033a2:	e018      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a4:	4b62      	ldr	r3, [pc, #392]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	4a61      	ldr	r2, [pc, #388]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033b0:	e015      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	2100      	movs	r1, #0
 80033b8:	4618      	mov	r0, r3
 80033ba:	f000 fa73 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 80033be:	4603      	mov	r3, r0
 80033c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c2:	e00c      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3320      	adds	r3, #32
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fb5e 	bl	8003a8c <RCCEx_PLLSAI2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	74fb      	strb	r3, [r7, #19]
      break;
 80033da:	e000      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80033dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033de:	7cfb      	ldrb	r3, [r7, #19]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10b      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033e4:	4b52      	ldr	r3, [pc, #328]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033f2:	494f      	ldr	r1, [pc, #316]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80033fa:	e001      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 80a0 	beq.w	800354e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340e:	2300      	movs	r3, #0
 8003410:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003412:	4b47      	ldr	r3, [pc, #284]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00d      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	4b41      	ldr	r3, [pc, #260]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342c:	4a40      	ldr	r2, [pc, #256]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003432:	6593      	str	r3, [r2, #88]	@ 0x58
 8003434:	4b3e      	ldr	r3, [pc, #248]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003438:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003440:	2301      	movs	r3, #1
 8003442:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003444:	4b3b      	ldr	r3, [pc, #236]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a3a      	ldr	r2, [pc, #232]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800344e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003450:	f7fd fe6e 	bl	8001130 <HAL_GetTick>
 8003454:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003456:	e009      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003458:	f7fd fe6a 	bl	8001130 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d902      	bls.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	74fb      	strb	r3, [r7, #19]
        break;
 800346a:	e005      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346c:	4b31      	ldr	r3, [pc, #196]	@ (8003534 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0ef      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003478:	7cfb      	ldrb	r3, [r7, #19]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d15c      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800347e:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003484:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003488:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01f      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	429a      	cmp	r2, r3
 800349a:	d019      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800349c:	4b24      	ldr	r3, [pc, #144]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034a8:	4b21      	ldr	r3, [pc, #132]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ae:	4a20      	ldr	r2, [pc, #128]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034c8:	4a19      	ldr	r2, [pc, #100]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d016      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034da:	f7fd fe29 	bl	8001130 <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034e0:	e00b      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fd fe25 	bl	8001130 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d902      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	74fb      	strb	r3, [r7, #19]
            break;
 80034f8:	e006      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0ec      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003508:	7cfb      	ldrb	r3, [r7, #19]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350e:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003514:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800351e:	4904      	ldr	r1, [pc, #16]	@ (8003530 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003526:	e009      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003528:	7cfb      	ldrb	r3, [r7, #19]
 800352a:	74bb      	strb	r3, [r7, #18]
 800352c:	e006      	b.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003538:	7cfb      	ldrb	r3, [r7, #19]
 800353a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353c:	7c7b      	ldrb	r3, [r7, #17]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d105      	bne.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003542:	4b9e      	ldr	r3, [pc, #632]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003546:	4a9d      	ldr	r2, [pc, #628]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003548:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800354c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800355a:	4b98      	ldr	r3, [pc, #608]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003560:	f023 0203 	bic.w	r2, r3, #3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003568:	4994      	ldr	r1, [pc, #592]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800357c:	4b8f      	ldr	r3, [pc, #572]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003582:	f023 020c 	bic.w	r2, r3, #12
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800358a:	498c      	ldr	r1, [pc, #560]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0304 	and.w	r3, r3, #4
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800359e:	4b87      	ldr	r3, [pc, #540]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	4983      	ldr	r1, [pc, #524]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035c0:	4b7e      	ldr	r3, [pc, #504]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ce:	497b      	ldr	r1, [pc, #492]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035e2:	4b76      	ldr	r3, [pc, #472]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f0:	4972      	ldr	r1, [pc, #456]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0320 	and.w	r3, r3, #32
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003604:	4b6d      	ldr	r3, [pc, #436]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003612:	496a      	ldr	r1, [pc, #424]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003626:	4b65      	ldr	r3, [pc, #404]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003634:	4961      	ldr	r1, [pc, #388]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003648:	4b5c      	ldr	r3, [pc, #368]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003656:	4959      	ldr	r1, [pc, #356]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366a:	4b54      	ldr	r3, [pc, #336]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003670:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003678:	4950      	ldr	r1, [pc, #320]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	4313      	orrs	r3, r2
 800367c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800368c:	4b4b      	ldr	r3, [pc, #300]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003692:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369a:	4948      	ldr	r1, [pc, #288]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036ae:	4b43      	ldr	r3, [pc, #268]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036bc:	493f      	ldr	r1, [pc, #252]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d028      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036d0:	4b3a      	ldr	r3, [pc, #232]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036de:	4937      	ldr	r1, [pc, #220]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036ee:	d106      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036f0:	4b32      	ldr	r3, [pc, #200]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4a31      	ldr	r2, [pc, #196]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036fa:	60d3      	str	r3, [r2, #12]
 80036fc:	e011      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003702:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003706:	d10c      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	2101      	movs	r1, #1
 800370e:	4618      	mov	r0, r3
 8003710:	f000 f8c8 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003718:	7cfb      	ldrb	r3, [r7, #19]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800371e:	7cfb      	ldrb	r3, [r7, #19]
 8003720:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d028      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800372e:	4b23      	ldr	r3, [pc, #140]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373c:	491f      	ldr	r1, [pc, #124]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800374c:	d106      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374e:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4a1a      	ldr	r2, [pc, #104]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003754:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003758:	60d3      	str	r3, [r2, #12]
 800375a:	e011      	b.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3304      	adds	r3, #4
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f000 f899 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003776:	7cfb      	ldrb	r3, [r7, #19]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800377c:	7cfb      	ldrb	r3, [r7, #19]
 800377e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d02b      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800378c:	4b0b      	ldr	r3, [pc, #44]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003792:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800379a:	4908      	ldr	r1, [pc, #32]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037aa:	d109      	bne.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ac:	4b03      	ldr	r3, [pc, #12]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	4a02      	ldr	r2, [pc, #8]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037b6:	60d3      	str	r3, [r2, #12]
 80037b8:	e014      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2101      	movs	r1, #1
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 f867 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d02f      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037f0:	4b2b      	ldr	r3, [pc, #172]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037fe:	4928      	ldr	r1, [pc, #160]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003800:	4313      	orrs	r3, r2
 8003802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800380a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800380e:	d10d      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f844 	bl	80038a4 <RCCEx_PLLSAI1_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d014      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	74bb      	strb	r3, [r7, #18]
 800382a:	e011      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003830:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003834:	d10c      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3320      	adds	r3, #32
 800383a:	2102      	movs	r1, #2
 800383c:	4618      	mov	r0, r3
 800383e:	f000 f925 	bl	8003a8c <RCCEx_PLLSAI2_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800385c:	4b10      	ldr	r3, [pc, #64]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003862:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800386a:	490d      	ldr	r1, [pc, #52]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00b      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800387e:	4b08      	ldr	r3, [pc, #32]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800388e:	4904      	ldr	r1, [pc, #16]	@ (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003896:	7cbb      	ldrb	r3, [r7, #18]
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000

080038a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ae:	2300      	movs	r3, #0
 80038b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038b2:	4b75      	ldr	r3, [pc, #468]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038be:	4b72      	ldr	r3, [pc, #456]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	f003 0203 	and.w	r2, r3, #3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d10d      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
       ||
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80038d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	091b      	lsrs	r3, r3, #4
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
       ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d047      	beq.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e044      	b.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b03      	cmp	r3, #3
 80038f6:	d018      	beq.n	800392a <RCCEx_PLLSAI1_Config+0x86>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d825      	bhi.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d002      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0x62>
 8003900:	2b02      	cmp	r3, #2
 8003902:	d009      	beq.n	8003918 <RCCEx_PLLSAI1_Config+0x74>
 8003904:	e020      	b.n	8003948 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003906:	4b60      	ldr	r3, [pc, #384]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11d      	bne.n	800394e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003916:	e01a      	b.n	800394e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003918:	4b5b      	ldr	r3, [pc, #364]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003928:	e013      	b.n	8003952 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800392a:	4b57      	ldr	r3, [pc, #348]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10f      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003936:	4b54      	ldr	r3, [pc, #336]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003946:	e006      	b.n	8003956 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
      break;
 800394c:	e004      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003956:	bf00      	nop
    }

    if(status == HAL_OK)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800395e:	4b4a      	ldr	r3, [pc, #296]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6819      	ldr	r1, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	430b      	orrs	r3, r1
 8003974:	4944      	ldr	r1, [pc, #272]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003976:	4313      	orrs	r3, r2
 8003978:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800397a:	7bfb      	ldrb	r3, [r7, #15]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d17d      	bne.n	8003a7c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003980:	4b41      	ldr	r3, [pc, #260]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a40      	ldr	r2, [pc, #256]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003986:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800398a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800398c:	f7fd fbd0 	bl	8001130 <HAL_GetTick>
 8003990:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003992:	e009      	b.n	80039a8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003994:	f7fd fbcc 	bl	8001130 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d902      	bls.n	80039a8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	73fb      	strb	r3, [r7, #15]
        break;
 80039a6:	e005      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039a8:	4b37      	ldr	r3, [pc, #220]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ef      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d160      	bne.n	8003a7c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d111      	bne.n	80039e4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039c0:	4b31      	ldr	r3, [pc, #196]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80039c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	0912      	lsrs	r2, r2, #4
 80039d8:	0452      	lsls	r2, r2, #17
 80039da:	430a      	orrs	r2, r1
 80039dc:	492a      	ldr	r1, [pc, #168]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]
 80039e2:	e027      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d112      	bne.n	8003a10 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039ea:	4b27      	ldr	r3, [pc, #156]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80039f2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6892      	ldr	r2, [r2, #8]
 80039fa:	0211      	lsls	r1, r2, #8
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6912      	ldr	r2, [r2, #16]
 8003a00:	0852      	lsrs	r2, r2, #1
 8003a02:	3a01      	subs	r2, #1
 8003a04:	0552      	lsls	r2, r2, #21
 8003a06:	430a      	orrs	r2, r1
 8003a08:	491f      	ldr	r1, [pc, #124]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	610b      	str	r3, [r1, #16]
 8003a0e:	e011      	b.n	8003a34 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a10:	4b1d      	ldr	r3, [pc, #116]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6892      	ldr	r2, [r2, #8]
 8003a20:	0211      	lsls	r1, r2, #8
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6952      	ldr	r2, [r2, #20]
 8003a26:	0852      	lsrs	r2, r2, #1
 8003a28:	3a01      	subs	r2, #1
 8003a2a:	0652      	lsls	r2, r2, #25
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	4916      	ldr	r1, [pc, #88]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a34:	4b14      	ldr	r3, [pc, #80]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a13      	ldr	r2, [pc, #76]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a3a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fd fb76 	bl	8001130 <HAL_GetTick>
 8003a44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a46:	e009      	b.n	8003a5c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a48:	f7fd fb72 	bl	8001130 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d902      	bls.n	8003a5c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	73fb      	strb	r3, [r7, #15]
          break;
 8003a5a:	e005      	b.n	8003a68 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d0ef      	beq.n	8003a48 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d106      	bne.n	8003a7c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a6e:	4b06      	ldr	r3, [pc, #24]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	4904      	ldr	r1, [pc, #16]	@ (8003a88 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000

08003a8c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003aa6:	4b67      	ldr	r3, [pc, #412]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003abe:	4b61      	ldr	r3, [pc, #388]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d047      	beq.n	8003b62 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e044      	b.n	8003b62 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d018      	beq.n	8003b12 <RCCEx_PLLSAI2_Config+0x86>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d825      	bhi.n	8003b30 <RCCEx_PLLSAI2_Config+0xa4>
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d002      	beq.n	8003aee <RCCEx_PLLSAI2_Config+0x62>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d009      	beq.n	8003b00 <RCCEx_PLLSAI2_Config+0x74>
 8003aec:	e020      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aee:	4b55      	ldr	r3, [pc, #340]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e01a      	b.n	8003b36 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b00:	4b50      	ldr	r3, [pc, #320]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e013      	b.n	8003b3a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b12:	4b4c      	ldr	r3, [pc, #304]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1e:	4b49      	ldr	r3, [pc, #292]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b46:	4b3f      	ldr	r3, [pc, #252]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	4939      	ldr	r1, [pc, #228]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d167      	bne.n	8003c38 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b68:	4b36      	ldr	r3, [pc, #216]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a35      	ldr	r2, [pc, #212]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fd fadc 	bl	8001130 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b7c:	f7fd fad8 	bl	8001130 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b90:	4b2c      	ldr	r3, [pc, #176]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d14a      	bne.n	8003c38 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d111      	bne.n	8003bcc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ba8:	4b26      	ldr	r3, [pc, #152]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	0912      	lsrs	r2, r2, #4
 8003bc0:	0452      	lsls	r2, r2, #17
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	491f      	ldr	r1, [pc, #124]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	614b      	str	r3, [r1, #20]
 8003bca:	e011      	b.n	8003bf0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bd4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6892      	ldr	r2, [r2, #8]
 8003bdc:	0211      	lsls	r1, r2, #8
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	6912      	ldr	r2, [r2, #16]
 8003be2:	0852      	lsrs	r2, r2, #1
 8003be4:	3a01      	subs	r2, #1
 8003be6:	0652      	lsls	r2, r2, #25
 8003be8:	430a      	orrs	r2, r1
 8003bea:	4916      	ldr	r1, [pc, #88]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003bf0:	4b14      	ldr	r3, [pc, #80]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a13      	ldr	r2, [pc, #76]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bfa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bfc:	f7fd fa98 	bl	8001130 <HAL_GetTick>
 8003c00:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c02:	e009      	b.n	8003c18 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c04:	f7fd fa94 	bl	8001130 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d902      	bls.n	8003c18 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	73fb      	strb	r3, [r7, #15]
          break;
 8003c16:	e005      	b.n	8003c24 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c18:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d0ef      	beq.n	8003c04 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c2a:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	4904      	ldr	r1, [pc, #16]	@ (8003c44 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000

08003c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e049      	b.n	8003cee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd f86e 	bl	8000d50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f000 fc50 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e049      	b.n	8003d9c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d106      	bne.n	8003d22 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fc ffcb 	bl	8000cb8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	3304      	adds	r3, #4
 8003d32:	4619      	mov	r1, r3
 8003d34:	4610      	mov	r0, r2
 8003d36:	f000 fbf9 	bl	800452c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2201      	movs	r2, #1
 8003d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d101      	bne.n	8003db8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e097      	b.n	8003ee8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fc ffdd 	bl	8000d8c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003de8:	f023 0307 	bic.w	r3, r3, #7
 8003dec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 fb97 	bl	800452c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	021b      	lsls	r3, r3, #8
 8003e36:	4313      	orrs	r3, r2
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e44:	f023 030c 	bic.w	r3, r3, #12
 8003e48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4313      	orrs	r3, r2
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	011a      	lsls	r2, r3, #4
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	031b      	lsls	r3, r3, #12
 8003e74:	4313      	orrs	r3, r2
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	4313      	orrs	r3, r2
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	693a      	ldr	r2, [r7, #16]
 8003eac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01b      	beq.n	8003f54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0202 	mvn.w	r2, #2
 8003f24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7fc fde8 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fad4 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fadb 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f003 0304 	and.w	r3, r3, #4
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d020      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01b      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0204 	mvn.w	r2, #4
 8003f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fc fdc2 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 faae 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fab5 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d020      	beq.n	8003fec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d01b      	beq.n	8003fec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0208 	mvn.w	r2, #8
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2204      	movs	r2, #4
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7fc fd9c 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa88 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa8f 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d020      	beq.n	8004038 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f003 0310 	and.w	r3, r3, #16
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01b      	beq.n	8004038 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f06f 0210 	mvn.w	r2, #16
 8004008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2208      	movs	r2, #8
 800400e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	69db      	ldr	r3, [r3, #28]
 8004016:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7fc fd76 	bl	8000b10 <HAL_TIM_IC_CaptureCallback>
 8004024:	e005      	b.n	8004032 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa62 	bl	80044f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa69 	bl	8004504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f003 0301 	and.w	r3, r3, #1
 800403e:	2b00      	cmp	r3, #0
 8004040:	d00c      	beq.n	800405c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d007      	beq.n	800405c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0201 	mvn.w	r2, #1
 8004054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa40 	bl	80044dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00c      	beq.n	8004080 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 ff7c 	bl	8004f78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00c      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d007      	beq.n	80040a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800409c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 ff74 	bl	8004f8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 fa28 	bl	8004518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0320 	and.w	r3, r3, #32
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d007      	beq.n	80040ec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0220 	mvn.w	r2, #32
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 ff3c 	bl	8004f64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004100:	2300      	movs	r3, #0
 8004102:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_TIM_IC_ConfigChannel+0x1e>
 800410e:	2302      	movs	r3, #2
 8004110:	e088      	b.n	8004224 <HAL_TIM_IC_ConfigChannel+0x130>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2201      	movs	r2, #1
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004130:	f000 fd6c 	bl	8004c0c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	699a      	ldr	r2, [r3, #24]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 020c 	bic.w	r2, r2, #12
 8004142:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	6999      	ldr	r1, [r3, #24]
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	619a      	str	r2, [r3, #24]
 8004156:	e060      	b.n	800421a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b04      	cmp	r3, #4
 800415c:	d11c      	bne.n	8004198 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800416e:	f000 fdbb 	bl	8004ce8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699a      	ldr	r2, [r3, #24]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004180:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6999      	ldr	r1, [r3, #24]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	021a      	lsls	r2, r3, #8
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
 8004196:	e040      	b.n	800421a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b08      	cmp	r3, #8
 800419c:	d11b      	bne.n	80041d6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80041ae:	f000 fdd8 	bl	8004d62 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 020c 	bic.w	r2, r2, #12
 80041c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
 80041d4:	e021      	b.n	800421a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b0c      	cmp	r3, #12
 80041da:	d11c      	bne.n	8004216 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80041ec:	f000 fdf5 	bl	8004dda <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	69da      	ldr	r2, [r3, #28]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80041fe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69d9      	ldr	r1, [r3, #28]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	61da      	str	r2, [r3, #28]
 8004214:	e001      	b.n	800421a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004222:	7dfb      	ldrb	r3, [r7, #23]
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004238:	2300      	movs	r3, #0
 800423a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004242:	2b01      	cmp	r3, #1
 8004244:	d101      	bne.n	800424a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004246:	2302      	movs	r3, #2
 8004248:	e0ff      	b.n	800444a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2201      	movs	r2, #1
 800424e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b14      	cmp	r3, #20
 8004256:	f200 80f0 	bhi.w	800443a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800425a:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800425c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004260:	080042b5 	.word	0x080042b5
 8004264:	0800443b 	.word	0x0800443b
 8004268:	0800443b 	.word	0x0800443b
 800426c:	0800443b 	.word	0x0800443b
 8004270:	080042f5 	.word	0x080042f5
 8004274:	0800443b 	.word	0x0800443b
 8004278:	0800443b 	.word	0x0800443b
 800427c:	0800443b 	.word	0x0800443b
 8004280:	08004337 	.word	0x08004337
 8004284:	0800443b 	.word	0x0800443b
 8004288:	0800443b 	.word	0x0800443b
 800428c:	0800443b 	.word	0x0800443b
 8004290:	08004377 	.word	0x08004377
 8004294:	0800443b 	.word	0x0800443b
 8004298:	0800443b 	.word	0x0800443b
 800429c:	0800443b 	.word	0x0800443b
 80042a0:	080043b9 	.word	0x080043b9
 80042a4:	0800443b 	.word	0x0800443b
 80042a8:	0800443b 	.word	0x0800443b
 80042ac:	0800443b 	.word	0x0800443b
 80042b0:	080043f9 	.word	0x080043f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 f9d0 	bl	8004660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	699a      	ldr	r2, [r3, #24]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0208 	orr.w	r2, r2, #8
 80042ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	699a      	ldr	r2, [r3, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0204 	bic.w	r2, r2, #4
 80042de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6999      	ldr	r1, [r3, #24]
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	619a      	str	r2, [r3, #24]
      break;
 80042f2:	e0a5      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68b9      	ldr	r1, [r7, #8]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 fa40 	bl	8004780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699a      	ldr	r2, [r3, #24]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800430e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	699a      	ldr	r2, [r3, #24]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800431e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6999      	ldr	r1, [r3, #24]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	021a      	lsls	r2, r3, #8
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	430a      	orrs	r2, r1
 8004332:	619a      	str	r2, [r3, #24]
      break;
 8004334:	e084      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 faa9 	bl	8004894 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	69da      	ldr	r2, [r3, #28]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f042 0208 	orr.w	r2, r2, #8
 8004350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69da      	ldr	r2, [r3, #28]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f022 0204 	bic.w	r2, r2, #4
 8004360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	691a      	ldr	r2, [r3, #16]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	61da      	str	r2, [r3, #28]
      break;
 8004374:	e064      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68b9      	ldr	r1, [r7, #8]
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fb11 	bl	80049a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69da      	ldr	r2, [r3, #28]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69d9      	ldr	r1, [r3, #28]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	021a      	lsls	r2, r3, #8
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	61da      	str	r2, [r3, #28]
      break;
 80043b6:	e043      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fb5a 	bl	8004a78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0208 	orr.w	r2, r2, #8
 80043d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f022 0204 	bic.w	r2, r2, #4
 80043e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80043f6:	e023      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68b9      	ldr	r1, [r7, #8]
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fb9e 	bl	8004b40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004422:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	021a      	lsls	r2, r3, #8
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004438:	e002      	b.n	8004440 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
      break;
 800443e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop

08004454 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	2b0c      	cmp	r3, #12
 8004466:	d831      	bhi.n	80044cc <HAL_TIM_ReadCapturedValue+0x78>
 8004468:	a201      	add	r2, pc, #4	@ (adr r2, 8004470 <HAL_TIM_ReadCapturedValue+0x1c>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	080044a5 	.word	0x080044a5
 8004474:	080044cd 	.word	0x080044cd
 8004478:	080044cd 	.word	0x080044cd
 800447c:	080044cd 	.word	0x080044cd
 8004480:	080044af 	.word	0x080044af
 8004484:	080044cd 	.word	0x080044cd
 8004488:	080044cd 	.word	0x080044cd
 800448c:	080044cd 	.word	0x080044cd
 8004490:	080044b9 	.word	0x080044b9
 8004494:	080044cd 	.word	0x080044cd
 8004498:	080044cd 	.word	0x080044cd
 800449c:	080044cd 	.word	0x080044cd
 80044a0:	080044c3 	.word	0x080044c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044aa:	60fb      	str	r3, [r7, #12]

      break;
 80044ac:	e00f      	b.n	80044ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044b4:	60fb      	str	r3, [r7, #12]

      break;
 80044b6:	e00a      	b.n	80044ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044be:	60fb      	str	r3, [r7, #12]

      break;
 80044c0:	e005      	b.n	80044ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	60fb      	str	r3, [r7, #12]

      break;
 80044ca:	e000      	b.n	80044ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044cc:	bf00      	nop
  }

  return tmpreg;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044e4:	bf00      	nop
 80044e6:	370c      	adds	r7, #12
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4a40      	ldr	r2, [pc, #256]	@ (8004640 <TIM_Base_SetConfig+0x114>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a3d      	ldr	r2, [pc, #244]	@ (8004644 <TIM_Base_SetConfig+0x118>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a3c      	ldr	r2, [pc, #240]	@ (8004648 <TIM_Base_SetConfig+0x11c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a3b      	ldr	r2, [pc, #236]	@ (800464c <TIM_Base_SetConfig+0x120>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x40>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a3a      	ldr	r2, [pc, #232]	@ (8004650 <TIM_Base_SetConfig+0x124>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a2f      	ldr	r2, [pc, #188]	@ (8004640 <TIM_Base_SetConfig+0x114>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01f      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d01b      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2c      	ldr	r2, [pc, #176]	@ (8004644 <TIM_Base_SetConfig+0x118>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d017      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a2b      	ldr	r2, [pc, #172]	@ (8004648 <TIM_Base_SetConfig+0x11c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d013      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	@ (800464c <TIM_Base_SetConfig+0x120>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00f      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a29      	ldr	r2, [pc, #164]	@ (8004650 <TIM_Base_SetConfig+0x124>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00b      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a28      	ldr	r2, [pc, #160]	@ (8004654 <TIM_Base_SetConfig+0x128>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a27      	ldr	r2, [pc, #156]	@ (8004658 <TIM_Base_SetConfig+0x12c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0x9a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a26      	ldr	r2, [pc, #152]	@ (800465c <TIM_Base_SetConfig+0x130>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d108      	bne.n	80045d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a10      	ldr	r2, [pc, #64]	@ (8004640 <TIM_Base_SetConfig+0x114>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d00f      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <TIM_Base_SetConfig+0x124>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00b      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a11      	ldr	r2, [pc, #68]	@ (8004654 <TIM_Base_SetConfig+0x128>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d007      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a10      	ldr	r2, [pc, #64]	@ (8004658 <TIM_Base_SetConfig+0x12c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d003      	beq.n	8004624 <TIM_Base_SetConfig+0xf8>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a0f      	ldr	r2, [pc, #60]	@ (800465c <TIM_Base_SetConfig+0x130>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d103      	bne.n	800462c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	615a      	str	r2, [r3, #20]
}
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	40012c00 	.word	0x40012c00
 8004644:	40000400 	.word	0x40000400
 8004648:	40000800 	.word	0x40000800
 800464c:	40000c00 	.word	0x40000c00
 8004650:	40013400 	.word	0x40013400
 8004654:	40014000 	.word	0x40014000
 8004658:	40014400 	.word	0x40014400
 800465c:	40014800 	.word	0x40014800

08004660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
 800466e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f023 0201 	bic.w	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0302 	bic.w	r3, r3, #2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a2c      	ldr	r2, [pc, #176]	@ (800476c <TIM_OC1_SetConfig+0x10c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00f      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004770 <TIM_OC1_SetConfig+0x110>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00b      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a2a      	ldr	r2, [pc, #168]	@ (8004774 <TIM_OC1_SetConfig+0x114>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d007      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a29      	ldr	r2, [pc, #164]	@ (8004778 <TIM_OC1_SetConfig+0x118>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d003      	beq.n	80046e0 <TIM_OC1_SetConfig+0x80>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a28      	ldr	r2, [pc, #160]	@ (800477c <TIM_OC1_SetConfig+0x11c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10c      	bne.n	80046fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f023 0308 	bic.w	r3, r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1b      	ldr	r2, [pc, #108]	@ (800476c <TIM_OC1_SetConfig+0x10c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00f      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1a      	ldr	r2, [pc, #104]	@ (8004770 <TIM_OC1_SetConfig+0x110>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d00b      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a19      	ldr	r2, [pc, #100]	@ (8004774 <TIM_OC1_SetConfig+0x114>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d007      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a18      	ldr	r2, [pc, #96]	@ (8004778 <TIM_OC1_SetConfig+0x118>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d003      	beq.n	8004722 <TIM_OC1_SetConfig+0xc2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a17      	ldr	r2, [pc, #92]	@ (800477c <TIM_OC1_SetConfig+0x11c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d111      	bne.n	8004746 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004728:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004730:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	4313      	orrs	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	621a      	str	r2, [r3, #32]
}
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40013400 	.word	0x40013400
 8004774:	40014000 	.word	0x40014000
 8004778:	40014400 	.word	0x40014400
 800477c:	40014800 	.word	0x40014800

08004780 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0210 	bic.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	4313      	orrs	r3, r2
 80047da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a28      	ldr	r2, [pc, #160]	@ (8004880 <TIM_OC2_SetConfig+0x100>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d003      	beq.n	80047ec <TIM_OC2_SetConfig+0x6c>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a27      	ldr	r2, [pc, #156]	@ (8004884 <TIM_OC2_SetConfig+0x104>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d10d      	bne.n	8004808 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004806:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <TIM_OC2_SetConfig+0x100>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00f      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a1c      	ldr	r2, [pc, #112]	@ (8004884 <TIM_OC2_SetConfig+0x104>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00b      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1b      	ldr	r2, [pc, #108]	@ (8004888 <TIM_OC2_SetConfig+0x108>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d007      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a1a      	ldr	r2, [pc, #104]	@ (800488c <TIM_OC2_SetConfig+0x10c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d003      	beq.n	8004830 <TIM_OC2_SetConfig+0xb0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a19      	ldr	r2, [pc, #100]	@ (8004890 <TIM_OC2_SetConfig+0x110>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d113      	bne.n	8004858 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004836:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800483e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	4313      	orrs	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	4313      	orrs	r3, r2
 8004856:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	621a      	str	r2, [r3, #32]
}
 8004872:	bf00      	nop
 8004874:	371c      	adds	r7, #28
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	40012c00 	.word	0x40012c00
 8004884:	40013400 	.word	0x40013400
 8004888:	40014000 	.word	0x40014000
 800488c:	40014400 	.word	0x40014400
 8004890:	40014800 	.word	0x40014800

08004894 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004894:	b480      	push	{r7}
 8004896:	b087      	sub	sp, #28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69db      	ldr	r3, [r3, #28]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0303 	bic.w	r3, r3, #3
 80048ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	697a      	ldr	r2, [r7, #20]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a27      	ldr	r2, [pc, #156]	@ (8004990 <TIM_OC3_SetConfig+0xfc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d003      	beq.n	80048fe <TIM_OC3_SetConfig+0x6a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a26      	ldr	r2, [pc, #152]	@ (8004994 <TIM_OC3_SetConfig+0x100>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d10d      	bne.n	800491a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004904:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a1c      	ldr	r2, [pc, #112]	@ (8004990 <TIM_OC3_SetConfig+0xfc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a1b      	ldr	r2, [pc, #108]	@ (8004994 <TIM_OC3_SetConfig+0x100>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a1a      	ldr	r2, [pc, #104]	@ (8004998 <TIM_OC3_SetConfig+0x104>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a19      	ldr	r2, [pc, #100]	@ (800499c <TIM_OC3_SetConfig+0x108>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_OC3_SetConfig+0xae>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a18      	ldr	r2, [pc, #96]	@ (80049a0 <TIM_OC3_SetConfig+0x10c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d113      	bne.n	800496a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	011b      	lsls	r3, r3, #4
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	4313      	orrs	r3, r2
 800495c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40012c00 	.word	0x40012c00
 8004994:	40013400 	.word	0x40013400
 8004998:	40014000 	.word	0x40014000
 800499c:	40014400 	.word	0x40014400
 80049a0:	40014800 	.word	0x40014800

080049a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	69db      	ldr	r3, [r3, #28]
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a18      	ldr	r2, [pc, #96]	@ (8004a64 <TIM_OC4_SetConfig+0xc0>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00f      	beq.n	8004a28 <TIM_OC4_SetConfig+0x84>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	@ (8004a68 <TIM_OC4_SetConfig+0xc4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d00b      	beq.n	8004a28 <TIM_OC4_SetConfig+0x84>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <TIM_OC4_SetConfig+0xc8>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d007      	beq.n	8004a28 <TIM_OC4_SetConfig+0x84>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a15      	ldr	r2, [pc, #84]	@ (8004a70 <TIM_OC4_SetConfig+0xcc>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_OC4_SetConfig+0x84>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a14      	ldr	r2, [pc, #80]	@ (8004a74 <TIM_OC4_SetConfig+0xd0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d109      	bne.n	8004a3c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	019b      	lsls	r3, r3, #6
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	621a      	str	r2, [r3, #32]
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40012c00 	.word	0x40012c00
 8004a68:	40013400 	.word	0x40013400
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004abc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4a17      	ldr	r2, [pc, #92]	@ (8004b2c <TIM_OC5_SetConfig+0xb4>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d00f      	beq.n	8004af2 <TIM_OC5_SetConfig+0x7a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a16      	ldr	r2, [pc, #88]	@ (8004b30 <TIM_OC5_SetConfig+0xb8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00b      	beq.n	8004af2 <TIM_OC5_SetConfig+0x7a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <TIM_OC5_SetConfig+0xbc>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d007      	beq.n	8004af2 <TIM_OC5_SetConfig+0x7a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <TIM_OC5_SetConfig+0xc0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d003      	beq.n	8004af2 <TIM_OC5_SetConfig+0x7a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a13      	ldr	r2, [pc, #76]	@ (8004b3c <TIM_OC5_SetConfig+0xc4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d109      	bne.n	8004b06 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004af8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	621a      	str	r2, [r3, #32]
}
 8004b20:	bf00      	nop
 8004b22:	371c      	adds	r7, #28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr
 8004b2c:	40012c00 	.word	0x40012c00
 8004b30:	40013400 	.word	0x40013400
 8004b34:	40014000 	.word	0x40014000
 8004b38:	40014400 	.word	0x40014400
 8004b3c:	40014800 	.word	0x40014800

08004b40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	051b      	lsls	r3, r3, #20
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a18      	ldr	r2, [pc, #96]	@ (8004bf8 <TIM_OC6_SetConfig+0xb8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00f      	beq.n	8004bbc <TIM_OC6_SetConfig+0x7c>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	@ (8004bfc <TIM_OC6_SetConfig+0xbc>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d00b      	beq.n	8004bbc <TIM_OC6_SetConfig+0x7c>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a16      	ldr	r2, [pc, #88]	@ (8004c00 <TIM_OC6_SetConfig+0xc0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d007      	beq.n	8004bbc <TIM_OC6_SetConfig+0x7c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a15      	ldr	r2, [pc, #84]	@ (8004c04 <TIM_OC6_SetConfig+0xc4>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d003      	beq.n	8004bbc <TIM_OC6_SetConfig+0x7c>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	@ (8004c08 <TIM_OC6_SetConfig+0xc8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d109      	bne.n	8004bd0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	697a      	ldr	r2, [r7, #20]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	621a      	str	r2, [r3, #32]
}
 8004bea:	bf00      	nop
 8004bec:	371c      	adds	r7, #28
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40013400 	.word	0x40013400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	607a      	str	r2, [r7, #4]
 8004c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 0201 	bic.w	r2, r3, #1
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4a26      	ldr	r2, [pc, #152]	@ (8004cd0 <TIM_TI1_SetConfig+0xc4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d017      	beq.n	8004c6a <TIM_TI1_SetConfig+0x5e>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c40:	d013      	beq.n	8004c6a <TIM_TI1_SetConfig+0x5e>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a23      	ldr	r2, [pc, #140]	@ (8004cd4 <TIM_TI1_SetConfig+0xc8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00f      	beq.n	8004c6a <TIM_TI1_SetConfig+0x5e>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a22      	ldr	r2, [pc, #136]	@ (8004cd8 <TIM_TI1_SetConfig+0xcc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00b      	beq.n	8004c6a <TIM_TI1_SetConfig+0x5e>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <TIM_TI1_SetConfig+0xd0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d007      	beq.n	8004c6a <TIM_TI1_SetConfig+0x5e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	@ (8004ce0 <TIM_TI1_SetConfig+0xd4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d003      	beq.n	8004c6a <TIM_TI1_SetConfig+0x5e>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <TIM_TI1_SetConfig+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <TIM_TI1_SetConfig+0x62>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e000      	b.n	8004c70 <TIM_TI1_SetConfig+0x64>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0303 	bic.w	r3, r3, #3
 8004c7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	e003      	b.n	8004c8e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	011b      	lsls	r3, r3, #4
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f023 030a 	bic.w	r3, r3, #10
 8004ca8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f003 030a 	and.w	r3, r3, #10
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40014000 	.word	0x40014000

08004ce8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
 8004cf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f023 0210 	bic.w	r2, r3, #16
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	021b      	lsls	r3, r3, #8
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	031b      	lsls	r3, r3, #12
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	693a      	ldr	r2, [r7, #16]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004d44:	697a      	ldr	r2, [r7, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	621a      	str	r2, [r3, #32]
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr

08004d62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d62:	b480      	push	{r7}
 8004d64:	b087      	sub	sp, #28
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	60f8      	str	r0, [r7, #12]
 8004d6a:	60b9      	str	r1, [r7, #8]
 8004d6c:	607a      	str	r2, [r7, #4]
 8004d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6a1b      	ldr	r3, [r3, #32]
 8004d7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004db2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	621a      	str	r2, [r3, #32]
}
 8004dce:	bf00      	nop
 8004dd0:	371c      	adds	r7, #28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr

08004dda <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	b087      	sub	sp, #28
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	021b      	lsls	r3, r3, #8
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	621a      	str	r2, [r3, #32]
}
 8004e48:	bf00      	nop
 8004e4a:	371c      	adds	r7, #28
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e068      	b.n	8004f3e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2202      	movs	r2, #2
 8004e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a2e      	ldr	r2, [pc, #184]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d108      	bne.n	8004eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f4c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01d      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ede:	d018      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d013      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	@ (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d00e      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a18      	ldr	r2, [pc, #96]	@ (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d009      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a13      	ldr	r2, [pc, #76]	@ (8004f50 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d004      	beq.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a14      	ldr	r2, [pc, #80]	@ (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d10c      	bne.n	8004f2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3714      	adds	r7, #20
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40012c00 	.word	0x40012c00
 8004f50:	40013400 	.word	0x40013400
 8004f54:	40000400 	.word	0x40000400
 8004f58:	40000800 	.word	0x40000800
 8004f5c:	40000c00 	.word	0x40000c00
 8004f60:	40014000 	.word	0x40014000

08004f64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e040      	b.n	8005034 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d106      	bne.n	8004fc8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7fb ff7a 	bl	8000ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2224      	movs	r2, #36	@ 0x24
 8004fcc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0201 	bic.w	r2, r2, #1
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f000 fae0 	bl	80055ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f825 	bl	800503c <UART_SetConfig>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d101      	bne.n	8004ffc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e01b      	b.n	8005034 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800500a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800501a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fb5f 	bl	80056f0 <UART_CheckIdleState>
 8005032:	4603      	mov	r3, r0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800503c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005040:	b08a      	sub	sp, #40	@ 0x28
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	689a      	ldr	r2, [r3, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	431a      	orrs	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	431a      	orrs	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	4313      	orrs	r3, r2
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	4ba4      	ldr	r3, [pc, #656]	@ (80052fc <UART_SetConfig+0x2c0>)
 800506c:	4013      	ands	r3, r2
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005074:	430b      	orrs	r3, r1
 8005076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a99      	ldr	r2, [pc, #612]	@ (8005300 <UART_SetConfig+0x2c4>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d004      	beq.n	80050a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050a4:	4313      	orrs	r3, r2
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a90      	ldr	r2, [pc, #576]	@ (8005304 <UART_SetConfig+0x2c8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d126      	bne.n	8005114 <UART_SetConfig+0xd8>
 80050c6:	4b90      	ldr	r3, [pc, #576]	@ (8005308 <UART_SetConfig+0x2cc>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	2b03      	cmp	r3, #3
 80050d2:	d81b      	bhi.n	800510c <UART_SetConfig+0xd0>
 80050d4:	a201      	add	r2, pc, #4	@ (adr r2, 80050dc <UART_SetConfig+0xa0>)
 80050d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050da:	bf00      	nop
 80050dc:	080050ed 	.word	0x080050ed
 80050e0:	080050fd 	.word	0x080050fd
 80050e4:	080050f5 	.word	0x080050f5
 80050e8:	08005105 	.word	0x08005105
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f2:	e116      	b.n	8005322 <UART_SetConfig+0x2e6>
 80050f4:	2302      	movs	r3, #2
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fa:	e112      	b.n	8005322 <UART_SetConfig+0x2e6>
 80050fc:	2304      	movs	r3, #4
 80050fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005102:	e10e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005104:	2308      	movs	r3, #8
 8005106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800510a:	e10a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800510c:	2310      	movs	r3, #16
 800510e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005112:	e106      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7c      	ldr	r2, [pc, #496]	@ (800530c <UART_SetConfig+0x2d0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d138      	bne.n	8005190 <UART_SetConfig+0x154>
 800511e:	4b7a      	ldr	r3, [pc, #488]	@ (8005308 <UART_SetConfig+0x2cc>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d82d      	bhi.n	8005188 <UART_SetConfig+0x14c>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <UART_SetConfig+0xf8>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005169 	.word	0x08005169
 8005138:	08005189 	.word	0x08005189
 800513c:	08005189 	.word	0x08005189
 8005140:	08005189 	.word	0x08005189
 8005144:	08005179 	.word	0x08005179
 8005148:	08005189 	.word	0x08005189
 800514c:	08005189 	.word	0x08005189
 8005150:	08005189 	.word	0x08005189
 8005154:	08005171 	.word	0x08005171
 8005158:	08005189 	.word	0x08005189
 800515c:	08005189 	.word	0x08005189
 8005160:	08005189 	.word	0x08005189
 8005164:	08005181 	.word	0x08005181
 8005168:	2300      	movs	r3, #0
 800516a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516e:	e0d8      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005170:	2302      	movs	r3, #2
 8005172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005176:	e0d4      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005178:	2304      	movs	r3, #4
 800517a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517e:	e0d0      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005180:	2308      	movs	r3, #8
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005186:	e0cc      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005188:	2310      	movs	r3, #16
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518e:	e0c8      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a5e      	ldr	r2, [pc, #376]	@ (8005310 <UART_SetConfig+0x2d4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d125      	bne.n	80051e6 <UART_SetConfig+0x1aa>
 800519a:	4b5b      	ldr	r3, [pc, #364]	@ (8005308 <UART_SetConfig+0x2cc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051a4:	2b30      	cmp	r3, #48	@ 0x30
 80051a6:	d016      	beq.n	80051d6 <UART_SetConfig+0x19a>
 80051a8:	2b30      	cmp	r3, #48	@ 0x30
 80051aa:	d818      	bhi.n	80051de <UART_SetConfig+0x1a2>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d00a      	beq.n	80051c6 <UART_SetConfig+0x18a>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d814      	bhi.n	80051de <UART_SetConfig+0x1a2>
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d002      	beq.n	80051be <UART_SetConfig+0x182>
 80051b8:	2b10      	cmp	r3, #16
 80051ba:	d008      	beq.n	80051ce <UART_SetConfig+0x192>
 80051bc:	e00f      	b.n	80051de <UART_SetConfig+0x1a2>
 80051be:	2300      	movs	r3, #0
 80051c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c4:	e0ad      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051c6:	2302      	movs	r3, #2
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051cc:	e0a9      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051ce:	2304      	movs	r3, #4
 80051d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d4:	e0a5      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051d6:	2308      	movs	r3, #8
 80051d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051dc:	e0a1      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051de:	2310      	movs	r3, #16
 80051e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e4:	e09d      	b.n	8005322 <UART_SetConfig+0x2e6>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005314 <UART_SetConfig+0x2d8>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d125      	bne.n	800523c <UART_SetConfig+0x200>
 80051f0:	4b45      	ldr	r3, [pc, #276]	@ (8005308 <UART_SetConfig+0x2cc>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80051fc:	d016      	beq.n	800522c <UART_SetConfig+0x1f0>
 80051fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005200:	d818      	bhi.n	8005234 <UART_SetConfig+0x1f8>
 8005202:	2b80      	cmp	r3, #128	@ 0x80
 8005204:	d00a      	beq.n	800521c <UART_SetConfig+0x1e0>
 8005206:	2b80      	cmp	r3, #128	@ 0x80
 8005208:	d814      	bhi.n	8005234 <UART_SetConfig+0x1f8>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <UART_SetConfig+0x1d8>
 800520e:	2b40      	cmp	r3, #64	@ 0x40
 8005210:	d008      	beq.n	8005224 <UART_SetConfig+0x1e8>
 8005212:	e00f      	b.n	8005234 <UART_SetConfig+0x1f8>
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800521a:	e082      	b.n	8005322 <UART_SetConfig+0x2e6>
 800521c:	2302      	movs	r3, #2
 800521e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005222:	e07e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005224:	2304      	movs	r3, #4
 8005226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522a:	e07a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800522c:	2308      	movs	r3, #8
 800522e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005232:	e076      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005234:	2310      	movs	r3, #16
 8005236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523a:	e072      	b.n	8005322 <UART_SetConfig+0x2e6>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a35      	ldr	r2, [pc, #212]	@ (8005318 <UART_SetConfig+0x2dc>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d12a      	bne.n	800529c <UART_SetConfig+0x260>
 8005246:	4b30      	ldr	r3, [pc, #192]	@ (8005308 <UART_SetConfig+0x2cc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005250:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005254:	d01a      	beq.n	800528c <UART_SetConfig+0x250>
 8005256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525a:	d81b      	bhi.n	8005294 <UART_SetConfig+0x258>
 800525c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005260:	d00c      	beq.n	800527c <UART_SetConfig+0x240>
 8005262:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005266:	d815      	bhi.n	8005294 <UART_SetConfig+0x258>
 8005268:	2b00      	cmp	r3, #0
 800526a:	d003      	beq.n	8005274 <UART_SetConfig+0x238>
 800526c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005270:	d008      	beq.n	8005284 <UART_SetConfig+0x248>
 8005272:	e00f      	b.n	8005294 <UART_SetConfig+0x258>
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527a:	e052      	b.n	8005322 <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e04e      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e04a      	b.n	8005322 <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005292:	e046      	b.n	8005322 <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e042      	b.n	8005322 <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a17      	ldr	r2, [pc, #92]	@ (8005300 <UART_SetConfig+0x2c4>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d13a      	bne.n	800531c <UART_SetConfig+0x2e0>
 80052a6:	4b18      	ldr	r3, [pc, #96]	@ (8005308 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80052b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052b4:	d01a      	beq.n	80052ec <UART_SetConfig+0x2b0>
 80052b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0x2b8>
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c0:	d00c      	beq.n	80052dc <UART_SetConfig+0x2a0>
 80052c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c6:	d815      	bhi.n	80052f4 <UART_SetConfig+0x2b8>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <UART_SetConfig+0x298>
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052d0:	d008      	beq.n	80052e4 <UART_SetConfig+0x2a8>
 80052d2:	e00f      	b.n	80052f4 <UART_SetConfig+0x2b8>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052da:	e022      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e2:	e01e      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ea:	e01a      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f2:	e016      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fa:	e012      	b.n	8005322 <UART_SetConfig+0x2e6>
 80052fc:	efff69f3 	.word	0xefff69f3
 8005300:	40008000 	.word	0x40008000
 8005304:	40013800 	.word	0x40013800
 8005308:	40021000 	.word	0x40021000
 800530c:	40004400 	.word	0x40004400
 8005310:	40004800 	.word	0x40004800
 8005314:	40004c00 	.word	0x40004c00
 8005318:	40005000 	.word	0x40005000
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a9f      	ldr	r2, [pc, #636]	@ (80055a4 <UART_SetConfig+0x568>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d17a      	bne.n	8005422 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800532c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005330:	2b08      	cmp	r3, #8
 8005332:	d824      	bhi.n	800537e <UART_SetConfig+0x342>
 8005334:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <UART_SetConfig+0x300>)
 8005336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533a:	bf00      	nop
 800533c:	08005361 	.word	0x08005361
 8005340:	0800537f 	.word	0x0800537f
 8005344:	08005369 	.word	0x08005369
 8005348:	0800537f 	.word	0x0800537f
 800534c:	0800536f 	.word	0x0800536f
 8005350:	0800537f 	.word	0x0800537f
 8005354:	0800537f 	.word	0x0800537f
 8005358:	0800537f 	.word	0x0800537f
 800535c:	08005377 	.word	0x08005377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005360:	f7fd ff2a 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8005364:	61f8      	str	r0, [r7, #28]
        break;
 8005366:	e010      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005368:	4b8f      	ldr	r3, [pc, #572]	@ (80055a8 <UART_SetConfig+0x56c>)
 800536a:	61fb      	str	r3, [r7, #28]
        break;
 800536c:	e00d      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800536e:	f7fd fe8b 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8005372:	61f8      	str	r0, [r7, #28]
        break;
 8005374:	e009      	b.n	800538a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800537a:	61fb      	str	r3, [r7, #28]
        break;
 800537c:	e005      	b.n	800538a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005388:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f000 80fb 	beq.w	8005588 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	005b      	lsls	r3, r3, #1
 800539a:	4413      	add	r3, r2
 800539c:	69fa      	ldr	r2, [r7, #28]
 800539e:	429a      	cmp	r2, r3
 80053a0:	d305      	bcc.n	80053ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053a8:	69fa      	ldr	r2, [r7, #28]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d903      	bls.n	80053b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053b4:	e0e8      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	2200      	movs	r2, #0
 80053ba:	461c      	mov	r4, r3
 80053bc:	4615      	mov	r5, r2
 80053be:	f04f 0200 	mov.w	r2, #0
 80053c2:	f04f 0300 	mov.w	r3, #0
 80053c6:	022b      	lsls	r3, r5, #8
 80053c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80053cc:	0222      	lsls	r2, r4, #8
 80053ce:	68f9      	ldr	r1, [r7, #12]
 80053d0:	6849      	ldr	r1, [r1, #4]
 80053d2:	0849      	lsrs	r1, r1, #1
 80053d4:	2000      	movs	r0, #0
 80053d6:	4688      	mov	r8, r1
 80053d8:	4681      	mov	r9, r0
 80053da:	eb12 0a08 	adds.w	sl, r2, r8
 80053de:	eb43 0b09 	adc.w	fp, r3, r9
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053f0:	4650      	mov	r0, sl
 80053f2:	4659      	mov	r1, fp
 80053f4:	f7fa fee8 	bl	80001c8 <__aeabi_uldivmod>
 80053f8:	4602      	mov	r2, r0
 80053fa:	460b      	mov	r3, r1
 80053fc:	4613      	mov	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005406:	d308      	bcc.n	800541a <UART_SetConfig+0x3de>
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800540e:	d204      	bcs.n	800541a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	60da      	str	r2, [r3, #12]
 8005418:	e0b6      	b.n	8005588 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005420:	e0b2      	b.n	8005588 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800542a:	d15e      	bne.n	80054ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800542c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005430:	2b08      	cmp	r3, #8
 8005432:	d828      	bhi.n	8005486 <UART_SetConfig+0x44a>
 8005434:	a201      	add	r2, pc, #4	@ (adr r2, 800543c <UART_SetConfig+0x400>)
 8005436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543a:	bf00      	nop
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	08005487 	.word	0x08005487
 800544c:	08005477 	.word	0x08005477
 8005450:	08005487 	.word	0x08005487
 8005454:	08005487 	.word	0x08005487
 8005458:	08005487 	.word	0x08005487
 800545c:	0800547f 	.word	0x0800547f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005460:	f7fd feaa 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8005464:	61f8      	str	r0, [r7, #28]
        break;
 8005466:	e014      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7fd febc 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 800546c:	61f8      	str	r0, [r7, #28]
        break;
 800546e:	e010      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005470:	4b4d      	ldr	r3, [pc, #308]	@ (80055a8 <UART_SetConfig+0x56c>)
 8005472:	61fb      	str	r3, [r7, #28]
        break;
 8005474:	e00d      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005476:	f7fd fe07 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 800547a:	61f8      	str	r0, [r7, #28]
        break;
 800547c:	e009      	b.n	8005492 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800547e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005482:	61fb      	str	r3, [r7, #28]
        break;
 8005484:	e005      	b.n	8005492 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d077      	beq.n	8005588 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005a      	lsls	r2, r3, #1
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	441a      	add	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	d916      	bls.n	80054e2 <UART_SetConfig+0x4a6>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ba:	d212      	bcs.n	80054e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	f023 030f 	bic.w	r3, r3, #15
 80054c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	085b      	lsrs	r3, r3, #1
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	b29a      	uxth	r2, r3
 80054d2:	8afb      	ldrh	r3, [r7, #22]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	8afa      	ldrh	r2, [r7, #22]
 80054de:	60da      	str	r2, [r3, #12]
 80054e0:	e052      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054e8:	e04e      	b.n	8005588 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054ea:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054ee:	2b08      	cmp	r3, #8
 80054f0:	d827      	bhi.n	8005542 <UART_SetConfig+0x506>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <UART_SetConfig+0x4bc>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800552d 	.word	0x0800552d
 8005504:	08005543 	.word	0x08005543
 8005508:	08005533 	.word	0x08005533
 800550c:	08005543 	.word	0x08005543
 8005510:	08005543 	.word	0x08005543
 8005514:	08005543 	.word	0x08005543
 8005518:	0800553b 	.word	0x0800553b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800551c:	f7fd fe4c 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8005520:	61f8      	str	r0, [r7, #28]
        break;
 8005522:	e014      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005524:	f7fd fe5e 	bl	80031e4 <HAL_RCC_GetPCLK2Freq>
 8005528:	61f8      	str	r0, [r7, #28]
        break;
 800552a:	e010      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800552c:	4b1e      	ldr	r3, [pc, #120]	@ (80055a8 <UART_SetConfig+0x56c>)
 800552e:	61fb      	str	r3, [r7, #28]
        break;
 8005530:	e00d      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005532:	f7fd fda9 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8005536:	61f8      	str	r0, [r7, #28]
        break;
 8005538:	e009      	b.n	800554e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800553e:	61fb      	str	r3, [r7, #28]
        break;
 8005540:	e005      	b.n	800554e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800554c:	bf00      	nop
    }

    if (pclk != 0U)
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d019      	beq.n	8005588 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	085a      	lsrs	r2, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	441a      	add	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	fbb2 f3f3 	udiv	r3, r2, r3
 8005566:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b0f      	cmp	r3, #15
 800556c:	d909      	bls.n	8005582 <UART_SetConfig+0x546>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005574:	d205      	bcs.n	8005582 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	60da      	str	r2, [r3, #12]
 8005580:	e002      	b.n	8005588 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005594:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	@ 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055a2:	bf00      	nop
 80055a4:	40008000 	.word	0x40008000
 80055a8:	00f42400 	.word	0x00f42400

080055ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b8:	f003 0308 	and.w	r3, r3, #8
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d00a      	beq.n	80055d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00a      	beq.n	80055f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fc:	f003 0302 	and.w	r3, r3, #2
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00a      	beq.n	800561a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	430a      	orrs	r2, r1
 8005618:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561e:	f003 0304 	and.w	r3, r3, #4
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	f003 0310 	and.w	r3, r3, #16
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	430a      	orrs	r2, r1
 800565c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	f003 0320 	and.w	r3, r3, #32
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00a      	beq.n	8005680 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	430a      	orrs	r2, r1
 800567e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01a      	beq.n	80056c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056aa:	d10a      	bne.n	80056c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	430a      	orrs	r2, r1
 80056c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	605a      	str	r2, [r3, #4]
  }
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b098      	sub	sp, #96	@ 0x60
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005700:	f7fb fd16 	bl	8001130 <HAL_GetTick>
 8005704:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d12e      	bne.n	8005772 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005714:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005718:	9300      	str	r3, [sp, #0]
 800571a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571c:	2200      	movs	r2, #0
 800571e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 f88c 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d021      	beq.n	8005772 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	e853 3f00 	ldrex	r3, [r3]
 800573a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800573c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800573e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005742:	653b      	str	r3, [r7, #80]	@ 0x50
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	461a      	mov	r2, r3
 800574a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800574c:	647b      	str	r3, [r7, #68]	@ 0x44
 800574e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005752:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005754:	e841 2300 	strex	r3, r2, [r1]
 8005758:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800575a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e6      	bne.n	800572e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e062      	b.n	8005838 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d149      	bne.n	8005814 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005780:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005788:	2200      	movs	r2, #0
 800578a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f856 	bl	8005840 <UART_WaitOnFlagUntilTimeout>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d03c      	beq.n	8005814 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	623b      	str	r3, [r7, #32]
   return(result);
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	461a      	mov	r2, r3
 80057b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e6      	bne.n	800579a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	3308      	adds	r3, #8
 80057d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	e853 3f00 	ldrex	r3, [r3]
 80057da:	60fb      	str	r3, [r7, #12]
   return(result);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3308      	adds	r3, #8
 80057ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057ec:	61fa      	str	r2, [r7, #28]
 80057ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f0:	69b9      	ldr	r1, [r7, #24]
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	e841 2300 	strex	r3, r2, [r1]
 80057f8:	617b      	str	r3, [r7, #20]
   return(result);
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d1e5      	bne.n	80057cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2220      	movs	r2, #32
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e011      	b.n	8005838 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3758      	adds	r7, #88	@ 0x58
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	4613      	mov	r3, r2
 800584e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005850:	e049      	b.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d045      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585a:	f7fb fc69 	bl	8001130 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	429a      	cmp	r2, r3
 8005868:	d302      	bcc.n	8005870 <UART_WaitOnFlagUntilTimeout+0x30>
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e048      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d031      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b08      	cmp	r3, #8
 800588e:	d110      	bne.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2208      	movs	r2, #8
 8005896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 f838 	bl	800590e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2208      	movs	r2, #8
 80058a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e029      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c0:	d111      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f81e 	bl	800590e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	e00f      	b.n	8005906 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4013      	ands	r3, r2
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	461a      	mov	r2, r3
 80058fe:	79fb      	ldrb	r3, [r7, #7]
 8005900:	429a      	cmp	r2, r3
 8005902:	d0a6      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800590e:	b480      	push	{r7}
 8005910:	b095      	sub	sp, #84	@ 0x54
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800591e:	e853 3f00 	ldrex	r3, [r3]
 8005922:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800592a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005934:	643b      	str	r3, [r7, #64]	@ 0x40
 8005936:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800593a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e6      	bne.n	8005916 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	3308      	adds	r3, #8
 800594e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	e853 3f00 	ldrex	r3, [r3]
 8005956:	61fb      	str	r3, [r7, #28]
   return(result);
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f023 0301 	bic.w	r3, r3, #1
 800595e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3308      	adds	r3, #8
 8005966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800596a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800596e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005970:	e841 2300 	strex	r3, r2, [r1]
 8005974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e5      	bne.n	8005948 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005980:	2b01      	cmp	r3, #1
 8005982:	d118      	bne.n	80059b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	60bb      	str	r3, [r7, #8]
   return(result);
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f023 0310 	bic.w	r3, r3, #16
 8005998:	647b      	str	r3, [r7, #68]	@ 0x44
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6979      	ldr	r1, [r7, #20]
 80059a8:	69ba      	ldr	r2, [r7, #24]
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	613b      	str	r3, [r7, #16]
   return(result);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e6      	bne.n	8005984 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059ca:	bf00      	nop
 80059cc:	3754      	adds	r7, #84	@ 0x54
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <memset>:
 80059d6:	4402      	add	r2, r0
 80059d8:	4603      	mov	r3, r0
 80059da:	4293      	cmp	r3, r2
 80059dc:	d100      	bne.n	80059e0 <memset+0xa>
 80059de:	4770      	bx	lr
 80059e0:	f803 1b01 	strb.w	r1, [r3], #1
 80059e4:	e7f9      	b.n	80059da <memset+0x4>
	...

080059e8 <__libc_init_array>:
 80059e8:	b570      	push	{r4, r5, r6, lr}
 80059ea:	4d0d      	ldr	r5, [pc, #52]	@ (8005a20 <__libc_init_array+0x38>)
 80059ec:	4c0d      	ldr	r4, [pc, #52]	@ (8005a24 <__libc_init_array+0x3c>)
 80059ee:	1b64      	subs	r4, r4, r5
 80059f0:	10a4      	asrs	r4, r4, #2
 80059f2:	2600      	movs	r6, #0
 80059f4:	42a6      	cmp	r6, r4
 80059f6:	d109      	bne.n	8005a0c <__libc_init_array+0x24>
 80059f8:	4d0b      	ldr	r5, [pc, #44]	@ (8005a28 <__libc_init_array+0x40>)
 80059fa:	4c0c      	ldr	r4, [pc, #48]	@ (8005a2c <__libc_init_array+0x44>)
 80059fc:	f000 f818 	bl	8005a30 <_init>
 8005a00:	1b64      	subs	r4, r4, r5
 8005a02:	10a4      	asrs	r4, r4, #2
 8005a04:	2600      	movs	r6, #0
 8005a06:	42a6      	cmp	r6, r4
 8005a08:	d105      	bne.n	8005a16 <__libc_init_array+0x2e>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a10:	4798      	blx	r3
 8005a12:	3601      	adds	r6, #1
 8005a14:	e7ee      	b.n	80059f4 <__libc_init_array+0xc>
 8005a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1a:	4798      	blx	r3
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7f2      	b.n	8005a06 <__libc_init_array+0x1e>
 8005a20:	08005a98 	.word	0x08005a98
 8005a24:	08005a98 	.word	0x08005a98
 8005a28:	08005a98 	.word	0x08005a98
 8005a2c:	08005a9c 	.word	0x08005a9c

08005a30 <_init>:
 8005a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a32:	bf00      	nop
 8005a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a36:	bc08      	pop	{r3}
 8005a38:	469e      	mov	lr, r3
 8005a3a:	4770      	bx	lr

08005a3c <_fini>:
 8005a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3e:	bf00      	nop
 8005a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a42:	bc08      	pop	{r3}
 8005a44:	469e      	mov	lr, r3
 8005a46:	4770      	bx	lr
