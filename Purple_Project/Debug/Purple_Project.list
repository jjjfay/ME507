
Purple_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fbc  08006fbc  000080b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006fbc  08006fbc  00007fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc4  08006fc4  000080b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc4  08006fc4  00007fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fc8  08006fc8  00007fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000b0  20000000  08006fcc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  200000b0  0800707c  000080b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000043c  0800707c  0000843c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000080b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ebf  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf3  00000000  00000000  0001df9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00020b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f53  00000000  00000000  00021f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a241  00000000  00000000  00022e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017120  00000000  00000000  0004d0dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107f9d  00000000  00000000  000641fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b4c  00000000  00000000  0016c1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00171d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b0 	.word	0x200000b0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f08 	.word	0x08006f08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b4 	.word	0x200000b4
 80001cc:	08006f08 	.word	0x08006f08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_init>:
/**
 * @brief A function to initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_init(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize the motor driver channels
	start_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fb35 	bl	8000bdc <start_PWM>

	//initialize the encoder reader channels
	init_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f804 	bl	8000584 <init_channels>


}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <init_channels>:
/**
 * @brief A function to initialize the channels for reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void init_channels(encoder_t* p_enc){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	HAL_TIM_Encoder_Start(p_enc->hal_tim,  p_enc->channel1);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689a      	ldr	r2, [r3, #8]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4619      	mov	r1, r3
 8000596:	4610      	mov	r0, r2
 8000598:	f003 ff97 	bl	80044ca <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  p_enc->channel2);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	689a      	ldr	r2, [r3, #8]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4619      	mov	r1, r3
 80005a6:	4610      	mov	r0, r2
 80005a8:	f003 ff8f 	bl	80044ca <HAL_TIM_Encoder_Start>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	controller_init(&spin_cont);
 80005b8:	480f      	ldr	r0, [pc, #60]	@ (80005f8 <main+0x44>)
 80005ba:	f7ff ffd1 	bl	8000560 <controller_init>

	set_stby(&spin_mot,1);
 80005be:	2101      	movs	r1, #1
 80005c0:	480e      	ldr	r0, [pc, #56]	@ (80005fc <main+0x48>)
 80005c2:	f000 fbe5 	bl	8000d90 <set_stby>

	set_duty(&spin_mot,799999);
 80005c6:	490e      	ldr	r1, [pc, #56]	@ (8000600 <main+0x4c>)
 80005c8:	480c      	ldr	r0, [pc, #48]	@ (80005fc <main+0x48>)
 80005ca:	f000 fb17 	bl	8000bfc <set_duty>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ce:	f000 ff14 	bl	80013fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d2:	f000 f817 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d6:	f000 fa85 	bl	8000ae4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005da:	f000 f8db 	bl	8000794 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005de:	f000 f933 	bl	8000848 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005e2:	f000 f997 	bl	8000914 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005e6:	f000 f9f7 	bl	80009d8 <MX_TIM4_Init>
  MX_UART4_Init();
 80005ea:	f000 fa4b 	bl	8000a84 <MX_UART4_Init>
  MX_ADC1_Init();
 80005ee:	f000 f85b 	bl	80006a8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x3e>
 80005f6:	bf00      	nop
 80005f8:	20000038 	.word	0x20000038
 80005fc:	20000014 	.word	0x20000014
 8000600:	000c34ff 	.word	0x000c34ff

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b096      	sub	sp, #88	@ 0x58
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0314 	add.w	r3, r7, #20
 800060e:	2244      	movs	r2, #68	@ 0x44
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f005 fe5f 	bl	80062d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	463b      	mov	r3, r7
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000626:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800062a:	f002 f9e1 	bl	80029f0 <HAL_PWREx_ControlVoltageScaling>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000634:	f000 facc 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000640:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2310      	movs	r3, #16
 8000644:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800064a:	2302      	movs	r3, #2
 800064c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800064e:	2301      	movs	r3, #1
 8000650:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000652:	230a      	movs	r3, #10
 8000654:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000656:	2307      	movs	r3, #7
 8000658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800065e:	2302      	movs	r3, #2
 8000660:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4618      	mov	r0, r3
 8000668:	f002 fa18 	bl	8002a9c <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000672:	f000 faad 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2303      	movs	r3, #3
 800067c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	2104      	movs	r1, #4
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fde0 	bl	8003254 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800069a:	f000 fa99 	bl	8000bd0 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3758      	adds	r7, #88	@ 0x58
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	@ 0x28
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]
 80006c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006cc:	4a2f      	ldr	r2, [pc, #188]	@ (800078c <MX_ADC1_Init+0xe4>)
 80006ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006ea:	2204      	movs	r2, #4
 80006ec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <MX_ADC1_Init+0xe0>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_ADC1_Init+0xe0>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000708:	4b1f      	ldr	r3, [pc, #124]	@ (8000788 <MX_ADC1_Init+0xe0>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070e:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_ADC1_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000714:	4b1c      	ldr	r3, [pc, #112]	@ (8000788 <MX_ADC1_Init+0xe0>)
 8000716:	2200      	movs	r2, #0
 8000718:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800071c:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_ADC1_Init+0xe0>)
 800071e:	2200      	movs	r2, #0
 8000720:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_ADC1_Init+0xe0>)
 8000724:	2200      	movs	r2, #0
 8000726:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800072a:	4817      	ldr	r0, [pc, #92]	@ (8000788 <MX_ADC1_Init+0xe0>)
 800072c:	f001 f866 	bl	80017fc <HAL_ADC_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000736:	f000 fa4b 	bl	8000bd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	4619      	mov	r1, r3
 8000744:	4810      	ldr	r0, [pc, #64]	@ (8000788 <MX_ADC1_Init+0xe0>)
 8000746:	f001 fdc1 	bl	80022cc <HAL_ADCEx_MultiModeConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000750:	f000 fa3e 	bl	8000bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000754:	4b0e      	ldr	r3, [pc, #56]	@ (8000790 <MX_ADC1_Init+0xe8>)
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000758:	2306      	movs	r3, #6
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000760:	237f      	movs	r3, #127	@ 0x7f
 8000762:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000764:	2304      	movs	r3, #4
 8000766:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_ADC1_Init+0xe0>)
 8000772:	f001 f993 	bl	8001a9c <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800077c:	f000 fa28 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3728      	adds	r7, #40	@ 0x28
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000cc 	.word	0x200000cc
 800078c:	50040000 	.word	0x50040000
 8000790:	04300002 	.word	0x04300002

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2224      	movs	r2, #36	@ 0x24
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fd97 	bl	80062d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007b4:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <MX_TIM1_Init+0xb0>)
 80007b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007de:	2303      	movs	r3, #3
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f6:	2301      	movs	r3, #1
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_TIM1_Init+0xac>)
 800080a:	f003 fdb8 	bl	800437e <HAL_TIM_Encoder_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000814:	f000 f9dc 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_TIM1_Init+0xac>)
 800082a:	f004 fe7b 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000834:	f000 f9cc 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	@ 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	20000130 	.word	0x20000130
 8000844:	40012c00 	.word	0x40012c00

08000848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <MX_TIM2_Init+0xc4>)
 800086e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_TIM2_Init+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_TIM2_Init+0xc8>)
 8000884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_TIM2_Init+0xc4>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000894:	f003 fbbe 	bl	8004014 <HAL_TIM_PWM_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800089e:	f000 f997 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4816      	ldr	r0, [pc, #88]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008b2:	f004 fe37 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008bc:	f000 f988 	bl	8000bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c0:	2360      	movs	r3, #96	@ 0x60
 80008c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008d8:	f004 f824 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008e2:	f000 f975 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	2208      	movs	r2, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	4807      	ldr	r0, [pc, #28]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008ee:	f004 f819 	bl	8004924 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008f8:	f000 f96a 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008fe:	f000 fbd3 	bl	80010a8 <HAL_TIM_MspPostInit>

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	@ 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000017c 	.word	0x2000017c
 8000910:	000c34ff 	.word	0x000c34ff

08000914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <MX_TIM3_Init+0xc0>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800094a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000958:	481d      	ldr	r0, [pc, #116]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800095a:	f003 fcb9 	bl	80042d0 <HAL_TIM_IC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000964:	f000 f934 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000978:	f004 fdd4 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000982:	f000 f925 	bl	8000bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800098a:	2301      	movs	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800099e:	f003 ff24 	bl	80047ea <HAL_TIM_IC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009a8:	f000 f912 	bl	8000bd0 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2204      	movs	r2, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 80009b8:	f003 ff17 	bl	80047ea <HAL_TIM_IC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009c2:	f000 f905 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	200001c8 	.word	0x200001c8
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2224      	movs	r2, #36	@ 0x24
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 fc75 	bl	80062d6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 80009f8:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <MX_TIM4_Init+0xa8>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a34:	2301      	movs	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a48:	f003 fc99 	bl	800437e <HAL_TIM_Encoder_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a52:	f000 f8bd 	bl	8000bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a64:	f004 fd5e 	bl	8005524 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a6e:	f000 f8af 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	@ 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000214 	.word	0x20000214
 8000a80:	40000800 	.word	0x40000800

08000a84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <MX_UART4_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_UART4_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_UART4_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_UART4_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ac8:	f004 fdd2 	bl	8005670 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f87d 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000260 	.word	0x20000260
 8000ae0:	40004c00 	.word	0x40004c00

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b32      	ldr	r3, [pc, #200]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a31      	ldr	r2, [pc, #196]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b00:	f043 0304 	orr.w	r3, r3, #4
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0304 	and.w	r3, r3, #4
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b12:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b29      	ldr	r3, [pc, #164]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2a:	4b26      	ldr	r3, [pc, #152]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a25      	ldr	r2, [pc, #148]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b23      	ldr	r3, [pc, #140]	@ (8000bc4 <MX_GPIO_Init+0xe0>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	f44f 6190 	mov.w	r1, #1152	@ 0x480
 8000b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b4c:	f001 ff2a 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2130      	movs	r1, #48	@ 0x30
 8000b54:	481c      	ldr	r0, [pc, #112]	@ (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b56:	f001 ff25 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	481b      	ldr	r0, [pc, #108]	@ (8000bcc <MX_GPIO_Init+0xe8>)
 8000b60:	f001 ff20 	bl	80029a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|STBY_Pin;
 8000b64:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000b68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b80:	f001 fd66 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|BIN1_Pin;
 8000b84:	2330      	movs	r3, #48	@ 0x30
 8000b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <MX_GPIO_Init+0xe4>)
 8000b9c:	f001 fd58 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_GPIO_Init+0xe8>)
 8000bb8:	f001 fd4a 	bl	8002650 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48000800 	.word	0x48000800
 8000bcc:	48000400 	.word	0x48000400

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->pwm_channel);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	4619      	mov	r1, r3
 8000bee:	4610      	mov	r0, r2
 8000bf0:	f003 fa68 	bl	80040c4 <HAL_TIM_PWM_Start>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <set_duty>:
			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->pwm_channel);

}

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 8000c06:	6839      	ldr	r1, [r7, #0]
 8000c08:	4860      	ldr	r0, [pc, #384]	@ (8000d8c <set_duty+0x190>)
 8000c0a:	f005 fb0f 	bl	800622c <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->pwm_val = pwm_sig;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	601a      	str	r2, [r3, #0]
    // dereferencing and accessing struct fields
    // p_mot->duty = duty;
    // is shorthand for
    // (*p_mot).duty = duty;

    if (pwm_sig > 0) {
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	dd49      	ble.n	8000cae <set_duty+0xb2>

    	//forwards
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,pwm_sig);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d105      	bne.n	8000c2e <set_duty+0x32>
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c2c:	e02c      	b.n	8000c88 <set_duty+0x8c>
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d105      	bne.n	8000c42 <set_duty+0x46>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c40:	e022      	b.n	8000c88 <set_duty+0x8c>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d105      	bne.n	8000c56 <set_duty+0x5a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c54:	e018      	b.n	8000c88 <set_duty+0x8c>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	2b0c      	cmp	r3, #12
 8000c5c:	d105      	bne.n	8000c6a <set_duty+0x6e>
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c68:	e00e      	b.n	8000c88 <set_duty+0x8c>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b10      	cmp	r3, #16
 8000c70:	d105      	bne.n	8000c7e <set_duty+0x82>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c7c:	e004      	b.n	8000c88 <set_duty+0x8c>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	65d3      	str	r3, [r2, #92]	@ 0x5c

    	//set GPIO PINS
    	// GPIO_PIN_RESET: to clear the port pin
    	 //GPIO_PIN_SET: to set the port pin

    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_SET);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6998      	ldr	r0, [r3, #24]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	2201      	movs	r2, #1
 8000c94:	4619      	mov	r1, r3
 8000c96:	f001 fe85 	bl	80029a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69d8      	ldr	r0, [r3, #28]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f001 fe7c 	bl	80029a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);

    }


}
 8000cac:	e069      	b.n	8000d82 <set_duty+0x186>
    else if(pwm_sig == 0){
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d112      	bne.n	8000cda <set_duty+0xde>
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6998      	ldr	r0, [r3, #24]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f001 fe6f 	bl	80029a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	69d8      	ldr	r0, [r3, #28]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f001 fe66 	bl	80029a4 <HAL_GPIO_WritePin>
}
 8000cd8:	e053      	b.n	8000d82 <set_duty+0x186>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,-pwm_sig);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d106      	bne.n	8000cf0 <set_duty+0xf4>
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	425a      	negs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	689b      	ldr	r3, [r3, #8]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cee:	e036      	b.n	8000d5e <set_duty+0x162>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d107      	bne.n	8000d08 <set_duty+0x10c>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	4259      	negs	r1, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	689b      	ldr	r3, [r3, #8]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	460b      	mov	r3, r1
 8000d04:	6393      	str	r3, [r2, #56]	@ 0x38
 8000d06:	e02a      	b.n	8000d5e <set_duty+0x162>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b08      	cmp	r3, #8
 8000d0e:	d107      	bne.n	8000d20 <set_duty+0x124>
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	4259      	negs	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000d1e:	e01e      	b.n	8000d5e <set_duty+0x162>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b0c      	cmp	r3, #12
 8000d26:	d107      	bne.n	8000d38 <set_duty+0x13c>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	4259      	negs	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	689b      	ldr	r3, [r3, #8]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	460b      	mov	r3, r1
 8000d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d36:	e012      	b.n	8000d5e <set_duty+0x162>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b10      	cmp	r3, #16
 8000d3e:	d107      	bne.n	8000d50 <set_duty+0x154>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	4259      	negs	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d4e:	e006      	b.n	8000d5e <set_duty+0x162>
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	4259      	negs	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	65d3      	str	r3, [r2, #92]	@ 0x5c
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6998      	ldr	r0, [r3, #24]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	2200      	movs	r2, #0
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f001 fe1a 	bl	80029a4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69d8      	ldr	r0, [r3, #28]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	691b      	ldr	r3, [r3, #16]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f001 fe11 	bl	80029a4 <HAL_GPIO_WritePin>
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	08006f20 	.word	0x08006f20

08000d90 <set_stby>:
 * @brief A function to set the standby pin for the motor.
 *
 * @param p_mot The motor object to perform the function on.
 * @param stby The desired stby pin value of 0 or 1.
 */
void set_stby(motor_t* p_mot, int32_t stby_val){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
	if(stby_val == 0){
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d109      	bne.n	8000db4 <set_stby+0x24>

		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_RESET);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6a18      	ldr	r0, [r3, #32]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2200      	movs	r2, #0
 8000dac:	4619      	mov	r1, r3
 8000dae:	f001 fdf9 	bl	80029a4 <HAL_GPIO_WritePin>
	else{

		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_SET);
	}

}
 8000db2:	e008      	b.n	8000dc6 <set_stby+0x36>
		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_SET);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a18      	ldr	r0, [r3, #32]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	695b      	ldr	r3, [r3, #20]
 8000dbc:	b29b      	uxth	r3, r3
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f001 fdef 	bl	80029a4 <HAL_GPIO_WritePin>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e14 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dda:	4a0e      	ldr	r2, [pc, #56]	@ (8000e14 <HAL_MspInit+0x44>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000de2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <HAL_MspInit+0x44>)
 8000de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df2:	4a08      	ldr	r2, [pc, #32]	@ (8000e14 <HAL_MspInit+0x44>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dfa:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <HAL_MspInit+0x44>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40021000 	.word	0x40021000

08000e18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2288      	movs	r2, #136	@ 0x88
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 fa4c 	bl	80062d6 <memset>
  if(hadc->Instance==ADC1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a27      	ldr	r2, [pc, #156]	@ (8000ee0 <HAL_ADC_MspInit+0xc8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d146      	bne.n	8000ed6 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e48:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e4e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e62:	2307      	movs	r3, #7
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e66:	2302      	movs	r3, #2
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e6e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 fc0f 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e84:	f7ff fea4 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e88:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <HAL_ADC_MspInit+0xcc>)
 8000e8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8c:	4a15      	ldr	r2, [pc, #84]	@ (8000ee4 <HAL_ADC_MspInit+0xcc>)
 8000e8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <HAL_ADC_MspInit+0xcc>)
 8000e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea0:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <HAL_ADC_MspInit+0xcc>)
 8000ea2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee4 <HAL_ADC_MspInit+0xcc>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HAL_ADC_MspInit+0xcc>)
 8000eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ebe:	230b      	movs	r3, #11
 8000ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_ADC_MspInit+0xd0>)
 8000ed2:	f001 fbbd 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	37b0      	adds	r7, #176	@ 0xb0
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	50040000 	.word	0x50040000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48000800 	.word	0x48000800

08000eec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08c      	sub	sp, #48	@ 0x30
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 031c 	add.w	r3, r7, #28
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc8 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12a      	bne.n	8000f64 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f12:	4a2e      	ldr	r2, [pc, #184]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f18:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f26:	4b29      	ldr	r3, [pc, #164]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	4a28      	ldr	r2, [pc, #160]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f32:	4b26      	ldr	r3, [pc, #152]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = HAND_ENC_A_Pin|HAND_ENC_B_Pin;
 8000f3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	f107 031c 	add.w	r3, r7, #28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f001 fb77 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f62:	e02c      	b.n	8000fbe <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	@ (8000fd0 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d127      	bne.n	8000fbe <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f72:	4a16      	ldr	r2, [pc, #88]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <HAL_TIM_Encoder_MspInit+0xe0>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_ENC_A_Pin|MOTOR_ENC_B_Pin;
 8000f9e:	23c0      	movs	r3, #192	@ 0xc0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 031c 	add.w	r3, r7, #28
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4806      	ldr	r0, [pc, #24]	@ (8000fd4 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000fba:	f001 fb49 	bl	8002650 <HAL_GPIO_Init>
}
 8000fbe:	bf00      	nop
 8000fc0:	3730      	adds	r7, #48	@ 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40012c00 	.word	0x40012c00
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	40000800 	.word	0x40000800
 8000fd4:	48000400 	.word	0x48000400

08000fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe8:	d10b      	bne.n	8001002 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_TIM_PWM_MspInit+0x38>)
 8000fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_TIM_PWM_MspInit+0x38>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_TIM_PWM_MspInit+0x38>)
 8000ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000

08001014 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <HAL_TIM_IC_MspInit+0x8c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d130      	bne.n	8001098 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001036:	4b1b      	ldr	r3, [pc, #108]	@ (80010a4 <HAL_TIM_IC_MspInit+0x90>)
 8001038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800103a:	4a1a      	ldr	r2, [pc, #104]	@ (80010a4 <HAL_TIM_IC_MspInit+0x90>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6593      	str	r3, [r2, #88]	@ 0x58
 8001042:	4b18      	ldr	r3, [pc, #96]	@ (80010a4 <HAL_TIM_IC_MspInit+0x90>)
 8001044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <HAL_TIM_IC_MspInit+0x90>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	4a14      	ldr	r2, [pc, #80]	@ (80010a4 <HAL_TIM_IC_MspInit+0x90>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105a:	4b12      	ldr	r3, [pc, #72]	@ (80010a4 <HAL_TIM_IC_MspInit+0x90>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RADIO_Pin;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001076:	2302      	movs	r3, #2
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RADIO_GPIO_Port, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001084:	f001 fae4 	bl	8002650 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	201d      	movs	r0, #29
 800108e:	f001 faa8 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001092:	201d      	movs	r0, #29
 8001094:	f001 fac1 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001098:	bf00      	nop
 800109a:	3728      	adds	r7, #40	@ 0x28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40000400 	.word	0x40000400
 80010a4:	40021000 	.word	0x40021000

080010a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c8:	d11c      	bne.n	8001104 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	4b10      	ldr	r3, [pc, #64]	@ (800110c <HAL_TIM_MspPostInit+0x64>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4a0f      	ldr	r2, [pc, #60]	@ (800110c <HAL_TIM_MspPostInit+0x64>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HAL_TIM_MspPostInit+0x64>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60bb      	str	r3, [r7, #8]
 80010e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80010e2:	2324      	movs	r3, #36	@ 0x24
 80010e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e6:	2302      	movs	r3, #2
 80010e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f6:	f107 030c 	add.w	r3, r7, #12
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f001 faa6 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001104:	bf00      	nop
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40021000 	.word	0x40021000

08001110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0ac      	sub	sp, #176	@ 0xb0
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2288      	movs	r2, #136	@ 0x88
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f005 f8d0 	bl	80062d6 <memset>
  if(huart->Instance==UART4)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a21      	ldr	r2, [pc, #132]	@ (80011c0 <HAL_UART_MspInit+0xb0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d13b      	bne.n	80011b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001140:	2308      	movs	r3, #8
 8001142:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4618      	mov	r0, r3
 800114e:	f002 faa5 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001158:	f7ff fd3a 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800115c:	4b19      	ldr	r3, [pc, #100]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001160:	4a18      	ldr	r2, [pc, #96]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 8001162:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001166:	6593      	str	r3, [r2, #88]	@ 0x58
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 800116a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001174:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_UART_MspInit+0xb4>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800118c:	2303      	movs	r3, #3
 800118e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80011a4:	2308      	movs	r3, #8
 80011a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011b4:	f001 fa4c 	bl	8002650 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	37b0      	adds	r7, #176	@ 0xb0
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40004c00 	.word	0x40004c00
 80011c4:	40021000 	.word	0x40021000

080011c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <NMI_Handler+0x4>

080011d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <MemManage_Handler+0x4>

080011e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <UsageFault_Handler+0x4>

080011f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800121e:	f000 f941 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800122c:	4802      	ldr	r0, [pc, #8]	@ (8001238 <TIM3_IRQHandler+0x10>)
 800122e:	f003 f9da 	bl	80045e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001c8 	.word	0x200001c8

0800123c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
  }

  return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>
  }
  return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
  return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	@ (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	@ (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	@ (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	@ (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	@ (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	@ (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f005 f814 	bl	8006374 <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	@ (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	@ (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	@ (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20018000 	.word	0x20018000
 8001378:	00000400 	.word	0x00000400
 800137c:	200002e8 	.word	0x200002e8
 8001380:	20000440 	.word	0x20000440

08001384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopForever+0xe>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopForever+0x16>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f004 ffd3 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013da:	f7ff f8eb 	bl	80005b4 <main>

080013de <LoopForever>:

LoopForever:
    b LoopForever
 80013de:	e7fe      	b.n	80013de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80013ec:	08006fcc 	.word	0x08006fcc
  ldr r2, =_sbss
 80013f0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80013f4:	2000043c 	.word	0x2000043c

080013f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC1_2_IRQHandler>

080013fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001400:	2300      	movs	r3, #0
 8001402:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f001 f8e1 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140a:	200f      	movs	r0, #15
 800140c:	f000 f80e 	bl	800142c <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e001      	b.n	8001420 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141c:	f7ff fcd8 	bl	8000dd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001420:	79fb      	ldrb	r3, [r7, #7]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b17      	ldr	r3, [pc, #92]	@ (8001498 <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d023      	beq.n	8001488 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001440:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_InitTick+0x70>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b14      	ldr	r3, [pc, #80]	@ (8001498 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f001 f8ed 	bl	8002636 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d809      	bhi.n	800147c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f001 f8b7 	bl	80025e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_InitTick+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e007      	b.n	800148c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e004      	b.n	800148c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e001      	b.n	800148c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000050 	.word	0x20000050
 800149c:	20000048 	.word	0x20000048
 80014a0:	2000004c 	.word	0x2000004c

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000050 	.word	0x20000050
 80014c8:	200002ec 	.word	0x200002ec

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	@ (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200002ec 	.word	0x200002ec

080014e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3360      	adds	r3, #96	@ 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b08      	ldr	r3, [pc, #32]	@ (8001590 <LL_ADC_SetOffset+0x44>)
 800156e:	4013      	ands	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	4313      	orrs	r3, r2
 800157c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	03fff000 	.word	0x03fff000

08001594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3360      	adds	r3, #96	@ 0x60
 80015a2:	461a      	mov	r2, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3360      	adds	r3, #96	@ 0x60
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b087      	sub	sp, #28
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3330      	adds	r3, #48	@ 0x30
 8001606:	461a      	mov	r2, r3
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	4413      	add	r3, r2
 8001614:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 031f 	and.w	r3, r3, #31
 8001620:	211f      	movs	r1, #31
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	401a      	ands	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	0e9b      	lsrs	r3, r3, #26
 800162e:	f003 011f 	and.w	r1, r3, #31
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	f003 031f 	and.w	r3, r3, #31
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001642:	bf00      	nop
 8001644:	371c      	adds	r7, #28
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800164e:	b480      	push	{r7}
 8001650:	b087      	sub	sp, #28
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3314      	adds	r3, #20
 800165e:	461a      	mov	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	0e5b      	lsrs	r3, r3, #25
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	4413      	add	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	0d1b      	lsrs	r3, r3, #20
 8001676:	f003 031f 	and.w	r3, r3, #31
 800167a:	2107      	movs	r1, #7
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	0d1b      	lsrs	r3, r3, #20
 8001688:	f003 031f 	and.w	r3, r3, #31
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	431a      	orrs	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001698:	bf00      	nop
 800169a:	371c      	adds	r7, #28
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0318 	and.w	r3, r3, #24
 80016c6:	4908      	ldr	r1, [pc, #32]	@ (80016e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016c8:	40d9      	lsrs	r1, r3
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	400b      	ands	r3, r1
 80016ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016d2:	431a      	orrs	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	0007ffff 	.word	0x0007ffff

080016ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80016fc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6093      	str	r3, [r2, #8]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001724:	d101      	bne.n	800172a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001748:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800174c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001774:	d101      	bne.n	800177a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <LL_ADC_IsEnabled+0x18>
 800179c:	2301      	movs	r3, #1
 800179e:	e000      	b.n	80017a2 <LL_ADC_IsEnabled+0x1a>
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ae:	b480      	push	{r7}
 80017b0:	b083      	sub	sp, #12
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d101      	bne.n	80017c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d101      	bne.n	80017ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b089      	sub	sp, #36	@ 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e130      	b.n	8001a78 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001820:	2b00      	cmp	r3, #0
 8001822:	d109      	bne.n	8001838 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff faf7 	bl	8000e18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff67 	bl	8001710 <LL_ADC_IsDeepPowerDownEnabled>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d004      	beq.n	8001852 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff4d 	bl	80016ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff82 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d115      	bne.n	800188e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff66 	bl	8001738 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800186c:	4b84      	ldr	r3, [pc, #528]	@ (8001a80 <HAL_ADC_Init+0x284>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	099b      	lsrs	r3, r3, #6
 8001872:	4a84      	ldr	r2, [pc, #528]	@ (8001a84 <HAL_ADC_Init+0x288>)
 8001874:	fba2 2303 	umull	r2, r3, r2, r3
 8001878:	099b      	lsrs	r3, r3, #6
 800187a:	3301      	adds	r3, #1
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001880:	e002      	b.n	8001888 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	3b01      	subs	r3, #1
 8001886:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f9      	bne.n	8001882 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff64 	bl	8001760 <LL_ADC_IsInternalRegulatorEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10d      	bne.n	80018ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a2:	f043 0210 	orr.w	r2, r3, #16
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff75 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 80018c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f040 80c9 	bne.w	8001a66 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f040 80c5 	bne.w	8001a66 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80018e4:	f043 0202 	orr.w	r2, r3, #2
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff ff49 	bl	8001788 <LL_ADC_IsEnabled>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d115      	bne.n	8001928 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80018fc:	4862      	ldr	r0, [pc, #392]	@ (8001a88 <HAL_ADC_Init+0x28c>)
 80018fe:	f7ff ff43 	bl	8001788 <LL_ADC_IsEnabled>
 8001902:	4604      	mov	r4, r0
 8001904:	4861      	ldr	r0, [pc, #388]	@ (8001a8c <HAL_ADC_Init+0x290>)
 8001906:	f7ff ff3f 	bl	8001788 <LL_ADC_IsEnabled>
 800190a:	4603      	mov	r3, r0
 800190c:	431c      	orrs	r4, r3
 800190e:	4860      	ldr	r0, [pc, #384]	@ (8001a90 <HAL_ADC_Init+0x294>)
 8001910:	f7ff ff3a 	bl	8001788 <LL_ADC_IsEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	4323      	orrs	r3, r4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	485c      	ldr	r0, [pc, #368]	@ (8001a94 <HAL_ADC_Init+0x298>)
 8001924:	f7ff fdde 	bl	80014e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	7e5b      	ldrb	r3, [r3, #25]
 800192c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001932:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001938:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800193e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001946:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d106      	bne.n	8001964 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	3b01      	subs	r3, #1
 800195c:	045b      	lsls	r3, r3, #17
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001968:	2b00      	cmp	r3, #0
 800196a:	d009      	beq.n	8001980 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001978:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	4b44      	ldr	r3, [pc, #272]	@ (8001a98 <HAL_ADC_Init+0x29c>)
 8001988:	4013      	ands	r3, r2
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	69b9      	ldr	r1, [r7, #24]
 8001990:	430b      	orrs	r3, r1
 8001992:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff1b 	bl	80017d4 <LL_ADC_INJ_IsConversionOngoing>
 800199e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d13d      	bne.n	8001a22 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d13a      	bne.n	8001a22 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019b8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80019c8:	f023 0302 	bic.w	r3, r3, #2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	69b9      	ldr	r1, [r7, #24]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d118      	bne.n	8001a12 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019f6:	4311      	orrs	r1, r2
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a02:	430a      	orrs	r2, r1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
 8001a10:	e007      	b.n	8001a22 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	691a      	ldr	r2, [r3, #16]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 0201 	bic.w	r2, r2, #1
 8001a20:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10c      	bne.n	8001a44 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	f023 010f 	bic.w	r1, r3, #15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	1e5a      	subs	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	631a      	str	r2, [r3, #48]	@ 0x30
 8001a42:	e007      	b.n	8001a54 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 020f 	bic.w	r2, r2, #15
 8001a52:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	f023 0303 	bic.w	r3, r3, #3
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	655a      	str	r2, [r3, #84]	@ 0x54
 8001a64:	e007      	b.n	8001a76 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6a:	f043 0210 	orr.w	r2, r3, #16
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3724      	adds	r7, #36	@ 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	20000048 	.word	0x20000048
 8001a84:	053e2d63 	.word	0x053e2d63
 8001a88:	50040000 	.word	0x50040000
 8001a8c:	50040100 	.word	0x50040100
 8001a90:	50040200 	.word	0x50040200
 8001a94:	50040300 	.word	0x50040300
 8001a98:	fff0c007 	.word	0xfff0c007

08001a9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0b6      	sub	sp, #216	@ 0xd8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d101      	bne.n	8001abe <HAL_ADC_ConfigChannel+0x22>
 8001aba:	2302      	movs	r3, #2
 8001abc:	e3c9      	b.n	8002252 <HAL_ADC_ConfigChannel+0x7b6>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff fe6f 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f040 83aa 	bne.w	800222c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b05      	cmp	r3, #5
 8001ae6:	d824      	bhi.n	8001b32 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	3b02      	subs	r3, #2
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d81b      	bhi.n	8001b2a <HAL_ADC_ConfigChannel+0x8e>
 8001af2:	a201      	add	r2, pc, #4	@ (adr r2, 8001af8 <HAL_ADC_ConfigChannel+0x5c>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b09 	.word	0x08001b09
 8001afc:	08001b11 	.word	0x08001b11
 8001b00:	08001b19 	.word	0x08001b19
 8001b04:	08001b21 	.word	0x08001b21
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b08:	230c      	movs	r3, #12
 8001b0a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b0e:	e010      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001b10:	2312      	movs	r3, #18
 8001b12:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b16:	e00c      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001b18:	2318      	movs	r3, #24
 8001b1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b1e:	e008      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b28:	e003      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001b30:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001b40:	f7ff fd59 	bl	80015f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe30 	bl	80017ae <LL_ADC_REG_IsConversionOngoing>
 8001b4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fe3c 	bl	80017d4 <LL_ADC_INJ_IsConversionOngoing>
 8001b5c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b60:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 81a4 	bne.w	8001eb2 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f040 819f 	bne.w	8001eb2 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f7ff fd64 	bl	800164e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	695a      	ldr	r2, [r3, #20]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	08db      	lsrs	r3, r3, #3
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d00a      	beq.n	8001bbe <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	6919      	ldr	r1, [r3, #16]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001bb8:	f7ff fcc8 	bl	800154c <LL_ADC_SetOffset>
 8001bbc:	e179      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fce5 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_ADC_ConfigChannel+0x14e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fcda 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001be0:	4603      	mov	r3, r0
 8001be2:	0e9b      	lsrs	r3, r3, #26
 8001be4:	f003 021f 	and.w	r2, r3, #31
 8001be8:	e01e      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x18c>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fccf 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001c0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001c18:	2320      	movs	r3, #32
 8001c1a:	e004      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001c1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c20:	fab3 f383 	clz	r3, r3
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d105      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x1a4>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e9b      	lsrs	r3, r3, #26
 8001c3a:	f003 031f 	and.w	r3, r3, #31
 8001c3e:	e018      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1d6>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001c54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001c5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d101      	bne.n	8001c68 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c64:	2320      	movs	r3, #32
 8001c66:	e004      	b.n	8001c72 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001c6c:	fab3 f383 	clz	r3, r3
 8001c70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d106      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fc9e 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fc82 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x214>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc77 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	0e9b      	lsrs	r3, r3, #26
 8001caa:	f003 021f 	and.w	r2, r3, #31
 8001cae:	e01e      	b.n	8001cee <HAL_ADC_ConfigChannel+0x252>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff fc6c 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001cce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cd2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cde:	2320      	movs	r3, #32
 8001ce0:	e004      	b.n	8001cec <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x26a>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0e9b      	lsrs	r3, r3, #26
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	e018      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x29c>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d12:	fa93 f3a3 	rbit	r3, r3
 8001d16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001d1e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001d22:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e004      	b.n	8001d38 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001d2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d32:	fab3 f383 	clz	r3, r3
 8001d36:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fc3b 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2102      	movs	r1, #2
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fc1f 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10a      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x2da>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2102      	movs	r1, #2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fc14 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	0e9b      	lsrs	r3, r3, #26
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	e01e      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x318>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2102      	movs	r1, #2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fc09 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d8c:	fa93 f3a3 	rbit	r3, r3
 8001d90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001d94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001d98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e004      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001da8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001dac:	fab3 f383 	clz	r3, r3
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d105      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x330>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0e9b      	lsrs	r3, r3, #26
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	e014      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x35a>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001dda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e004      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fbdc 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fbc0 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x398>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2103      	movs	r1, #3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fbb5 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	f003 021f 	and.w	r2, r3, #31
 8001e32:	e017      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3c8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2103      	movs	r1, #3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fbaa 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001e4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001e4e:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001e50:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e56:	2320      	movs	r3, #32
 8001e58:	e003      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x3e0>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	e011      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x404>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001e8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001e8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2103      	movs	r1, #3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fb87 	bl	80015c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc66 	bl	8001788 <LL_ADC_IsEnabled>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 8140 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f7ff fbe7 	bl	80016a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a8f      	ldr	r2, [pc, #572]	@ (8002118 <HAL_ADC_ConfigChannel+0x67c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f040 8131 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10b      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x46e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	bf94      	ite	ls
 8001f02:	2301      	movls	r3, #1
 8001f04:	2300      	movhi	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e019      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x4a2>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001f18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001f1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e003      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d079      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x4c2>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	3301      	adds	r3, #1
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f5c:	e015      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x4ee>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f6e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001f70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x50e>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	e017      	b.n	8001fda <HAL_ADC_ConfigChannel+0x53e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fba:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e003      	b.n	8001fce <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001fc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	ea42 0103 	orr.w	r1, r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x564>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e9b      	lsrs	r3, r3, #26
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f003 021f 	and.w	r2, r3, #31
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	051b      	lsls	r3, r3, #20
 8001ffe:	e018      	b.n	8002032 <HAL_ADC_ConfigChannel+0x596>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800200e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002010:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800201c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f003 021f 	and.w	r2, r3, #31
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002032:	430b      	orrs	r3, r1
 8002034:	e081      	b.n	800213a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x5b6>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	3301      	adds	r3, #1
 800204a:	069b      	lsls	r3, r3, #26
 800204c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002050:	e015      	b.n	800207e <HAL_ADC_ConfigChannel+0x5e2>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e003      	b.n	8002076 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800206e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	069b      	lsls	r3, r3, #26
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_ADC_ConfigChannel+0x602>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	3301      	adds	r3, #1
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	e017      	b.n	80020ce <HAL_ADC_ConfigChannel+0x632>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	61bb      	str	r3, [r7, #24]
  return result;
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e003      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	ea42 0103 	orr.w	r1, r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x65e>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	3b1e      	subs	r3, #30
 80020f2:	051b      	lsls	r3, r3, #20
 80020f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	e01e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x69c>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	60fb      	str	r3, [r7, #12]
  return result;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e006      	b.n	8002124 <HAL_ADC_ConfigChannel+0x688>
 8002116:	bf00      	nop
 8002118:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1e      	subs	r3, #30
 8002132:	051b      	lsls	r3, r3, #20
 8002134:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002138:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213e:	4619      	mov	r1, r3
 8002140:	f7ff fa85 	bl	800164e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b44      	ldr	r3, [pc, #272]	@ (800225c <HAL_ADC_ConfigChannel+0x7c0>)
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d07a      	beq.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002150:	4843      	ldr	r0, [pc, #268]	@ (8002260 <HAL_ADC_ConfigChannel+0x7c4>)
 8002152:	f7ff f9ed 	bl	8001530 <LL_ADC_GetCommonPathInternalCh>
 8002156:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a41      	ldr	r2, [pc, #260]	@ (8002264 <HAL_ADC_ConfigChannel+0x7c8>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d12c      	bne.n	80021be <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002164:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002168:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d126      	bne.n	80021be <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a3c      	ldr	r2, [pc, #240]	@ (8002268 <HAL_ADC_ConfigChannel+0x7cc>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d004      	beq.n	8002184 <HAL_ADC_ConfigChannel+0x6e8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a3b      	ldr	r2, [pc, #236]	@ (800226c <HAL_ADC_ConfigChannel+0x7d0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d15d      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800218c:	4619      	mov	r1, r3
 800218e:	4834      	ldr	r0, [pc, #208]	@ (8002260 <HAL_ADC_ConfigChannel+0x7c4>)
 8002190:	f7ff f9bb 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002194:	4b36      	ldr	r3, [pc, #216]	@ (8002270 <HAL_ADC_ConfigChannel+0x7d4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	4a36      	ldr	r2, [pc, #216]	@ (8002274 <HAL_ADC_ConfigChannel+0x7d8>)
 800219c:	fba2 2303 	umull	r2, r3, r2, r3
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	4613      	mov	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021ae:	e002      	b.n	80021b6 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1f9      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021bc:	e040      	b.n	8002240 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002278 <HAL_ADC_ConfigChannel+0x7dc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d118      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d112      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a23      	ldr	r2, [pc, #140]	@ (8002268 <HAL_ADC_ConfigChannel+0x7cc>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x74c>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a22      	ldr	r2, [pc, #136]	@ (800226c <HAL_ADC_ConfigChannel+0x7d0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d12d      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80021ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f0:	4619      	mov	r1, r3
 80021f2:	481b      	ldr	r0, [pc, #108]	@ (8002260 <HAL_ADC_ConfigChannel+0x7c4>)
 80021f4:	f7ff f989 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021f8:	e024      	b.n	8002244 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <HAL_ADC_ConfigChannel+0x7e0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d120      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002204:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002208:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d11a      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a14      	ldr	r2, [pc, #80]	@ (8002268 <HAL_ADC_ConfigChannel+0x7cc>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d115      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800221e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002222:	4619      	mov	r1, r3
 8002224:	480e      	ldr	r0, [pc, #56]	@ (8002260 <HAL_ADC_ConfigChannel+0x7c4>)
 8002226:	f7ff f970 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
 800222a:	e00c      	b.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002230:	f043 0220 	orr.w	r2, r3, #32
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800223e:	e002      	b.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002244:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800224e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002252:	4618      	mov	r0, r3
 8002254:	37d8      	adds	r7, #216	@ 0xd8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	80080000 	.word	0x80080000
 8002260:	50040300 	.word	0x50040300
 8002264:	c7520000 	.word	0xc7520000
 8002268:	50040000 	.word	0x50040000
 800226c:	50040200 	.word	0x50040200
 8002270:	20000048 	.word	0x20000048
 8002274:	053e2d63 	.word	0x053e2d63
 8002278:	cb840000 	.word	0xcb840000
 800227c:	80000001 	.word	0x80000001

08002280 <LL_ADC_IsEnabled>:
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <LL_ADC_IsEnabled+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_IsEnabled+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d101      	bne.n	80022be <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b09f      	sub	sp, #124	@ 0x7c
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e093      	b.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80022f2:	2300      	movs	r3, #0
 80022f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80022f6:	2300      	movs	r3, #0
 80022f8:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a47      	ldr	r2, [pc, #284]	@ (800241c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d102      	bne.n	800230a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002304:	4b46      	ldr	r3, [pc, #280]	@ (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	e001      	b.n	800230e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800230a:	2300      	movs	r3, #0
 800230c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e072      	b.n	8002412 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ffb9 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 8002334:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ffb3 	bl	80022a6 <LL_ADC_REG_IsConversionOngoing>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d154      	bne.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002348:	2b00      	cmp	r3, #0
 800234a:	d151      	bne.n	80023f0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800234c:	4b35      	ldr	r3, [pc, #212]	@ (8002424 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800234e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02c      	beq.n	80023b2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800236a:	035b      	lsls	r3, r3, #13
 800236c:	430b      	orrs	r3, r1
 800236e:	431a      	orrs	r2, r3
 8002370:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002372:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002374:	4829      	ldr	r0, [pc, #164]	@ (800241c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002376:	f7ff ff83 	bl	8002280 <LL_ADC_IsEnabled>
 800237a:	4604      	mov	r4, r0
 800237c:	4828      	ldr	r0, [pc, #160]	@ (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800237e:	f7ff ff7f 	bl	8002280 <LL_ADC_IsEnabled>
 8002382:	4603      	mov	r3, r0
 8002384:	431c      	orrs	r4, r3
 8002386:	4828      	ldr	r0, [pc, #160]	@ (8002428 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002388:	f7ff ff7a 	bl	8002280 <LL_ADC_IsEnabled>
 800238c:	4603      	mov	r3, r0
 800238e:	4323      	orrs	r3, r4
 8002390:	2b00      	cmp	r3, #0
 8002392:	d137      	bne.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800239c:	f023 030f 	bic.w	r3, r3, #15
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	6811      	ldr	r1, [r2, #0]
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	6892      	ldr	r2, [r2, #8]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023ae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023b0:	e028      	b.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023be:	4817      	ldr	r0, [pc, #92]	@ (800241c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80023c0:	f7ff ff5e 	bl	8002280 <LL_ADC_IsEnabled>
 80023c4:	4604      	mov	r4, r0
 80023c6:	4816      	ldr	r0, [pc, #88]	@ (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80023c8:	f7ff ff5a 	bl	8002280 <LL_ADC_IsEnabled>
 80023cc:	4603      	mov	r3, r0
 80023ce:	431c      	orrs	r4, r3
 80023d0:	4815      	ldr	r0, [pc, #84]	@ (8002428 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80023d2:	f7ff ff55 	bl	8002280 <LL_ADC_IsEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	4323      	orrs	r3, r4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d112      	bne.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80023e6:	f023 030f 	bic.w	r3, r3, #15
 80023ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80023ec:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023ee:	e009      	b.n	8002404 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023f4:	f043 0220 	orr.w	r2, r3, #32
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002402:	e000      	b.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002404:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800240e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002412:	4618      	mov	r0, r3
 8002414:	377c      	adds	r7, #124	@ 0x7c
 8002416:	46bd      	mov	sp, r7
 8002418:	bd90      	pop	{r4, r7, pc}
 800241a:	bf00      	nop
 800241c:	50040000 	.word	0x50040000
 8002420:	50040100 	.word	0x50040100
 8002424:	50040300 	.word	0x50040300
 8002428:	50040200 	.word	0x50040200

0800242c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800243c:	4b0c      	ldr	r3, [pc, #48]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002448:	4013      	ands	r3, r2
 800244a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002454:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002458:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800245e:	4a04      	ldr	r2, [pc, #16]	@ (8002470 <__NVIC_SetPriorityGrouping+0x44>)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	60d3      	str	r3, [r2, #12]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000ed00 	.word	0xe000ed00

08002474 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002478:	4b04      	ldr	r3, [pc, #16]	@ (800248c <__NVIC_GetPriorityGrouping+0x18>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	0a1b      	lsrs	r3, r3, #8
 800247e:	f003 0307 	and.w	r3, r3, #7
}
 8002482:	4618      	mov	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	db0b      	blt.n	80024ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	f003 021f 	and.w	r2, r3, #31
 80024a8:	4907      	ldr	r1, [pc, #28]	@ (80024c8 <__NVIC_EnableIRQ+0x38>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	2001      	movs	r0, #1
 80024b2:	fa00 f202 	lsl.w	r2, r0, r2
 80024b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	e000e100 	.word	0xe000e100

080024cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	490c      	ldr	r1, [pc, #48]	@ (8002518 <__NVIC_SetPriority+0x4c>)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	0112      	lsls	r2, r2, #4
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	440b      	add	r3, r1
 80024f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f4:	e00a      	b.n	800250c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4908      	ldr	r1, [pc, #32]	@ (800251c <__NVIC_SetPriority+0x50>)
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	3b04      	subs	r3, #4
 8002504:	0112      	lsls	r2, r2, #4
 8002506:	b2d2      	uxtb	r2, r2
 8002508:	440b      	add	r3, r1
 800250a:	761a      	strb	r2, [r3, #24]
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	e000e100 	.word	0xe000e100
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	@ 0x24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0307 	and.w	r3, r3, #7
 8002532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f1c3 0307 	rsb	r3, r3, #7
 800253a:	2b04      	cmp	r3, #4
 800253c:	bf28      	it	cs
 800253e:	2304      	movcs	r3, #4
 8002540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3304      	adds	r3, #4
 8002546:	2b06      	cmp	r3, #6
 8002548:	d902      	bls.n	8002550 <NVIC_EncodePriority+0x30>
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3b03      	subs	r3, #3
 800254e:	e000      	b.n	8002552 <NVIC_EncodePriority+0x32>
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	f04f 32ff 	mov.w	r2, #4294967295
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	fa02 f303 	lsl.w	r3, r2, r3
 800255e:	43da      	mvns	r2, r3
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	401a      	ands	r2, r3
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002568:	f04f 31ff 	mov.w	r1, #4294967295
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	43d9      	mvns	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	4313      	orrs	r3, r2
         );
}
 800257a:	4618      	mov	r0, r3
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff8e 	bl	80024cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	@ (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff29 	bl	800242c <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff3e 	bl	8002474 <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff8e 	bl	8002520 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5d 	bl	80024cc <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff31 	bl	8002490 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800265e:	e17f      	b.n	8002960 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	4013      	ands	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 8171 	beq.w	800295a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b01      	cmp	r3, #1
 8002682:	d005      	beq.n	8002690 <HAL_GPIO_Init+0x40>
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 0303 	and.w	r3, r3, #3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d130      	bne.n	80026f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	2203      	movs	r2, #3
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026c6:	2201      	movs	r2, #1
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	693a      	ldr	r2, [r7, #16]
 80026d2:	4013      	ands	r3, r2
 80026d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0201 	and.w	r2, r3, #1
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa02 f303 	lsl.w	r3, r2, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b03      	cmp	r3, #3
 80026fc:	d118      	bne.n	8002730 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	08db      	lsrs	r3, r3, #3
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b03      	cmp	r3, #3
 800273a:	d017      	beq.n	800276c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4013      	ands	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d123      	bne.n	80027c0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80ac 	beq.w	800295a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	4b5f      	ldr	r3, [pc, #380]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002806:	4a5e      	ldr	r2, [pc, #376]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6613      	str	r3, [r2, #96]	@ 0x60
 800280e:	4b5c      	ldr	r3, [pc, #368]	@ (8002980 <HAL_GPIO_Init+0x330>)
 8002810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800281a:	4a5a      	ldr	r2, [pc, #360]	@ (8002984 <HAL_GPIO_Init+0x334>)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	089b      	lsrs	r3, r3, #2
 8002820:	3302      	adds	r3, #2
 8002822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	220f      	movs	r2, #15
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002844:	d025      	beq.n	8002892 <HAL_GPIO_Init+0x242>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a4f      	ldr	r2, [pc, #316]	@ (8002988 <HAL_GPIO_Init+0x338>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01f      	beq.n	800288e <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4e      	ldr	r2, [pc, #312]	@ (800298c <HAL_GPIO_Init+0x33c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d019      	beq.n	800288a <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a4d      	ldr	r2, [pc, #308]	@ (8002990 <HAL_GPIO_Init+0x340>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d013      	beq.n	8002886 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a4c      	ldr	r2, [pc, #304]	@ (8002994 <HAL_GPIO_Init+0x344>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d00d      	beq.n	8002882 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a4b      	ldr	r2, [pc, #300]	@ (8002998 <HAL_GPIO_Init+0x348>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a4a      	ldr	r2, [pc, #296]	@ (800299c <HAL_GPIO_Init+0x34c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d101      	bne.n	800287a <HAL_GPIO_Init+0x22a>
 8002876:	2306      	movs	r3, #6
 8002878:	e00c      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800287a:	2307      	movs	r3, #7
 800287c:	e00a      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800287e:	2305      	movs	r3, #5
 8002880:	e008      	b.n	8002894 <HAL_GPIO_Init+0x244>
 8002882:	2304      	movs	r3, #4
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x244>
 8002886:	2303      	movs	r3, #3
 8002888:	e004      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800288a:	2302      	movs	r3, #2
 800288c:	e002      	b.n	8002894 <HAL_GPIO_Init+0x244>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_GPIO_Init+0x244>
 8002892:	2300      	movs	r3, #0
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	f002 0203 	and.w	r2, r2, #3
 800289a:	0092      	lsls	r2, r2, #2
 800289c:	4093      	lsls	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028a4:	4937      	ldr	r1, [pc, #220]	@ (8002984 <HAL_GPIO_Init+0x334>)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	089b      	lsrs	r3, r3, #2
 80028aa:	3302      	adds	r3, #2
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028b2:	4b3b      	ldr	r3, [pc, #236]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028d6:	4a32      	ldr	r2, [pc, #200]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028dc:	4b30      	ldr	r3, [pc, #192]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002900:	4a27      	ldr	r2, [pc, #156]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002906:	4b26      	ldr	r3, [pc, #152]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	43db      	mvns	r3, r3
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	4013      	ands	r3, r2
 8002914:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800292a:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	43db      	mvns	r3, r3
 800293a:	693a      	ldr	r2, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_GPIO_Init+0x350>)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	3301      	adds	r3, #1
 800295e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	fa22 f303 	lsr.w	r3, r2, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	f47f ae78 	bne.w	8002660 <HAL_GPIO_Init+0x10>
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40021000 	.word	0x40021000
 8002984:	40010000 	.word	0x40010000
 8002988:	48000400 	.word	0x48000400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	48001000 	.word	0x48001000
 8002998:	48001400 	.word	0x48001400
 800299c:	48001800 	.word	0x48001800
 80029a0:	40010400 	.word	0x40010400

080029a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	807b      	strh	r3, [r7, #2]
 80029b0:	4613      	mov	r3, r2
 80029b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b4:	787b      	ldrb	r3, [r7, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029ba:	887a      	ldrh	r2, [r7, #2]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029c0:	e002      	b.n	80029c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029c2:	887a      	ldrh	r2, [r7, #2]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80029d8:	4b04      	ldr	r3, [pc, #16]	@ (80029ec <HAL_PWREx_GetVoltageRange+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	40007000 	.word	0x40007000

080029f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029fe:	d130      	bne.n	8002a62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a00:	4b23      	ldr	r3, [pc, #140]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a0c:	d038      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a0e:	4b20      	ldr	r3, [pc, #128]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a16:	4a1e      	ldr	r2, [pc, #120]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a18:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2232      	movs	r2, #50	@ 0x32
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	4a1b      	ldr	r2, [pc, #108]	@ (8002a98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	0c9b      	lsrs	r3, r3, #18
 8002a30:	3301      	adds	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a34:	e002      	b.n	8002a3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3c:	4b14      	ldr	r3, [pc, #80]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a48:	d102      	bne.n	8002a50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f2      	bne.n	8002a36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a52:	695b      	ldr	r3, [r3, #20]
 8002a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a5c:	d110      	bne.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e00f      	b.n	8002a82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a62:	4b0b      	ldr	r3, [pc, #44]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d007      	beq.n	8002a80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a70:	4b07      	ldr	r3, [pc, #28]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a78:	4a05      	ldr	r2, [pc, #20]	@ (8002a90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002a7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40007000 	.word	0x40007000
 8002a94:	20000048 	.word	0x20000048
 8002a98:	431bde83 	.word	0x431bde83

08002a9c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b088      	sub	sp, #32
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e3ca      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aae:	4b97      	ldr	r3, [pc, #604]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 030c 	and.w	r3, r3, #12
 8002ab6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ab8:	4b94      	ldr	r3, [pc, #592]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 80e4 	beq.w	8002c98 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d007      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4a>
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b0c      	cmp	r3, #12
 8002ada:	f040 808b 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 8087 	bne.w	8002bf4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ae6:	4b89      	ldr	r3, [pc, #548]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RCC_OscConfig+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e3a2      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	4b82      	ldr	r3, [pc, #520]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_RCC_OscConfig+0x7c>
 8002b0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b16:	e005      	b.n	8002b24 <HAL_RCC_OscConfig+0x88>
 8002b18:	4b7c      	ldr	r3, [pc, #496]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d223      	bcs.n	8002b70 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a1b      	ldr	r3, [r3, #32]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fd55 	bl	80035dc <RCC_SetFlashLatencyFromMSIRange>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e383      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b3c:	4b73      	ldr	r3, [pc, #460]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a72      	ldr	r2, [pc, #456]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b42:	f043 0308 	orr.w	r3, r3, #8
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	4b70      	ldr	r3, [pc, #448]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	496d      	ldr	r1, [pc, #436]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4968      	ldr	r1, [pc, #416]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
 8002b6e:	e025      	b.n	8002bbc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b70:	4b66      	ldr	r3, [pc, #408]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a65      	ldr	r2, [pc, #404]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b63      	ldr	r3, [pc, #396]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4960      	ldr	r1, [pc, #384]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8e:	4b5f      	ldr	r3, [pc, #380]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	495b      	ldr	r1, [pc, #364]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fd15 	bl	80035dc <RCC_SetFlashLatencyFromMSIRange>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e343      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bbc:	f000 fc4a 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	4b52      	ldr	r3, [pc, #328]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	091b      	lsrs	r3, r3, #4
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	4950      	ldr	r1, [pc, #320]	@ (8002d10 <HAL_RCC_OscConfig+0x274>)
 8002bce:	5ccb      	ldrb	r3, [r1, r3]
 8002bd0:	f003 031f 	and.w	r3, r3, #31
 8002bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd8:	4a4e      	ldr	r2, [pc, #312]	@ (8002d14 <HAL_RCC_OscConfig+0x278>)
 8002bda:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002d18 <HAL_RCC_OscConfig+0x27c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fe fc23 	bl	800142c <HAL_InitTick>
 8002be6:	4603      	mov	r3, r0
 8002be8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d052      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
 8002bf2:	e327      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002bfc:	4b43      	ldr	r3, [pc, #268]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a42      	ldr	r2, [pc, #264]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c08:	f7fe fc60 	bl	80014cc <HAL_GetTick>
 8002c0c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c0e:	e008      	b.n	8002c22 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c10:	f7fe fc5c 	bl	80014cc <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e310      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c22:	4b3a      	ldr	r3, [pc, #232]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d0f0      	beq.n	8002c10 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c2e:	4b37      	ldr	r3, [pc, #220]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a36      	ldr	r2, [pc, #216]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	4b34      	ldr	r3, [pc, #208]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4931      	ldr	r1, [pc, #196]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	492c      	ldr	r1, [pc, #176]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	604b      	str	r3, [r1, #4]
 8002c60:	e01a      	b.n	8002c98 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c62:	4b2a      	ldr	r3, [pc, #168]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a29      	ldr	r2, [pc, #164]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c68:	f023 0301 	bic.w	r3, r3, #1
 8002c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fc2d 	bl	80014cc <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c76:	f7fe fc29 	bl	80014cc <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e2dd      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c88:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <HAL_RCC_OscConfig+0x1da>
 8002c94:	e000      	b.n	8002c98 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c96:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d074      	beq.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	d005      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x21a>
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d10e      	bne.n	8002cce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d064      	beq.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d160      	bne.n	8002d8c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e2ba      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x24a>
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e026      	b.n	8002d34 <HAL_RCC_OscConfig+0x298>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cee:	d115      	bne.n	8002d1c <HAL_RCC_OscConfig+0x280>
 8002cf0:	4b06      	ldr	r3, [pc, #24]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a02      	ldr	r2, [pc, #8]	@ (8002d0c <HAL_RCC_OscConfig+0x270>)
 8002d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	e014      	b.n	8002d34 <HAL_RCC_OscConfig+0x298>
 8002d0a:	bf00      	nop
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	08006f40 	.word	0x08006f40
 8002d14:	20000048 	.word	0x20000048
 8002d18:	2000004c 	.word	0x2000004c
 8002d1c:	4ba0      	ldr	r3, [pc, #640]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9f      	ldr	r2, [pc, #636]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d26:	6013      	str	r3, [r2, #0]
 8002d28:	4b9d      	ldr	r3, [pc, #628]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d013      	beq.n	8002d64 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3c:	f7fe fbc6 	bl	80014cc <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d44:	f7fe fbc2 	bl	80014cc <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e276      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d56:	4b92      	ldr	r3, [pc, #584]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x2a8>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d64:	f7fe fbb2 	bl	80014cc <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fbae 	bl	80014cc <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e262      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1f0      	bne.n	8002d6c <HAL_RCC_OscConfig+0x2d0>
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0302 	and.w	r3, r3, #2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d060      	beq.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d005      	beq.n	8002dac <HAL_RCC_OscConfig+0x310>
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d119      	bne.n	8002dda <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d116      	bne.n	8002dda <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dac:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x328>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e23f      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc4:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	4973      	ldr	r1, [pc, #460]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd8:	e040      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d023      	beq.n	8002e2a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002de2:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a6e      	ldr	r2, [pc, #440]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dee:	f7fe fb6d 	bl	80014cc <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df4:	e008      	b.n	8002e08 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002df6:	f7fe fb69 	bl	80014cc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e21d      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e08:	4b65      	ldr	r3, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e14:	4b62      	ldr	r3, [pc, #392]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	061b      	lsls	r3, r3, #24
 8002e22:	495f      	ldr	r1, [pc, #380]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	604b      	str	r3, [r1, #4]
 8002e28:	e018      	b.n	8002e5c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe fb49 	bl	80014cc <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe fb45 	bl	80014cc <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1f9      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e50:	4b53      	ldr	r3, [pc, #332]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1f0      	bne.n	8002e3e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d03c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d01c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e70:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e76:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fe fb24 	bl	80014cc <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fe fb20 	bl	80014cc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1d4      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0ef      	beq.n	8002e88 <HAL_RCC_OscConfig+0x3ec>
 8002ea8:	e01b      	b.n	8002ee2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eaa:	4b3d      	ldr	r3, [pc, #244]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002eb2:	f023 0301 	bic.w	r3, r3, #1
 8002eb6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe fb07 	bl	80014cc <HAL_GetTick>
 8002ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec2:	f7fe fb03 	bl	80014cc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e1b7      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ed4:	4b32      	ldr	r3, [pc, #200]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ef      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	f000 80a6 	beq.w	800303c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d10d      	bne.n	8002f1c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b27      	ldr	r3, [pc, #156]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	4a26      	ldr	r2, [pc, #152]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f0c:	4b24      	ldr	r3, [pc, #144]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f1c:	4b21      	ldr	r3, [pc, #132]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d118      	bne.n	8002f5a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f28:	4b1e      	ldr	r3, [pc, #120]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f32:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f34:	f7fe faca 	bl	80014cc <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3c:	f7fe fac6 	bl	80014cc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e17a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <HAL_RCC_OscConfig+0x508>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d108      	bne.n	8002f74 <HAL_RCC_OscConfig+0x4d8>
 8002f62:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	4a0d      	ldr	r2, [pc, #52]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f72:	e029      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d115      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x50c>
 8002f7c:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f8c:	4b04      	ldr	r3, [pc, #16]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	4a03      	ldr	r2, [pc, #12]	@ (8002fa0 <HAL_RCC_OscConfig+0x504>)
 8002f94:	f043 0301 	orr.w	r3, r3, #1
 8002f98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f9c:	e014      	b.n	8002fc8 <HAL_RCC_OscConfig+0x52c>
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	4b9c      	ldr	r3, [pc, #624]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	4a9b      	ldr	r2, [pc, #620]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fb0:	f023 0301 	bic.w	r3, r3, #1
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb8:	4b98      	ldr	r3, [pc, #608]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fbe:	4a97      	ldr	r2, [pc, #604]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d016      	beq.n	8002ffe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe fa7c 	bl	80014cc <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	e00a      	b.n	8002fee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fa78 	bl	80014cc <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e12a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fee:	4b8b      	ldr	r3, [pc, #556]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ed      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x53c>
 8002ffc:	e015      	b.n	800302a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fa65 	bl	80014cc <HAL_GetTick>
 8003002:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003004:	e00a      	b.n	800301c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003006:	f7fe fa61 	bl	80014cc <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003014:	4293      	cmp	r3, r2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e113      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800301c:	4b7f      	ldr	r3, [pc, #508]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1ed      	bne.n	8003006 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800302a:	7ffb      	ldrb	r3, [r7, #31]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003030:	4b7a      	ldr	r3, [pc, #488]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	4a79      	ldr	r2, [pc, #484]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 80fe 	beq.w	8003242 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	2b02      	cmp	r3, #2
 800304c:	f040 80d0 	bne.w	80031f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003050:	4b72      	ldr	r3, [pc, #456]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f003 0203 	and.w	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003060:	429a      	cmp	r2, r3
 8003062:	d130      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	3b01      	subs	r3, #1
 8003070:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003072:	429a      	cmp	r2, r3
 8003074:	d127      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003080:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003082:	429a      	cmp	r2, r3
 8003084:	d11f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003090:	2a07      	cmp	r2, #7
 8003092:	bf14      	ite	ne
 8003094:	2201      	movne	r2, #1
 8003096:	2200      	moveq	r2, #0
 8003098:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309a:	4293      	cmp	r3, r2
 800309c:	d113      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	3b01      	subs	r3, #1
 80030ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d109      	bne.n	80030c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030bc:	085b      	lsrs	r3, r3, #1
 80030be:	3b01      	subs	r3, #1
 80030c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d06e      	beq.n	80031a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b0c      	cmp	r3, #12
 80030ca:	d069      	beq.n	80031a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030cc:	4b53      	ldr	r3, [pc, #332]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030d8:	4b50      	ldr	r3, [pc, #320]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0ad      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030e8:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a4b      	ldr	r2, [pc, #300]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80030ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030f4:	f7fe f9ea 	bl	80014cc <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe f9e6 	bl	80014cc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e09a      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310e:	4b43      	ldr	r3, [pc, #268]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800311a:	4b40      	ldr	r3, [pc, #256]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b40      	ldr	r3, [pc, #256]	@ (8003220 <HAL_RCC_OscConfig+0x784>)
 8003120:	4013      	ands	r3, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800312a:	3a01      	subs	r2, #1
 800312c:	0112      	lsls	r2, r2, #4
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003134:	0212      	lsls	r2, r2, #8
 8003136:	4311      	orrs	r1, r2
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800313c:	0852      	lsrs	r2, r2, #1
 800313e:	3a01      	subs	r2, #1
 8003140:	0552      	lsls	r2, r2, #21
 8003142:	4311      	orrs	r1, r2
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003148:	0852      	lsrs	r2, r2, #1
 800314a:	3a01      	subs	r2, #1
 800314c:	0652      	lsls	r2, r2, #25
 800314e:	4311      	orrs	r1, r2
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003154:	0912      	lsrs	r2, r2, #4
 8003156:	0452      	lsls	r2, r2, #17
 8003158:	430a      	orrs	r2, r1
 800315a:	4930      	ldr	r1, [pc, #192]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003160:	4b2e      	ldr	r3, [pc, #184]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2d      	ldr	r2, [pc, #180]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800316c:	4b2b      	ldr	r3, [pc, #172]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003172:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003176:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003178:	f7fe f9a8 	bl	80014cc <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003180:	f7fe f9a4 	bl	80014cc <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e058      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003192:	4b22      	ldr	r3, [pc, #136]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d0f0      	beq.n	8003180 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800319e:	e050      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e04f      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a4:	4b1d      	ldr	r3, [pc, #116]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d148      	bne.n	8003242 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80031b0:	4b1a      	ldr	r3, [pc, #104]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a19      	ldr	r2, [pc, #100]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031bc:	4b17      	ldr	r3, [pc, #92]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	4a16      	ldr	r2, [pc, #88]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031c8:	f7fe f980 	bl	80014cc <HAL_GetTick>
 80031cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fe f97c 	bl	80014cc <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e030      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031e2:	4b0e      	ldr	r3, [pc, #56]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x734>
 80031ee:	e028      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	2b0c      	cmp	r3, #12
 80031f4:	d023      	beq.n	800323e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a08      	ldr	r2, [pc, #32]	@ (800321c <HAL_RCC_OscConfig+0x780>)
 80031fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fe f963 	bl	80014cc <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	e00c      	b.n	8003224 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe f95f 	bl	80014cc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d905      	bls.n	8003224 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e013      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
 800321c:	40021000 	.word	0x40021000
 8003220:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ec      	bne.n	800320a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	4905      	ldr	r1, [pc, #20]	@ (800324c <HAL_RCC_OscConfig+0x7b0>)
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x7b4>)
 8003238:	4013      	ands	r3, r2
 800323a:	60cb      	str	r3, [r1, #12]
 800323c:	e001      	b.n	8003242 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	feeefffc 	.word	0xfeeefffc

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0e7      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b75      	ldr	r3, [pc, #468]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d910      	bls.n	8003298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b72      	ldr	r3, [pc, #456]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f023 0207 	bic.w	r2, r3, #7
 800327e:	4970      	ldr	r1, [pc, #448]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	4313      	orrs	r3, r2
 8003284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003286:	4b6e      	ldr	r3, [pc, #440]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0cf      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d010      	beq.n	80032c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	4b66      	ldr	r3, [pc, #408]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d908      	bls.n	80032c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032b4:	4b63      	ldr	r3, [pc, #396]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4960      	ldr	r1, [pc, #384]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d04c      	beq.n	800336c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032da:	4b5a      	ldr	r3, [pc, #360]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d121      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0a6      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f2:	4b54      	ldr	r3, [pc, #336]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d115      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e09a      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330a:	4b4e      	ldr	r3, [pc, #312]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e08e      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331a:	4b4a      	ldr	r3, [pc, #296]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e086      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b46      	ldr	r3, [pc, #280]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4943      	ldr	r1, [pc, #268]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800333c:	f7fe f8c6 	bl	80014cc <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe f8c2 	bl	80014cc <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e06e      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b3a      	ldr	r3, [pc, #232]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d010      	beq.n	800339a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	4b31      	ldr	r3, [pc, #196]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b2e      	ldr	r3, [pc, #184]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	492b      	ldr	r1, [pc, #172]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339a:	4b29      	ldr	r3, [pc, #164]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d210      	bcs.n	80033ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	4b25      	ldr	r3, [pc, #148]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f023 0207 	bic.w	r2, r3, #7
 80033b0:	4923      	ldr	r1, [pc, #140]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033b8:	4b21      	ldr	r3, [pc, #132]	@ (8003440 <HAL_RCC_ClockConfig+0x1ec>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d001      	beq.n	80033ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e036      	b.n	8003438 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d008      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4918      	ldr	r1, [pc, #96]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0308 	and.w	r3, r3, #8
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033f4:	4b13      	ldr	r3, [pc, #76]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4910      	ldr	r1, [pc, #64]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003404:	4313      	orrs	r3, r2
 8003406:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003408:	f000 f824 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <HAL_RCC_ClockConfig+0x1f0>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	490b      	ldr	r1, [pc, #44]	@ (8003448 <HAL_RCC_ClockConfig+0x1f4>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	fa22 f303 	lsr.w	r3, r2, r3
 8003424:	4a09      	ldr	r2, [pc, #36]	@ (800344c <HAL_RCC_ClockConfig+0x1f8>)
 8003426:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <HAL_RCC_ClockConfig+0x1fc>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fffd 	bl	800142c <HAL_InitTick>
 8003432:	4603      	mov	r3, r0
 8003434:	72fb      	strb	r3, [r7, #11]

  return status;
 8003436:	7afb      	ldrb	r3, [r7, #11]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40022000 	.word	0x40022000
 8003444:	40021000 	.word	0x40021000
 8003448:	08006f40 	.word	0x08006f40
 800344c:	20000048 	.word	0x20000048
 8003450:	2000004c 	.word	0x2000004c

08003454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003454:	b480      	push	{r7}
 8003456:	b089      	sub	sp, #36	@ 0x24
 8003458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
 800345e:	2300      	movs	r3, #0
 8003460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003462:	4b3e      	ldr	r3, [pc, #248]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	4b3b      	ldr	r3, [pc, #236]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_RCC_GetSysClockFreq+0x34>
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	2b0c      	cmp	r3, #12
 8003480:	d121      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11e      	bne.n	80034c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003488:	4b34      	ldr	r3, [pc, #208]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003494:	4b31      	ldr	r3, [pc, #196]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349a:	0a1b      	lsrs	r3, r3, #8
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e005      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034a4:	4b2d      	ldr	r3, [pc, #180]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10d      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d102      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034cc:	4b25      	ldr	r3, [pc, #148]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e004      	b.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 80034da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d134      	bne.n	800354c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034e2:	4b1e      	ldr	r3, [pc, #120]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f003 0303 	and.w	r3, r3, #3
 80034ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d003      	beq.n	80034fa <HAL_RCC_GetSysClockFreq+0xa6>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d003      	beq.n	8003500 <HAL_RCC_GetSysClockFreq+0xac>
 80034f8:	e005      	b.n	8003506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003564 <HAL_RCC_GetSysClockFreq+0x110>)
 80034fc:	617b      	str	r3, [r7, #20]
      break;
 80034fe:	e005      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <HAL_RCC_GetSysClockFreq+0x114>)
 8003502:	617b      	str	r3, [r7, #20]
      break;
 8003504:	e002      	b.n	800350c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	617b      	str	r3, [r7, #20]
      break;
 800350a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800350c:	4b13      	ldr	r3, [pc, #76]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800351a:	4b10      	ldr	r3, [pc, #64]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003524:	697a      	ldr	r2, [r7, #20]
 8003526:	fb03 f202 	mul.w	r2, r3, r2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003532:	4b0a      	ldr	r3, [pc, #40]	@ (800355c <HAL_RCC_GetSysClockFreq+0x108>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	0e5b      	lsrs	r3, r3, #25
 8003538:	f003 0303 	and.w	r3, r3, #3
 800353c:	3301      	adds	r3, #1
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	fbb2 f3f3 	udiv	r3, r2, r3
 800354a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800354c:	69bb      	ldr	r3, [r7, #24]
}
 800354e:	4618      	mov	r0, r3
 8003550:	3724      	adds	r7, #36	@ 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	08006f58 	.word	0x08006f58
 8003564:	00f42400 	.word	0x00f42400
 8003568:	007a1200 	.word	0x007a1200

0800356c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003570:	4b03      	ldr	r3, [pc, #12]	@ (8003580 <HAL_RCC_GetHCLKFreq+0x14>)
 8003572:	681b      	ldr	r3, [r3, #0]
}
 8003574:	4618      	mov	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000048 	.word	0x20000048

08003584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003588:	f7ff fff0 	bl	800356c <HAL_RCC_GetHCLKFreq>
 800358c:	4602      	mov	r2, r0
 800358e:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	4904      	ldr	r1, [pc, #16]	@ (80035ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800359a:	5ccb      	ldrb	r3, [r1, r3]
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	40021000 	.word	0x40021000
 80035ac:	08006f50 	.word	0x08006f50

080035b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80035b4:	f7ff ffda 	bl	800356c <HAL_RCC_GetHCLKFreq>
 80035b8:	4602      	mov	r2, r0
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0adb      	lsrs	r3, r3, #11
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	4904      	ldr	r1, [pc, #16]	@ (80035d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035c6:	5ccb      	ldrb	r3, [r1, r3]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	08006f50 	.word	0x08006f50

080035dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035e4:	2300      	movs	r3, #0
 80035e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035f4:	f7ff f9ee 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 80035f8:	6178      	str	r0, [r7, #20]
 80035fa:	e014      	b.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b25      	ldr	r3, [pc, #148]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	4a24      	ldr	r2, [pc, #144]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003606:	6593      	str	r3, [r2, #88]	@ 0x58
 8003608:	4b22      	ldr	r3, [pc, #136]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800360a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003614:	f7ff f9de 	bl	80029d4 <HAL_PWREx_GetVoltageRange>
 8003618:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800361a:	4b1e      	ldr	r3, [pc, #120]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	4a1d      	ldr	r2, [pc, #116]	@ (8003694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003624:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362c:	d10b      	bne.n	8003646 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b80      	cmp	r3, #128	@ 0x80
 8003632:	d919      	bls.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2ba0      	cmp	r3, #160	@ 0xa0
 8003638:	d902      	bls.n	8003640 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800363a:	2302      	movs	r3, #2
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e013      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003640:	2301      	movs	r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	e010      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b80      	cmp	r3, #128	@ 0x80
 800364a:	d902      	bls.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800364c:	2303      	movs	r3, #3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e00a      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b80      	cmp	r3, #128	@ 0x80
 8003656:	d102      	bne.n	800365e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003658:	2302      	movs	r3, #2
 800365a:	613b      	str	r3, [r7, #16]
 800365c:	e004      	b.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b70      	cmp	r3, #112	@ 0x70
 8003662:	d101      	bne.n	8003668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003668:	4b0b      	ldr	r3, [pc, #44]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 0207 	bic.w	r2, r3, #7
 8003670:	4909      	ldr	r1, [pc, #36]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003678:	4b07      	ldr	r3, [pc, #28]	@ (8003698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d001      	beq.n	800368a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e000      	b.n	800368c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3718      	adds	r7, #24
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	40021000 	.word	0x40021000
 8003698:	40022000 	.word	0x40022000

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d041      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c0:	d02a      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80036c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036c6:	d824      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036cc:	d008      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036d2:	d81e      	bhi.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80036d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036dc:	d010      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036de:	e018      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e0:	4b86      	ldr	r3, [pc, #536]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4a85      	ldr	r2, [pc, #532]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036ec:	e015      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3304      	adds	r3, #4
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fabb 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036fe:	e00c      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3320      	adds	r3, #32
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fba6 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003710:	e003      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	74fb      	strb	r3, [r7, #19]
      break;
 8003716:	e000      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003720:	4b76      	ldr	r3, [pc, #472]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800372e:	4973      	ldr	r1, [pc, #460]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003730:	4313      	orrs	r3, r2
 8003732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003736:	e001      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003738:	7cfb      	ldrb	r3, [r7, #19]
 800373a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d041      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800374c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003750:	d02a      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003752:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003756:	d824      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003758:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800375c:	d008      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800375e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003762:	d81e      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003768:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800376c:	d010      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800376e:	e018      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003770:	4b62      	ldr	r3, [pc, #392]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	4a61      	ldr	r2, [pc, #388]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800377c:	e015      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3304      	adds	r3, #4
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f000 fa73 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800378e:	e00c      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3320      	adds	r3, #32
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fb5e 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80037a0:	e003      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	74fb      	strb	r3, [r7, #19]
      break;
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80037a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80037b0:	4b52      	ldr	r3, [pc, #328]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037be:	494f      	ldr	r1, [pc, #316]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037c6:	e001      	b.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	7cfb      	ldrb	r3, [r7, #19]
 80037ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80a0 	beq.w	800391a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037da:	2300      	movs	r3, #0
 80037dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037de:	4b47      	ldr	r3, [pc, #284]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00d      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	4b41      	ldr	r3, [pc, #260]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f8:	4a40      	ldr	r2, [pc, #256]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003800:	4b3e      	ldr	r3, [pc, #248]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800380c:	2301      	movs	r3, #1
 800380e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003810:	4b3b      	ldr	r3, [pc, #236]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a3a      	ldr	r2, [pc, #232]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800381a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800381c:	f7fd fe56 	bl	80014cc <HAL_GetTick>
 8003820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fd fe52 	bl	80014cc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	74fb      	strb	r3, [r7, #19]
        break;
 8003836:	e005      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003838:	4b31      	ldr	r3, [pc, #196]	@ (8003900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ef      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003844:	7cfb      	ldrb	r3, [r7, #19]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d15c      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800384a:	4b2c      	ldr	r3, [pc, #176]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d01f      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d019      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003868:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800386e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003874:	4b21      	ldr	r3, [pc, #132]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800387a:	4a20      	ldr	r2, [pc, #128]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800388a:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d016      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fd fe11 	bl	80014cc <HAL_GetTick>
 80038aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038ac:	e00b      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038ae:	f7fd fe0d 	bl	80014cc <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038bc:	4293      	cmp	r3, r2
 80038be:	d902      	bls.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	74fb      	strb	r3, [r7, #19]
            break;
 80038c4:	e006      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c6:	4b0d      	ldr	r3, [pc, #52]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ec      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80038d4:	7cfb      	ldrb	r3, [r7, #19]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038da:	4b08      	ldr	r3, [pc, #32]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ea:	4904      	ldr	r1, [pc, #16]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80038f2:	e009      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	74bb      	strb	r3, [r7, #18]
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003904:	7cfb      	ldrb	r3, [r7, #19]
 8003906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003908:	7c7b      	ldrb	r3, [r7, #17]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d105      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800390e:	4b9e      	ldr	r3, [pc, #632]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003912:	4a9d      	ldr	r2, [pc, #628]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003918:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003926:	4b98      	ldr	r3, [pc, #608]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392c:	f023 0203 	bic.w	r2, r3, #3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	4994      	ldr	r1, [pc, #592]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003948:	4b8f      	ldr	r3, [pc, #572]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394e:	f023 020c 	bic.w	r2, r3, #12
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	498c      	ldr	r1, [pc, #560]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396a:	4b87      	ldr	r3, [pc, #540]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003970:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	4983      	ldr	r1, [pc, #524]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800398c:	4b7e      	ldr	r3, [pc, #504]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003992:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	497b      	ldr	r1, [pc, #492]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80039ae:	4b76      	ldr	r3, [pc, #472]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	4972      	ldr	r1, [pc, #456]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0320 	and.w	r3, r3, #32
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80039d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039de:	496a      	ldr	r1, [pc, #424]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f2:	4b65      	ldr	r3, [pc, #404]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a00:	4961      	ldr	r1, [pc, #388]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a14:	4b5c      	ldr	r3, [pc, #368]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	4959      	ldr	r1, [pc, #356]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a36:	4b54      	ldr	r3, [pc, #336]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	4950      	ldr	r1, [pc, #320]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a58:	4b4b      	ldr	r3, [pc, #300]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a66:	4948      	ldr	r1, [pc, #288]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	493f      	ldr	r1, [pc, #252]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d028      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aaa:	4937      	ldr	r1, [pc, #220]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003aba:	d106      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b32      	ldr	r3, [pc, #200]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
 8003ac8:	e011      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ace:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	2101      	movs	r1, #1
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f8c8 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003aea:	7cfb      	ldrb	r3, [r7, #19]
 8003aec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d028      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003afa:	4b23      	ldr	r3, [pc, #140]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b08:	491f      	ldr	r1, [pc, #124]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b18:	d106      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4a1a      	ldr	r2, [pc, #104]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b24:	60d3      	str	r3, [r2, #12]
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	2101      	movs	r1, #1
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 f899 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003b48:	7cfb      	ldrb	r3, [r7, #19]
 8003b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d02b      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b58:	4b0b      	ldr	r3, [pc, #44]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b76:	d109      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b78:	4b03      	ldr	r3, [pc, #12]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4a02      	ldr	r2, [pc, #8]	@ (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b82:	60d3      	str	r3, [r2, #12]
 8003b84:	e014      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003b86:	bf00      	nop
 8003b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003b94:	d10c      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 f867 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ba6:	7cfb      	ldrb	r3, [r7, #19]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02f      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bca:	4928      	ldr	r1, [pc, #160]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bda:	d10d      	bne.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3304      	adds	r3, #4
 8003be0:	2102      	movs	r1, #2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f000 f844 	bl	8003c70 <RCCEx_PLLSAI1_Config>
 8003be8:	4603      	mov	r3, r0
 8003bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003bec:	7cfb      	ldrb	r3, [r7, #19]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003bf2:	7cfb      	ldrb	r3, [r7, #19]
 8003bf4:	74bb      	strb	r3, [r7, #18]
 8003bf6:	e011      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c00:	d10c      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	3320      	adds	r3, #32
 8003c06:	2102      	movs	r1, #2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f925 	bl	8003e58 <RCCEx_PLLSAI2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c12:	7cfb      	ldrb	r3, [r7, #19]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003c18:	7cfb      	ldrb	r3, [r7, #19]
 8003c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00a      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c28:	4b10      	ldr	r3, [pc, #64]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c36:	490d      	ldr	r1, [pc, #52]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003c4a:	4b08      	ldr	r3, [pc, #32]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c50:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c5a:	4904      	ldr	r1, [pc, #16]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003c62:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3718      	adds	r7, #24
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c7e:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	f003 0303 	and.w	r3, r3, #3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d018      	beq.n	8003cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c8a:	4b72      	ldr	r3, [pc, #456]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0203 	and.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10d      	bne.n	8003cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d009      	beq.n	8003cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	091b      	lsrs	r3, r3, #4
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d047      	beq.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
 8003cba:	e044      	b.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d018      	beq.n	8003cf6 <RCCEx_PLLSAI1_Config+0x86>
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d825      	bhi.n	8003d14 <RCCEx_PLLSAI1_Config+0xa4>
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d002      	beq.n	8003cd2 <RCCEx_PLLSAI1_Config+0x62>
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d009      	beq.n	8003ce4 <RCCEx_PLLSAI1_Config+0x74>
 8003cd0:	e020      	b.n	8003d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cd2:	4b60      	ldr	r3, [pc, #384]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11d      	bne.n	8003d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ce2:	e01a      	b.n	8003d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d116      	bne.n	8003d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cf4:	e013      	b.n	8003d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cf6:	4b57      	ldr	r3, [pc, #348]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003d02:	4b54      	ldr	r3, [pc, #336]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003d12:	e006      	b.n	8003d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
      break;
 8003d18:	e004      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1a:	bf00      	nop
 8003d1c:	e002      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d1e:	bf00      	nop
 8003d20:	e000      	b.n	8003d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10d      	bne.n	8003d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d2a:	4b4a      	ldr	r3, [pc, #296]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6819      	ldr	r1, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	430b      	orrs	r3, r1
 8003d40:	4944      	ldr	r1, [pc, #272]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d17d      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003d4c:	4b41      	ldr	r3, [pc, #260]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a40      	ldr	r2, [pc, #256]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d52:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d58:	f7fd fbb8 	bl	80014cc <HAL_GetTick>
 8003d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d5e:	e009      	b.n	8003d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d60:	f7fd fbb4 	bl	80014cc <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d902      	bls.n	8003d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	73fb      	strb	r3, [r7, #15]
        break;
 8003d72:	e005      	b.n	8003d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003d74:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1ef      	bne.n	8003d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d160      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d111      	bne.n	8003db0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d8c:	4b31      	ldr	r3, [pc, #196]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	0211      	lsls	r1, r2, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	68d2      	ldr	r2, [r2, #12]
 8003da2:	0912      	lsrs	r2, r2, #4
 8003da4:	0452      	lsls	r2, r2, #17
 8003da6:	430a      	orrs	r2, r1
 8003da8:	492a      	ldr	r1, [pc, #168]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	610b      	str	r3, [r1, #16]
 8003dae:	e027      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d112      	bne.n	8003ddc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003db6:	4b27      	ldr	r3, [pc, #156]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003dbe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6892      	ldr	r2, [r2, #8]
 8003dc6:	0211      	lsls	r1, r2, #8
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6912      	ldr	r2, [r2, #16]
 8003dcc:	0852      	lsrs	r2, r2, #1
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	0552      	lsls	r2, r2, #21
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	491f      	ldr	r1, [pc, #124]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	610b      	str	r3, [r1, #16]
 8003dda:	e011      	b.n	8003e00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ddc:	4b1d      	ldr	r3, [pc, #116]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003de4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6892      	ldr	r2, [r2, #8]
 8003dec:	0211      	lsls	r1, r2, #8
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6952      	ldr	r2, [r2, #20]
 8003df2:	0852      	lsrs	r2, r2, #1
 8003df4:	3a01      	subs	r2, #1
 8003df6:	0652      	lsls	r2, r2, #25
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	4916      	ldr	r1, [pc, #88]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003e00:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a13      	ldr	r2, [pc, #76]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e06:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0c:	f7fd fb5e 	bl	80014cc <HAL_GetTick>
 8003e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e12:	e009      	b.n	8003e28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e14:	f7fd fb5a 	bl	80014cc <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d902      	bls.n	8003e28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	73fb      	strb	r3, [r7, #15]
          break;
 8003e26:	e005      	b.n	8003e34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003e28:	4b0a      	ldr	r3, [pc, #40]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ef      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003e3a:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	4904      	ldr	r1, [pc, #16]	@ (8003e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000

08003e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003e72:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
       ||
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	1c5a      	adds	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
       ||
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d047      	beq.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	73fb      	strb	r3, [r7, #15]
 8003ea2:	e044      	b.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d018      	beq.n	8003ede <RCCEx_PLLSAI2_Config+0x86>
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d825      	bhi.n	8003efc <RCCEx_PLLSAI2_Config+0xa4>
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d002      	beq.n	8003eba <RCCEx_PLLSAI2_Config+0x62>
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d009      	beq.n	8003ecc <RCCEx_PLLSAI2_Config+0x74>
 8003eb8:	e020      	b.n	8003efc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003eba:	4b55      	ldr	r3, [pc, #340]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d11d      	bne.n	8003f02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eca:	e01a      	b.n	8003f02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ecc:	4b50      	ldr	r3, [pc, #320]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d116      	bne.n	8003f06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003edc:	e013      	b.n	8003f06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ede:	4b4c      	ldr	r3, [pc, #304]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10f      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eea:	4b49      	ldr	r3, [pc, #292]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003efa:	e006      	b.n	8003f0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	73fb      	strb	r3, [r7, #15]
      break;
 8003f00:	e004      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f02:	bf00      	nop
 8003f04:	e002      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f06:	bf00      	nop
 8003f08:	e000      	b.n	8003f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f12:	4b3f      	ldr	r3, [pc, #252]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6819      	ldr	r1, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	430b      	orrs	r3, r1
 8003f28:	4939      	ldr	r1, [pc, #228]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d167      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a35      	ldr	r2, [pc, #212]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f40:	f7fd fac4 	bl	80014cc <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fd fac0 	bl	80014cc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
        break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1ef      	bne.n	8003f48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d14a      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d111      	bne.n	8003f98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f74:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003f7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6892      	ldr	r2, [r2, #8]
 8003f84:	0211      	lsls	r1, r2, #8
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	68d2      	ldr	r2, [r2, #12]
 8003f8a:	0912      	lsrs	r2, r2, #4
 8003f8c:	0452      	lsls	r2, r2, #17
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	491f      	ldr	r1, [pc, #124]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	614b      	str	r3, [r1, #20]
 8003f96:	e011      	b.n	8003fbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f98:	4b1d      	ldr	r3, [pc, #116]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003fa0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	0211      	lsls	r1, r2, #8
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6912      	ldr	r2, [r2, #16]
 8003fae:	0852      	lsrs	r2, r2, #1
 8003fb0:	3a01      	subs	r2, #1
 8003fb2:	0652      	lsls	r2, r2, #25
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	4916      	ldr	r1, [pc, #88]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003fbc:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a13      	ldr	r2, [pc, #76]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fd fa80 	bl	80014cc <HAL_GetTick>
 8003fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fce:	e009      	b.n	8003fe4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003fd0:	f7fd fa7c 	bl	80014cc <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d902      	bls.n	8003fe4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8003fe2:	e005      	b.n	8003ff0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ef      	beq.n	8003fd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4904      	ldr	r1, [pc, #16]	@ (8004010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004000:	4313      	orrs	r3, r2
 8004002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004004:	7bfb      	ldrb	r3, [r7, #15]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000

08004014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e049      	b.n	80040ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc ffcc 	bl	8000fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 fdac 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x24>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e03c      	b.n	8004162 <HAL_TIM_PWM_Start+0x9e>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d109      	bne.n	8004102 <HAL_TIM_PWM_Start+0x3e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e02f      	b.n	8004162 <HAL_TIM_PWM_Start+0x9e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d109      	bne.n	800411c <HAL_TIM_PWM_Start+0x58>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e022      	b.n	8004162 <HAL_TIM_PWM_Start+0x9e>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	2b0c      	cmp	r3, #12
 8004120:	d109      	bne.n	8004136 <HAL_TIM_PWM_Start+0x72>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b01      	cmp	r3, #1
 800412c:	bf14      	ite	ne
 800412e:	2301      	movne	r3, #1
 8004130:	2300      	moveq	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	e015      	b.n	8004162 <HAL_TIM_PWM_Start+0x9e>
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b10      	cmp	r3, #16
 800413a:	d109      	bne.n	8004150 <HAL_TIM_PWM_Start+0x8c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	bf14      	ite	ne
 8004148:	2301      	movne	r3, #1
 800414a:	2300      	moveq	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e008      	b.n	8004162 <HAL_TIM_PWM_Start+0x9e>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e09c      	b.n	80042a4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <HAL_TIM_PWM_Start+0xb6>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2202      	movs	r2, #2
 8004174:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004178:	e023      	b.n	80041c2 <HAL_TIM_PWM_Start+0xfe>
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Start+0xc6>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2202      	movs	r2, #2
 8004184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004188:	e01b      	b.n	80041c2 <HAL_TIM_PWM_Start+0xfe>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b08      	cmp	r3, #8
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Start+0xd6>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004198:	e013      	b.n	80041c2 <HAL_TIM_PWM_Start+0xfe>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b0c      	cmp	r3, #12
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Start+0xe6>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2202      	movs	r2, #2
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041a8:	e00b      	b.n	80041c2 <HAL_TIM_PWM_Start+0xfe>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b10      	cmp	r3, #16
 80041ae:	d104      	bne.n	80041ba <HAL_TIM_PWM_Start+0xf6>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041b8:	e003      	b.n	80041c2 <HAL_TIM_PWM_Start+0xfe>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2201      	movs	r2, #1
 80041c8:	6839      	ldr	r1, [r7, #0]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f001 f984 	bl	80054d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a35      	ldr	r2, [pc, #212]	@ (80042ac <HAL_TIM_PWM_Start+0x1e8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_TIM_PWM_Start+0x13e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a34      	ldr	r2, [pc, #208]	@ (80042b0 <HAL_TIM_PWM_Start+0x1ec>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00e      	beq.n	8004202 <HAL_TIM_PWM_Start+0x13e>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <HAL_TIM_PWM_Start+0x1f0>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d009      	beq.n	8004202 <HAL_TIM_PWM_Start+0x13e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a31      	ldr	r2, [pc, #196]	@ (80042b8 <HAL_TIM_PWM_Start+0x1f4>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d004      	beq.n	8004202 <HAL_TIM_PWM_Start+0x13e>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a2f      	ldr	r2, [pc, #188]	@ (80042bc <HAL_TIM_PWM_Start+0x1f8>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_TIM_PWM_Start+0x142>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <HAL_TIM_PWM_Start+0x144>
 8004206:	2300      	movs	r3, #0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d007      	beq.n	800421c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800421a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a22      	ldr	r2, [pc, #136]	@ (80042ac <HAL_TIM_PWM_Start+0x1e8>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01d      	beq.n	8004262 <HAL_TIM_PWM_Start+0x19e>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800422e:	d018      	beq.n	8004262 <HAL_TIM_PWM_Start+0x19e>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a22      	ldr	r2, [pc, #136]	@ (80042c0 <HAL_TIM_PWM_Start+0x1fc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d013      	beq.n	8004262 <HAL_TIM_PWM_Start+0x19e>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a21      	ldr	r2, [pc, #132]	@ (80042c4 <HAL_TIM_PWM_Start+0x200>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d00e      	beq.n	8004262 <HAL_TIM_PWM_Start+0x19e>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1f      	ldr	r2, [pc, #124]	@ (80042c8 <HAL_TIM_PWM_Start+0x204>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d009      	beq.n	8004262 <HAL_TIM_PWM_Start+0x19e>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a17      	ldr	r2, [pc, #92]	@ (80042b0 <HAL_TIM_PWM_Start+0x1ec>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d004      	beq.n	8004262 <HAL_TIM_PWM_Start+0x19e>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a15      	ldr	r2, [pc, #84]	@ (80042b4 <HAL_TIM_PWM_Start+0x1f0>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d115      	bne.n	800428e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	4b18      	ldr	r3, [pc, #96]	@ (80042cc <HAL_TIM_PWM_Start+0x208>)
 800426a:	4013      	ands	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b06      	cmp	r3, #6
 8004272:	d015      	beq.n	80042a0 <HAL_TIM_PWM_Start+0x1dc>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800427a:	d011      	beq.n	80042a0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f042 0201 	orr.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428c:	e008      	b.n	80042a0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e000      	b.n	80042a2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40012c00 	.word	0x40012c00
 80042b0:	40013400 	.word	0x40013400
 80042b4:	40014000 	.word	0x40014000
 80042b8:	40014400 	.word	0x40014400
 80042bc:	40014800 	.word	0x40014800
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800
 80042c8:	40000c00 	.word	0x40000c00
 80042cc:	00010007 	.word	0x00010007

080042d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e049      	b.n	8004376 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fe8c 	bl	8001014 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 fc4e 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b086      	sub	sp, #24
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d101      	bne.n	8004392 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e097      	b.n	80044c2 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fda0 	bl	8000eec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80043c2:	f023 0307 	bic.w	r3, r3, #7
 80043c6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 fbec 	bl	8004bb0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	689a      	ldr	r2, [r3, #8]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	4313      	orrs	r3, r2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800441e:	f023 030c 	bic.w	r3, r3, #12
 8004422:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800442a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800442e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68da      	ldr	r2, [r3, #12]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	4313      	orrs	r3, r2
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	011a      	lsls	r2, r3, #4
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	031b      	lsls	r3, r3, #12
 800444e:	4313      	orrs	r3, r2
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800445c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004464:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	4313      	orrs	r3, r2
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044da:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044ea:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044f2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d110      	bne.n	800451c <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d102      	bne.n	8004506 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004500:	7b7b      	ldrb	r3, [r7, #13]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e069      	b.n	80045de <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2202      	movs	r2, #2
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800451a:	e031      	b.n	8004580 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b04      	cmp	r3, #4
 8004520:	d110      	bne.n	8004544 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004522:	7bbb      	ldrb	r3, [r7, #14]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d102      	bne.n	800452e <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004528:	7b3b      	ldrb	r3, [r7, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d001      	beq.n	8004532 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e055      	b.n	80045de <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004542:	e01d      	b.n	8004580 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004544:	7bfb      	ldrb	r3, [r7, #15]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d108      	bne.n	800455c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d105      	bne.n	800455c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004550:	7b7b      	ldrb	r3, [r7, #13]
 8004552:	2b01      	cmp	r3, #1
 8004554:	d102      	bne.n	800455c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004556:	7b3b      	ldrb	r3, [r7, #12]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e03e      	b.n	80045de <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_TIM_Encoder_Start+0xc4>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b04      	cmp	r3, #4
 800458a:	d008      	beq.n	800459e <HAL_TIM_Encoder_Start+0xd4>
 800458c:	e00f      	b.n	80045ae <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2201      	movs	r2, #1
 8004594:	2100      	movs	r1, #0
 8004596:	4618      	mov	r0, r3
 8004598:	f000 ff9e 	bl	80054d8 <TIM_CCxChannelCmd>
      break;
 800459c:	e016      	b.n	80045cc <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	2104      	movs	r1, #4
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 ff96 	bl	80054d8 <TIM_CCxChannelCmd>
      break;
 80045ac:	e00e      	b.n	80045cc <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2201      	movs	r2, #1
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 ff8e 	bl	80054d8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	2104      	movs	r1, #4
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 ff87 	bl	80054d8 <TIM_CCxChannelCmd>
      break;
 80045ca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d01b      	beq.n	800464a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f06f 0202 	mvn.w	r2, #2
 800461a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa9f 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 8004636:	e005      	b.n	8004644 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fa91 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 faa2 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	f003 0304 	and.w	r3, r3, #4
 8004650:	2b00      	cmp	r3, #0
 8004652:	d020      	beq.n	8004696 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01b      	beq.n	8004696 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f06f 0204 	mvn.w	r2, #4
 8004666:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 fa79 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 8004682:	e005      	b.n	8004690 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fa6b 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa7c 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 0308 	and.w	r3, r3, #8
 800469c:	2b00      	cmp	r3, #0
 800469e:	d020      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d01b      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0208 	mvn.w	r2, #8
 80046b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2204      	movs	r2, #4
 80046b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f003 0303 	and.w	r3, r3, #3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fa53 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 80046ce:	e005      	b.n	80046dc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 fa45 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa56 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f003 0310 	and.w	r3, r3, #16
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d020      	beq.n	800472e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f003 0310 	and.w	r3, r3, #16
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01b      	beq.n	800472e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f06f 0210 	mvn.w	r2, #16
 80046fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2208      	movs	r2, #8
 8004704:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004710:	2b00      	cmp	r3, #0
 8004712:	d003      	beq.n	800471c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fa2d 	bl	8004b74 <HAL_TIM_IC_CaptureCallback>
 800471a:	e005      	b.n	8004728 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa1f 	bl	8004b60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fa30 	bl	8004b88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00c      	beq.n	8004752 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f06f 0201 	mvn.w	r2, #1
 800474a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f9fd 	bl	8004b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800476e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 ff69 	bl	8005648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00c      	beq.n	800479a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 ff61 	bl	800565c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00c      	beq.n	80047be <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d007      	beq.n	80047be <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80047b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 f9ef 	bl	8004b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00c      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f003 0320 	and.w	r3, r3, #32
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f06f 0220 	mvn.w	r2, #32
 80047da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 ff29 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b086      	sub	sp, #24
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	60b9      	str	r1, [r7, #8]
 80047f4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004804:	2302      	movs	r3, #2
 8004806:	e088      	b.n	800491a <HAL_TIM_IC_ConfigChannel+0x130>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d11b      	bne.n	800484e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004826:	f000 fd33 	bl	8005290 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 020c 	bic.w	r2, r2, #12
 8004838:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6999      	ldr	r1, [r3, #24]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	e060      	b.n	8004910 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d11c      	bne.n	800488e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004864:	f000 fd82 	bl	800536c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	699a      	ldr	r2, [r3, #24]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004876:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6999      	ldr	r1, [r3, #24]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	619a      	str	r2, [r3, #24]
 800488c:	e040      	b.n	8004910 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d11b      	bne.n	80048cc <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80048a4:	f000 fd9f 	bl	80053e6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69da      	ldr	r2, [r3, #28]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 020c 	bic.w	r2, r2, #12
 80048b6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	69d9      	ldr	r1, [r3, #28]
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	61da      	str	r2, [r3, #28]
 80048ca:	e021      	b.n	8004910 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d11c      	bne.n	800490c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80048e2:	f000 fdbc 	bl	800545e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	69da      	ldr	r2, [r3, #28]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048f4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	021a      	lsls	r2, r3, #8
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]
 800490a:	e001      	b.n	8004910 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004918:	7dfb      	ldrb	r3, [r7, #23]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004930:	2300      	movs	r3, #0
 8004932:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800493e:	2302      	movs	r3, #2
 8004940:	e0ff      	b.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b14      	cmp	r3, #20
 800494e:	f200 80f0 	bhi.w	8004b32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004952:	a201      	add	r2, pc, #4	@ (adr r2, 8004958 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	080049ad 	.word	0x080049ad
 800495c:	08004b33 	.word	0x08004b33
 8004960:	08004b33 	.word	0x08004b33
 8004964:	08004b33 	.word	0x08004b33
 8004968:	080049ed 	.word	0x080049ed
 800496c:	08004b33 	.word	0x08004b33
 8004970:	08004b33 	.word	0x08004b33
 8004974:	08004b33 	.word	0x08004b33
 8004978:	08004a2f 	.word	0x08004a2f
 800497c:	08004b33 	.word	0x08004b33
 8004980:	08004b33 	.word	0x08004b33
 8004984:	08004b33 	.word	0x08004b33
 8004988:	08004a6f 	.word	0x08004a6f
 800498c:	08004b33 	.word	0x08004b33
 8004990:	08004b33 	.word	0x08004b33
 8004994:	08004b33 	.word	0x08004b33
 8004998:	08004ab1 	.word	0x08004ab1
 800499c:	08004b33 	.word	0x08004b33
 80049a0:	08004b33 	.word	0x08004b33
 80049a4:	08004b33 	.word	0x08004b33
 80049a8:	08004af1 	.word	0x08004af1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68b9      	ldr	r1, [r7, #8]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f996 	bl	8004ce4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	699a      	ldr	r2, [r3, #24]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0208 	orr.w	r2, r2, #8
 80049c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	699a      	ldr	r2, [r3, #24]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0204 	bic.w	r2, r2, #4
 80049d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6999      	ldr	r1, [r3, #24]
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	619a      	str	r2, [r3, #24]
      break;
 80049ea:	e0a5      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 fa06 	bl	8004e04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	699a      	ldr	r2, [r3, #24]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	699a      	ldr	r2, [r3, #24]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6999      	ldr	r1, [r3, #24]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	021a      	lsls	r2, r3, #8
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	619a      	str	r2, [r3, #24]
      break;
 8004a2c:	e084      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68b9      	ldr	r1, [r7, #8]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 fa6f 	bl	8004f18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0208 	orr.w	r2, r2, #8
 8004a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f022 0204 	bic.w	r2, r2, #4
 8004a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69d9      	ldr	r1, [r3, #28]
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	61da      	str	r2, [r3, #28]
      break;
 8004a6c:	e064      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68b9      	ldr	r1, [r7, #8]
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fad7 	bl	8005028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69da      	ldr	r2, [r3, #28]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69da      	ldr	r2, [r3, #28]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69d9      	ldr	r1, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	021a      	lsls	r2, r3, #8
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	61da      	str	r2, [r3, #28]
      break;
 8004aae:	e043      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fb20 	bl	80050fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0208 	orr.w	r2, r2, #8
 8004aca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004aee:	e023      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fb64 	bl	80051c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004b30:	e002      	b.n	8004b38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
      break;
 8004b36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3718      	adds	r7, #24
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop

08004b4c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a40      	ldr	r2, [pc, #256]	@ (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bce:	d00f      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8004cc8 <TIM_Base_SetConfig+0x118>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d00b      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a3c      	ldr	r2, [pc, #240]	@ (8004ccc <TIM_Base_SetConfig+0x11c>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d007      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a3b      	ldr	r2, [pc, #236]	@ (8004cd0 <TIM_Base_SetConfig+0x120>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d003      	beq.n	8004bf0 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a3a      	ldr	r2, [pc, #232]	@ (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d108      	bne.n	8004c02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2f      	ldr	r2, [pc, #188]	@ (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01f      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c10:	d01b      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a2c      	ldr	r2, [pc, #176]	@ (8004cc8 <TIM_Base_SetConfig+0x118>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d017      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004ccc <TIM_Base_SetConfig+0x11c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d013      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2a      	ldr	r2, [pc, #168]	@ (8004cd0 <TIM_Base_SetConfig+0x120>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00f      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a29      	ldr	r2, [pc, #164]	@ (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d00b      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a28      	ldr	r2, [pc, #160]	@ (8004cd8 <TIM_Base_SetConfig+0x128>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d007      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a27      	ldr	r2, [pc, #156]	@ (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_Base_SetConfig+0x9a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a26      	ldr	r2, [pc, #152]	@ (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d108      	bne.n	8004c5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a10      	ldr	r2, [pc, #64]	@ (8004cc4 <TIM_Base_SetConfig+0x114>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00f      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a12      	ldr	r2, [pc, #72]	@ (8004cd4 <TIM_Base_SetConfig+0x124>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00b      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a11      	ldr	r2, [pc, #68]	@ (8004cd8 <TIM_Base_SetConfig+0x128>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d007      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a10      	ldr	r2, [pc, #64]	@ (8004cdc <TIM_Base_SetConfig+0x12c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d003      	beq.n	8004ca8 <TIM_Base_SetConfig+0xf8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce0 <TIM_Base_SetConfig+0x130>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d103      	bne.n	8004cb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	615a      	str	r2, [r3, #20]
}
 8004cb6:	bf00      	nop
 8004cb8:	3714      	adds	r7, #20
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40000400 	.word	0x40000400
 8004ccc:	40000800 	.word	0x40000800
 8004cd0:	40000c00 	.word	0x40000c00
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800

08004ce4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b087      	sub	sp, #28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	f023 0201 	bic.w	r2, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 0303 	bic.w	r3, r3, #3
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0302 	bic.w	r3, r3, #2
 8004d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	@ (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d00f      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a2b      	ldr	r2, [pc, #172]	@ (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a2a      	ldr	r2, [pc, #168]	@ (8004df8 <TIM_OC1_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d007      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a29      	ldr	r2, [pc, #164]	@ (8004dfc <TIM_OC1_SetConfig+0x118>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d003      	beq.n	8004d64 <TIM_OC1_SetConfig+0x80>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a28      	ldr	r2, [pc, #160]	@ (8004e00 <TIM_OC1_SetConfig+0x11c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d10c      	bne.n	8004d7e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f023 0308 	bic.w	r3, r3, #8
 8004d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1b      	ldr	r2, [pc, #108]	@ (8004df0 <TIM_OC1_SetConfig+0x10c>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00f      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	@ (8004df4 <TIM_OC1_SetConfig+0x110>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d00b      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <TIM_OC1_SetConfig+0x114>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d007      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	@ (8004dfc <TIM_OC1_SetConfig+0x118>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d003      	beq.n	8004da6 <TIM_OC1_SetConfig+0xc2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a17      	ldr	r2, [pc, #92]	@ (8004e00 <TIM_OC1_SetConfig+0x11c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d111      	bne.n	8004dca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	693a      	ldr	r2, [r7, #16]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	40012c00 	.word	0x40012c00
 8004df4:	40013400 	.word	0x40013400
 8004df8:	40014000 	.word	0x40014000
 8004dfc:	40014400 	.word	0x40014400
 8004e00:	40014800 	.word	0x40014800

08004e04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	f023 0210 	bic.w	r2, r3, #16
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	021b      	lsls	r3, r3, #8
 8004e46:	68fa      	ldr	r2, [r7, #12]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	f023 0320 	bic.w	r3, r3, #32
 8004e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a28      	ldr	r2, [pc, #160]	@ (8004f04 <TIM_OC2_SetConfig+0x100>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_OC2_SetConfig+0x6c>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a27      	ldr	r2, [pc, #156]	@ (8004f08 <TIM_OC2_SetConfig+0x104>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d10d      	bne.n	8004e8c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	697a      	ldr	r2, [r7, #20]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f04 <TIM_OC2_SetConfig+0x100>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00f      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a1c      	ldr	r2, [pc, #112]	@ (8004f08 <TIM_OC2_SetConfig+0x104>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00b      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004f0c <TIM_OC2_SetConfig+0x108>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d007      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8004f10 <TIM_OC2_SetConfig+0x10c>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d003      	beq.n	8004eb4 <TIM_OC2_SetConfig+0xb0>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <TIM_OC2_SetConfig+0x110>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d113      	bne.n	8004edc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004eba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	695b      	ldr	r3, [r3, #20]
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685a      	ldr	r2, [r3, #4]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	40012c00 	.word	0x40012c00
 8004f08:	40013400 	.word	0x40013400
 8004f0c:	40014000 	.word	0x40014000
 8004f10:	40014400 	.word	0x40014400
 8004f14:	40014800 	.word	0x40014800

08004f18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0303 	bic.w	r3, r3, #3
 8004f52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a27      	ldr	r2, [pc, #156]	@ (8005014 <TIM_OC3_SetConfig+0xfc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC3_SetConfig+0x6a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a26      	ldr	r2, [pc, #152]	@ (8005018 <TIM_OC3_SetConfig+0x100>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d10d      	bne.n	8004f9e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <TIM_OC3_SetConfig+0xfc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00f      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <TIM_OC3_SetConfig+0x100>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00b      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800501c <TIM_OC3_SetConfig+0x104>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d007      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <TIM_OC3_SetConfig+0x108>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d003      	beq.n	8004fc6 <TIM_OC3_SetConfig+0xae>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <TIM_OC3_SetConfig+0x10c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d113      	bne.n	8004fee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	621a      	str	r2, [r3, #32]
}
 8005008:	bf00      	nop
 800500a:	371c      	adds	r7, #28
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	40012c00 	.word	0x40012c00
 8005018:	40013400 	.word	0x40013400
 800501c:	40014000 	.word	0x40014000
 8005020:	40014400 	.word	0x40014400
 8005024:	40014800 	.word	0x40014800

08005028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a1b      	ldr	r3, [r3, #32]
 800503c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800505a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005062:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4313      	orrs	r3, r2
 800506e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005076:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	031b      	lsls	r3, r3, #12
 800507e:	693a      	ldr	r2, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <TIM_OC4_SetConfig+0xc0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00f      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a17      	ldr	r2, [pc, #92]	@ (80050ec <TIM_OC4_SetConfig+0xc4>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d00b      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a16      	ldr	r2, [pc, #88]	@ (80050f0 <TIM_OC4_SetConfig+0xc8>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d007      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a15      	ldr	r2, [pc, #84]	@ (80050f4 <TIM_OC4_SetConfig+0xcc>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d003      	beq.n	80050ac <TIM_OC4_SetConfig+0x84>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a14      	ldr	r2, [pc, #80]	@ (80050f8 <TIM_OC4_SetConfig+0xd0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d109      	bne.n	80050c0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	621a      	str	r2, [r3, #32]
}
 80050da:	bf00      	nop
 80050dc:	371c      	adds	r7, #28
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	40012c00 	.word	0x40012c00
 80050ec:	40013400 	.word	0x40013400
 80050f0:	40014000 	.word	0x40014000
 80050f4:	40014400 	.word	0x40014400
 80050f8:	40014800 	.word	0x40014800

080050fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005140:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	041b      	lsls	r3, r3, #16
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <TIM_OC5_SetConfig+0xb4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d00f      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <TIM_OC5_SetConfig+0xb8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d00b      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <TIM_OC5_SetConfig+0xbc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d007      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <TIM_OC5_SetConfig+0xc0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d003      	beq.n	8005176 <TIM_OC5_SetConfig+0x7a>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <TIM_OC5_SetConfig+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d109      	bne.n	800518a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800517c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	021b      	lsls	r3, r3, #8
 8005184:	697a      	ldr	r2, [r7, #20]
 8005186:	4313      	orrs	r3, r2
 8005188:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40014400 	.word	0x40014400
 80051c0:	40014800 	.word	0x40014800

080051c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	021b      	lsls	r3, r3, #8
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	4313      	orrs	r3, r2
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800520a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	051b      	lsls	r3, r3, #20
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	4313      	orrs	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a18      	ldr	r2, [pc, #96]	@ (800527c <TIM_OC6_SetConfig+0xb8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00f      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a17      	ldr	r2, [pc, #92]	@ (8005280 <TIM_OC6_SetConfig+0xbc>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00b      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <TIM_OC6_SetConfig+0xc0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d007      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a15      	ldr	r2, [pc, #84]	@ (8005288 <TIM_OC6_SetConfig+0xc4>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d003      	beq.n	8005240 <TIM_OC6_SetConfig+0x7c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a14      	ldr	r2, [pc, #80]	@ (800528c <TIM_OC6_SetConfig+0xc8>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d109      	bne.n	8005254 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005246:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	621a      	str	r2, [r3, #32]
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40014000 	.word	0x40014000
 8005288:	40014400 	.word	0x40014400
 800528c:	40014800 	.word	0x40014800

08005290 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f023 0201 	bic.w	r2, r3, #1
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4a26      	ldr	r2, [pc, #152]	@ (8005354 <TIM_TI1_SetConfig+0xc4>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d017      	beq.n	80052ee <TIM_TI1_SetConfig+0x5e>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c4:	d013      	beq.n	80052ee <TIM_TI1_SetConfig+0x5e>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4a23      	ldr	r2, [pc, #140]	@ (8005358 <TIM_TI1_SetConfig+0xc8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d00f      	beq.n	80052ee <TIM_TI1_SetConfig+0x5e>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a22      	ldr	r2, [pc, #136]	@ (800535c <TIM_TI1_SetConfig+0xcc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00b      	beq.n	80052ee <TIM_TI1_SetConfig+0x5e>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4a21      	ldr	r2, [pc, #132]	@ (8005360 <TIM_TI1_SetConfig+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d007      	beq.n	80052ee <TIM_TI1_SetConfig+0x5e>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	4a20      	ldr	r2, [pc, #128]	@ (8005364 <TIM_TI1_SetConfig+0xd4>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d003      	beq.n	80052ee <TIM_TI1_SetConfig+0x5e>
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4a1f      	ldr	r2, [pc, #124]	@ (8005368 <TIM_TI1_SetConfig+0xd8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d101      	bne.n	80052f2 <TIM_TI1_SetConfig+0x62>
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <TIM_TI1_SetConfig+0x64>
 80052f2:	2300      	movs	r3, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	e003      	b.n	8005312 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005318:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	011b      	lsls	r3, r3, #4
 800531e:	b2db      	uxtb	r3, r3
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f003 030a 	and.w	r3, r3, #10
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4313      	orrs	r3, r2
 8005338:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	621a      	str	r2, [r3, #32]
}
 8005346:	bf00      	nop
 8005348:	371c      	adds	r7, #28
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	40012c00 	.word	0x40012c00
 8005358:	40000400 	.word	0x40000400
 800535c:	40000800 	.word	0x40000800
 8005360:	40000c00 	.word	0x40000c00
 8005364:	40013400 	.word	0x40013400
 8005368:	40014000 	.word	0x40014000

0800536c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f023 0210 	bic.w	r2, r3, #16
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005398:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	021b      	lsls	r3, r3, #8
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	031b      	lsls	r3, r3, #12
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80053c8:	697a      	ldr	r2, [r7, #20]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	621a      	str	r2, [r3, #32]
}
 80053da:	bf00      	nop
 80053dc:	371c      	adds	r7, #28
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b087      	sub	sp, #28
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	60f8      	str	r0, [r7, #12]
 80053ee:	60b9      	str	r1, [r7, #8]
 80053f0:	607a      	str	r2, [r7, #4]
 80053f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6a1b      	ldr	r3, [r3, #32]
 80053f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f023 0303 	bic.w	r3, r3, #3
 8005412:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005422:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	011b      	lsls	r3, r3, #4
 8005428:	b2db      	uxtb	r3, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005436:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	621a      	str	r2, [r3, #32]
}
 8005452:	bf00      	nop
 8005454:	371c      	adds	r7, #28
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6a1b      	ldr	r3, [r3, #32]
 8005470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6a1b      	ldr	r3, [r3, #32]
 8005476:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800548a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	021b      	lsls	r3, r3, #8
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800549c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	031b      	lsls	r3, r3, #12
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80054b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	031b      	lsls	r3, r3, #12
 80054b6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	621a      	str	r2, [r3, #32]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 031f 	and.w	r3, r3, #31
 80054ea:	2201      	movs	r2, #1
 80054ec:	fa02 f303 	lsl.w	r3, r2, r3
 80054f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	43db      	mvns	r3, r3
 80054fa:	401a      	ands	r2, r3
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6a1a      	ldr	r2, [r3, #32]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	6879      	ldr	r1, [r7, #4]
 800550c:	fa01 f303 	lsl.w	r3, r1, r3
 8005510:	431a      	orrs	r2, r3
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
}
 8005516:	bf00      	nop
 8005518:	371c      	adds	r7, #28
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr
	...

08005524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005538:	2302      	movs	r3, #2
 800553a:	e068      	b.n	800560e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a2e      	ldr	r2, [pc, #184]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a2d      	ldr	r2, [pc, #180]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d108      	bne.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a1e      	ldr	r2, [pc, #120]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d01d      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ae:	d018      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d013      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a1a      	ldr	r2, [pc, #104]	@ (8005628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d00e      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a18      	ldr	r2, [pc, #96]	@ (800562c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d009      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a13      	ldr	r2, [pc, #76]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d004      	beq.n	80055e2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a14      	ldr	r2, [pc, #80]	@ (8005630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d10c      	bne.n	80055fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40012c00 	.word	0x40012c00
 8005620:	40013400 	.word	0x40013400
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40014000 	.word	0x40014000

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e040      	b.n	8005704 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d106      	bne.n	8005698 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f7fb fd3c 	bl	8001110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2224      	movs	r2, #36	@ 0x24
 800569c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fae0 	bl	8005c7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f825 	bl	800570c <UART_SetConfig>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e01b      	b.n	8005704 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fb5f 	bl	8005dc0 <UART_CheckIdleState>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005710:	b08a      	sub	sp, #40	@ 0x28
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	431a      	orrs	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4313      	orrs	r3, r2
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4ba4      	ldr	r3, [pc, #656]	@ (80059cc <UART_SetConfig+0x2c0>)
 800573c:	4013      	ands	r3, r2
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005744:	430b      	orrs	r3, r1
 8005746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a99      	ldr	r2, [pc, #612]	@ (80059d0 <UART_SetConfig+0x2c4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005774:	4313      	orrs	r3, r2
 8005776:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005788:	430a      	orrs	r2, r1
 800578a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a90      	ldr	r2, [pc, #576]	@ (80059d4 <UART_SetConfig+0x2c8>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d126      	bne.n	80057e4 <UART_SetConfig+0xd8>
 8005796:	4b90      	ldr	r3, [pc, #576]	@ (80059d8 <UART_SetConfig+0x2cc>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800579c:	f003 0303 	and.w	r3, r3, #3
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d81b      	bhi.n	80057dc <UART_SetConfig+0xd0>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <UART_SetConfig+0xa0>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057cd 	.word	0x080057cd
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057d5 	.word	0x080057d5
 80057bc:	2301      	movs	r3, #1
 80057be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c2:	e116      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80057c4:	2302      	movs	r3, #2
 80057c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ca:	e112      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80057cc:	2304      	movs	r3, #4
 80057ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d2:	e10e      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80057d4:	2308      	movs	r3, #8
 80057d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057da:	e10a      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80057dc:	2310      	movs	r3, #16
 80057de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057e2:	e106      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a7c      	ldr	r2, [pc, #496]	@ (80059dc <UART_SetConfig+0x2d0>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d138      	bne.n	8005860 <UART_SetConfig+0x154>
 80057ee:	4b7a      	ldr	r3, [pc, #488]	@ (80059d8 <UART_SetConfig+0x2cc>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057f4:	f003 030c 	and.w	r3, r3, #12
 80057f8:	2b0c      	cmp	r3, #12
 80057fa:	d82d      	bhi.n	8005858 <UART_SetConfig+0x14c>
 80057fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0xf8>)
 80057fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005802:	bf00      	nop
 8005804:	08005839 	.word	0x08005839
 8005808:	08005859 	.word	0x08005859
 800580c:	08005859 	.word	0x08005859
 8005810:	08005859 	.word	0x08005859
 8005814:	08005849 	.word	0x08005849
 8005818:	08005859 	.word	0x08005859
 800581c:	08005859 	.word	0x08005859
 8005820:	08005859 	.word	0x08005859
 8005824:	08005841 	.word	0x08005841
 8005828:	08005859 	.word	0x08005859
 800582c:	08005859 	.word	0x08005859
 8005830:	08005859 	.word	0x08005859
 8005834:	08005851 	.word	0x08005851
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800583e:	e0d8      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005840:	2302      	movs	r3, #2
 8005842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005846:	e0d4      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005848:	2304      	movs	r3, #4
 800584a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800584e:	e0d0      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005850:	2308      	movs	r3, #8
 8005852:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005856:	e0cc      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005858:	2310      	movs	r3, #16
 800585a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800585e:	e0c8      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a5e      	ldr	r2, [pc, #376]	@ (80059e0 <UART_SetConfig+0x2d4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d125      	bne.n	80058b6 <UART_SetConfig+0x1aa>
 800586a:	4b5b      	ldr	r3, [pc, #364]	@ (80059d8 <UART_SetConfig+0x2cc>)
 800586c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005870:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005874:	2b30      	cmp	r3, #48	@ 0x30
 8005876:	d016      	beq.n	80058a6 <UART_SetConfig+0x19a>
 8005878:	2b30      	cmp	r3, #48	@ 0x30
 800587a:	d818      	bhi.n	80058ae <UART_SetConfig+0x1a2>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d00a      	beq.n	8005896 <UART_SetConfig+0x18a>
 8005880:	2b20      	cmp	r3, #32
 8005882:	d814      	bhi.n	80058ae <UART_SetConfig+0x1a2>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <UART_SetConfig+0x182>
 8005888:	2b10      	cmp	r3, #16
 800588a:	d008      	beq.n	800589e <UART_SetConfig+0x192>
 800588c:	e00f      	b.n	80058ae <UART_SetConfig+0x1a2>
 800588e:	2300      	movs	r3, #0
 8005890:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005894:	e0ad      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005896:	2302      	movs	r3, #2
 8005898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800589c:	e0a9      	b.n	80059f2 <UART_SetConfig+0x2e6>
 800589e:	2304      	movs	r3, #4
 80058a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058a4:	e0a5      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80058a6:	2308      	movs	r3, #8
 80058a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ac:	e0a1      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80058ae:	2310      	movs	r3, #16
 80058b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058b4:	e09d      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a4a      	ldr	r2, [pc, #296]	@ (80059e4 <UART_SetConfig+0x2d8>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d125      	bne.n	800590c <UART_SetConfig+0x200>
 80058c0:	4b45      	ldr	r3, [pc, #276]	@ (80059d8 <UART_SetConfig+0x2cc>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80058ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80058cc:	d016      	beq.n	80058fc <UART_SetConfig+0x1f0>
 80058ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d0:	d818      	bhi.n	8005904 <UART_SetConfig+0x1f8>
 80058d2:	2b80      	cmp	r3, #128	@ 0x80
 80058d4:	d00a      	beq.n	80058ec <UART_SetConfig+0x1e0>
 80058d6:	2b80      	cmp	r3, #128	@ 0x80
 80058d8:	d814      	bhi.n	8005904 <UART_SetConfig+0x1f8>
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <UART_SetConfig+0x1d8>
 80058de:	2b40      	cmp	r3, #64	@ 0x40
 80058e0:	d008      	beq.n	80058f4 <UART_SetConfig+0x1e8>
 80058e2:	e00f      	b.n	8005904 <UART_SetConfig+0x1f8>
 80058e4:	2300      	movs	r3, #0
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ea:	e082      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80058ec:	2302      	movs	r3, #2
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f2:	e07e      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80058f4:	2304      	movs	r3, #4
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fa:	e07a      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80058fc:	2308      	movs	r3, #8
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005902:	e076      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005904:	2310      	movs	r3, #16
 8005906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800590a:	e072      	b.n	80059f2 <UART_SetConfig+0x2e6>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a35      	ldr	r2, [pc, #212]	@ (80059e8 <UART_SetConfig+0x2dc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d12a      	bne.n	800596c <UART_SetConfig+0x260>
 8005916:	4b30      	ldr	r3, [pc, #192]	@ (80059d8 <UART_SetConfig+0x2cc>)
 8005918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800591c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005924:	d01a      	beq.n	800595c <UART_SetConfig+0x250>
 8005926:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800592a:	d81b      	bhi.n	8005964 <UART_SetConfig+0x258>
 800592c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005930:	d00c      	beq.n	800594c <UART_SetConfig+0x240>
 8005932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005936:	d815      	bhi.n	8005964 <UART_SetConfig+0x258>
 8005938:	2b00      	cmp	r3, #0
 800593a:	d003      	beq.n	8005944 <UART_SetConfig+0x238>
 800593c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005940:	d008      	beq.n	8005954 <UART_SetConfig+0x248>
 8005942:	e00f      	b.n	8005964 <UART_SetConfig+0x258>
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594a:	e052      	b.n	80059f2 <UART_SetConfig+0x2e6>
 800594c:	2302      	movs	r3, #2
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005952:	e04e      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595a:	e04a      	b.n	80059f2 <UART_SetConfig+0x2e6>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005962:	e046      	b.n	80059f2 <UART_SetConfig+0x2e6>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596a:	e042      	b.n	80059f2 <UART_SetConfig+0x2e6>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a17      	ldr	r2, [pc, #92]	@ (80059d0 <UART_SetConfig+0x2c4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d13a      	bne.n	80059ec <UART_SetConfig+0x2e0>
 8005976:	4b18      	ldr	r3, [pc, #96]	@ (80059d8 <UART_SetConfig+0x2cc>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005980:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005984:	d01a      	beq.n	80059bc <UART_SetConfig+0x2b0>
 8005986:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800598a:	d81b      	bhi.n	80059c4 <UART_SetConfig+0x2b8>
 800598c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005990:	d00c      	beq.n	80059ac <UART_SetConfig+0x2a0>
 8005992:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005996:	d815      	bhi.n	80059c4 <UART_SetConfig+0x2b8>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <UART_SetConfig+0x298>
 800599c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059a0:	d008      	beq.n	80059b4 <UART_SetConfig+0x2a8>
 80059a2:	e00f      	b.n	80059c4 <UART_SetConfig+0x2b8>
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059aa:	e022      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80059ac:	2302      	movs	r3, #2
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b2:	e01e      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ba:	e01a      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c2:	e016      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ca:	e012      	b.n	80059f2 <UART_SetConfig+0x2e6>
 80059cc:	efff69f3 	.word	0xefff69f3
 80059d0:	40008000 	.word	0x40008000
 80059d4:	40013800 	.word	0x40013800
 80059d8:	40021000 	.word	0x40021000
 80059dc:	40004400 	.word	0x40004400
 80059e0:	40004800 	.word	0x40004800
 80059e4:	40004c00 	.word	0x40004c00
 80059e8:	40005000 	.word	0x40005000
 80059ec:	2310      	movs	r3, #16
 80059ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a9f      	ldr	r2, [pc, #636]	@ (8005c74 <UART_SetConfig+0x568>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d17a      	bne.n	8005af2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80059fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d824      	bhi.n	8005a4e <UART_SetConfig+0x342>
 8005a04:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <UART_SetConfig+0x300>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a31 	.word	0x08005a31
 8005a10:	08005a4f 	.word	0x08005a4f
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a4f 	.word	0x08005a4f
 8005a1c:	08005a3f 	.word	0x08005a3f
 8005a20:	08005a4f 	.word	0x08005a4f
 8005a24:	08005a4f 	.word	0x08005a4f
 8005a28:	08005a4f 	.word	0x08005a4f
 8005a2c:	08005a47 	.word	0x08005a47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a30:	f7fd fda8 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005a34:	61f8      	str	r0, [r7, #28]
        break;
 8005a36:	e010      	b.n	8005a5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a38:	4b8f      	ldr	r3, [pc, #572]	@ (8005c78 <UART_SetConfig+0x56c>)
 8005a3a:	61fb      	str	r3, [r7, #28]
        break;
 8005a3c:	e00d      	b.n	8005a5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3e:	f7fd fd09 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8005a42:	61f8      	str	r0, [r7, #28]
        break;
 8005a44:	e009      	b.n	8005a5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a4a:	61fb      	str	r3, [r7, #28]
        break;
 8005a4c:	e005      	b.n	8005a5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f000 80fb 	beq.w	8005c58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	005b      	lsls	r3, r3, #1
 8005a6a:	4413      	add	r3, r2
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d305      	bcc.n	8005a7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005a78:	69fa      	ldr	r2, [r7, #28]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d903      	bls.n	8005a86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a84:	e0e8      	b.n	8005c58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	461c      	mov	r4, r3
 8005a8c:	4615      	mov	r5, r2
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	022b      	lsls	r3, r5, #8
 8005a98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a9c:	0222      	lsls	r2, r4, #8
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	6849      	ldr	r1, [r1, #4]
 8005aa2:	0849      	lsrs	r1, r1, #1
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4688      	mov	r8, r1
 8005aa8:	4681      	mov	r9, r0
 8005aaa:	eb12 0a08 	adds.w	sl, r2, r8
 8005aae:	eb43 0b09 	adc.w	fp, r3, r9
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	603b      	str	r3, [r7, #0]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ac0:	4650      	mov	r0, sl
 8005ac2:	4659      	mov	r1, fp
 8005ac4:	f7fa fbd4 	bl	8000270 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4613      	mov	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ad6:	d308      	bcc.n	8005aea <UART_SetConfig+0x3de>
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ade:	d204      	bcs.n	8005aea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	60da      	str	r2, [r3, #12]
 8005ae8:	e0b6      	b.n	8005c58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005af0:	e0b2      	b.n	8005c58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	69db      	ldr	r3, [r3, #28]
 8005af6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005afa:	d15e      	bne.n	8005bba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005afc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b00:	2b08      	cmp	r3, #8
 8005b02:	d828      	bhi.n	8005b56 <UART_SetConfig+0x44a>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <UART_SetConfig+0x400>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b31 	.word	0x08005b31
 8005b10:	08005b39 	.word	0x08005b39
 8005b14:	08005b41 	.word	0x08005b41
 8005b18:	08005b57 	.word	0x08005b57
 8005b1c:	08005b47 	.word	0x08005b47
 8005b20:	08005b57 	.word	0x08005b57
 8005b24:	08005b57 	.word	0x08005b57
 8005b28:	08005b57 	.word	0x08005b57
 8005b2c:	08005b4f 	.word	0x08005b4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b30:	f7fd fd28 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005b34:	61f8      	str	r0, [r7, #28]
        break;
 8005b36:	e014      	b.n	8005b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b38:	f7fd fd3a 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8005b3c:	61f8      	str	r0, [r7, #28]
        break;
 8005b3e:	e010      	b.n	8005b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b40:	4b4d      	ldr	r3, [pc, #308]	@ (8005c78 <UART_SetConfig+0x56c>)
 8005b42:	61fb      	str	r3, [r7, #28]
        break;
 8005b44:	e00d      	b.n	8005b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b46:	f7fd fc85 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8005b4a:	61f8      	str	r0, [r7, #28]
        break;
 8005b4c:	e009      	b.n	8005b62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b52:	61fb      	str	r3, [r7, #28]
        break;
 8005b54:	e005      	b.n	8005b62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d077      	beq.n	8005c58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	005a      	lsls	r2, r3, #1
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b0f      	cmp	r3, #15
 8005b82:	d916      	bls.n	8005bb2 <UART_SetConfig+0x4a6>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b8a:	d212      	bcs.n	8005bb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f023 030f 	bic.w	r3, r3, #15
 8005b94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	085b      	lsrs	r3, r3, #1
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	8afb      	ldrh	r3, [r7, #22]
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	8afa      	ldrh	r2, [r7, #22]
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e052      	b.n	8005c58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005bb8:	e04e      	b.n	8005c58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005bba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d827      	bhi.n	8005c12 <UART_SetConfig+0x506>
 8005bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <UART_SetConfig+0x4bc>)
 8005bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc8:	08005bed 	.word	0x08005bed
 8005bcc:	08005bf5 	.word	0x08005bf5
 8005bd0:	08005bfd 	.word	0x08005bfd
 8005bd4:	08005c13 	.word	0x08005c13
 8005bd8:	08005c03 	.word	0x08005c03
 8005bdc:	08005c13 	.word	0x08005c13
 8005be0:	08005c13 	.word	0x08005c13
 8005be4:	08005c13 	.word	0x08005c13
 8005be8:	08005c0b 	.word	0x08005c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bec:	f7fd fcca 	bl	8003584 <HAL_RCC_GetPCLK1Freq>
 8005bf0:	61f8      	str	r0, [r7, #28]
        break;
 8005bf2:	e014      	b.n	8005c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf4:	f7fd fcdc 	bl	80035b0 <HAL_RCC_GetPCLK2Freq>
 8005bf8:	61f8      	str	r0, [r7, #28]
        break;
 8005bfa:	e010      	b.n	8005c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c78 <UART_SetConfig+0x56c>)
 8005bfe:	61fb      	str	r3, [r7, #28]
        break;
 8005c00:	e00d      	b.n	8005c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c02:	f7fd fc27 	bl	8003454 <HAL_RCC_GetSysClockFreq>
 8005c06:	61f8      	str	r0, [r7, #28]
        break;
 8005c08:	e009      	b.n	8005c1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c0e:	61fb      	str	r3, [r7, #28]
        break;
 8005c10:	e005      	b.n	8005c1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c1c:	bf00      	nop
    }

    if (pclk != 0U)
 8005c1e:	69fb      	ldr	r3, [r7, #28]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d019      	beq.n	8005c58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	085a      	lsrs	r2, r3, #1
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	441a      	add	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2b0f      	cmp	r3, #15
 8005c3c:	d909      	bls.n	8005c52 <UART_SetConfig+0x546>
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c44:	d205      	bcs.n	8005c52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	60da      	str	r2, [r3, #12]
 8005c50:	e002      	b.n	8005c58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005c64:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3728      	adds	r7, #40	@ 0x28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c72:	bf00      	nop
 8005c74:	40008000 	.word	0x40008000
 8005c78:	00f42400 	.word	0x00f42400

08005c7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0308 	and.w	r3, r3, #8
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00a      	beq.n	8005d0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d10:	f003 0310 	and.w	r3, r3, #16
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01a      	beq.n	8005d92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d7a:	d10a      	bne.n	8005d92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00a      	beq.n	8005db4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	430a      	orrs	r2, r1
 8005db2:	605a      	str	r2, [r3, #4]
  }
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b098      	sub	sp, #96	@ 0x60
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005dd0:	f7fb fb7c 	bl	80014cc <HAL_GetTick>
 8005dd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b08      	cmp	r3, #8
 8005de2:	d12e      	bne.n	8005e42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005de4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dec:	2200      	movs	r2, #0
 8005dee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f88c 	bl	8005f10 <UART_WaitOnFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d021      	beq.n	8005e42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e6      	bne.n	8005dfe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e062      	b.n	8005f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	2b04      	cmp	r3, #4
 8005e4e:	d149      	bne.n	8005ee4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f856 	bl	8005f10 <UART_WaitOnFlagUntilTimeout>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d03c      	beq.n	8005ee4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	623b      	str	r3, [r7, #32]
   return(result);
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e6      	bne.n	8005e6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ebc:	61fa      	str	r2, [r7, #28]
 8005ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	69b9      	ldr	r1, [r7, #24]
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e011      	b.n	8005f08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3758      	adds	r7, #88	@ 0x58
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f20:	e049      	b.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d045      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fb facf 	bl	80014cc <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e048      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d031      	beq.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d110      	bne.n	8005f82 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2208      	movs	r2, #8
 8005f66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 f838 	bl	8005fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2208      	movs	r2, #8
 8005f72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e029      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f90:	d111      	bne.n	8005fb6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f000 f81e 	bl	8005fde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2220      	movs	r2, #32
 8005fa6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e00f      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	69da      	ldr	r2, [r3, #28]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	bf0c      	ite	eq
 8005fc6:	2301      	moveq	r3, #1
 8005fc8:	2300      	movne	r3, #0
 8005fca:	b2db      	uxtb	r3, r3
 8005fcc:	461a      	mov	r2, r3
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d0a6      	beq.n	8005f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b095      	sub	sp, #84	@ 0x54
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006004:	643b      	str	r3, [r7, #64]	@ 0x40
 8006006:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800600a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e6      	bne.n	8005fe6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	61fb      	str	r3, [r7, #28]
   return(result);
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006038:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800603a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800603e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e5      	bne.n	8006018 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006050:	2b01      	cmp	r3, #1
 8006052:	d118      	bne.n	8006086 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	60bb      	str	r3, [r7, #8]
   return(result);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f023 0310 	bic.w	r3, r3, #16
 8006068:	647b      	str	r3, [r7, #68]	@ 0x44
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6979      	ldr	r1, [r7, #20]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	613b      	str	r3, [r7, #16]
   return(result);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800609a:	bf00      	nop
 800609c:	3754      	adds	r7, #84	@ 0x54
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
	...

080060a8 <std>:
 80060a8:	2300      	movs	r3, #0
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	e9c0 3300 	strd	r3, r3, [r0]
 80060b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060b6:	6083      	str	r3, [r0, #8]
 80060b8:	8181      	strh	r1, [r0, #12]
 80060ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80060bc:	81c2      	strh	r2, [r0, #14]
 80060be:	6183      	str	r3, [r0, #24]
 80060c0:	4619      	mov	r1, r3
 80060c2:	2208      	movs	r2, #8
 80060c4:	305c      	adds	r0, #92	@ 0x5c
 80060c6:	f000 f906 	bl	80062d6 <memset>
 80060ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006100 <std+0x58>)
 80060cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80060ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006104 <std+0x5c>)
 80060d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006108 <std+0x60>)
 80060d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060d6:	4b0d      	ldr	r3, [pc, #52]	@ (800610c <std+0x64>)
 80060d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <std+0x68>)
 80060dc:	6224      	str	r4, [r4, #32]
 80060de:	429c      	cmp	r4, r3
 80060e0:	d006      	beq.n	80060f0 <std+0x48>
 80060e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060e6:	4294      	cmp	r4, r2
 80060e8:	d002      	beq.n	80060f0 <std+0x48>
 80060ea:	33d0      	adds	r3, #208	@ 0xd0
 80060ec:	429c      	cmp	r4, r3
 80060ee:	d105      	bne.n	80060fc <std+0x54>
 80060f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f8:	f000 b966 	b.w	80063c8 <__retarget_lock_init_recursive>
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	bf00      	nop
 8006100:	08006251 	.word	0x08006251
 8006104:	08006273 	.word	0x08006273
 8006108:	080062ab 	.word	0x080062ab
 800610c:	080062cf 	.word	0x080062cf
 8006110:	200002f0 	.word	0x200002f0

08006114 <stdio_exit_handler>:
 8006114:	4a02      	ldr	r2, [pc, #8]	@ (8006120 <stdio_exit_handler+0xc>)
 8006116:	4903      	ldr	r1, [pc, #12]	@ (8006124 <stdio_exit_handler+0x10>)
 8006118:	4803      	ldr	r0, [pc, #12]	@ (8006128 <stdio_exit_handler+0x14>)
 800611a:	f000 b869 	b.w	80061f0 <_fwalk_sglue>
 800611e:	bf00      	nop
 8006120:	20000054 	.word	0x20000054
 8006124:	08006c69 	.word	0x08006c69
 8006128:	20000064 	.word	0x20000064

0800612c <cleanup_stdio>:
 800612c:	6841      	ldr	r1, [r0, #4]
 800612e:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <cleanup_stdio+0x34>)
 8006130:	4299      	cmp	r1, r3
 8006132:	b510      	push	{r4, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	d001      	beq.n	800613c <cleanup_stdio+0x10>
 8006138:	f000 fd96 	bl	8006c68 <_fflush_r>
 800613c:	68a1      	ldr	r1, [r4, #8]
 800613e:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <cleanup_stdio+0x38>)
 8006140:	4299      	cmp	r1, r3
 8006142:	d002      	beq.n	800614a <cleanup_stdio+0x1e>
 8006144:	4620      	mov	r0, r4
 8006146:	f000 fd8f 	bl	8006c68 <_fflush_r>
 800614a:	68e1      	ldr	r1, [r4, #12]
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <cleanup_stdio+0x3c>)
 800614e:	4299      	cmp	r1, r3
 8006150:	d004      	beq.n	800615c <cleanup_stdio+0x30>
 8006152:	4620      	mov	r0, r4
 8006154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006158:	f000 bd86 	b.w	8006c68 <_fflush_r>
 800615c:	bd10      	pop	{r4, pc}
 800615e:	bf00      	nop
 8006160:	200002f0 	.word	0x200002f0
 8006164:	20000358 	.word	0x20000358
 8006168:	200003c0 	.word	0x200003c0

0800616c <global_stdio_init.part.0>:
 800616c:	b510      	push	{r4, lr}
 800616e:	4b0b      	ldr	r3, [pc, #44]	@ (800619c <global_stdio_init.part.0+0x30>)
 8006170:	4c0b      	ldr	r4, [pc, #44]	@ (80061a0 <global_stdio_init.part.0+0x34>)
 8006172:	4a0c      	ldr	r2, [pc, #48]	@ (80061a4 <global_stdio_init.part.0+0x38>)
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	4620      	mov	r0, r4
 8006178:	2200      	movs	r2, #0
 800617a:	2104      	movs	r1, #4
 800617c:	f7ff ff94 	bl	80060a8 <std>
 8006180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006184:	2201      	movs	r2, #1
 8006186:	2109      	movs	r1, #9
 8006188:	f7ff ff8e 	bl	80060a8 <std>
 800618c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006190:	2202      	movs	r2, #2
 8006192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006196:	2112      	movs	r1, #18
 8006198:	f7ff bf86 	b.w	80060a8 <std>
 800619c:	20000428 	.word	0x20000428
 80061a0:	200002f0 	.word	0x200002f0
 80061a4:	08006115 	.word	0x08006115

080061a8 <__sfp_lock_acquire>:
 80061a8:	4801      	ldr	r0, [pc, #4]	@ (80061b0 <__sfp_lock_acquire+0x8>)
 80061aa:	f000 b90e 	b.w	80063ca <__retarget_lock_acquire_recursive>
 80061ae:	bf00      	nop
 80061b0:	20000431 	.word	0x20000431

080061b4 <__sfp_lock_release>:
 80061b4:	4801      	ldr	r0, [pc, #4]	@ (80061bc <__sfp_lock_release+0x8>)
 80061b6:	f000 b909 	b.w	80063cc <__retarget_lock_release_recursive>
 80061ba:	bf00      	nop
 80061bc:	20000431 	.word	0x20000431

080061c0 <__sinit>:
 80061c0:	b510      	push	{r4, lr}
 80061c2:	4604      	mov	r4, r0
 80061c4:	f7ff fff0 	bl	80061a8 <__sfp_lock_acquire>
 80061c8:	6a23      	ldr	r3, [r4, #32]
 80061ca:	b11b      	cbz	r3, 80061d4 <__sinit+0x14>
 80061cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d0:	f7ff bff0 	b.w	80061b4 <__sfp_lock_release>
 80061d4:	4b04      	ldr	r3, [pc, #16]	@ (80061e8 <__sinit+0x28>)
 80061d6:	6223      	str	r3, [r4, #32]
 80061d8:	4b04      	ldr	r3, [pc, #16]	@ (80061ec <__sinit+0x2c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1f5      	bne.n	80061cc <__sinit+0xc>
 80061e0:	f7ff ffc4 	bl	800616c <global_stdio_init.part.0>
 80061e4:	e7f2      	b.n	80061cc <__sinit+0xc>
 80061e6:	bf00      	nop
 80061e8:	0800612d 	.word	0x0800612d
 80061ec:	20000428 	.word	0x20000428

080061f0 <_fwalk_sglue>:
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	4607      	mov	r7, r0
 80061f6:	4688      	mov	r8, r1
 80061f8:	4614      	mov	r4, r2
 80061fa:	2600      	movs	r6, #0
 80061fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006200:	f1b9 0901 	subs.w	r9, r9, #1
 8006204:	d505      	bpl.n	8006212 <_fwalk_sglue+0x22>
 8006206:	6824      	ldr	r4, [r4, #0]
 8006208:	2c00      	cmp	r4, #0
 800620a:	d1f7      	bne.n	80061fc <_fwalk_sglue+0xc>
 800620c:	4630      	mov	r0, r6
 800620e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006212:	89ab      	ldrh	r3, [r5, #12]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d907      	bls.n	8006228 <_fwalk_sglue+0x38>
 8006218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800621c:	3301      	adds	r3, #1
 800621e:	d003      	beq.n	8006228 <_fwalk_sglue+0x38>
 8006220:	4629      	mov	r1, r5
 8006222:	4638      	mov	r0, r7
 8006224:	47c0      	blx	r8
 8006226:	4306      	orrs	r6, r0
 8006228:	3568      	adds	r5, #104	@ 0x68
 800622a:	e7e9      	b.n	8006200 <_fwalk_sglue+0x10>

0800622c <iprintf>:
 800622c:	b40f      	push	{r0, r1, r2, r3}
 800622e:	b507      	push	{r0, r1, r2, lr}
 8006230:	4906      	ldr	r1, [pc, #24]	@ (800624c <iprintf+0x20>)
 8006232:	ab04      	add	r3, sp, #16
 8006234:	6808      	ldr	r0, [r1, #0]
 8006236:	f853 2b04 	ldr.w	r2, [r3], #4
 800623a:	6881      	ldr	r1, [r0, #8]
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	f000 f9e9 	bl	8006614 <_vfiprintf_r>
 8006242:	b003      	add	sp, #12
 8006244:	f85d eb04 	ldr.w	lr, [sp], #4
 8006248:	b004      	add	sp, #16
 800624a:	4770      	bx	lr
 800624c:	20000060 	.word	0x20000060

08006250 <__sread>:
 8006250:	b510      	push	{r4, lr}
 8006252:	460c      	mov	r4, r1
 8006254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006258:	f000 f868 	bl	800632c <_read_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	bfab      	itete	ge
 8006260:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006262:	89a3      	ldrhlt	r3, [r4, #12]
 8006264:	181b      	addge	r3, r3, r0
 8006266:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800626a:	bfac      	ite	ge
 800626c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800626e:	81a3      	strhlt	r3, [r4, #12]
 8006270:	bd10      	pop	{r4, pc}

08006272 <__swrite>:
 8006272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	461f      	mov	r7, r3
 8006278:	898b      	ldrh	r3, [r1, #12]
 800627a:	05db      	lsls	r3, r3, #23
 800627c:	4605      	mov	r5, r0
 800627e:	460c      	mov	r4, r1
 8006280:	4616      	mov	r6, r2
 8006282:	d505      	bpl.n	8006290 <__swrite+0x1e>
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	2302      	movs	r3, #2
 800628a:	2200      	movs	r2, #0
 800628c:	f000 f83c 	bl	8006308 <_lseek_r>
 8006290:	89a3      	ldrh	r3, [r4, #12]
 8006292:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006296:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	4632      	mov	r2, r6
 800629e:	463b      	mov	r3, r7
 80062a0:	4628      	mov	r0, r5
 80062a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	f000 b853 	b.w	8006350 <_write_r>

080062aa <__sseek>:
 80062aa:	b510      	push	{r4, lr}
 80062ac:	460c      	mov	r4, r1
 80062ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b2:	f000 f829 	bl	8006308 <_lseek_r>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	89a3      	ldrh	r3, [r4, #12]
 80062ba:	bf15      	itete	ne
 80062bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062c6:	81a3      	strheq	r3, [r4, #12]
 80062c8:	bf18      	it	ne
 80062ca:	81a3      	strhne	r3, [r4, #12]
 80062cc:	bd10      	pop	{r4, pc}

080062ce <__sclose>:
 80062ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062d2:	f000 b809 	b.w	80062e8 <_close_r>

080062d6 <memset>:
 80062d6:	4402      	add	r2, r0
 80062d8:	4603      	mov	r3, r0
 80062da:	4293      	cmp	r3, r2
 80062dc:	d100      	bne.n	80062e0 <memset+0xa>
 80062de:	4770      	bx	lr
 80062e0:	f803 1b01 	strb.w	r1, [r3], #1
 80062e4:	e7f9      	b.n	80062da <memset+0x4>
	...

080062e8 <_close_r>:
 80062e8:	b538      	push	{r3, r4, r5, lr}
 80062ea:	4d06      	ldr	r5, [pc, #24]	@ (8006304 <_close_r+0x1c>)
 80062ec:	2300      	movs	r3, #0
 80062ee:	4604      	mov	r4, r0
 80062f0:	4608      	mov	r0, r1
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	f7fa ffdb 	bl	80012ae <_close>
 80062f8:	1c43      	adds	r3, r0, #1
 80062fa:	d102      	bne.n	8006302 <_close_r+0x1a>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	b103      	cbz	r3, 8006302 <_close_r+0x1a>
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	bd38      	pop	{r3, r4, r5, pc}
 8006304:	2000042c 	.word	0x2000042c

08006308 <_lseek_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4d07      	ldr	r5, [pc, #28]	@ (8006328 <_lseek_r+0x20>)
 800630c:	4604      	mov	r4, r0
 800630e:	4608      	mov	r0, r1
 8006310:	4611      	mov	r1, r2
 8006312:	2200      	movs	r2, #0
 8006314:	602a      	str	r2, [r5, #0]
 8006316:	461a      	mov	r2, r3
 8006318:	f7fa fff0 	bl	80012fc <_lseek>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d102      	bne.n	8006326 <_lseek_r+0x1e>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	b103      	cbz	r3, 8006326 <_lseek_r+0x1e>
 8006324:	6023      	str	r3, [r4, #0]
 8006326:	bd38      	pop	{r3, r4, r5, pc}
 8006328:	2000042c 	.word	0x2000042c

0800632c <_read_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d07      	ldr	r5, [pc, #28]	@ (800634c <_read_r+0x20>)
 8006330:	4604      	mov	r4, r0
 8006332:	4608      	mov	r0, r1
 8006334:	4611      	mov	r1, r2
 8006336:	2200      	movs	r2, #0
 8006338:	602a      	str	r2, [r5, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	f7fa ff7e 	bl	800123c <_read>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_read_r+0x1e>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_read_r+0x1e>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	2000042c 	.word	0x2000042c

08006350 <_write_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d07      	ldr	r5, [pc, #28]	@ (8006370 <_write_r+0x20>)
 8006354:	4604      	mov	r4, r0
 8006356:	4608      	mov	r0, r1
 8006358:	4611      	mov	r1, r2
 800635a:	2200      	movs	r2, #0
 800635c:	602a      	str	r2, [r5, #0]
 800635e:	461a      	mov	r2, r3
 8006360:	f7fa ff89 	bl	8001276 <_write>
 8006364:	1c43      	adds	r3, r0, #1
 8006366:	d102      	bne.n	800636e <_write_r+0x1e>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	b103      	cbz	r3, 800636e <_write_r+0x1e>
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	2000042c 	.word	0x2000042c

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	@ (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000060 	.word	0x20000060

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4d0d      	ldr	r5, [pc, #52]	@ (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	@ (80063bc <__libc_init_array+0x3c>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2600      	movs	r6, #0
 800638c:	42a6      	cmp	r6, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4d0b      	ldr	r5, [pc, #44]	@ (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	@ (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 fdb8 	bl	8006f08 <_init>
 8006398:	1b64      	subs	r4, r4, r5
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2600      	movs	r6, #0
 800639e:	42a6      	cmp	r6, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a8:	4798      	blx	r3
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80063b2:	4798      	blx	r3
 80063b4:	3601      	adds	r6, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006fc4 	.word	0x08006fc4
 80063bc:	08006fc4 	.word	0x08006fc4
 80063c0:	08006fc4 	.word	0x08006fc4
 80063c4:	08006fc8 	.word	0x08006fc8

080063c8 <__retarget_lock_init_recursive>:
 80063c8:	4770      	bx	lr

080063ca <__retarget_lock_acquire_recursive>:
 80063ca:	4770      	bx	lr

080063cc <__retarget_lock_release_recursive>:
 80063cc:	4770      	bx	lr
	...

080063d0 <_free_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	4605      	mov	r5, r0
 80063d4:	2900      	cmp	r1, #0
 80063d6:	d041      	beq.n	800645c <_free_r+0x8c>
 80063d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063dc:	1f0c      	subs	r4, r1, #4
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfb8      	it	lt
 80063e2:	18e4      	addlt	r4, r4, r3
 80063e4:	f000 f8e0 	bl	80065a8 <__malloc_lock>
 80063e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006460 <_free_r+0x90>)
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	b933      	cbnz	r3, 80063fc <_free_r+0x2c>
 80063ee:	6063      	str	r3, [r4, #4]
 80063f0:	6014      	str	r4, [r2, #0]
 80063f2:	4628      	mov	r0, r5
 80063f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063f8:	f000 b8dc 	b.w	80065b4 <__malloc_unlock>
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	d908      	bls.n	8006412 <_free_r+0x42>
 8006400:	6820      	ldr	r0, [r4, #0]
 8006402:	1821      	adds	r1, r4, r0
 8006404:	428b      	cmp	r3, r1
 8006406:	bf01      	itttt	eq
 8006408:	6819      	ldreq	r1, [r3, #0]
 800640a:	685b      	ldreq	r3, [r3, #4]
 800640c:	1809      	addeq	r1, r1, r0
 800640e:	6021      	streq	r1, [r4, #0]
 8006410:	e7ed      	b.n	80063ee <_free_r+0x1e>
 8006412:	461a      	mov	r2, r3
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	b10b      	cbz	r3, 800641c <_free_r+0x4c>
 8006418:	42a3      	cmp	r3, r4
 800641a:	d9fa      	bls.n	8006412 <_free_r+0x42>
 800641c:	6811      	ldr	r1, [r2, #0]
 800641e:	1850      	adds	r0, r2, r1
 8006420:	42a0      	cmp	r0, r4
 8006422:	d10b      	bne.n	800643c <_free_r+0x6c>
 8006424:	6820      	ldr	r0, [r4, #0]
 8006426:	4401      	add	r1, r0
 8006428:	1850      	adds	r0, r2, r1
 800642a:	4283      	cmp	r3, r0
 800642c:	6011      	str	r1, [r2, #0]
 800642e:	d1e0      	bne.n	80063f2 <_free_r+0x22>
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	6053      	str	r3, [r2, #4]
 8006436:	4408      	add	r0, r1
 8006438:	6010      	str	r0, [r2, #0]
 800643a:	e7da      	b.n	80063f2 <_free_r+0x22>
 800643c:	d902      	bls.n	8006444 <_free_r+0x74>
 800643e:	230c      	movs	r3, #12
 8006440:	602b      	str	r3, [r5, #0]
 8006442:	e7d6      	b.n	80063f2 <_free_r+0x22>
 8006444:	6820      	ldr	r0, [r4, #0]
 8006446:	1821      	adds	r1, r4, r0
 8006448:	428b      	cmp	r3, r1
 800644a:	bf04      	itt	eq
 800644c:	6819      	ldreq	r1, [r3, #0]
 800644e:	685b      	ldreq	r3, [r3, #4]
 8006450:	6063      	str	r3, [r4, #4]
 8006452:	bf04      	itt	eq
 8006454:	1809      	addeq	r1, r1, r0
 8006456:	6021      	streq	r1, [r4, #0]
 8006458:	6054      	str	r4, [r2, #4]
 800645a:	e7ca      	b.n	80063f2 <_free_r+0x22>
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	20000438 	.word	0x20000438

08006464 <sbrk_aligned>:
 8006464:	b570      	push	{r4, r5, r6, lr}
 8006466:	4e0f      	ldr	r6, [pc, #60]	@ (80064a4 <sbrk_aligned+0x40>)
 8006468:	460c      	mov	r4, r1
 800646a:	6831      	ldr	r1, [r6, #0]
 800646c:	4605      	mov	r5, r0
 800646e:	b911      	cbnz	r1, 8006476 <sbrk_aligned+0x12>
 8006470:	f000 fcb6 	bl	8006de0 <_sbrk_r>
 8006474:	6030      	str	r0, [r6, #0]
 8006476:	4621      	mov	r1, r4
 8006478:	4628      	mov	r0, r5
 800647a:	f000 fcb1 	bl	8006de0 <_sbrk_r>
 800647e:	1c43      	adds	r3, r0, #1
 8006480:	d103      	bne.n	800648a <sbrk_aligned+0x26>
 8006482:	f04f 34ff 	mov.w	r4, #4294967295
 8006486:	4620      	mov	r0, r4
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	1cc4      	adds	r4, r0, #3
 800648c:	f024 0403 	bic.w	r4, r4, #3
 8006490:	42a0      	cmp	r0, r4
 8006492:	d0f8      	beq.n	8006486 <sbrk_aligned+0x22>
 8006494:	1a21      	subs	r1, r4, r0
 8006496:	4628      	mov	r0, r5
 8006498:	f000 fca2 	bl	8006de0 <_sbrk_r>
 800649c:	3001      	adds	r0, #1
 800649e:	d1f2      	bne.n	8006486 <sbrk_aligned+0x22>
 80064a0:	e7ef      	b.n	8006482 <sbrk_aligned+0x1e>
 80064a2:	bf00      	nop
 80064a4:	20000434 	.word	0x20000434

080064a8 <_malloc_r>:
 80064a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	1ccd      	adds	r5, r1, #3
 80064ae:	f025 0503 	bic.w	r5, r5, #3
 80064b2:	3508      	adds	r5, #8
 80064b4:	2d0c      	cmp	r5, #12
 80064b6:	bf38      	it	cc
 80064b8:	250c      	movcc	r5, #12
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	4606      	mov	r6, r0
 80064be:	db01      	blt.n	80064c4 <_malloc_r+0x1c>
 80064c0:	42a9      	cmp	r1, r5
 80064c2:	d904      	bls.n	80064ce <_malloc_r+0x26>
 80064c4:	230c      	movs	r3, #12
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	2000      	movs	r0, #0
 80064ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065a4 <_malloc_r+0xfc>
 80064d2:	f000 f869 	bl	80065a8 <__malloc_lock>
 80064d6:	f8d8 3000 	ldr.w	r3, [r8]
 80064da:	461c      	mov	r4, r3
 80064dc:	bb44      	cbnz	r4, 8006530 <_malloc_r+0x88>
 80064de:	4629      	mov	r1, r5
 80064e0:	4630      	mov	r0, r6
 80064e2:	f7ff ffbf 	bl	8006464 <sbrk_aligned>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	4604      	mov	r4, r0
 80064ea:	d158      	bne.n	800659e <_malloc_r+0xf6>
 80064ec:	f8d8 4000 	ldr.w	r4, [r8]
 80064f0:	4627      	mov	r7, r4
 80064f2:	2f00      	cmp	r7, #0
 80064f4:	d143      	bne.n	800657e <_malloc_r+0xd6>
 80064f6:	2c00      	cmp	r4, #0
 80064f8:	d04b      	beq.n	8006592 <_malloc_r+0xea>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	4639      	mov	r1, r7
 80064fe:	4630      	mov	r0, r6
 8006500:	eb04 0903 	add.w	r9, r4, r3
 8006504:	f000 fc6c 	bl	8006de0 <_sbrk_r>
 8006508:	4581      	cmp	r9, r0
 800650a:	d142      	bne.n	8006592 <_malloc_r+0xea>
 800650c:	6821      	ldr	r1, [r4, #0]
 800650e:	1a6d      	subs	r5, r5, r1
 8006510:	4629      	mov	r1, r5
 8006512:	4630      	mov	r0, r6
 8006514:	f7ff ffa6 	bl	8006464 <sbrk_aligned>
 8006518:	3001      	adds	r0, #1
 800651a:	d03a      	beq.n	8006592 <_malloc_r+0xea>
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	442b      	add	r3, r5
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	f8d8 3000 	ldr.w	r3, [r8]
 8006526:	685a      	ldr	r2, [r3, #4]
 8006528:	bb62      	cbnz	r2, 8006584 <_malloc_r+0xdc>
 800652a:	f8c8 7000 	str.w	r7, [r8]
 800652e:	e00f      	b.n	8006550 <_malloc_r+0xa8>
 8006530:	6822      	ldr	r2, [r4, #0]
 8006532:	1b52      	subs	r2, r2, r5
 8006534:	d420      	bmi.n	8006578 <_malloc_r+0xd0>
 8006536:	2a0b      	cmp	r2, #11
 8006538:	d917      	bls.n	800656a <_malloc_r+0xc2>
 800653a:	1961      	adds	r1, r4, r5
 800653c:	42a3      	cmp	r3, r4
 800653e:	6025      	str	r5, [r4, #0]
 8006540:	bf18      	it	ne
 8006542:	6059      	strne	r1, [r3, #4]
 8006544:	6863      	ldr	r3, [r4, #4]
 8006546:	bf08      	it	eq
 8006548:	f8c8 1000 	streq.w	r1, [r8]
 800654c:	5162      	str	r2, [r4, r5]
 800654e:	604b      	str	r3, [r1, #4]
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f82f 	bl	80065b4 <__malloc_unlock>
 8006556:	f104 000b 	add.w	r0, r4, #11
 800655a:	1d23      	adds	r3, r4, #4
 800655c:	f020 0007 	bic.w	r0, r0, #7
 8006560:	1ac2      	subs	r2, r0, r3
 8006562:	bf1c      	itt	ne
 8006564:	1a1b      	subne	r3, r3, r0
 8006566:	50a3      	strne	r3, [r4, r2]
 8006568:	e7af      	b.n	80064ca <_malloc_r+0x22>
 800656a:	6862      	ldr	r2, [r4, #4]
 800656c:	42a3      	cmp	r3, r4
 800656e:	bf0c      	ite	eq
 8006570:	f8c8 2000 	streq.w	r2, [r8]
 8006574:	605a      	strne	r2, [r3, #4]
 8006576:	e7eb      	b.n	8006550 <_malloc_r+0xa8>
 8006578:	4623      	mov	r3, r4
 800657a:	6864      	ldr	r4, [r4, #4]
 800657c:	e7ae      	b.n	80064dc <_malloc_r+0x34>
 800657e:	463c      	mov	r4, r7
 8006580:	687f      	ldr	r7, [r7, #4]
 8006582:	e7b6      	b.n	80064f2 <_malloc_r+0x4a>
 8006584:	461a      	mov	r2, r3
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	42a3      	cmp	r3, r4
 800658a:	d1fb      	bne.n	8006584 <_malloc_r+0xdc>
 800658c:	2300      	movs	r3, #0
 800658e:	6053      	str	r3, [r2, #4]
 8006590:	e7de      	b.n	8006550 <_malloc_r+0xa8>
 8006592:	230c      	movs	r3, #12
 8006594:	6033      	str	r3, [r6, #0]
 8006596:	4630      	mov	r0, r6
 8006598:	f000 f80c 	bl	80065b4 <__malloc_unlock>
 800659c:	e794      	b.n	80064c8 <_malloc_r+0x20>
 800659e:	6005      	str	r5, [r0, #0]
 80065a0:	e7d6      	b.n	8006550 <_malloc_r+0xa8>
 80065a2:	bf00      	nop
 80065a4:	20000438 	.word	0x20000438

080065a8 <__malloc_lock>:
 80065a8:	4801      	ldr	r0, [pc, #4]	@ (80065b0 <__malloc_lock+0x8>)
 80065aa:	f7ff bf0e 	b.w	80063ca <__retarget_lock_acquire_recursive>
 80065ae:	bf00      	nop
 80065b0:	20000430 	.word	0x20000430

080065b4 <__malloc_unlock>:
 80065b4:	4801      	ldr	r0, [pc, #4]	@ (80065bc <__malloc_unlock+0x8>)
 80065b6:	f7ff bf09 	b.w	80063cc <__retarget_lock_release_recursive>
 80065ba:	bf00      	nop
 80065bc:	20000430 	.word	0x20000430

080065c0 <__sfputc_r>:
 80065c0:	6893      	ldr	r3, [r2, #8]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	b410      	push	{r4}
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	da08      	bge.n	80065de <__sfputc_r+0x1e>
 80065cc:	6994      	ldr	r4, [r2, #24]
 80065ce:	42a3      	cmp	r3, r4
 80065d0:	db01      	blt.n	80065d6 <__sfputc_r+0x16>
 80065d2:	290a      	cmp	r1, #10
 80065d4:	d103      	bne.n	80065de <__sfputc_r+0x1e>
 80065d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065da:	f000 bb6d 	b.w	8006cb8 <__swbuf_r>
 80065de:	6813      	ldr	r3, [r2, #0]
 80065e0:	1c58      	adds	r0, r3, #1
 80065e2:	6010      	str	r0, [r2, #0]
 80065e4:	7019      	strb	r1, [r3, #0]
 80065e6:	4608      	mov	r0, r1
 80065e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <__sfputs_r>:
 80065ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f0:	4606      	mov	r6, r0
 80065f2:	460f      	mov	r7, r1
 80065f4:	4614      	mov	r4, r2
 80065f6:	18d5      	adds	r5, r2, r3
 80065f8:	42ac      	cmp	r4, r5
 80065fa:	d101      	bne.n	8006600 <__sfputs_r+0x12>
 80065fc:	2000      	movs	r0, #0
 80065fe:	e007      	b.n	8006610 <__sfputs_r+0x22>
 8006600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006604:	463a      	mov	r2, r7
 8006606:	4630      	mov	r0, r6
 8006608:	f7ff ffda 	bl	80065c0 <__sfputc_r>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d1f3      	bne.n	80065f8 <__sfputs_r+0xa>
 8006610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006614 <_vfiprintf_r>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	460d      	mov	r5, r1
 800661a:	b09d      	sub	sp, #116	@ 0x74
 800661c:	4614      	mov	r4, r2
 800661e:	4698      	mov	r8, r3
 8006620:	4606      	mov	r6, r0
 8006622:	b118      	cbz	r0, 800662c <_vfiprintf_r+0x18>
 8006624:	6a03      	ldr	r3, [r0, #32]
 8006626:	b90b      	cbnz	r3, 800662c <_vfiprintf_r+0x18>
 8006628:	f7ff fdca 	bl	80061c0 <__sinit>
 800662c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	d405      	bmi.n	800663e <_vfiprintf_r+0x2a>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	059a      	lsls	r2, r3, #22
 8006636:	d402      	bmi.n	800663e <_vfiprintf_r+0x2a>
 8006638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800663a:	f7ff fec6 	bl	80063ca <__retarget_lock_acquire_recursive>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	071b      	lsls	r3, r3, #28
 8006642:	d501      	bpl.n	8006648 <_vfiprintf_r+0x34>
 8006644:	692b      	ldr	r3, [r5, #16]
 8006646:	b99b      	cbnz	r3, 8006670 <_vfiprintf_r+0x5c>
 8006648:	4629      	mov	r1, r5
 800664a:	4630      	mov	r0, r6
 800664c:	f000 fb72 	bl	8006d34 <__swsetup_r>
 8006650:	b170      	cbz	r0, 8006670 <_vfiprintf_r+0x5c>
 8006652:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006654:	07dc      	lsls	r4, r3, #31
 8006656:	d504      	bpl.n	8006662 <_vfiprintf_r+0x4e>
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	b01d      	add	sp, #116	@ 0x74
 800665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	0598      	lsls	r0, r3, #22
 8006666:	d4f7      	bmi.n	8006658 <_vfiprintf_r+0x44>
 8006668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800666a:	f7ff feaf 	bl	80063cc <__retarget_lock_release_recursive>
 800666e:	e7f3      	b.n	8006658 <_vfiprintf_r+0x44>
 8006670:	2300      	movs	r3, #0
 8006672:	9309      	str	r3, [sp, #36]	@ 0x24
 8006674:	2320      	movs	r3, #32
 8006676:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800667a:	f8cd 800c 	str.w	r8, [sp, #12]
 800667e:	2330      	movs	r3, #48	@ 0x30
 8006680:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006830 <_vfiprintf_r+0x21c>
 8006684:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006688:	f04f 0901 	mov.w	r9, #1
 800668c:	4623      	mov	r3, r4
 800668e:	469a      	mov	sl, r3
 8006690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006694:	b10a      	cbz	r2, 800669a <_vfiprintf_r+0x86>
 8006696:	2a25      	cmp	r2, #37	@ 0x25
 8006698:	d1f9      	bne.n	800668e <_vfiprintf_r+0x7a>
 800669a:	ebba 0b04 	subs.w	fp, sl, r4
 800669e:	d00b      	beq.n	80066b8 <_vfiprintf_r+0xa4>
 80066a0:	465b      	mov	r3, fp
 80066a2:	4622      	mov	r2, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	4630      	mov	r0, r6
 80066a8:	f7ff ffa1 	bl	80065ee <__sfputs_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	f000 80a7 	beq.w	8006800 <_vfiprintf_r+0x1ec>
 80066b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066b4:	445a      	add	r2, fp
 80066b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066b8:	f89a 3000 	ldrb.w	r3, [sl]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 809f 	beq.w	8006800 <_vfiprintf_r+0x1ec>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f04f 32ff 	mov.w	r2, #4294967295
 80066c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066cc:	f10a 0a01 	add.w	sl, sl, #1
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80066da:	4654      	mov	r4, sl
 80066dc:	2205      	movs	r2, #5
 80066de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e2:	4853      	ldr	r0, [pc, #332]	@ (8006830 <_vfiprintf_r+0x21c>)
 80066e4:	f7f9 fd74 	bl	80001d0 <memchr>
 80066e8:	9a04      	ldr	r2, [sp, #16]
 80066ea:	b9d8      	cbnz	r0, 8006724 <_vfiprintf_r+0x110>
 80066ec:	06d1      	lsls	r1, r2, #27
 80066ee:	bf44      	itt	mi
 80066f0:	2320      	movmi	r3, #32
 80066f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066f6:	0713      	lsls	r3, r2, #28
 80066f8:	bf44      	itt	mi
 80066fa:	232b      	movmi	r3, #43	@ 0x2b
 80066fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006700:	f89a 3000 	ldrb.w	r3, [sl]
 8006704:	2b2a      	cmp	r3, #42	@ 0x2a
 8006706:	d015      	beq.n	8006734 <_vfiprintf_r+0x120>
 8006708:	9a07      	ldr	r2, [sp, #28]
 800670a:	4654      	mov	r4, sl
 800670c:	2000      	movs	r0, #0
 800670e:	f04f 0c0a 	mov.w	ip, #10
 8006712:	4621      	mov	r1, r4
 8006714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006718:	3b30      	subs	r3, #48	@ 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d94b      	bls.n	80067b6 <_vfiprintf_r+0x1a2>
 800671e:	b1b0      	cbz	r0, 800674e <_vfiprintf_r+0x13a>
 8006720:	9207      	str	r2, [sp, #28]
 8006722:	e014      	b.n	800674e <_vfiprintf_r+0x13a>
 8006724:	eba0 0308 	sub.w	r3, r0, r8
 8006728:	fa09 f303 	lsl.w	r3, r9, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	46a2      	mov	sl, r4
 8006732:	e7d2      	b.n	80066da <_vfiprintf_r+0xc6>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	1d19      	adds	r1, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	9103      	str	r1, [sp, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfbb      	ittet	lt
 8006740:	425b      	neglt	r3, r3
 8006742:	f042 0202 	orrlt.w	r2, r2, #2
 8006746:	9307      	strge	r3, [sp, #28]
 8006748:	9307      	strlt	r3, [sp, #28]
 800674a:	bfb8      	it	lt
 800674c:	9204      	strlt	r2, [sp, #16]
 800674e:	7823      	ldrb	r3, [r4, #0]
 8006750:	2b2e      	cmp	r3, #46	@ 0x2e
 8006752:	d10a      	bne.n	800676a <_vfiprintf_r+0x156>
 8006754:	7863      	ldrb	r3, [r4, #1]
 8006756:	2b2a      	cmp	r3, #42	@ 0x2a
 8006758:	d132      	bne.n	80067c0 <_vfiprintf_r+0x1ac>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	1d1a      	adds	r2, r3, #4
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	9203      	str	r2, [sp, #12]
 8006762:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006766:	3402      	adds	r4, #2
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006840 <_vfiprintf_r+0x22c>
 800676e:	7821      	ldrb	r1, [r4, #0]
 8006770:	2203      	movs	r2, #3
 8006772:	4650      	mov	r0, sl
 8006774:	f7f9 fd2c 	bl	80001d0 <memchr>
 8006778:	b138      	cbz	r0, 800678a <_vfiprintf_r+0x176>
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	eba0 000a 	sub.w	r0, r0, sl
 8006780:	2240      	movs	r2, #64	@ 0x40
 8006782:	4082      	lsls	r2, r0
 8006784:	4313      	orrs	r3, r2
 8006786:	3401      	adds	r4, #1
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800678e:	4829      	ldr	r0, [pc, #164]	@ (8006834 <_vfiprintf_r+0x220>)
 8006790:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006794:	2206      	movs	r2, #6
 8006796:	f7f9 fd1b 	bl	80001d0 <memchr>
 800679a:	2800      	cmp	r0, #0
 800679c:	d03f      	beq.n	800681e <_vfiprintf_r+0x20a>
 800679e:	4b26      	ldr	r3, [pc, #152]	@ (8006838 <_vfiprintf_r+0x224>)
 80067a0:	bb1b      	cbnz	r3, 80067ea <_vfiprintf_r+0x1d6>
 80067a2:	9b03      	ldr	r3, [sp, #12]
 80067a4:	3307      	adds	r3, #7
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	3308      	adds	r3, #8
 80067ac:	9303      	str	r3, [sp, #12]
 80067ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b0:	443b      	add	r3, r7
 80067b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b4:	e76a      	b.n	800668c <_vfiprintf_r+0x78>
 80067b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067ba:	460c      	mov	r4, r1
 80067bc:	2001      	movs	r0, #1
 80067be:	e7a8      	b.n	8006712 <_vfiprintf_r+0xfe>
 80067c0:	2300      	movs	r3, #0
 80067c2:	3401      	adds	r4, #1
 80067c4:	9305      	str	r3, [sp, #20]
 80067c6:	4619      	mov	r1, r3
 80067c8:	f04f 0c0a 	mov.w	ip, #10
 80067cc:	4620      	mov	r0, r4
 80067ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d2:	3a30      	subs	r2, #48	@ 0x30
 80067d4:	2a09      	cmp	r2, #9
 80067d6:	d903      	bls.n	80067e0 <_vfiprintf_r+0x1cc>
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d0c6      	beq.n	800676a <_vfiprintf_r+0x156>
 80067dc:	9105      	str	r1, [sp, #20]
 80067de:	e7c4      	b.n	800676a <_vfiprintf_r+0x156>
 80067e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e4:	4604      	mov	r4, r0
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7f0      	b.n	80067cc <_vfiprintf_r+0x1b8>
 80067ea:	ab03      	add	r3, sp, #12
 80067ec:	9300      	str	r3, [sp, #0]
 80067ee:	462a      	mov	r2, r5
 80067f0:	4b12      	ldr	r3, [pc, #72]	@ (800683c <_vfiprintf_r+0x228>)
 80067f2:	a904      	add	r1, sp, #16
 80067f4:	4630      	mov	r0, r6
 80067f6:	f3af 8000 	nop.w
 80067fa:	4607      	mov	r7, r0
 80067fc:	1c78      	adds	r0, r7, #1
 80067fe:	d1d6      	bne.n	80067ae <_vfiprintf_r+0x19a>
 8006800:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006802:	07d9      	lsls	r1, r3, #31
 8006804:	d405      	bmi.n	8006812 <_vfiprintf_r+0x1fe>
 8006806:	89ab      	ldrh	r3, [r5, #12]
 8006808:	059a      	lsls	r2, r3, #22
 800680a:	d402      	bmi.n	8006812 <_vfiprintf_r+0x1fe>
 800680c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800680e:	f7ff fddd 	bl	80063cc <__retarget_lock_release_recursive>
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	065b      	lsls	r3, r3, #25
 8006816:	f53f af1f 	bmi.w	8006658 <_vfiprintf_r+0x44>
 800681a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800681c:	e71e      	b.n	800665c <_vfiprintf_r+0x48>
 800681e:	ab03      	add	r3, sp, #12
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	462a      	mov	r2, r5
 8006824:	4b05      	ldr	r3, [pc, #20]	@ (800683c <_vfiprintf_r+0x228>)
 8006826:	a904      	add	r1, sp, #16
 8006828:	4630      	mov	r0, r6
 800682a:	f000 f879 	bl	8006920 <_printf_i>
 800682e:	e7e4      	b.n	80067fa <_vfiprintf_r+0x1e6>
 8006830:	08006f88 	.word	0x08006f88
 8006834:	08006f92 	.word	0x08006f92
 8006838:	00000000 	.word	0x00000000
 800683c:	080065ef 	.word	0x080065ef
 8006840:	08006f8e 	.word	0x08006f8e

08006844 <_printf_common>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	4616      	mov	r6, r2
 800684a:	4698      	mov	r8, r3
 800684c:	688a      	ldr	r2, [r1, #8]
 800684e:	690b      	ldr	r3, [r1, #16]
 8006850:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006854:	4293      	cmp	r3, r2
 8006856:	bfb8      	it	lt
 8006858:	4613      	movlt	r3, r2
 800685a:	6033      	str	r3, [r6, #0]
 800685c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006860:	4607      	mov	r7, r0
 8006862:	460c      	mov	r4, r1
 8006864:	b10a      	cbz	r2, 800686a <_printf_common+0x26>
 8006866:	3301      	adds	r3, #1
 8006868:	6033      	str	r3, [r6, #0]
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	0699      	lsls	r1, r3, #26
 800686e:	bf42      	ittt	mi
 8006870:	6833      	ldrmi	r3, [r6, #0]
 8006872:	3302      	addmi	r3, #2
 8006874:	6033      	strmi	r3, [r6, #0]
 8006876:	6825      	ldr	r5, [r4, #0]
 8006878:	f015 0506 	ands.w	r5, r5, #6
 800687c:	d106      	bne.n	800688c <_printf_common+0x48>
 800687e:	f104 0a19 	add.w	sl, r4, #25
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	6832      	ldr	r2, [r6, #0]
 8006886:	1a9b      	subs	r3, r3, r2
 8006888:	42ab      	cmp	r3, r5
 800688a:	dc26      	bgt.n	80068da <_printf_common+0x96>
 800688c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006890:	6822      	ldr	r2, [r4, #0]
 8006892:	3b00      	subs	r3, #0
 8006894:	bf18      	it	ne
 8006896:	2301      	movne	r3, #1
 8006898:	0692      	lsls	r2, r2, #26
 800689a:	d42b      	bmi.n	80068f4 <_printf_common+0xb0>
 800689c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068a0:	4641      	mov	r1, r8
 80068a2:	4638      	mov	r0, r7
 80068a4:	47c8      	blx	r9
 80068a6:	3001      	adds	r0, #1
 80068a8:	d01e      	beq.n	80068e8 <_printf_common+0xa4>
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	6922      	ldr	r2, [r4, #16]
 80068ae:	f003 0306 	and.w	r3, r3, #6
 80068b2:	2b04      	cmp	r3, #4
 80068b4:	bf02      	ittt	eq
 80068b6:	68e5      	ldreq	r5, [r4, #12]
 80068b8:	6833      	ldreq	r3, [r6, #0]
 80068ba:	1aed      	subeq	r5, r5, r3
 80068bc:	68a3      	ldr	r3, [r4, #8]
 80068be:	bf0c      	ite	eq
 80068c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068c4:	2500      	movne	r5, #0
 80068c6:	4293      	cmp	r3, r2
 80068c8:	bfc4      	itt	gt
 80068ca:	1a9b      	subgt	r3, r3, r2
 80068cc:	18ed      	addgt	r5, r5, r3
 80068ce:	2600      	movs	r6, #0
 80068d0:	341a      	adds	r4, #26
 80068d2:	42b5      	cmp	r5, r6
 80068d4:	d11a      	bne.n	800690c <_printf_common+0xc8>
 80068d6:	2000      	movs	r0, #0
 80068d8:	e008      	b.n	80068ec <_printf_common+0xa8>
 80068da:	2301      	movs	r3, #1
 80068dc:	4652      	mov	r2, sl
 80068de:	4641      	mov	r1, r8
 80068e0:	4638      	mov	r0, r7
 80068e2:	47c8      	blx	r9
 80068e4:	3001      	adds	r0, #1
 80068e6:	d103      	bne.n	80068f0 <_printf_common+0xac>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f0:	3501      	adds	r5, #1
 80068f2:	e7c6      	b.n	8006882 <_printf_common+0x3e>
 80068f4:	18e1      	adds	r1, r4, r3
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	2030      	movs	r0, #48	@ 0x30
 80068fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068fe:	4422      	add	r2, r4
 8006900:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006904:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006908:	3302      	adds	r3, #2
 800690a:	e7c7      	b.n	800689c <_printf_common+0x58>
 800690c:	2301      	movs	r3, #1
 800690e:	4622      	mov	r2, r4
 8006910:	4641      	mov	r1, r8
 8006912:	4638      	mov	r0, r7
 8006914:	47c8      	blx	r9
 8006916:	3001      	adds	r0, #1
 8006918:	d0e6      	beq.n	80068e8 <_printf_common+0xa4>
 800691a:	3601      	adds	r6, #1
 800691c:	e7d9      	b.n	80068d2 <_printf_common+0x8e>
	...

08006920 <_printf_i>:
 8006920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006924:	7e0f      	ldrb	r7, [r1, #24]
 8006926:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006928:	2f78      	cmp	r7, #120	@ 0x78
 800692a:	4691      	mov	r9, r2
 800692c:	4680      	mov	r8, r0
 800692e:	460c      	mov	r4, r1
 8006930:	469a      	mov	sl, r3
 8006932:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006936:	d807      	bhi.n	8006948 <_printf_i+0x28>
 8006938:	2f62      	cmp	r7, #98	@ 0x62
 800693a:	d80a      	bhi.n	8006952 <_printf_i+0x32>
 800693c:	2f00      	cmp	r7, #0
 800693e:	f000 80d2 	beq.w	8006ae6 <_printf_i+0x1c6>
 8006942:	2f58      	cmp	r7, #88	@ 0x58
 8006944:	f000 80b9 	beq.w	8006aba <_printf_i+0x19a>
 8006948:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800694c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006950:	e03a      	b.n	80069c8 <_printf_i+0xa8>
 8006952:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006956:	2b15      	cmp	r3, #21
 8006958:	d8f6      	bhi.n	8006948 <_printf_i+0x28>
 800695a:	a101      	add	r1, pc, #4	@ (adr r1, 8006960 <_printf_i+0x40>)
 800695c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069cd 	.word	0x080069cd
 8006968:	08006949 	.word	0x08006949
 800696c:	08006949 	.word	0x08006949
 8006970:	08006949 	.word	0x08006949
 8006974:	08006949 	.word	0x08006949
 8006978:	080069cd 	.word	0x080069cd
 800697c:	08006949 	.word	0x08006949
 8006980:	08006949 	.word	0x08006949
 8006984:	08006949 	.word	0x08006949
 8006988:	08006949 	.word	0x08006949
 800698c:	08006acd 	.word	0x08006acd
 8006990:	080069f7 	.word	0x080069f7
 8006994:	08006a87 	.word	0x08006a87
 8006998:	08006949 	.word	0x08006949
 800699c:	08006949 	.word	0x08006949
 80069a0:	08006aef 	.word	0x08006aef
 80069a4:	08006949 	.word	0x08006949
 80069a8:	080069f7 	.word	0x080069f7
 80069ac:	08006949 	.word	0x08006949
 80069b0:	08006949 	.word	0x08006949
 80069b4:	08006a8f 	.word	0x08006a8f
 80069b8:	6833      	ldr	r3, [r6, #0]
 80069ba:	1d1a      	adds	r2, r3, #4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6032      	str	r2, [r6, #0]
 80069c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069c8:	2301      	movs	r3, #1
 80069ca:	e09d      	b.n	8006b08 <_printf_i+0x1e8>
 80069cc:	6833      	ldr	r3, [r6, #0]
 80069ce:	6820      	ldr	r0, [r4, #0]
 80069d0:	1d19      	adds	r1, r3, #4
 80069d2:	6031      	str	r1, [r6, #0]
 80069d4:	0606      	lsls	r6, r0, #24
 80069d6:	d501      	bpl.n	80069dc <_printf_i+0xbc>
 80069d8:	681d      	ldr	r5, [r3, #0]
 80069da:	e003      	b.n	80069e4 <_printf_i+0xc4>
 80069dc:	0645      	lsls	r5, r0, #25
 80069de:	d5fb      	bpl.n	80069d8 <_printf_i+0xb8>
 80069e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069e4:	2d00      	cmp	r5, #0
 80069e6:	da03      	bge.n	80069f0 <_printf_i+0xd0>
 80069e8:	232d      	movs	r3, #45	@ 0x2d
 80069ea:	426d      	negs	r5, r5
 80069ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069f0:	4859      	ldr	r0, [pc, #356]	@ (8006b58 <_printf_i+0x238>)
 80069f2:	230a      	movs	r3, #10
 80069f4:	e011      	b.n	8006a1a <_printf_i+0xfa>
 80069f6:	6821      	ldr	r1, [r4, #0]
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	0608      	lsls	r0, r1, #24
 80069fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a00:	d402      	bmi.n	8006a08 <_printf_i+0xe8>
 8006a02:	0649      	lsls	r1, r1, #25
 8006a04:	bf48      	it	mi
 8006a06:	b2ad      	uxthmi	r5, r5
 8006a08:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a0a:	4853      	ldr	r0, [pc, #332]	@ (8006b58 <_printf_i+0x238>)
 8006a0c:	6033      	str	r3, [r6, #0]
 8006a0e:	bf14      	ite	ne
 8006a10:	230a      	movne	r3, #10
 8006a12:	2308      	moveq	r3, #8
 8006a14:	2100      	movs	r1, #0
 8006a16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a1a:	6866      	ldr	r6, [r4, #4]
 8006a1c:	60a6      	str	r6, [r4, #8]
 8006a1e:	2e00      	cmp	r6, #0
 8006a20:	bfa2      	ittt	ge
 8006a22:	6821      	ldrge	r1, [r4, #0]
 8006a24:	f021 0104 	bicge.w	r1, r1, #4
 8006a28:	6021      	strge	r1, [r4, #0]
 8006a2a:	b90d      	cbnz	r5, 8006a30 <_printf_i+0x110>
 8006a2c:	2e00      	cmp	r6, #0
 8006a2e:	d04b      	beq.n	8006ac8 <_printf_i+0x1a8>
 8006a30:	4616      	mov	r6, r2
 8006a32:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a36:	fb03 5711 	mls	r7, r3, r1, r5
 8006a3a:	5dc7      	ldrb	r7, [r0, r7]
 8006a3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a40:	462f      	mov	r7, r5
 8006a42:	42bb      	cmp	r3, r7
 8006a44:	460d      	mov	r5, r1
 8006a46:	d9f4      	bls.n	8006a32 <_printf_i+0x112>
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d10b      	bne.n	8006a64 <_printf_i+0x144>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	07df      	lsls	r7, r3, #31
 8006a50:	d508      	bpl.n	8006a64 <_printf_i+0x144>
 8006a52:	6923      	ldr	r3, [r4, #16]
 8006a54:	6861      	ldr	r1, [r4, #4]
 8006a56:	4299      	cmp	r1, r3
 8006a58:	bfde      	ittt	le
 8006a5a:	2330      	movle	r3, #48	@ 0x30
 8006a5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a64:	1b92      	subs	r2, r2, r6
 8006a66:	6122      	str	r2, [r4, #16]
 8006a68:	f8cd a000 	str.w	sl, [sp]
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	aa03      	add	r2, sp, #12
 8006a70:	4621      	mov	r1, r4
 8006a72:	4640      	mov	r0, r8
 8006a74:	f7ff fee6 	bl	8006844 <_printf_common>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	d14a      	bne.n	8006b12 <_printf_i+0x1f2>
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	b004      	add	sp, #16
 8006a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	f043 0320 	orr.w	r3, r3, #32
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	4833      	ldr	r0, [pc, #204]	@ (8006b5c <_printf_i+0x23c>)
 8006a90:	2778      	movs	r7, #120	@ 0x78
 8006a92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a96:	6823      	ldr	r3, [r4, #0]
 8006a98:	6831      	ldr	r1, [r6, #0]
 8006a9a:	061f      	lsls	r7, r3, #24
 8006a9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006aa0:	d402      	bmi.n	8006aa8 <_printf_i+0x188>
 8006aa2:	065f      	lsls	r7, r3, #25
 8006aa4:	bf48      	it	mi
 8006aa6:	b2ad      	uxthmi	r5, r5
 8006aa8:	6031      	str	r1, [r6, #0]
 8006aaa:	07d9      	lsls	r1, r3, #31
 8006aac:	bf44      	itt	mi
 8006aae:	f043 0320 	orrmi.w	r3, r3, #32
 8006ab2:	6023      	strmi	r3, [r4, #0]
 8006ab4:	b11d      	cbz	r5, 8006abe <_printf_i+0x19e>
 8006ab6:	2310      	movs	r3, #16
 8006ab8:	e7ac      	b.n	8006a14 <_printf_i+0xf4>
 8006aba:	4827      	ldr	r0, [pc, #156]	@ (8006b58 <_printf_i+0x238>)
 8006abc:	e7e9      	b.n	8006a92 <_printf_i+0x172>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f023 0320 	bic.w	r3, r3, #32
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	e7f6      	b.n	8006ab6 <_printf_i+0x196>
 8006ac8:	4616      	mov	r6, r2
 8006aca:	e7bd      	b.n	8006a48 <_printf_i+0x128>
 8006acc:	6833      	ldr	r3, [r6, #0]
 8006ace:	6825      	ldr	r5, [r4, #0]
 8006ad0:	6961      	ldr	r1, [r4, #20]
 8006ad2:	1d18      	adds	r0, r3, #4
 8006ad4:	6030      	str	r0, [r6, #0]
 8006ad6:	062e      	lsls	r6, r5, #24
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	d501      	bpl.n	8006ae0 <_printf_i+0x1c0>
 8006adc:	6019      	str	r1, [r3, #0]
 8006ade:	e002      	b.n	8006ae6 <_printf_i+0x1c6>
 8006ae0:	0668      	lsls	r0, r5, #25
 8006ae2:	d5fb      	bpl.n	8006adc <_printf_i+0x1bc>
 8006ae4:	8019      	strh	r1, [r3, #0]
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	6123      	str	r3, [r4, #16]
 8006aea:	4616      	mov	r6, r2
 8006aec:	e7bc      	b.n	8006a68 <_printf_i+0x148>
 8006aee:	6833      	ldr	r3, [r6, #0]
 8006af0:	1d1a      	adds	r2, r3, #4
 8006af2:	6032      	str	r2, [r6, #0]
 8006af4:	681e      	ldr	r6, [r3, #0]
 8006af6:	6862      	ldr	r2, [r4, #4]
 8006af8:	2100      	movs	r1, #0
 8006afa:	4630      	mov	r0, r6
 8006afc:	f7f9 fb68 	bl	80001d0 <memchr>
 8006b00:	b108      	cbz	r0, 8006b06 <_printf_i+0x1e6>
 8006b02:	1b80      	subs	r0, r0, r6
 8006b04:	6060      	str	r0, [r4, #4]
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	6123      	str	r3, [r4, #16]
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b10:	e7aa      	b.n	8006a68 <_printf_i+0x148>
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	4632      	mov	r2, r6
 8006b16:	4649      	mov	r1, r9
 8006b18:	4640      	mov	r0, r8
 8006b1a:	47d0      	blx	sl
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d0ad      	beq.n	8006a7c <_printf_i+0x15c>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	079b      	lsls	r3, r3, #30
 8006b24:	d413      	bmi.n	8006b4e <_printf_i+0x22e>
 8006b26:	68e0      	ldr	r0, [r4, #12]
 8006b28:	9b03      	ldr	r3, [sp, #12]
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	bfb8      	it	lt
 8006b2e:	4618      	movlt	r0, r3
 8006b30:	e7a6      	b.n	8006a80 <_printf_i+0x160>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4632      	mov	r2, r6
 8006b36:	4649      	mov	r1, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	47d0      	blx	sl
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d09d      	beq.n	8006a7c <_printf_i+0x15c>
 8006b40:	3501      	adds	r5, #1
 8006b42:	68e3      	ldr	r3, [r4, #12]
 8006b44:	9903      	ldr	r1, [sp, #12]
 8006b46:	1a5b      	subs	r3, r3, r1
 8006b48:	42ab      	cmp	r3, r5
 8006b4a:	dcf2      	bgt.n	8006b32 <_printf_i+0x212>
 8006b4c:	e7eb      	b.n	8006b26 <_printf_i+0x206>
 8006b4e:	2500      	movs	r5, #0
 8006b50:	f104 0619 	add.w	r6, r4, #25
 8006b54:	e7f5      	b.n	8006b42 <_printf_i+0x222>
 8006b56:	bf00      	nop
 8006b58:	08006f99 	.word	0x08006f99
 8006b5c:	08006faa 	.word	0x08006faa

08006b60 <__sflush_r>:
 8006b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b68:	0716      	lsls	r6, r2, #28
 8006b6a:	4605      	mov	r5, r0
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	d454      	bmi.n	8006c1a <__sflush_r+0xba>
 8006b70:	684b      	ldr	r3, [r1, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dc02      	bgt.n	8006b7c <__sflush_r+0x1c>
 8006b76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	dd48      	ble.n	8006c0e <__sflush_r+0xae>
 8006b7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b7e:	2e00      	cmp	r6, #0
 8006b80:	d045      	beq.n	8006c0e <__sflush_r+0xae>
 8006b82:	2300      	movs	r3, #0
 8006b84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006b88:	682f      	ldr	r7, [r5, #0]
 8006b8a:	6a21      	ldr	r1, [r4, #32]
 8006b8c:	602b      	str	r3, [r5, #0]
 8006b8e:	d030      	beq.n	8006bf2 <__sflush_r+0x92>
 8006b90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	0759      	lsls	r1, r3, #29
 8006b96:	d505      	bpl.n	8006ba4 <__sflush_r+0x44>
 8006b98:	6863      	ldr	r3, [r4, #4]
 8006b9a:	1ad2      	subs	r2, r2, r3
 8006b9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006b9e:	b10b      	cbz	r3, 8006ba4 <__sflush_r+0x44>
 8006ba0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ba2:	1ad2      	subs	r2, r2, r3
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ba8:	6a21      	ldr	r1, [r4, #32]
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b0      	blx	r6
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	d106      	bne.n	8006bc2 <__sflush_r+0x62>
 8006bb4:	6829      	ldr	r1, [r5, #0]
 8006bb6:	291d      	cmp	r1, #29
 8006bb8:	d82b      	bhi.n	8006c12 <__sflush_r+0xb2>
 8006bba:	4a2a      	ldr	r2, [pc, #168]	@ (8006c64 <__sflush_r+0x104>)
 8006bbc:	410a      	asrs	r2, r1
 8006bbe:	07d6      	lsls	r6, r2, #31
 8006bc0:	d427      	bmi.n	8006c12 <__sflush_r+0xb2>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	6062      	str	r2, [r4, #4]
 8006bc6:	04d9      	lsls	r1, r3, #19
 8006bc8:	6922      	ldr	r2, [r4, #16]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	d504      	bpl.n	8006bd8 <__sflush_r+0x78>
 8006bce:	1c42      	adds	r2, r0, #1
 8006bd0:	d101      	bne.n	8006bd6 <__sflush_r+0x76>
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	b903      	cbnz	r3, 8006bd8 <__sflush_r+0x78>
 8006bd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bda:	602f      	str	r7, [r5, #0]
 8006bdc:	b1b9      	cbz	r1, 8006c0e <__sflush_r+0xae>
 8006bde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006be2:	4299      	cmp	r1, r3
 8006be4:	d002      	beq.n	8006bec <__sflush_r+0x8c>
 8006be6:	4628      	mov	r0, r5
 8006be8:	f7ff fbf2 	bl	80063d0 <_free_r>
 8006bec:	2300      	movs	r3, #0
 8006bee:	6363      	str	r3, [r4, #52]	@ 0x34
 8006bf0:	e00d      	b.n	8006c0e <__sflush_r+0xae>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b0      	blx	r6
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	1c50      	adds	r0, r2, #1
 8006bfc:	d1c9      	bne.n	8006b92 <__sflush_r+0x32>
 8006bfe:	682b      	ldr	r3, [r5, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d0c6      	beq.n	8006b92 <__sflush_r+0x32>
 8006c04:	2b1d      	cmp	r3, #29
 8006c06:	d001      	beq.n	8006c0c <__sflush_r+0xac>
 8006c08:	2b16      	cmp	r3, #22
 8006c0a:	d11e      	bne.n	8006c4a <__sflush_r+0xea>
 8006c0c:	602f      	str	r7, [r5, #0]
 8006c0e:	2000      	movs	r0, #0
 8006c10:	e022      	b.n	8006c58 <__sflush_r+0xf8>
 8006c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c16:	b21b      	sxth	r3, r3
 8006c18:	e01b      	b.n	8006c52 <__sflush_r+0xf2>
 8006c1a:	690f      	ldr	r7, [r1, #16]
 8006c1c:	2f00      	cmp	r7, #0
 8006c1e:	d0f6      	beq.n	8006c0e <__sflush_r+0xae>
 8006c20:	0793      	lsls	r3, r2, #30
 8006c22:	680e      	ldr	r6, [r1, #0]
 8006c24:	bf08      	it	eq
 8006c26:	694b      	ldreq	r3, [r1, #20]
 8006c28:	600f      	str	r7, [r1, #0]
 8006c2a:	bf18      	it	ne
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	eba6 0807 	sub.w	r8, r6, r7
 8006c32:	608b      	str	r3, [r1, #8]
 8006c34:	f1b8 0f00 	cmp.w	r8, #0
 8006c38:	dde9      	ble.n	8006c0e <__sflush_r+0xae>
 8006c3a:	6a21      	ldr	r1, [r4, #32]
 8006c3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c3e:	4643      	mov	r3, r8
 8006c40:	463a      	mov	r2, r7
 8006c42:	4628      	mov	r0, r5
 8006c44:	47b0      	blx	r6
 8006c46:	2800      	cmp	r0, #0
 8006c48:	dc08      	bgt.n	8006c5c <__sflush_r+0xfc>
 8006c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c52:	81a3      	strh	r3, [r4, #12]
 8006c54:	f04f 30ff 	mov.w	r0, #4294967295
 8006c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c5c:	4407      	add	r7, r0
 8006c5e:	eba8 0800 	sub.w	r8, r8, r0
 8006c62:	e7e7      	b.n	8006c34 <__sflush_r+0xd4>
 8006c64:	dfbffffe 	.word	0xdfbffffe

08006c68 <_fflush_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	690b      	ldr	r3, [r1, #16]
 8006c6c:	4605      	mov	r5, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	b913      	cbnz	r3, 8006c78 <_fflush_r+0x10>
 8006c72:	2500      	movs	r5, #0
 8006c74:	4628      	mov	r0, r5
 8006c76:	bd38      	pop	{r3, r4, r5, pc}
 8006c78:	b118      	cbz	r0, 8006c82 <_fflush_r+0x1a>
 8006c7a:	6a03      	ldr	r3, [r0, #32]
 8006c7c:	b90b      	cbnz	r3, 8006c82 <_fflush_r+0x1a>
 8006c7e:	f7ff fa9f 	bl	80061c0 <__sinit>
 8006c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d0f3      	beq.n	8006c72 <_fflush_r+0xa>
 8006c8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006c8c:	07d0      	lsls	r0, r2, #31
 8006c8e:	d404      	bmi.n	8006c9a <_fflush_r+0x32>
 8006c90:	0599      	lsls	r1, r3, #22
 8006c92:	d402      	bmi.n	8006c9a <_fflush_r+0x32>
 8006c94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c96:	f7ff fb98 	bl	80063ca <__retarget_lock_acquire_recursive>
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f7ff ff5f 	bl	8006b60 <__sflush_r>
 8006ca2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ca4:	07da      	lsls	r2, r3, #31
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	d4e4      	bmi.n	8006c74 <_fflush_r+0xc>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	059b      	lsls	r3, r3, #22
 8006cae:	d4e1      	bmi.n	8006c74 <_fflush_r+0xc>
 8006cb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cb2:	f7ff fb8b 	bl	80063cc <__retarget_lock_release_recursive>
 8006cb6:	e7dd      	b.n	8006c74 <_fflush_r+0xc>

08006cb8 <__swbuf_r>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	460e      	mov	r6, r1
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	b118      	cbz	r0, 8006cca <__swbuf_r+0x12>
 8006cc2:	6a03      	ldr	r3, [r0, #32]
 8006cc4:	b90b      	cbnz	r3, 8006cca <__swbuf_r+0x12>
 8006cc6:	f7ff fa7b 	bl	80061c0 <__sinit>
 8006cca:	69a3      	ldr	r3, [r4, #24]
 8006ccc:	60a3      	str	r3, [r4, #8]
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	071a      	lsls	r2, r3, #28
 8006cd2:	d501      	bpl.n	8006cd8 <__swbuf_r+0x20>
 8006cd4:	6923      	ldr	r3, [r4, #16]
 8006cd6:	b943      	cbnz	r3, 8006cea <__swbuf_r+0x32>
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4628      	mov	r0, r5
 8006cdc:	f000 f82a 	bl	8006d34 <__swsetup_r>
 8006ce0:	b118      	cbz	r0, 8006cea <__swbuf_r+0x32>
 8006ce2:	f04f 37ff 	mov.w	r7, #4294967295
 8006ce6:	4638      	mov	r0, r7
 8006ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	6922      	ldr	r2, [r4, #16]
 8006cee:	1a98      	subs	r0, r3, r2
 8006cf0:	6963      	ldr	r3, [r4, #20]
 8006cf2:	b2f6      	uxtb	r6, r6
 8006cf4:	4283      	cmp	r3, r0
 8006cf6:	4637      	mov	r7, r6
 8006cf8:	dc05      	bgt.n	8006d06 <__swbuf_r+0x4e>
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	4628      	mov	r0, r5
 8006cfe:	f7ff ffb3 	bl	8006c68 <_fflush_r>
 8006d02:	2800      	cmp	r0, #0
 8006d04:	d1ed      	bne.n	8006ce2 <__swbuf_r+0x2a>
 8006d06:	68a3      	ldr	r3, [r4, #8]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	60a3      	str	r3, [r4, #8]
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	1c5a      	adds	r2, r3, #1
 8006d10:	6022      	str	r2, [r4, #0]
 8006d12:	701e      	strb	r6, [r3, #0]
 8006d14:	6962      	ldr	r2, [r4, #20]
 8006d16:	1c43      	adds	r3, r0, #1
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d004      	beq.n	8006d26 <__swbuf_r+0x6e>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	07db      	lsls	r3, r3, #31
 8006d20:	d5e1      	bpl.n	8006ce6 <__swbuf_r+0x2e>
 8006d22:	2e0a      	cmp	r6, #10
 8006d24:	d1df      	bne.n	8006ce6 <__swbuf_r+0x2e>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4628      	mov	r0, r5
 8006d2a:	f7ff ff9d 	bl	8006c68 <_fflush_r>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	d0d9      	beq.n	8006ce6 <__swbuf_r+0x2e>
 8006d32:	e7d6      	b.n	8006ce2 <__swbuf_r+0x2a>

08006d34 <__swsetup_r>:
 8006d34:	b538      	push	{r3, r4, r5, lr}
 8006d36:	4b29      	ldr	r3, [pc, #164]	@ (8006ddc <__swsetup_r+0xa8>)
 8006d38:	4605      	mov	r5, r0
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	b118      	cbz	r0, 8006d48 <__swsetup_r+0x14>
 8006d40:	6a03      	ldr	r3, [r0, #32]
 8006d42:	b90b      	cbnz	r3, 8006d48 <__swsetup_r+0x14>
 8006d44:	f7ff fa3c 	bl	80061c0 <__sinit>
 8006d48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4c:	0719      	lsls	r1, r3, #28
 8006d4e:	d422      	bmi.n	8006d96 <__swsetup_r+0x62>
 8006d50:	06da      	lsls	r2, r3, #27
 8006d52:	d407      	bmi.n	8006d64 <__swsetup_r+0x30>
 8006d54:	2209      	movs	r2, #9
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	e033      	b.n	8006dcc <__swsetup_r+0x98>
 8006d64:	0758      	lsls	r0, r3, #29
 8006d66:	d512      	bpl.n	8006d8e <__swsetup_r+0x5a>
 8006d68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d6a:	b141      	cbz	r1, 8006d7e <__swsetup_r+0x4a>
 8006d6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d70:	4299      	cmp	r1, r3
 8006d72:	d002      	beq.n	8006d7a <__swsetup_r+0x46>
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7ff fb2b 	bl	80063d0 <_free_r>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	2300      	movs	r3, #0
 8006d88:	6063      	str	r3, [r4, #4]
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	6023      	str	r3, [r4, #0]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	f043 0308 	orr.w	r3, r3, #8
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	b94b      	cbnz	r3, 8006dae <__swsetup_r+0x7a>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006da4:	d003      	beq.n	8006dae <__swsetup_r+0x7a>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	f000 f84f 	bl	8006e4c <__smakebuf_r>
 8006dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db2:	f013 0201 	ands.w	r2, r3, #1
 8006db6:	d00a      	beq.n	8006dce <__swsetup_r+0x9a>
 8006db8:	2200      	movs	r2, #0
 8006dba:	60a2      	str	r2, [r4, #8]
 8006dbc:	6962      	ldr	r2, [r4, #20]
 8006dbe:	4252      	negs	r2, r2
 8006dc0:	61a2      	str	r2, [r4, #24]
 8006dc2:	6922      	ldr	r2, [r4, #16]
 8006dc4:	b942      	cbnz	r2, 8006dd8 <__swsetup_r+0xa4>
 8006dc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006dca:	d1c5      	bne.n	8006d58 <__swsetup_r+0x24>
 8006dcc:	bd38      	pop	{r3, r4, r5, pc}
 8006dce:	0799      	lsls	r1, r3, #30
 8006dd0:	bf58      	it	pl
 8006dd2:	6962      	ldrpl	r2, [r4, #20]
 8006dd4:	60a2      	str	r2, [r4, #8]
 8006dd6:	e7f4      	b.n	8006dc2 <__swsetup_r+0x8e>
 8006dd8:	2000      	movs	r0, #0
 8006dda:	e7f7      	b.n	8006dcc <__swsetup_r+0x98>
 8006ddc:	20000060 	.word	0x20000060

08006de0 <_sbrk_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d06      	ldr	r5, [pc, #24]	@ (8006dfc <_sbrk_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7fa fa94 	bl	8001318 <_sbrk>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_sbrk_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_sbrk_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	2000042c 	.word	0x2000042c

08006e00 <__swhatbuf_r>:
 8006e00:	b570      	push	{r4, r5, r6, lr}
 8006e02:	460c      	mov	r4, r1
 8006e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	b096      	sub	sp, #88	@ 0x58
 8006e0c:	4615      	mov	r5, r2
 8006e0e:	461e      	mov	r6, r3
 8006e10:	da0d      	bge.n	8006e2e <__swhatbuf_r+0x2e>
 8006e12:	89a3      	ldrh	r3, [r4, #12]
 8006e14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2340      	movne	r3, #64	@ 0x40
 8006e20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006e24:	2000      	movs	r0, #0
 8006e26:	6031      	str	r1, [r6, #0]
 8006e28:	602b      	str	r3, [r5, #0]
 8006e2a:	b016      	add	sp, #88	@ 0x58
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	466a      	mov	r2, sp
 8006e30:	f000 f848 	bl	8006ec4 <_fstat_r>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	dbec      	blt.n	8006e12 <__swhatbuf_r+0x12>
 8006e38:	9901      	ldr	r1, [sp, #4]
 8006e3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006e3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006e42:	4259      	negs	r1, r3
 8006e44:	4159      	adcs	r1, r3
 8006e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e4a:	e7eb      	b.n	8006e24 <__swhatbuf_r+0x24>

08006e4c <__smakebuf_r>:
 8006e4c:	898b      	ldrh	r3, [r1, #12]
 8006e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e50:	079d      	lsls	r5, r3, #30
 8006e52:	4606      	mov	r6, r0
 8006e54:	460c      	mov	r4, r1
 8006e56:	d507      	bpl.n	8006e68 <__smakebuf_r+0x1c>
 8006e58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	6123      	str	r3, [r4, #16]
 8006e60:	2301      	movs	r3, #1
 8006e62:	6163      	str	r3, [r4, #20]
 8006e64:	b003      	add	sp, #12
 8006e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e68:	ab01      	add	r3, sp, #4
 8006e6a:	466a      	mov	r2, sp
 8006e6c:	f7ff ffc8 	bl	8006e00 <__swhatbuf_r>
 8006e70:	9f00      	ldr	r7, [sp, #0]
 8006e72:	4605      	mov	r5, r0
 8006e74:	4639      	mov	r1, r7
 8006e76:	4630      	mov	r0, r6
 8006e78:	f7ff fb16 	bl	80064a8 <_malloc_r>
 8006e7c:	b948      	cbnz	r0, 8006e92 <__smakebuf_r+0x46>
 8006e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e82:	059a      	lsls	r2, r3, #22
 8006e84:	d4ee      	bmi.n	8006e64 <__smakebuf_r+0x18>
 8006e86:	f023 0303 	bic.w	r3, r3, #3
 8006e8a:	f043 0302 	orr.w	r3, r3, #2
 8006e8e:	81a3      	strh	r3, [r4, #12]
 8006e90:	e7e2      	b.n	8006e58 <__smakebuf_r+0xc>
 8006e92:	89a3      	ldrh	r3, [r4, #12]
 8006e94:	6020      	str	r0, [r4, #0]
 8006e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e9a:	81a3      	strh	r3, [r4, #12]
 8006e9c:	9b01      	ldr	r3, [sp, #4]
 8006e9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ea2:	b15b      	cbz	r3, 8006ebc <__smakebuf_r+0x70>
 8006ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 f81d 	bl	8006ee8 <_isatty_r>
 8006eae:	b128      	cbz	r0, 8006ebc <__smakebuf_r+0x70>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	f043 0301 	orr.w	r3, r3, #1
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	431d      	orrs	r5, r3
 8006ec0:	81a5      	strh	r5, [r4, #12]
 8006ec2:	e7cf      	b.n	8006e64 <__smakebuf_r+0x18>

08006ec4 <_fstat_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_fstat_r+0x20>)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	602b      	str	r3, [r5, #0]
 8006ed2:	f7fa f9f8 	bl	80012c6 <_fstat>
 8006ed6:	1c43      	adds	r3, r0, #1
 8006ed8:	d102      	bne.n	8006ee0 <_fstat_r+0x1c>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	b103      	cbz	r3, 8006ee0 <_fstat_r+0x1c>
 8006ede:	6023      	str	r3, [r4, #0]
 8006ee0:	bd38      	pop	{r3, r4, r5, pc}
 8006ee2:	bf00      	nop
 8006ee4:	2000042c 	.word	0x2000042c

08006ee8 <_isatty_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d06      	ldr	r5, [pc, #24]	@ (8006f04 <_isatty_r+0x1c>)
 8006eec:	2300      	movs	r3, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	4608      	mov	r0, r1
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	f7fa f9f7 	bl	80012e6 <_isatty>
 8006ef8:	1c43      	adds	r3, r0, #1
 8006efa:	d102      	bne.n	8006f02 <_isatty_r+0x1a>
 8006efc:	682b      	ldr	r3, [r5, #0]
 8006efe:	b103      	cbz	r3, 8006f02 <_isatty_r+0x1a>
 8006f00:	6023      	str	r3, [r4, #0]
 8006f02:	bd38      	pop	{r3, r4, r5, pc}
 8006f04:	2000042c 	.word	0x2000042c

08006f08 <_init>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr

08006f14 <_fini>:
 8006f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f16:	bf00      	nop
 8006f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1a:	bc08      	pop	{r3}
 8006f1c:	469e      	mov	lr, r3
 8006f1e:	4770      	bx	lr
