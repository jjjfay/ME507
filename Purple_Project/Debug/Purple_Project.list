
Purple_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005920  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005aa8  08005aa8  00006aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005af0  08005af0  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005af0  08005af0  00006af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af8  08005af8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af8  08005af8  00006af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005afc  08005afc  00006afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005b00  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  2000000c  08005b0c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08005b0c  000072b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ea6  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023eb  00000000  00000000  0001aee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0001d2d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5f  00000000  00000000  0001e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022d0  00000000  00000000  0001f377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001464d  00000000  00000000  00021647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001055ba  00000000  00000000  00035c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b24e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f14  00000000  00000000  0013b294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001401a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a90 	.word	0x08005a90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005a90 	.word	0x08005a90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fe21 	bl	8001102 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f814 	bl	80004ec <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004c4:	f000 f861 	bl	800058a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 fb0c 	bl	8000ae4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004cc:	f000 f888 	bl	80005e0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80004d0:	f000 f8fc 	bl	80006cc <MX_ADC2_Init>
  MX_TIM1_Init();
 80004d4:	f000 f95e 	bl	8000794 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004d8:	f000 f9b6 	bl	8000848 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004dc:	f000 fa1a 	bl	8000914 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004e0:	f000 fa7a 	bl	80009d8 <MX_TIM4_Init>
  MX_UART4_Init();
 80004e4:	f000 face 	bl	8000a84 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004e8:	bf00      	nop
 80004ea:	e7fd      	b.n	80004e8 <main+0x30>

080004ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b096      	sub	sp, #88	@ 0x58
 80004f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f2:	f107 0314 	add.w	r3, r7, #20
 80004f6:	2244      	movs	r2, #68	@ 0x44
 80004f8:	2100      	movs	r1, #0
 80004fa:	4618      	mov	r0, r3
 80004fc:	f005 fa9b 	bl	8005a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000500:	463b      	mov	r3, r7
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
 800050c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800050e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000512:	f002 f8f1 	bl	80026f8 <HAL_PWREx_ControlVoltageScaling>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d001      	beq.n	8000520 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800051c:	f000 fb64 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000520:	2301      	movs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000524:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052a:	2302      	movs	r3, #2
 800052c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052e:	2303      	movs	r3, #3
 8000530:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000536:	2314      	movs	r3, #20
 8000538:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800053a:	2307      	movs	r3, #7
 800053c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800053e:	2302      	movs	r3, #2
 8000540:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000542:	2302      	movs	r3, #2
 8000544:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4618      	mov	r0, r3
 800054c:	f002 f92a 	bl	80027a4 <HAL_RCC_OscConfig>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000556:	f000 fb47 	bl	8000be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055a:	230f      	movs	r3, #15
 800055c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800055e:	2303      	movs	r3, #3
 8000560:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800056e:	463b      	mov	r3, r7
 8000570:	2104      	movs	r1, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f002 fcf2 	bl	8002f5c <HAL_RCC_ClockConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800057e:	f000 fb33 	bl	8000be8 <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3758      	adds	r7, #88	@ 0x58
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b0a2      	sub	sp, #136	@ 0x88
 800058e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2288      	movs	r2, #136	@ 0x88
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fa4d 	bl	8005a36 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800059c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80005a0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80005a6:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005b0:	2308      	movs	r3, #8
 80005b2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80005c4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4618      	mov	r0, r3
 80005ca:	f002 feeb 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80005d4:	f000 fb08 	bl	8000be8 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3788      	adds	r7, #136	@ 0x88
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005e6:	f107 031c 	add.w	r3, r7, #28
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
 8000600:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000602:	4b2f      	ldr	r3, [pc, #188]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000604:	4a2f      	ldr	r2, [pc, #188]	@ (80006c4 <MX_ADC1_Init+0xe4>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000608:	4b2d      	ldr	r3, [pc, #180]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060e:	4b2c      	ldr	r3, [pc, #176]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000614:	4b2a      	ldr	r3, [pc, #168]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061a:	4b29      	ldr	r3, [pc, #164]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000620:	4b27      	ldr	r3, [pc, #156]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000622:	2204      	movs	r2, #4
 8000624:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000628:	2200      	movs	r2, #0
 800062a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800062e:	2200      	movs	r2, #0
 8000630:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000632:	4b23      	ldr	r3, [pc, #140]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000634:	2201      	movs	r2, #1
 8000636:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800063a:	2200      	movs	r2, #0
 800063c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000642:	2200      	movs	r2, #0
 8000644:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000654:	4b1a      	ldr	r3, [pc, #104]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000656:	2200      	movs	r2, #0
 8000658:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800065a:	4b19      	ldr	r3, [pc, #100]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000662:	4817      	ldr	r0, [pc, #92]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 8000664:	f000 ff4e 	bl	8001504 <HAL_ADC_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800066e:	f000 fabb 	bl	8000be8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000676:	f107 031c 	add.w	r3, r7, #28
 800067a:	4619      	mov	r1, r3
 800067c:	4810      	ldr	r0, [pc, #64]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 800067e:	f001 fca9 	bl	8001fd4 <HAL_ADCEx_MultiModeConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000688:	f000 faae 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800068c:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_ADC1_Init+0xe8>)
 800068e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000690:	2306      	movs	r3, #6
 8000692:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000698:	237f      	movs	r3, #127	@ 0x7f
 800069a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800069c:	2304      	movs	r3, #4
 800069e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	1d3b      	adds	r3, r7, #4
 80006a6:	4619      	mov	r1, r3
 80006a8:	4805      	ldr	r0, [pc, #20]	@ (80006c0 <MX_ADC1_Init+0xe0>)
 80006aa:	f001 f87b 	bl	80017a4 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80006b4:	f000 fa98 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	3728      	adds	r7, #40	@ 0x28
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000028 	.word	0x20000028
 80006c4:	50040000 	.word	0x50040000
 80006c8:	04300002 	.word	0x04300002

080006cc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006e2:	4b29      	ldr	r3, [pc, #164]	@ (8000788 <MX_ADC2_Init+0xbc>)
 80006e4:	4a29      	ldr	r2, [pc, #164]	@ (800078c <MX_ADC2_Init+0xc0>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e8:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC2_Init+0xbc>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b26      	ldr	r3, [pc, #152]	@ (8000788 <MX_ADC2_Init+0xbc>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <MX_ADC2_Init+0xbc>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fa:	4b23      	ldr	r3, [pc, #140]	@ (8000788 <MX_ADC2_Init+0xbc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000700:	4b21      	ldr	r3, [pc, #132]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000702:	2204      	movs	r2, #4
 8000704:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000706:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000708:	2200      	movs	r2, #0
 800070a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800070c:	4b1e      	ldr	r3, [pc, #120]	@ (8000788 <MX_ADC2_Init+0xbc>)
 800070e:	2200      	movs	r2, #0
 8000710:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000712:	4b1d      	ldr	r3, [pc, #116]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000714:	2201      	movs	r2, #1
 8000716:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_ADC2_Init+0xbc>)
 800071a:	2200      	movs	r2, #0
 800071c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000728:	2200      	movs	r2, #0
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800072c:	4b16      	ldr	r3, [pc, #88]	@ (8000788 <MX_ADC2_Init+0xbc>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000734:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000736:	2200      	movs	r2, #0
 8000738:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800073a:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <MX_ADC2_Init+0xbc>)
 800073c:	2200      	movs	r2, #0
 800073e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000742:	4811      	ldr	r0, [pc, #68]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000744:	f000 fede 	bl	8001504 <HAL_ADC_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800074e:	f000 fa4b 	bl	8000be8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <MX_ADC2_Init+0xc4>)
 8000754:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000756:	2306      	movs	r3, #6
 8000758:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800075e:	237f      	movs	r3, #127	@ 0x7f
 8000760:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000762:	2304      	movs	r3, #4
 8000764:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076a:	463b      	mov	r3, r7
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	@ (8000788 <MX_ADC2_Init+0xbc>)
 8000770:	f001 f818 	bl	80017a4 <HAL_ADC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800077a:	f000 fa35 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3718      	adds	r7, #24
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	2000008c 	.word	0x2000008c
 800078c:	50040100 	.word	0x50040100
 8000790:	08600004 	.word	0x08600004

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2224      	movs	r2, #36	@ 0x24
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 f947 	bl	8005a36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	463b      	mov	r3, r7
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b2:	4b23      	ldr	r3, [pc, #140]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007b4:	4a23      	ldr	r2, [pc, #140]	@ (8000844 <MX_TIM1_Init+0xb0>)
 80007b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b8:	4b21      	ldr	r3, [pc, #132]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007be:	4b20      	ldr	r3, [pc, #128]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d8:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <MX_TIM1_Init+0xac>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007de:	2303      	movs	r3, #3
 80007e0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e6:	2301      	movs	r3, #1
 80007e8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f6:	2301      	movs	r3, #1
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	4619      	mov	r1, r3
 8000808:	480d      	ldr	r0, [pc, #52]	@ (8000840 <MX_TIM1_Init+0xac>)
 800080a:	f003 fb35 	bl	8003e78 <HAL_TIM_Encoder_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000814:	f000 f9e8 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800081c:	2300      	movs	r3, #0
 800081e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000824:	463b      	mov	r3, r7
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	@ (8000840 <MX_TIM1_Init+0xac>)
 800082a:	f004 fb43 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000834:	f000 f9d8 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	@ 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	200000f0 	.word	0x200000f0
 8000844:	40012c00 	.word	0x40012c00

08000848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085a:	463b      	mov	r3, r7
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
 8000868:	615a      	str	r2, [r3, #20]
 800086a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800086c:	4b27      	ldr	r3, [pc, #156]	@ (800090c <MX_TIM2_Init+0xc4>)
 800086e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_TIM2_Init+0xc4>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 8000880:	4b22      	ldr	r3, [pc, #136]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000882:	4a23      	ldr	r2, [pc, #140]	@ (8000910 <MX_TIM2_Init+0xc8>)
 8000884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000886:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <MX_TIM2_Init+0xc4>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000892:	481e      	ldr	r0, [pc, #120]	@ (800090c <MX_TIM2_Init+0xc4>)
 8000894:	f003 fa42 	bl	8003d1c <HAL_TIM_PWM_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800089e:	f000 f9a3 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4816      	ldr	r0, [pc, #88]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008b2:	f004 faff 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80008bc:	f000 f994 	bl	8000be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c0:	2360      	movs	r3, #96	@ 0x60
 80008c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	480d      	ldr	r0, [pc, #52]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008d8:	f003 fd12 	bl	8004300 <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80008e2:	f000 f981 	bl	8000be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	2208      	movs	r2, #8
 80008ea:	4619      	mov	r1, r3
 80008ec:	4807      	ldr	r0, [pc, #28]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008ee:	f003 fd07 	bl	8004300 <HAL_TIM_PWM_ConfigChannel>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008f8:	f000 f976 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008fc:	4803      	ldr	r0, [pc, #12]	@ (800090c <MX_TIM2_Init+0xc4>)
 80008fe:	f000 fafb 	bl	8000ef8 <HAL_TIM_MspPostInit>

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	@ 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	2000013c 	.word	0x2000013c
 8000910:	000c34ff 	.word	0x000c34ff

08000914 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b088      	sub	sp, #32
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000932:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000934:	4a27      	ldr	r2, [pc, #156]	@ (80009d4 <MX_TIM3_Init+0xc0>)
 8000936:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000938:	4b25      	ldr	r3, [pc, #148]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800093a:	2200      	movs	r2, #0
 800093c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000946:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800094a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094c:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000958:	481d      	ldr	r0, [pc, #116]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800095a:	f003 fa36 	bl	8003dca <HAL_TIM_IC_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000964:	f000 f940 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4816      	ldr	r0, [pc, #88]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 8000978:	f004 fa9c 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000982:	f000 f931 	bl	8000be8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800098a:	2301      	movs	r3, #1
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	4619      	mov	r1, r3
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 800099e:	f003 fc13 	bl	80041c8 <HAL_TIM_IC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80009a8:	f000 f91e 	bl	8000be8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80009ac:	2302      	movs	r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2204      	movs	r2, #4
 80009b4:	4619      	mov	r1, r3
 80009b6:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <MX_TIM3_Init+0xbc>)
 80009b8:	f003 fc06 	bl	80041c8 <HAL_TIM_IC_ConfigChannel>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009c2:	f000 f911 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3720      	adds	r7, #32
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000188 	.word	0x20000188
 80009d4:	40000400 	.word	0x40000400

080009d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	@ 0x30
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2224      	movs	r2, #36	@ 0x24
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f005 f825 	bl	8005a36 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009f6:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 80009f8:	4a21      	ldr	r2, [pc, #132]	@ (8000a80 <MX_TIM4_Init+0xa8>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a24:	2301      	movs	r3, #1
 8000a26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a34:	2301      	movs	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4619      	mov	r1, r3
 8000a46:	480d      	ldr	r0, [pc, #52]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a48:	f003 fa16 	bl	8003e78 <HAL_TIM_Encoder_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000a52:	f000 f8c9 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a5e:	463b      	mov	r3, r7
 8000a60:	4619      	mov	r1, r3
 8000a62:	4806      	ldr	r0, [pc, #24]	@ (8000a7c <MX_TIM4_Init+0xa4>)
 8000a64:	f004 fa26 	bl	8004eb4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000a6e:	f000 f8bb 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	3730      	adds	r7, #48	@ 0x30
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200001d4 	.word	0x200001d4
 8000a80:	40000800 	.word	0x40000800

08000a84 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a8a:	4a15      	ldr	r2, [pc, #84]	@ (8000ae0 <MX_UART4_Init+0x5c>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a8e:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a94:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_UART4_Init+0x58>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_UART4_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_UART4_Init+0x58>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_UART4_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_UART4_Init+0x58>)
 8000ac8:	f004 fa9a 	bl	8005000 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000ad2:	f000 f889 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000220 	.word	0x20000220
 8000ae0:	40004c00 	.word	0x40004c00

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08a      	sub	sp, #40	@ 0x28
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
 8000af8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	4b38      	ldr	r3, [pc, #224]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afe:	4a37      	ldr	r2, [pc, #220]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b06:	4b35      	ldr	r3, [pc, #212]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b12:	4b32      	ldr	r3, [pc, #200]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	4a31      	ldr	r2, [pc, #196]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b18:	f043 0304 	orr.w	r3, r3, #4
 8000b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	f003 0304 	and.w	r3, r3, #4
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b36:	4b29      	ldr	r3, [pc, #164]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b26      	ldr	r3, [pc, #152]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	4a25      	ldr	r2, [pc, #148]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b4e:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <MX_GPIO_Init+0xf8>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN1_Pin|STBY_Pin, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 6190 	mov.w	r1, #1152	@ 0x480
 8000b60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b64:	f001 fda2 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|BIN1_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2130      	movs	r1, #48	@ 0x30
 8000b6c:	481c      	ldr	r0, [pc, #112]	@ (8000be0 <MX_GPIO_Init+0xfc>)
 8000b6e:	f001 fd9d 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2101      	movs	r1, #1
 8000b76:	481b      	ldr	r0, [pc, #108]	@ (8000be4 <MX_GPIO_Init+0x100>)
 8000b78:	f001 fd98 	bl	80026ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : AIN1_Pin STBY_Pin */
  GPIO_InitStruct.Pin = AIN1_Pin|STBY_Pin;
 8000b7c:	f44f 6390 	mov.w	r3, #1152	@ 0x480
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b98:	f001 fbde 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin BIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|BIN1_Pin;
 8000b9c:	2330      	movs	r3, #48	@ 0x30
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	480b      	ldr	r0, [pc, #44]	@ (8000be0 <MX_GPIO_Init+0xfc>)
 8000bb4:	f001 fbd0 	bl	8002358 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4805      	ldr	r0, [pc, #20]	@ (8000be4 <MX_GPIO_Init+0x100>)
 8000bd0:	f001 fbc2 	bl	8002358 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd4:	bf00      	nop
 8000bd6:	3728      	adds	r7, #40	@ 0x28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	48000800 	.word	0x48000800
 8000be4:	48000400 	.word	0x48000400

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <Error_Handler+0x8>

08000bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c16:	4a08      	ldr	r2, [pc, #32]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_MspInit+0x44>)
 8000c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	603b      	str	r3, [r7, #0]
 8000c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a33      	ldr	r2, [pc, #204]	@ (8000d28 <HAL_ADC_MspInit+0xec>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d12d      	bne.n	8000cba <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000c5e:	4b33      	ldr	r3, [pc, #204]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3301      	adds	r3, #1
 8000c64:	4a31      	ldr	r2, [pc, #196]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000c68:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d10b      	bne.n	8000c88 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000c70:	4b2f      	ldr	r3, [pc, #188]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c74:	4a2e      	ldr	r2, [pc, #184]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000c76:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8c:	4a28      	ldr	r2, [pc, #160]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c94:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c98:	f003 0304 	and.w	r3, r3, #4
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = HMYO_Pin;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ca4:	230b      	movs	r3, #11
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HMYO_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4820      	ldr	r0, [pc, #128]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000cb4:	f001 fb50 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cb8:	e031      	b.n	8000d1e <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d38 <HAL_ADC_MspInit+0xfc>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d12c      	bne.n	8000d1e <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	4a18      	ldr	r2, [pc, #96]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000ccc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <HAL_ADC_MspInit+0xf0>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d10b      	bne.n	8000cee <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cda:	4a15      	ldr	r2, [pc, #84]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000cdc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_ADC_MspInit+0xf4>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SMYO_Pin;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d0a:	230b      	movs	r3, #11
 8000d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SMYO_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <HAL_ADC_MspInit+0xf8>)
 8000d1a:	f001 fb1d 	bl	8002358 <HAL_GPIO_Init>
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	@ 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	50040000 	.word	0x50040000
 8000d2c:	200002a8 	.word	0x200002a8
 8000d30:	40021000 	.word	0x40021000
 8000d34:	48000800 	.word	0x48000800
 8000d38:	50040100 	.word	0x50040100

08000d3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	@ 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a2f      	ldr	r2, [pc, #188]	@ (8000e18 <HAL_TIM_Encoder_MspInit+0xdc>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d12a      	bne.n	8000db4 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d62:	4a2e      	ldr	r2, [pc, #184]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d64:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d68:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000d72:	61bb      	str	r3, [r7, #24]
 8000d74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	4b29      	ldr	r3, [pc, #164]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7a:	4a28      	ldr	r2, [pc, #160]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d82:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
 8000d8c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = HAND_ENC_A_Pin|HAND_ENC_B_Pin;
 8000d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f001 fad3 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000db2:	e02c      	b.n	8000e0e <HAL_TIM_Encoder_MspInit+0xd2>
  else if(htim_encoder->Instance==TIM4)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a19      	ldr	r2, [pc, #100]	@ (8000e20 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d127      	bne.n	8000e0e <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dbe:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc2:	4a16      	ldr	r2, [pc, #88]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dca:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b11      	ldr	r3, [pc, #68]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	4a10      	ldr	r2, [pc, #64]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000ddc:	f043 0302 	orr.w	r3, r3, #2
 8000de0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de2:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_TIM_Encoder_MspInit+0xe0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	f003 0302 	and.w	r3, r3, #2
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_ENC_A_Pin|MOTOR_ENC_B_Pin;
 8000dee:	23c0      	movs	r3, #192	@ 0xc0
 8000df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	4619      	mov	r1, r3
 8000e08:	4806      	ldr	r0, [pc, #24]	@ (8000e24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e0a:	f001 faa5 	bl	8002358 <HAL_GPIO_Init>
}
 8000e0e:	bf00      	nop
 8000e10:	3730      	adds	r7, #48	@ 0x30
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40000800 	.word	0x40000800
 8000e24:	48000400 	.word	0x48000400

08000e28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e38:	d10b      	bne.n	8000e52 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_TIM_PWM_MspInit+0x38>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_TIM_PWM_MspInit+0x38>)
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_TIM_PWM_MspInit+0x38>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <HAL_TIM_IC_MspInit+0x8c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d130      	bne.n	8000ee8 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <HAL_TIM_IC_MspInit+0x90>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ef4 <HAL_TIM_IC_MspInit+0x90>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <HAL_TIM_IC_MspInit+0x90>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <HAL_TIM_IC_MspInit+0x90>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea2:	4a14      	ldr	r2, [pc, #80]	@ (8000ef4 <HAL_TIM_IC_MspInit+0x90>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_TIM_IC_MspInit+0x90>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = RADIO_Pin;
 8000eb6:	2340      	movs	r3, #64	@ 0x40
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RADIO_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed4:	f001 fa40 	bl	8002358 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	201d      	movs	r0, #29
 8000ede:	f001 fa04 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ee2:	201d      	movs	r0, #29
 8000ee4:	f001 fa1d 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	@ 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40000400 	.word	0x40000400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f18:	d11c      	bne.n	8000f54 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <HAL_TIM_MspPostInit+0x64>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f5c <HAL_TIM_MspPostInit+0x64>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <HAL_TIM_MspPostInit+0x64>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000f32:	2324      	movs	r3, #36	@ 0x24
 8000f34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f42:	2301      	movs	r3, #1
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f50:	f001 fa02 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f54:	bf00      	nop
 8000f56:	3720      	adds	r7, #32
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40021000 	.word	0x40021000

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0ac      	sub	sp, #176	@ 0xb0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2288      	movs	r2, #136	@ 0x88
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f004 fd58 	bl	8005a36 <memset>
  if(huart->Instance==UART4)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a21      	ldr	r2, [pc, #132]	@ (8001010 <HAL_UART_MspInit+0xb0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13b      	bne.n	8001008 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000f90:	2308      	movs	r3, #8
 8000f92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000f94:	2300      	movs	r3, #0
 8000f96:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f002 fa01 	bl	80033a4 <HAL_RCCEx_PeriphCLKConfig>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fa8:	f7ff fe1e 	bl	8000be8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000fac:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fb0:	4a18      	ldr	r2, [pc, #96]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fb2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fbc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000fc0:	613b      	str	r3, [r7, #16]
 8000fc2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc8:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <HAL_UART_MspInit+0xb4>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ff4:	2308      	movs	r3, #8
 8000ff6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f001 f9a8 	bl	8002358 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	37b0      	adds	r7, #176	@ 0xb0
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40004c00 	.word	0x40004c00
 8001014:	40021000 	.word	0x40021000

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <NMI_Handler+0x4>

08001020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <MemManage_Handler+0x4>

08001030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <UsageFault_Handler+0x4>

08001040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106e:	f000 f89d 	bl	80011ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <TIM3_IRQHandler+0x10>)
 800107e:	f002 ffa1 	bl	8003fc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000188 	.word	0x20000188

0800108c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <SystemInit+0x20>)
 8001092:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001096:	4a05      	ldr	r2, [pc, #20]	@ (80010ac <SystemInit+0x20>)
 8001098:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800109c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff ffea 	bl	800108c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	@ (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	@ (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	@ (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	@ (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f004 fcb3 	bl	8005a48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff f9e9 	bl	80004b8 <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010f4:	08005b00 	.word	0x08005b00
  ldr r2, =_sbss
 80010f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010fc:	200002b0 	.word	0x200002b0

08001100 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_2_IRQHandler>

08001102 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	2300      	movs	r3, #0
 800110a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f001 f8e1 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001112:	200f      	movs	r0, #15
 8001114:	f000 f80e 	bl	8001134 <HAL_InitTick>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d002      	beq.n	8001124 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	e001      	b.n	8001128 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001124:	f7ff fd66 	bl	8000bf4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001128:	79fb      	ldrb	r3, [r7, #7]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <HAL_InitTick+0x6c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d023      	beq.n	8001190 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <HAL_InitTick+0x70>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b14      	ldr	r3, [pc, #80]	@ (80011a0 <HAL_InitTick+0x6c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f001 f8ed 	bl	800233e <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10f      	bne.n	800118a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d809      	bhi.n	8001184 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f001 f8b7 	bl	80022ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800117c:	4a0a      	ldr	r2, [pc, #40]	@ (80011a8 <HAL_InitTick+0x74>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e007      	b.n	8001194 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e004      	b.n	8001194 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e001      	b.n	8001194 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000000 	.word	0x20000000
 80011a8:	20000004 	.word	0x20000004

080011ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x20>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_IncTick+0x24>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_IncTick+0x24>)
 80011be:	6013      	str	r3, [r2, #0]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	20000008 	.word	0x20000008
 80011d0:	200002ac 	.word	0x200002ac

080011d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  return uwTick;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <HAL_GetTick+0x14>)
 80011da:	681b      	ldr	r3, [r3, #0]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	200002ac 	.word	0x200002ac

080011ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	609a      	str	r2, [r3, #8]
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	609a      	str	r2, [r3, #8]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	3360      	adds	r3, #96	@ 0x60
 8001266:	461a      	mov	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	4413      	add	r3, r2
 800126e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <LL_ADC_SetOffset+0x44>)
 8001276:	4013      	ands	r3, r2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800127e:	683a      	ldr	r2, [r7, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	4313      	orrs	r3, r2
 8001284:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	03fff000 	.word	0x03fff000

0800129c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3360      	adds	r3, #96	@ 0x60
 80012aa:	461a      	mov	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b087      	sub	sp, #28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	3360      	adds	r3, #96	@ 0x60
 80012d8:	461a      	mov	r2, r3
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012fe:	b480      	push	{r7}
 8001300:	b087      	sub	sp, #28
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	3330      	adds	r3, #48	@ 0x30
 800130e:	461a      	mov	r2, r3
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	f003 030c 	and.w	r3, r3, #12
 800131a:	4413      	add	r3, r2
 800131c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	211f      	movs	r1, #31
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	401a      	ands	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	0e9b      	lsrs	r3, r3, #26
 8001336:	f003 011f 	and.w	r1, r3, #31
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	431a      	orrs	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001356:	b480      	push	{r7}
 8001358:	b087      	sub	sp, #28
 800135a:	af00      	add	r7, sp, #0
 800135c:	60f8      	str	r0, [r7, #12]
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	3314      	adds	r3, #20
 8001366:	461a      	mov	r2, r3
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	0e5b      	lsrs	r3, r3, #25
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	4413      	add	r3, r2
 8001374:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	0d1b      	lsrs	r3, r3, #20
 800137e:	f003 031f 	and.w	r3, r3, #31
 8001382:	2107      	movs	r1, #7
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	0d1b      	lsrs	r3, r3, #20
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	431a      	orrs	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013c4:	43db      	mvns	r3, r3
 80013c6:	401a      	ands	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f003 0318 	and.w	r3, r3, #24
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013d0:	40d9      	lsrs	r1, r3
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	400b      	ands	r3, r1
 80013d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013da:	431a      	orrs	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013e2:	bf00      	nop
 80013e4:	3714      	adds	r7, #20
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	0007ffff 	.word	0x0007ffff

080013f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001404:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6093      	str	r3, [r2, #8]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001428:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800142c:	d101      	bne.n	8001432 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001450:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001454:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800147c:	d101      	bne.n	8001482 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800147e:	2301      	movs	r3, #1
 8001480:	e000      	b.n	8001484 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d101      	bne.n	80014a8 <LL_ADC_IsEnabled+0x18>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e000      	b.n	80014aa <LL_ADC_IsEnabled+0x1a>
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b083      	sub	sp, #12
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 0304 	and.w	r3, r3, #4
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	d101      	bne.n	80014ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80014ca:	2301      	movs	r3, #1
 80014cc:	e000      	b.n	80014d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014ce:	2300      	movs	r3, #0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d101      	bne.n	80014f4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80014f0:	2301      	movs	r3, #1
 80014f2:	e000      	b.n	80014f6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b089      	sub	sp, #36	@ 0x24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800150c:	2300      	movs	r3, #0
 800150e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e130      	b.n	8001780 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001528:	2b00      	cmp	r3, #0
 800152a:	d109      	bne.n	8001540 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff fb85 	bl	8000c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff67 	bl	8001418 <LL_ADC_IsDeepPowerDownEnabled>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff4d 	bl	80013f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff82 	bl	8001468 <LL_ADC_IsInternalRegulatorEnabled>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d115      	bne.n	8001596 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff ff66 	bl	8001440 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001574:	4b84      	ldr	r3, [pc, #528]	@ (8001788 <HAL_ADC_Init+0x284>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	099b      	lsrs	r3, r3, #6
 800157a:	4a84      	ldr	r2, [pc, #528]	@ (800178c <HAL_ADC_Init+0x288>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	3301      	adds	r3, #1
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001588:	e002      	b.n	8001590 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3b01      	subs	r3, #1
 800158e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f9      	bne.n	800158a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff64 	bl	8001468 <LL_ADC_IsInternalRegulatorEnabled>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10d      	bne.n	80015c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	f043 0201 	orr.w	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff ff75 	bl	80014b6 <LL_ADC_REG_IsConversionOngoing>
 80015cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f040 80c9 	bne.w	800176e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f040 80c5 	bne.w	800176e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015e8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015ec:	f043 0202 	orr.w	r2, r3, #2
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff49 	bl	8001490 <LL_ADC_IsEnabled>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d115      	bne.n	8001630 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001604:	4862      	ldr	r0, [pc, #392]	@ (8001790 <HAL_ADC_Init+0x28c>)
 8001606:	f7ff ff43 	bl	8001490 <LL_ADC_IsEnabled>
 800160a:	4604      	mov	r4, r0
 800160c:	4861      	ldr	r0, [pc, #388]	@ (8001794 <HAL_ADC_Init+0x290>)
 800160e:	f7ff ff3f 	bl	8001490 <LL_ADC_IsEnabled>
 8001612:	4603      	mov	r3, r0
 8001614:	431c      	orrs	r4, r3
 8001616:	4860      	ldr	r0, [pc, #384]	@ (8001798 <HAL_ADC_Init+0x294>)
 8001618:	f7ff ff3a 	bl	8001490 <LL_ADC_IsEnabled>
 800161c:	4603      	mov	r3, r0
 800161e:	4323      	orrs	r3, r4
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4619      	mov	r1, r3
 800162a:	485c      	ldr	r0, [pc, #368]	@ (800179c <HAL_ADC_Init+0x298>)
 800162c:	f7ff fdde 	bl	80011ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e5b      	ldrb	r3, [r3, #25]
 8001634:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001640:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001646:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001662:	3b01      	subs	r3, #1
 8001664:	045b      	lsls	r3, r3, #17
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001678:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b44      	ldr	r3, [pc, #272]	@ (80017a0 <HAL_ADC_Init+0x29c>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	430b      	orrs	r3, r1
 800169a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff1b 	bl	80014dc <LL_ADC_INJ_IsConversionOngoing>
 80016a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13d      	bne.n	800172a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13a      	bne.n	800172a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80016d0:	f023 0302 	bic.w	r3, r3, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	430b      	orrs	r3, r1
 80016dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d118      	bne.n	800171a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016fe:	4311      	orrs	r1, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800170a:	430a      	orrs	r2, r1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	e007      	b.n	800172a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10c      	bne.n	800174c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f023 010f 	bic.w	r1, r3, #15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	@ 0x30
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020f 	bic.w	r2, r2, #15
 800175a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	@ 0x54
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800177e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3724      	adds	r7, #36	@ 0x24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	053e2d63 	.word	0x053e2d63
 8001790:	50040000 	.word	0x50040000
 8001794:	50040100 	.word	0x50040100
 8001798:	50040200 	.word	0x50040200
 800179c:	50040300 	.word	0x50040300
 80017a0:	fff0c007 	.word	0xfff0c007

080017a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0b6      	sub	sp, #216	@ 0xd8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d101      	bne.n	80017c6 <HAL_ADC_ConfigChannel+0x22>
 80017c2:	2302      	movs	r3, #2
 80017c4:	e3c9      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x7b6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2201      	movs	r2, #1
 80017ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fe6f 	bl	80014b6 <LL_ADC_REG_IsConversionOngoing>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	f040 83aa 	bne.w	8001f34 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d824      	bhi.n	800183a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	3b02      	subs	r3, #2
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d81b      	bhi.n	8001832 <HAL_ADC_ConfigChannel+0x8e>
 80017fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001800 <HAL_ADC_ConfigChannel+0x5c>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	08001819 	.word	0x08001819
 8001808:	08001821 	.word	0x08001821
 800180c:	08001829 	.word	0x08001829
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001810:	230c      	movs	r3, #12
 8001812:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001816:	e010      	b.n	800183a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001818:	2312      	movs	r3, #18
 800181a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800181e:	e00c      	b.n	800183a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001820:	2318      	movs	r3, #24
 8001822:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001826:	e008      	b.n	800183a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001828:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800182c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001830:	e003      	b.n	800183a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001832:	2306      	movs	r3, #6
 8001834:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001838:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001848:	f7ff fd59 	bl	80012fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe30 	bl	80014b6 <LL_ADC_REG_IsConversionOngoing>
 8001856:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fe3c 	bl	80014dc <LL_ADC_INJ_IsConversionOngoing>
 8001864:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001868:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800186c:	2b00      	cmp	r3, #0
 800186e:	f040 81a4 	bne.w	8001bba <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001876:	2b00      	cmp	r3, #0
 8001878:	f040 819f 	bne.w	8001bba <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	6819      	ldr	r1, [r3, #0]
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	461a      	mov	r2, r3
 800188a:	f7ff fd64 	bl	8001356 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	695a      	ldr	r2, [r3, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	08db      	lsrs	r3, r3, #3
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691b      	ldr	r3, [r3, #16]
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d00a      	beq.n	80018c6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	6919      	ldr	r1, [r3, #16]
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80018c0:	f7ff fcc8 	bl	8001254 <LL_ADC_SetOffset>
 80018c4:	e179      	b.n	8001bba <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fce5 	bl	800129c <LL_ADC_GetOffsetChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d10a      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x14e>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2100      	movs	r1, #0
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fcda 	bl	800129c <LL_ADC_GetOffsetChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	0e9b      	lsrs	r3, r3, #26
 80018ec:	f003 021f 	and.w	r2, r3, #31
 80018f0:	e01e      	b.n	8001930 <HAL_ADC_ConfigChannel+0x18c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fccf 	bl	800129c <LL_ADC_GetOffsetChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001904:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001908:	fa93 f3a3 	rbit	r3, r3
 800190c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001910:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001914:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001918:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001920:	2320      	movs	r3, #32
 8001922:	e004      	b.n	800192e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001924:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	b2db      	uxtb	r3, r3
 800192e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x1a4>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	e018      	b.n	800197a <HAL_ADC_ConfigChannel+0x1d6>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001954:	fa93 f3a3 	rbit	r3, r3
 8001958:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800195c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001960:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001964:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800196c:	2320      	movs	r3, #32
 800196e:	e004      	b.n	800197a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001970:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800197a:	429a      	cmp	r2, r3
 800197c:	d106      	bne.n	800198c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fc9e 	bl	80012c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc82 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10a      	bne.n	80019b8 <HAL_ADC_ConfigChannel+0x214>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	2101      	movs	r1, #1
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fc77 	bl	800129c <LL_ADC_GetOffsetChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 021f 	and.w	r2, r3, #31
 80019b6:	e01e      	b.n	80019f6 <HAL_ADC_ConfigChannel+0x252>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fc6c 	bl	800129c <LL_ADC_GetOffsetChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80019ce:	fa93 f3a3 	rbit	r3, r3
 80019d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80019d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80019de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80019e6:	2320      	movs	r3, #32
 80019e8:	e004      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80019ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d105      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x26a>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	0e9b      	lsrs	r3, r3, #26
 8001a08:	f003 031f 	and.w	r3, r3, #31
 8001a0c:	e018      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x29c>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a16:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001a1a:	fa93 f3a3 	rbit	r3, r3
 8001a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a26:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001a2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a32:	2320      	movs	r3, #32
 8001a34:	e004      	b.n	8001a40 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a36:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d106      	bne.n	8001a52 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2101      	movs	r1, #1
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fc3b 	bl	80012c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2102      	movs	r1, #2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fc1f 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10a      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x2da>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fc14 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	0e9b      	lsrs	r3, r3, #26
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	e01e      	b.n	8001abc <HAL_ADC_ConfigChannel+0x318>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2102      	movs	r1, #2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fc09 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001aa0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e004      	b.n	8001aba <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x330>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	0e9b      	lsrs	r3, r3, #26
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	e014      	b.n	8001afe <HAL_ADC_ConfigChannel+0x35a>
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ada:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001adc:	fa93 f3a3 	rbit	r3, r3
 8001ae0:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001ae2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ae4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001af0:	2320      	movs	r3, #32
 8001af2:	e004      	b.n	8001afe <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001af4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d106      	bne.n	8001b10 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	2102      	movs	r1, #2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fbdc 	bl	80012c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2103      	movs	r1, #3
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff fbc0 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <HAL_ADC_ConfigChannel+0x398>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2103      	movs	r1, #3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fbb5 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	0e9b      	lsrs	r3, r3, #26
 8001b36:	f003 021f 	and.w	r2, r3, #31
 8001b3a:	e017      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x3c8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2103      	movs	r1, #3
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fbaa 	bl	800129c <LL_ADC_GetOffsetChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b4e:	fa93 f3a3 	rbit	r3, r3
 8001b52:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b56:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001b58:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001b5e:	2320      	movs	r3, #32
 8001b60:	e003      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x3e0>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	e011      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x404>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b8c:	fa93 f3a3 	rbit	r3, r3
 8001b90:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b94:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e003      	b.n	8001ba8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ba0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001ba2:	fab3 f383 	clz	r3, r3
 8001ba6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d106      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2103      	movs	r1, #3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fb87 	bl	80012c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fc66 	bl	8001490 <LL_ADC_IsEnabled>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 8140 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6819      	ldr	r1, [r3, #0]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	f7ff fbe7 	bl	80013ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	4a8f      	ldr	r2, [pc, #572]	@ (8001e20 <HAL_ADC_ConfigChannel+0x67c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	f040 8131 	bne.w	8001e4c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10b      	bne.n	8001c12 <HAL_ADC_ConfigChannel+0x46e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	0e9b      	lsrs	r3, r3, #26
 8001c00:	3301      	adds	r3, #1
 8001c02:	f003 031f 	and.w	r3, r3, #31
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	bf94      	ite	ls
 8001c0a:	2301      	movls	r3, #1
 8001c0c:	2300      	movhi	r3, #0
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	e019      	b.n	8001c46 <HAL_ADC_ConfigChannel+0x4a2>
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	e003      	b.n	8001c36 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c30:	fab3 f383 	clz	r3, r3
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	3301      	adds	r3, #1
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	bf94      	ite	ls
 8001c40:	2301      	movls	r3, #1
 8001c42:	2300      	movhi	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d079      	beq.n	8001d3e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d107      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x4c2>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	0e9b      	lsrs	r3, r3, #26
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	069b      	lsls	r3, r3, #26
 8001c60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c64:	e015      	b.n	8001c92 <HAL_ADC_ConfigChannel+0x4ee>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c6e:	fa93 f3a3 	rbit	r3, r3
 8001c72:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c76:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001c7e:	2320      	movs	r3, #32
 8001c80:	e003      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001c82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	069b      	lsls	r3, r3, #26
 8001c8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d109      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x50e>
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	0e9b      	lsrs	r3, r3, #26
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	2101      	movs	r1, #1
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	e017      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x53e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e003      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001cce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	ea42 0103 	orr.w	r1, r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10a      	bne.n	8001d08 <HAL_ADC_ConfigChannel+0x564>
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	0e9b      	lsrs	r3, r3, #26
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f003 021f 	and.w	r2, r3, #31
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	e018      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x596>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d10:	fa93 f3a3 	rbit	r3, r3
 8001d14:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d18:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	e003      	b.n	8001d2c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f003 021f 	and.w	r2, r3, #31
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d3a:	430b      	orrs	r3, r1
 8001d3c:	e081      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d107      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x5b6>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	3301      	adds	r3, #1
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d58:	e015      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x5e2>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d62:	fa93 f3a3 	rbit	r3, r3
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001d72:	2320      	movs	r3, #32
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d78:	fab3 f383 	clz	r3, r3
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	3301      	adds	r3, #1
 8001d80:	069b      	lsls	r3, r3, #26
 8001d82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_ADC_ConfigChannel+0x602>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	e017      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x632>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	61bb      	str	r3, [r7, #24]
  return result;
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001dbe:	2320      	movs	r3, #32
 8001dc0:	e003      	b.n	8001dca <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	fab3 f383 	clz	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	ea42 0103 	orr.w	r1, r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10d      	bne.n	8001e02 <HAL_ADC_ConfigChannel+0x65e>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	3301      	adds	r3, #1
 8001dee:	f003 021f 	and.w	r2, r3, #31
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	3b1e      	subs	r3, #30
 8001dfa:	051b      	lsls	r3, r3, #20
 8001dfc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e00:	e01e      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x69c>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	fa93 f3a3 	rbit	r3, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
  return result;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d104      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	e006      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x688>
 8001e1e:	bf00      	nop
 8001e20:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fab3 f383 	clz	r3, r3
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f003 021f 	and.w	r2, r3, #31
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	3b1e      	subs	r3, #30
 8001e3a:	051b      	lsls	r3, r3, #20
 8001e3c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7ff fa85 	bl	8001356 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b44      	ldr	r3, [pc, #272]	@ (8001f64 <HAL_ADC_ConfigChannel+0x7c0>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d07a      	beq.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e58:	4843      	ldr	r0, [pc, #268]	@ (8001f68 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e5a:	f7ff f9ed 	bl	8001238 <LL_ADC_GetCommonPathInternalCh>
 8001e5e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a41      	ldr	r2, [pc, #260]	@ (8001f6c <HAL_ADC_ConfigChannel+0x7c8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d12c      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d126      	bne.n	8001ec6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8001f70 <HAL_ADC_ConfigChannel+0x7cc>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d004      	beq.n	8001e8c <HAL_ADC_ConfigChannel+0x6e8>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a3b      	ldr	r2, [pc, #236]	@ (8001f74 <HAL_ADC_ConfigChannel+0x7d0>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d15d      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001e90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e94:	4619      	mov	r1, r3
 8001e96:	4834      	ldr	r0, [pc, #208]	@ (8001f68 <HAL_ADC_ConfigChannel+0x7c4>)
 8001e98:	f7ff f9bb 	bl	8001212 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e9c:	4b36      	ldr	r3, [pc, #216]	@ (8001f78 <HAL_ADC_ConfigChannel+0x7d4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	4a36      	ldr	r2, [pc, #216]	@ (8001f7c <HAL_ADC_ConfigChannel+0x7d8>)
 8001ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea8:	099b      	lsrs	r3, r3, #6
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001eb6:	e002      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f9      	bne.n	8001eb8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ec4:	e040      	b.n	8001f48 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a2d      	ldr	r2, [pc, #180]	@ (8001f80 <HAL_ADC_ConfigChannel+0x7dc>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d118      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ed0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ed4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d112      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x74c>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a22      	ldr	r2, [pc, #136]	@ (8001f74 <HAL_ADC_ConfigChannel+0x7d0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d12d      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001ef4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481b      	ldr	r0, [pc, #108]	@ (8001f68 <HAL_ADC_ConfigChannel+0x7c4>)
 8001efc:	f7ff f989 	bl	8001212 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f00:	e024      	b.n	8001f4c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a1f      	ldr	r2, [pc, #124]	@ (8001f84 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d120      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d11a      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d115      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f26:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480e      	ldr	r0, [pc, #56]	@ (8001f68 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f2e:	f7ff f970 	bl	8001212 <LL_ADC_SetCommonPathInternalCh>
 8001f32:	e00c      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f38:	f043 0220 	orr.w	r2, r3, #32
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f46:	e002      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f48:	bf00      	nop
 8001f4a:	e000      	b.n	8001f4e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f4c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001f56:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	37d8      	adds	r7, #216	@ 0xd8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	80080000 	.word	0x80080000
 8001f68:	50040300 	.word	0x50040300
 8001f6c:	c7520000 	.word	0xc7520000
 8001f70:	50040000 	.word	0x50040000
 8001f74:	50040200 	.word	0x50040200
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	053e2d63 	.word	0x053e2d63
 8001f80:	cb840000 	.word	0xcb840000
 8001f84:	80000001 	.word	0x80000001

08001f88 <LL_ADC_IsEnabled>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <LL_ADC_IsEnabled+0x18>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <LL_ADC_IsEnabled+0x1a>
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <LL_ADC_REG_IsConversionOngoing>:
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b04      	cmp	r3, #4
 8001fc0:	d101      	bne.n	8001fc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001fd4:	b590      	push	{r4, r7, lr}
 8001fd6:	b09f      	sub	sp, #124	@ 0x7c
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e093      	b.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001ffe:	2300      	movs	r3, #0
 8002000:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a47      	ldr	r2, [pc, #284]	@ (8002124 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d102      	bne.n	8002012 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800200c:	4b46      	ldr	r3, [pc, #280]	@ (8002128 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	e001      	b.n	8002016 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002012:	2300      	movs	r3, #0
 8002014:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002020:	f043 0220 	orr.w	r2, r3, #32
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e072      	b.n	800211a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ffb9 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 800203c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffb3 	bl	8001fae <LL_ADC_REG_IsConversionOngoing>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d154      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800204e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002050:	2b00      	cmp	r3, #0
 8002052:	d151      	bne.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002054:	4b35      	ldr	r3, [pc, #212]	@ (800212c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002056:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d02c      	beq.n	80020ba <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002072:	035b      	lsls	r3, r3, #13
 8002074:	430b      	orrs	r3, r1
 8002076:	431a      	orrs	r2, r3
 8002078:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800207a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800207c:	4829      	ldr	r0, [pc, #164]	@ (8002124 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800207e:	f7ff ff83 	bl	8001f88 <LL_ADC_IsEnabled>
 8002082:	4604      	mov	r4, r0
 8002084:	4828      	ldr	r0, [pc, #160]	@ (8002128 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002086:	f7ff ff7f 	bl	8001f88 <LL_ADC_IsEnabled>
 800208a:	4603      	mov	r3, r0
 800208c:	431c      	orrs	r4, r3
 800208e:	4828      	ldr	r0, [pc, #160]	@ (8002130 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002090:	f7ff ff7a 	bl	8001f88 <LL_ADC_IsEnabled>
 8002094:	4603      	mov	r3, r0
 8002096:	4323      	orrs	r3, r4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d137      	bne.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800209c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80020a4:	f023 030f 	bic.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	6811      	ldr	r1, [r2, #0]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	6892      	ldr	r2, [r2, #8]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	431a      	orrs	r2, r3
 80020b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020b6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020b8:	e028      	b.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80020ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020c6:	4817      	ldr	r0, [pc, #92]	@ (8002124 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80020c8:	f7ff ff5e 	bl	8001f88 <LL_ADC_IsEnabled>
 80020cc:	4604      	mov	r4, r0
 80020ce:	4816      	ldr	r0, [pc, #88]	@ (8002128 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80020d0:	f7ff ff5a 	bl	8001f88 <LL_ADC_IsEnabled>
 80020d4:	4603      	mov	r3, r0
 80020d6:	431c      	orrs	r4, r3
 80020d8:	4815      	ldr	r0, [pc, #84]	@ (8002130 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80020da:	f7ff ff55 	bl	8001f88 <LL_ADC_IsEnabled>
 80020de:	4603      	mov	r3, r0
 80020e0:	4323      	orrs	r3, r4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d112      	bne.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80020ee:	f023 030f 	bic.w	r3, r3, #15
 80020f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80020f4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020f6:	e009      	b.n	800210c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800210a:	e000      	b.n	800210e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800210c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002116:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800211a:	4618      	mov	r0, r3
 800211c:	377c      	adds	r7, #124	@ 0x7c
 800211e:	46bd      	mov	sp, r7
 8002120:	bd90      	pop	{r4, r7, pc}
 8002122:	bf00      	nop
 8002124:	50040000 	.word	0x50040000
 8002128:	50040100 	.word	0x50040100
 800212c:	50040300 	.word	0x50040300
 8002130:	50040200 	.word	0x50040200

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff29 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff3e 	bl	800217c <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff31 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffa2 	bl	8002290 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
	...

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	b480      	push	{r7}
 800235a:	b087      	sub	sp, #28
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002366:	e17f      	b.n	8002668 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	4013      	ands	r3, r2
 8002376:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8171 	beq.w	8002662 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b01      	cmp	r3, #1
 800238a:	d005      	beq.n	8002398 <HAL_GPIO_Init+0x40>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d130      	bne.n	80023fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	2203      	movs	r2, #3
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	43db      	mvns	r3, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023ce:	2201      	movs	r2, #1
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	091b      	lsrs	r3, r3, #4
 80023e4:	f003 0201 	and.w	r2, r3, #1
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b03      	cmp	r3, #3
 8002404:	d118      	bne.n	8002438 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800240c:	2201      	movs	r2, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	f003 0201 	and.w	r2, r3, #1
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4313      	orrs	r3, r2
 8002430:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b03      	cmp	r3, #3
 8002442:	d017      	beq.n	8002474 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d123      	bne.n	80024c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	08da      	lsrs	r2, r3, #3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3208      	adds	r2, #8
 8002488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	220f      	movs	r2, #15
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	6939      	ldr	r1, [r7, #16]
 80024c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	2203      	movs	r2, #3
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0203 	and.w	r2, r3, #3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 80ac 	beq.w	8002662 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250a:	4b5f      	ldr	r3, [pc, #380]	@ (8002688 <HAL_GPIO_Init+0x330>)
 800250c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800250e:	4a5e      	ldr	r2, [pc, #376]	@ (8002688 <HAL_GPIO_Init+0x330>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6613      	str	r3, [r2, #96]	@ 0x60
 8002516:	4b5c      	ldr	r3, [pc, #368]	@ (8002688 <HAL_GPIO_Init+0x330>)
 8002518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002522:	4a5a      	ldr	r2, [pc, #360]	@ (800268c <HAL_GPIO_Init+0x334>)
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x242>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a4f      	ldr	r2, [pc, #316]	@ (8002690 <HAL_GPIO_Init+0x338>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x23e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4e      	ldr	r2, [pc, #312]	@ (8002694 <HAL_GPIO_Init+0x33c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x23a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4d      	ldr	r2, [pc, #308]	@ (8002698 <HAL_GPIO_Init+0x340>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x236>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4c      	ldr	r2, [pc, #304]	@ (800269c <HAL_GPIO_Init+0x344>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x232>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4b      	ldr	r2, [pc, #300]	@ (80026a0 <HAL_GPIO_Init+0x348>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x22e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4a      	ldr	r2, [pc, #296]	@ (80026a4 <HAL_GPIO_Init+0x34c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x22a>
 800257e:	2306      	movs	r3, #6
 8002580:	e00c      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002582:	2307      	movs	r3, #7
 8002584:	e00a      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002586:	2305      	movs	r3, #5
 8002588:	e008      	b.n	800259c <HAL_GPIO_Init+0x244>
 800258a:	2304      	movs	r3, #4
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x244>
 800258e:	2303      	movs	r3, #3
 8002590:	e004      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002592:	2302      	movs	r3, #2
 8002594:	e002      	b.n	800259c <HAL_GPIO_Init+0x244>
 8002596:	2301      	movs	r3, #1
 8002598:	e000      	b.n	800259c <HAL_GPIO_Init+0x244>
 800259a:	2300      	movs	r3, #0
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	f002 0203 	and.w	r2, r2, #3
 80025a2:	0092      	lsls	r2, r2, #2
 80025a4:	4093      	lsls	r3, r2
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ac:	4937      	ldr	r1, [pc, #220]	@ (800268c <HAL_GPIO_Init+0x334>)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	089b      	lsrs	r3, r3, #2
 80025b2:	3302      	adds	r3, #2
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025de:	4a32      	ldr	r2, [pc, #200]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80025e4:	4b30      	ldr	r3, [pc, #192]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	693a      	ldr	r2, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002608:	4a27      	ldr	r2, [pc, #156]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800260e:	4b26      	ldr	r3, [pc, #152]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43db      	mvns	r3, r3
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	4013      	ands	r3, r2
 800261c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002632:	4a1d      	ldr	r2, [pc, #116]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002638:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800265c:	4a12      	ldr	r2, [pc, #72]	@ (80026a8 <HAL_GPIO_Init+0x350>)
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	f47f ae78 	bne.w	8002368 <HAL_GPIO_Init+0x10>
  }
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000
 800268c:	40010000 	.word	0x40010000
 8002690:	48000400 	.word	0x48000400
 8002694:	48000800 	.word	0x48000800
 8002698:	48000c00 	.word	0x48000c00
 800269c:	48001000 	.word	0x48001000
 80026a0:	48001400 	.word	0x48001400
 80026a4:	48001800 	.word	0x48001800
 80026a8:	40010400 	.word	0x40010400

080026ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]
 80026b8:	4613      	mov	r3, r2
 80026ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026bc:	787b      	ldrb	r3, [r7, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c2:	887a      	ldrh	r2, [r7, #2]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c8:	e002      	b.n	80026d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ca:	887a      	ldrh	r2, [r7, #2]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026e0:	4b04      	ldr	r3, [pc, #16]	@ (80026f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002706:	d130      	bne.n	800276a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002708:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002714:	d038      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002716:	4b20      	ldr	r3, [pc, #128]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800271e:	4a1e      	ldr	r2, [pc, #120]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002720:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002724:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2232      	movs	r2, #50	@ 0x32
 800272c:	fb02 f303 	mul.w	r3, r2, r3
 8002730:	4a1b      	ldr	r2, [pc, #108]	@ (80027a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	3301      	adds	r3, #1
 800273a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800273c:	e002      	b.n	8002744 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3b01      	subs	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002750:	d102      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f2      	bne.n	800273e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002758:	4b0f      	ldr	r3, [pc, #60]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002764:	d110      	bne.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e00f      	b.n	800278a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002776:	d007      	beq.n	8002788 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002778:	4b07      	ldr	r3, [pc, #28]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002780:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002786:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40007000 	.word	0x40007000
 800279c:	20000000 	.word	0x20000000
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e3ca      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b6:	4b97      	ldr	r3, [pc, #604]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027c0:	4b94      	ldr	r3, [pc, #592]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f003 0303 	and.w	r3, r3, #3
 80027c8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80e4 	beq.w	80029a0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d007      	beq.n	80027ee <HAL_RCC_OscConfig+0x4a>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	f040 808b 	bne.w	80028fc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	f040 8087 	bne.w	80028fc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ee:	4b89      	ldr	r3, [pc, #548]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x62>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e3a2      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	4b82      	ldr	r3, [pc, #520]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d004      	beq.n	8002820 <HAL_RCC_OscConfig+0x7c>
 8002816:	4b7f      	ldr	r3, [pc, #508]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800281e:	e005      	b.n	800282c <HAL_RCC_OscConfig+0x88>
 8002820:	4b7c      	ldr	r3, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002822:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800282c:	4293      	cmp	r3, r2
 800282e:	d223      	bcs.n	8002878 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fd55 	bl	80032e4 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e383      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002844:	4b73      	ldr	r3, [pc, #460]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a72      	ldr	r2, [pc, #456]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b70      	ldr	r3, [pc, #448]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	496d      	ldr	r1, [pc, #436]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800285e:	4313      	orrs	r3, r2
 8002860:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002862:	4b6c      	ldr	r3, [pc, #432]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	4968      	ldr	r1, [pc, #416]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
 8002876:	e025      	b.n	80028c4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002878:	4b66      	ldr	r3, [pc, #408]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a65      	ldr	r2, [pc, #404]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b63      	ldr	r3, [pc, #396]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4960      	ldr	r1, [pc, #384]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	4b5f      	ldr	r3, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	495b      	ldr	r1, [pc, #364]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fd15 	bl	80032e4 <RCC_SetFlashLatencyFromMSIRange>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e343      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028c4:	f000 fc4a 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b52      	ldr	r3, [pc, #328]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	091b      	lsrs	r3, r3, #4
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	4950      	ldr	r1, [pc, #320]	@ (8002a18 <HAL_RCC_OscConfig+0x274>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
 80028e0:	4a4e      	ldr	r2, [pc, #312]	@ (8002a1c <HAL_RCC_OscConfig+0x278>)
 80028e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002a20 <HAL_RCC_OscConfig+0x27c>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fc23 	bl	8001134 <HAL_InitTick>
 80028ee:	4603      	mov	r3, r0
 80028f0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d052      	beq.n	800299e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028f8:	7bfb      	ldrb	r3, [r7, #15]
 80028fa:	e327      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d032      	beq.n	800296a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002904:	4b43      	ldr	r3, [pc, #268]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a42      	ldr	r2, [pc, #264]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800290a:	f043 0301 	orr.w	r3, r3, #1
 800290e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002910:	f7fe fc60 	bl	80011d4 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002918:	f7fe fc5c 	bl	80011d4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e310      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800292a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d0f0      	beq.n	8002918 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002936:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a36      	ldr	r2, [pc, #216]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800293c:	f043 0308 	orr.w	r3, r3, #8
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	4931      	ldr	r1, [pc, #196]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002950:	4313      	orrs	r3, r2
 8002952:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002954:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69db      	ldr	r3, [r3, #28]
 8002960:	021b      	lsls	r3, r3, #8
 8002962:	492c      	ldr	r1, [pc, #176]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
 8002968:	e01a      	b.n	80029a0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800296a:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a29      	ldr	r2, [pc, #164]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002970:	f023 0301 	bic.w	r3, r3, #1
 8002974:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002976:	f7fe fc2d 	bl	80011d4 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800297e:	f7fe fc29 	bl	80011d4 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e2dd      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1f0      	bne.n	800297e <HAL_RCC_OscConfig+0x1da>
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d074      	beq.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	2b08      	cmp	r3, #8
 80029b0:	d005      	beq.n	80029be <HAL_RCC_OscConfig+0x21a>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b0c      	cmp	r3, #12
 80029b6:	d10e      	bne.n	80029d6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b03      	cmp	r3, #3
 80029bc:	d10b      	bne.n	80029d6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029be:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d064      	beq.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d160      	bne.n	8002a94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e2ba      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029de:	d106      	bne.n	80029ee <HAL_RCC_OscConfig+0x24a>
 80029e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	e026      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029f6:	d115      	bne.n	8002a24 <HAL_RCC_OscConfig+0x280>
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a05      	ldr	r2, [pc, #20]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 80029fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b03      	ldr	r3, [pc, #12]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a02      	ldr	r2, [pc, #8]	@ (8002a14 <HAL_RCC_OscConfig+0x270>)
 8002a0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x298>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	08005aa8 	.word	0x08005aa8
 8002a1c:	20000000 	.word	0x20000000
 8002a20:	20000004 	.word	0x20000004
 8002a24:	4ba0      	ldr	r3, [pc, #640]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a9f      	ldr	r2, [pc, #636]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b9d      	ldr	r3, [pc, #628]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a9c      	ldr	r2, [pc, #624]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d013      	beq.n	8002a6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fbc6 	bl	80011d4 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fbc2 	bl	80011d4 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e276      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a5e:	4b92      	ldr	r3, [pc, #584]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x2a8>
 8002a6a:	e014      	b.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fbb2 	bl	80011d4 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fbae 	bl	80011d4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e262      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a86:	4b88      	ldr	r3, [pc, #544]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2d0>
 8002a92:	e000      	b.n	8002a96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d060      	beq.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b04      	cmp	r3, #4
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x310>
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	2b0c      	cmp	r3, #12
 8002aac:	d119      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d116      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ab4:	4b7c      	ldr	r3, [pc, #496]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_OscConfig+0x328>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e23f      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b76      	ldr	r3, [pc, #472]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	061b      	lsls	r3, r3, #24
 8002ada:	4973      	ldr	r1, [pc, #460]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae0:	e040      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d023      	beq.n	8002b32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aea:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a6e      	ldr	r2, [pc, #440]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002af0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af6:	f7fe fb6d 	bl	80011d4 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002afe:	f7fe fb69 	bl	80011d4 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e21d      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b10:	4b65      	ldr	r3, [pc, #404]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b62      	ldr	r3, [pc, #392]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	495f      	ldr	r1, [pc, #380]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
 8002b30:	e018      	b.n	8002b64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b32:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fb49 	bl	80011d4 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fb45 	bl	80011d4 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1f9      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f0      	bne.n	8002b46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d03c      	beq.n	8002bea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d01c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b78:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002b80:	f043 0301 	orr.w	r3, r3, #1
 8002b84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe fb24 	bl	80011d4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b90:	f7fe fb20 	bl	80011d4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e1d4      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ba2:	4b41      	ldr	r3, [pc, #260]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002ba4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d0ef      	beq.n	8002b90 <HAL_RCC_OscConfig+0x3ec>
 8002bb0:	e01b      	b.n	8002bea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bba:	f023 0301 	bic.w	r3, r3, #1
 8002bbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fb07 	bl	80011d4 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bca:	f7fe fb03 	bl	80011d4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e1b7      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bdc:	4b32      	ldr	r3, [pc, #200]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1ef      	bne.n	8002bca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f000 80a6 	beq.w	8002d44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	4b27      	ldr	r3, [pc, #156]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0c:	4a26      	ldr	r2, [pc, #152]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c14:	4b24      	ldr	r3, [pc, #144]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c20:	2301      	movs	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c24:	4b21      	ldr	r3, [pc, #132]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d118      	bne.n	8002c62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c30:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1d      	ldr	r2, [pc, #116]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c3c:	f7fe faca 	bl	80011d4 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c44:	f7fe fac6 	bl	80011d4 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e17a      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c56:	4b15      	ldr	r3, [pc, #84]	@ (8002cac <HAL_RCC_OscConfig+0x508>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d108      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4d8>
 8002c6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c70:	4a0d      	ldr	r2, [pc, #52]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c7a:	e029      	b.n	8002cd0 <HAL_RCC_OscConfig+0x52c>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d115      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x50c>
 8002c84:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	4a07      	ldr	r2, [pc, #28]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c94:	4b04      	ldr	r3, [pc, #16]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c9a:	4a03      	ldr	r2, [pc, #12]	@ (8002ca8 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ca4:	e014      	b.n	8002cd0 <HAL_RCC_OscConfig+0x52c>
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb6:	4a9b      	ldr	r2, [pc, #620]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc0:	4b98      	ldr	r3, [pc, #608]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc6:	4a97      	ldr	r2, [pc, #604]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cc8:	f023 0304 	bic.w	r3, r3, #4
 8002ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d016      	beq.n	8002d06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd8:	f7fe fa7c 	bl	80011d4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fa78 	bl	80011d4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e12a      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf6:	4b8b      	ldr	r3, [pc, #556]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0ed      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x53c>
 8002d04:	e015      	b.n	8002d32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d06:	f7fe fa65 	bl	80011d4 <HAL_GetTick>
 8002d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d0c:	e00a      	b.n	8002d24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0e:	f7fe fa61 	bl	80011d4 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e113      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d24:	4b7f      	ldr	r3, [pc, #508]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ed      	bne.n	8002d0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d105      	bne.n	8002d44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d38:	4b7a      	ldr	r3, [pc, #488]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3c:	4a79      	ldr	r2, [pc, #484]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 80fe 	beq.w	8002f4a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	f040 80d0 	bne.w	8002ef8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d58:	4b72      	ldr	r3, [pc, #456]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f003 0203 	and.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d130      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	3b01      	subs	r3, #1
 8002d78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d127      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d11f      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d98:	2a07      	cmp	r2, #7
 8002d9a:	bf14      	ite	ne
 8002d9c:	2201      	movne	r2, #1
 8002d9e:	2200      	moveq	r2, #0
 8002da0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d113      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db0:	085b      	lsrs	r3, r3, #1
 8002db2:	3b01      	subs	r3, #1
 8002db4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d109      	bne.n	8002dce <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d06e      	beq.n	8002eac <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	2b0c      	cmp	r3, #12
 8002dd2:	d069      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dd4:	4b53      	ldr	r3, [pc, #332]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d105      	bne.n	8002dec <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002de0:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0ad      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002df0:	4b4c      	ldr	r3, [pc, #304]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dfa:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dfc:	f7fe f9ea 	bl	80011d4 <HAL_GetTick>
 8002e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e02:	e008      	b.n	8002e16 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e04:	f7fe f9e6 	bl	80011d4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d901      	bls.n	8002e16 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e12:	2303      	movs	r3, #3
 8002e14:	e09a      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e16:	4b43      	ldr	r3, [pc, #268]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f0      	bne.n	8002e04 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e22:	4b40      	ldr	r3, [pc, #256]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	4b40      	ldr	r3, [pc, #256]	@ (8002f28 <HAL_RCC_OscConfig+0x784>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e32:	3a01      	subs	r2, #1
 8002e34:	0112      	lsls	r2, r2, #4
 8002e36:	4311      	orrs	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e3c:	0212      	lsls	r2, r2, #8
 8002e3e:	4311      	orrs	r1, r2
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e44:	0852      	lsrs	r2, r2, #1
 8002e46:	3a01      	subs	r2, #1
 8002e48:	0552      	lsls	r2, r2, #21
 8002e4a:	4311      	orrs	r1, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e50:	0852      	lsrs	r2, r2, #1
 8002e52:	3a01      	subs	r2, #1
 8002e54:	0652      	lsls	r2, r2, #25
 8002e56:	4311      	orrs	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e5c:	0912      	lsrs	r2, r2, #4
 8002e5e:	0452      	lsls	r2, r2, #17
 8002e60:	430a      	orrs	r2, r1
 8002e62:	4930      	ldr	r1, [pc, #192]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e68:	4b2e      	ldr	r3, [pc, #184]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e72:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e74:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a2a      	ldr	r2, [pc, #168]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e7e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e80:	f7fe f9a8 	bl	80011d4 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe f9a4 	bl	80011d4 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e058      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea6:	e050      	b.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e04f      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eac:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d148      	bne.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a19      	ldr	r2, [pc, #100]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ec4:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a16      	ldr	r2, [pc, #88]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ece:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ed0:	f7fe f980 	bl	80011d4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe f97c 	bl	80011d4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e030      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eea:	4b0e      	ldr	r3, [pc, #56]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0f0      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x734>
 8002ef6:	e028      	b.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b0c      	cmp	r3, #12
 8002efc:	d023      	beq.n	8002f46 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002efe:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <HAL_RCC_OscConfig+0x780>)
 8002f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f963 	bl	80011d4 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	e00c      	b.n	8002f2c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe f95f 	bl	80011d4 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d905      	bls.n	8002f2c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e013      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
 8002f24:	40021000 	.word	0x40021000
 8002f28:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f2c:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_RCC_OscConfig+0x7b0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ec      	bne.n	8002f12 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_RCC_OscConfig+0x7b0>)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	4905      	ldr	r1, [pc, #20]	@ (8002f54 <HAL_RCC_OscConfig+0x7b0>)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_OscConfig+0x7b4>)
 8002f40:	4013      	ands	r3, r2
 8002f42:	60cb      	str	r3, [r1, #12]
 8002f44:	e001      	b.n	8002f4a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40021000 	.word	0x40021000
 8002f58:	feeefffc 	.word	0xfeeefffc

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0e7      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b75      	ldr	r3, [pc, #468]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d910      	bls.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b72      	ldr	r3, [pc, #456]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 0207 	bic.w	r2, r3, #7
 8002f86:	4970      	ldr	r1, [pc, #448]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b6e      	ldr	r3, [pc, #440]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d001      	beq.n	8002fa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0cf      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d010      	beq.n	8002fce <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b66      	ldr	r3, [pc, #408]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d908      	bls.n	8002fce <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fbc:	4b63      	ldr	r3, [pc, #396]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	4960      	ldr	r1, [pc, #384]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d04c      	beq.n	8003074 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	4b5a      	ldr	r3, [pc, #360]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d121      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0a6      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ffa:	4b54      	ldr	r3, [pc, #336]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d115      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e09a      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003012:	4b4e      	ldr	r3, [pc, #312]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e08e      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003022:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e086      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003032:	4b46      	ldr	r3, [pc, #280]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f023 0203 	bic.w	r2, r3, #3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	4943      	ldr	r1, [pc, #268]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003044:	f7fe f8c6 	bl	80011d4 <HAL_GetTick>
 8003048:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800304a:	e00a      	b.n	8003062 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe f8c2 	bl	80011d4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305a:	4293      	cmp	r3, r2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e06e      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003062:	4b3a      	ldr	r3, [pc, #232]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 020c 	and.w	r2, r3, #12
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	429a      	cmp	r2, r3
 8003072:	d1eb      	bne.n	800304c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4b31      	ldr	r3, [pc, #196]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800308c:	429a      	cmp	r2, r3
 800308e:	d208      	bcs.n	80030a2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003090:	4b2e      	ldr	r3, [pc, #184]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	492b      	ldr	r1, [pc, #172]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a2:	4b29      	ldr	r3, [pc, #164]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d210      	bcs.n	80030d2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b0:	4b25      	ldr	r3, [pc, #148]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 0207 	bic.w	r2, r3, #7
 80030b8:	4923      	ldr	r1, [pc, #140]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030c0:	4b21      	ldr	r3, [pc, #132]	@ (8003148 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e036      	b.n	8003140 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d008      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4918      	ldr	r1, [pc, #96]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d009      	beq.n	8003110 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fc:	4b13      	ldr	r3, [pc, #76]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4910      	ldr	r1, [pc, #64]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003110:	f000 f824 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8003114:	4602      	mov	r2, r0
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <HAL_RCC_ClockConfig+0x1f0>)
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	f003 030f 	and.w	r3, r3, #15
 8003120:	490b      	ldr	r1, [pc, #44]	@ (8003150 <HAL_RCC_ClockConfig+0x1f4>)
 8003122:	5ccb      	ldrb	r3, [r1, r3]
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	4a09      	ldr	r2, [pc, #36]	@ (8003154 <HAL_RCC_ClockConfig+0x1f8>)
 800312e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003130:	4b09      	ldr	r3, [pc, #36]	@ (8003158 <HAL_RCC_ClockConfig+0x1fc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fffd 	bl	8001134 <HAL_InitTick>
 800313a:	4603      	mov	r3, r0
 800313c:	72fb      	strb	r3, [r7, #11]

  return status;
 800313e:	7afb      	ldrb	r3, [r7, #11]
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40022000 	.word	0x40022000
 800314c:	40021000 	.word	0x40021000
 8003150:	08005aa8 	.word	0x08005aa8
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	@ 0x24
 8003160:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800316a:	4b3e      	ldr	r3, [pc, #248]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003174:	4b3b      	ldr	r3, [pc, #236]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0303 	and.w	r3, r3, #3
 800317c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d005      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x34>
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d121      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d11e      	bne.n	80031ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003190:	4b34      	ldr	r3, [pc, #208]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d107      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800319c:	4b31      	ldr	r3, [pc, #196]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800319e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031a2:	0a1b      	lsrs	r3, r3, #8
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	61fb      	str	r3, [r7, #28]
 80031aa:	e005      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031cc:	e00a      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d102      	bne.n	80031da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80031d4:	4b25      	ldr	r3, [pc, #148]	@ (800326c <HAL_RCC_GetSysClockFreq+0x110>)
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	e004      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031e0:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x114>)
 80031e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d134      	bne.n	8003254 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0xa6>
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d003      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0xac>
 8003200:	e005      	b.n	800320e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003202:	4b1a      	ldr	r3, [pc, #104]	@ (800326c <HAL_RCC_GetSysClockFreq+0x110>)
 8003204:	617b      	str	r3, [r7, #20]
      break;
 8003206:	e005      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003208:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_RCC_GetSysClockFreq+0x114>)
 800320a:	617b      	str	r3, [r7, #20]
      break;
 800320c:	e002      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	617b      	str	r3, [r7, #20]
      break;
 8003212:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003214:	4b13      	ldr	r3, [pc, #76]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	3301      	adds	r3, #1
 8003220:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003222:	4b10      	ldr	r3, [pc, #64]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	fb03 f202 	mul.w	r2, r3, r2
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800323a:	4b0a      	ldr	r3, [pc, #40]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	0e5b      	lsrs	r3, r3, #25
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	3301      	adds	r3, #1
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003254:	69bb      	ldr	r3, [r7, #24]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3724      	adds	r7, #36	@ 0x24
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	08005ac0 	.word	0x08005ac0
 800326c:	00f42400 	.word	0x00f42400
 8003270:	007a1200 	.word	0x007a1200

08003274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003278:	4b03      	ldr	r3, [pc, #12]	@ (8003288 <HAL_RCC_GetHCLKFreq+0x14>)
 800327a:	681b      	ldr	r3, [r3, #0]
}
 800327c:	4618      	mov	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000

0800328c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003290:	f7ff fff0 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 8003294:	4602      	mov	r2, r0
 8003296:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	0a1b      	lsrs	r3, r3, #8
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08005ab8 	.word	0x08005ab8

080032b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032bc:	f7ff ffda 	bl	8003274 <HAL_RCC_GetHCLKFreq>
 80032c0:	4602      	mov	r2, r0
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	0adb      	lsrs	r3, r3, #11
 80032c8:	f003 0307 	and.w	r3, r3, #7
 80032cc:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032ce:	5ccb      	ldrb	r3, [r1, r3]
 80032d0:	f003 031f 	and.w	r3, r3, #31
 80032d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032d8:	4618      	mov	r0, r3
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000
 80032e0:	08005ab8 	.word	0x08005ab8

080032e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032ec:	2300      	movs	r3, #0
 80032ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032f0:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032fc:	f7ff f9ee 	bl	80026dc <HAL_PWREx_GetVoltageRange>
 8003300:	6178      	str	r0, [r7, #20]
 8003302:	e014      	b.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003304:	4b25      	ldr	r3, [pc, #148]	@ (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003308:	4a24      	ldr	r2, [pc, #144]	@ (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800330a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800330e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003310:	4b22      	ldr	r3, [pc, #136]	@ (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003312:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003314:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003318:	60fb      	str	r3, [r7, #12]
 800331a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800331c:	f7ff f9de 	bl	80026dc <HAL_PWREx_GetVoltageRange>
 8003320:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	4a1d      	ldr	r2, [pc, #116]	@ (800339c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003334:	d10b      	bne.n	800334e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b80      	cmp	r3, #128	@ 0x80
 800333a:	d919      	bls.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003340:	d902      	bls.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003342:	2302      	movs	r3, #2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	e013      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	e010      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2b80      	cmp	r3, #128	@ 0x80
 8003352:	d902      	bls.n	800335a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003354:	2303      	movs	r3, #3
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	e00a      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2b80      	cmp	r3, #128	@ 0x80
 800335e:	d102      	bne.n	8003366 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003360:	2302      	movs	r3, #2
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	e004      	b.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b70      	cmp	r3, #112	@ 0x70
 800336a:	d101      	bne.n	8003370 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800336c:	2301      	movs	r3, #1
 800336e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 0207 	bic.w	r2, r3, #7
 8003378:	4909      	ldr	r1, [pc, #36]	@ (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003380:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	40022000 	.word	0x40022000

080033a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b086      	sub	sp, #24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ac:	2300      	movs	r3, #0
 80033ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b0:	2300      	movs	r3, #0
 80033b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d041      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033c8:	d02a      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033ce:	d824      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033d4:	d008      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80033d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033da:	d81e      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033e4:	d010      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033e6:	e018      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033e8:	4b86      	ldr	r3, [pc, #536]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	4a85      	ldr	r2, [pc, #532]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033f4:	e015      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2100      	movs	r1, #0
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 fabb 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003402:	4603      	mov	r3, r0
 8003404:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003406:	e00c      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3320      	adds	r3, #32
 800340c:	2100      	movs	r1, #0
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fba6 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	74fb      	strb	r3, [r7, #19]
      break;
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10b      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003428:	4b76      	ldr	r3, [pc, #472]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003436:	4973      	ldr	r1, [pc, #460]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800343e:	e001      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d041      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003454:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003458:	d02a      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800345a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800345e:	d824      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003460:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003464:	d008      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003466:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800346a:	d81e      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003470:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003474:	d010      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003476:	e018      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003478:	4b62      	ldr	r3, [pc, #392]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	4a61      	ldr	r2, [pc, #388]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003482:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003484:	e015      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3304      	adds	r3, #4
 800348a:	2100      	movs	r1, #0
 800348c:	4618      	mov	r0, r3
 800348e:	f000 fa73 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003492:	4603      	mov	r3, r0
 8003494:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003496:	e00c      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3320      	adds	r3, #32
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fb5e 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	74fb      	strb	r3, [r7, #19]
      break;
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034b2:	7cfb      	ldrb	r3, [r7, #19]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034b8:	4b52      	ldr	r3, [pc, #328]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034c6:	494f      	ldr	r1, [pc, #316]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034ce:	e001      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80a0 	beq.w	8003622 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034e2:	2300      	movs	r3, #0
 80034e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034e6:	4b47      	ldr	r3, [pc, #284]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034fc:	4b41      	ldr	r3, [pc, #260]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a40      	ldr	r2, [pc, #256]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
 8003508:	4b3e      	ldr	r3, [pc, #248]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800350a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800350c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003510:	60bb      	str	r3, [r7, #8]
 8003512:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003514:	2301      	movs	r3, #1
 8003516:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003518:	4b3b      	ldr	r3, [pc, #236]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3a      	ldr	r2, [pc, #232]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800351e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003524:	f7fd fe56 	bl	80011d4 <HAL_GetTick>
 8003528:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800352a:	e009      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352c:	f7fd fe52 	bl	80011d4 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d902      	bls.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	74fb      	strb	r3, [r7, #19]
        break;
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003540:	4b31      	ldr	r3, [pc, #196]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800354c:	7cfb      	ldrb	r3, [r7, #19]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d15c      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003552:	4b2c      	ldr	r3, [pc, #176]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003558:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800355c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01f      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d019      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003570:	4b24      	ldr	r3, [pc, #144]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800357a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800357c:	4b21      	ldr	r3, [pc, #132]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003582:	4a20      	ldr	r2, [pc, #128]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800358c:	4b1d      	ldr	r3, [pc, #116]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800358e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003592:	4a1c      	ldr	r2, [pc, #112]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003594:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800359c:	4a19      	ldr	r2, [pc, #100]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f003 0301 	and.w	r3, r3, #1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d016      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ae:	f7fd fe11 	bl	80011d4 <HAL_GetTick>
 80035b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b4:	e00b      	b.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b6:	f7fd fe0d 	bl	80011d4 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d902      	bls.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	74fb      	strb	r3, [r7, #19]
            break;
 80035cc:	e006      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ec      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10c      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035e2:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035f2:	4904      	ldr	r1, [pc, #16]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035fa:	e009      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035fc:	7cfb      	ldrb	r3, [r7, #19]
 80035fe:	74bb      	strb	r3, [r7, #18]
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003602:	bf00      	nop
 8003604:	40021000 	.word	0x40021000
 8003608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003610:	7c7b      	ldrb	r3, [r7, #17]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d105      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003616:	4b9e      	ldr	r3, [pc, #632]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a9d      	ldr	r2, [pc, #628]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00a      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800362e:	4b98      	ldr	r3, [pc, #608]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003634:	f023 0203 	bic.w	r2, r3, #3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363c:	4994      	ldr	r1, [pc, #592]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	4313      	orrs	r3, r2
 8003640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003650:	4b8f      	ldr	r3, [pc, #572]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f023 020c 	bic.w	r2, r3, #12
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365e:	498c      	ldr	r1, [pc, #560]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0304 	and.w	r3, r3, #4
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003672:	4b87      	ldr	r3, [pc, #540]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003678:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	4983      	ldr	r1, [pc, #524]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003694:	4b7e      	ldr	r3, [pc, #504]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	497b      	ldr	r1, [pc, #492]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036b6:	4b76      	ldr	r3, [pc, #472]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036c4:	4972      	ldr	r1, [pc, #456]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0320 	and.w	r3, r3, #32
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00a      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036d8:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	496a      	ldr	r1, [pc, #424]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036fa:	4b65      	ldr	r3, [pc, #404]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003700:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003708:	4961      	ldr	r1, [pc, #388]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370a:	4313      	orrs	r3, r2
 800370c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00a      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800371c:	4b5c      	ldr	r3, [pc, #368]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003722:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800372a:	4959      	ldr	r1, [pc, #356]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372c:	4313      	orrs	r3, r2
 800372e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800373e:	4b54      	ldr	r3, [pc, #336]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003744:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800374c:	4950      	ldr	r1, [pc, #320]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374e:	4313      	orrs	r3, r2
 8003750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003760:	4b4b      	ldr	r3, [pc, #300]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003766:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800376e:	4948      	ldr	r1, [pc, #288]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00a      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003782:	4b43      	ldr	r3, [pc, #268]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003784:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003788:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	493f      	ldr	r1, [pc, #252]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	4313      	orrs	r3, r2
 8003794:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d028      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b2:	4937      	ldr	r1, [pc, #220]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037c2:	d106      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037c4:	4b32      	ldr	r3, [pc, #200]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4a31      	ldr	r2, [pc, #196]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ce:	60d3      	str	r3, [r2, #12]
 80037d0:	e011      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037da:	d10c      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	2101      	movs	r1, #1
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 f8c8 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037ec:	7cfb      	ldrb	r3, [r7, #19]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d028      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003810:	491f      	ldr	r1, [pc, #124]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003812:	4313      	orrs	r3, r2
 8003814:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003820:	d106      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003822:	4b1b      	ldr	r3, [pc, #108]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003828:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800382c:	60d3      	str	r3, [r2, #12]
 800382e:	e011      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003834:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003838:	d10c      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f000 f899 	bl	8003978 <RCCEx_PLLSAI1_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800384a:	7cfb      	ldrb	r3, [r7, #19]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003850:	7cfb      	ldrb	r3, [r7, #19]
 8003852:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d02b      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003866:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386e:	4908      	ldr	r1, [pc, #32]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	4313      	orrs	r3, r2
 8003872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800387e:	d109      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003880:	4b03      	ldr	r3, [pc, #12]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	4a02      	ldr	r2, [pc, #8]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800388a:	60d3      	str	r3, [r2, #12]
 800388c:	e014      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800388e:	bf00      	nop
 8003890:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003898:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800389c:	d10c      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3304      	adds	r3, #4
 80038a2:	2101      	movs	r1, #1
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 f867 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038ae:	7cfb      	ldrb	r3, [r7, #19]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038b4:	7cfb      	ldrb	r3, [r7, #19]
 80038b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02f      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038d2:	4928      	ldr	r1, [pc, #160]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e2:	d10d      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	2102      	movs	r1, #2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 f844 	bl	8003978 <RCCEx_PLLSAI1_Config>
 80038f0:	4603      	mov	r3, r0
 80038f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038f4:	7cfb      	ldrb	r3, [r7, #19]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d014      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038fa:	7cfb      	ldrb	r3, [r7, #19]
 80038fc:	74bb      	strb	r3, [r7, #18]
 80038fe:	e011      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003908:	d10c      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3320      	adds	r3, #32
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f925 	bl	8003b60 <RCCEx_PLLSAI2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800391a:	7cfb      	ldrb	r3, [r7, #19]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003920:	7cfb      	ldrb	r3, [r7, #19]
 8003922:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003930:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003936:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800393e:	490d      	ldr	r1, [pc, #52]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003952:	4b08      	ldr	r3, [pc, #32]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003958:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003962:	4904      	ldr	r1, [pc, #16]	@ (8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800396a:	7cbb      	ldrb	r3, [r7, #18]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000

08003978 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003986:	4b75      	ldr	r3, [pc, #468]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003992:	4b72      	ldr	r3, [pc, #456]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 0203 	and.w	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d10d      	bne.n	80039be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
       ||
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d009      	beq.n	80039be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039aa:	4b6c      	ldr	r3, [pc, #432]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
       ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d047      	beq.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e044      	b.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d018      	beq.n	80039fe <RCCEx_PLLSAI1_Config+0x86>
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d825      	bhi.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d002      	beq.n	80039da <RCCEx_PLLSAI1_Config+0x62>
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d009      	beq.n	80039ec <RCCEx_PLLSAI1_Config+0x74>
 80039d8:	e020      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039da:	4b60      	ldr	r3, [pc, #384]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11d      	bne.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ea:	e01a      	b.n	8003a22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039ec:	4b5b      	ldr	r3, [pc, #364]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fc:	e013      	b.n	8003a26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039fe:	4b57      	ldr	r3, [pc, #348]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a0a:	4b54      	ldr	r3, [pc, #336]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a1a:	e006      	b.n	8003a2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a20:	e004      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a32:	4b4a      	ldr	r3, [pc, #296]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	430b      	orrs	r3, r1
 8003a48:	4944      	ldr	r1, [pc, #272]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d17d      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a40      	ldr	r2, [pc, #256]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a60:	f7fd fbb8 	bl	80011d4 <HAL_GetTick>
 8003a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a66:	e009      	b.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a68:	f7fd fbb4 	bl	80011d4 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d902      	bls.n	8003a7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	73fb      	strb	r3, [r7, #15]
        break;
 8003a7a:	e005      	b.n	8003a88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a7c:	4b37      	ldr	r3, [pc, #220]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ef      	bne.n	8003a68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d160      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d111      	bne.n	8003ab8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a94:	4b31      	ldr	r3, [pc, #196]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6892      	ldr	r2, [r2, #8]
 8003aa4:	0211      	lsls	r1, r2, #8
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	0912      	lsrs	r2, r2, #4
 8003aac:	0452      	lsls	r2, r2, #17
 8003aae:	430a      	orrs	r2, r1
 8003ab0:	492a      	ldr	r1, [pc, #168]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	610b      	str	r3, [r1, #16]
 8003ab6:	e027      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d112      	bne.n	8003ae4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003abe:	4b27      	ldr	r3, [pc, #156]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ac6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6892      	ldr	r2, [r2, #8]
 8003ace:	0211      	lsls	r1, r2, #8
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6912      	ldr	r2, [r2, #16]
 8003ad4:	0852      	lsrs	r2, r2, #1
 8003ad6:	3a01      	subs	r2, #1
 8003ad8:	0552      	lsls	r2, r2, #21
 8003ada:	430a      	orrs	r2, r1
 8003adc:	491f      	ldr	r1, [pc, #124]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
 8003ae2:	e011      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003aec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6892      	ldr	r2, [r2, #8]
 8003af4:	0211      	lsls	r1, r2, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6952      	ldr	r2, [r2, #20]
 8003afa:	0852      	lsrs	r2, r2, #1
 8003afc:	3a01      	subs	r2, #1
 8003afe:	0652      	lsls	r2, r2, #25
 8003b00:	430a      	orrs	r2, r1
 8003b02:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b08:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a13      	ldr	r2, [pc, #76]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b14:	f7fd fb5e 	bl	80011d4 <HAL_GetTick>
 8003b18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b1a:	e009      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b1c:	f7fd fb5a 	bl	80011d4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d902      	bls.n	8003b30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	73fb      	strb	r3, [r7, #15]
          break;
 8003b2e:	e005      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b30:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d0ef      	beq.n	8003b1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d106      	bne.n	8003b50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	4904      	ldr	r1, [pc, #16]	@ (8003b5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000

08003b60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003b6e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d018      	beq.n	8003bac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003b7a:	4b67      	ldr	r3, [pc, #412]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0203 	and.w	r2, r3, #3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d10d      	bne.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
       ||
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d009      	beq.n	8003ba6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003b92:	4b61      	ldr	r3, [pc, #388]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	091b      	lsrs	r3, r3, #4
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
       ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d047      	beq.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e044      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b03      	cmp	r3, #3
 8003bb2:	d018      	beq.n	8003be6 <RCCEx_PLLSAI2_Config+0x86>
 8003bb4:	2b03      	cmp	r3, #3
 8003bb6:	d825      	bhi.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d002      	beq.n	8003bc2 <RCCEx_PLLSAI2_Config+0x62>
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d009      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x74>
 8003bc0:	e020      	b.n	8003c04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bc2:	4b55      	ldr	r3, [pc, #340]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11d      	bne.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e01a      	b.n	8003c0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bd4:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d116      	bne.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be4:	e013      	b.n	8003c0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003be6:	4b4c      	ldr	r3, [pc, #304]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10f      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003bf2:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c02:	e006      	b.n	8003c12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e004      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c12:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	4939      	ldr	r1, [pc, #228]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d167      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c3c:	4b36      	ldr	r3, [pc, #216]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a35      	ldr	r2, [pc, #212]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c48:	f7fd fac4 	bl	80011d4 <HAL_GetTick>
 8003c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c4e:	e009      	b.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c50:	f7fd fac0 	bl	80011d4 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d902      	bls.n	8003c64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	73fb      	strb	r3, [r7, #15]
        break;
 8003c62:	e005      	b.n	8003c70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c64:	4b2c      	ldr	r3, [pc, #176]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ef      	bne.n	8003c50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d14a      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d111      	bne.n	8003ca0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c7c:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6892      	ldr	r2, [r2, #8]
 8003c8c:	0211      	lsls	r1, r2, #8
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	68d2      	ldr	r2, [r2, #12]
 8003c92:	0912      	lsrs	r2, r2, #4
 8003c94:	0452      	lsls	r2, r2, #17
 8003c96:	430a      	orrs	r2, r1
 8003c98:	491f      	ldr	r1, [pc, #124]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	614b      	str	r3, [r1, #20]
 8003c9e:	e011      	b.n	8003cc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ca8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6892      	ldr	r2, [r2, #8]
 8003cb0:	0211      	lsls	r1, r2, #8
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	6912      	ldr	r2, [r2, #16]
 8003cb6:	0852      	lsrs	r2, r2, #1
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	0652      	lsls	r2, r2, #25
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4916      	ldr	r1, [pc, #88]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cc4:	4b14      	ldr	r3, [pc, #80]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a13      	ldr	r2, [pc, #76]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd fa80 	bl	80011d4 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003cd8:	f7fd fa7c 	bl	80011d4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
          break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003cec:	4b0a      	ldr	r3, [pc, #40]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ef      	beq.n	8003cd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003cfe:	4b06      	ldr	r3, [pc, #24]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4904      	ldr	r1, [pc, #16]	@ (8003d18 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000

08003d1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e049      	b.n	8003dc2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f870 	bl	8000e28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3304      	adds	r3, #4
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	f000 fc16 	bl	800458c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b082      	sub	sp, #8
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e049      	b.n	8003e70 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d106      	bne.n	8003df6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7fd f837 	bl	8000e64 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3304      	adds	r3, #4
 8003e06:	4619      	mov	r1, r3
 8003e08:	4610      	mov	r0, r2
 8003e0a:	f000 fbbf 	bl	800458c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b086      	sub	sp, #24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e097      	b.n	8003fbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fc ff4b 	bl	8000d3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8003ebc:	f023 0307 	bic.w	r3, r3, #7
 8003ec0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f000 fb5d 	bl	800458c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6a1b      	ldr	r3, [r3, #32]
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003efa:	f023 0303 	bic.w	r3, r3, #3
 8003efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003f18:	f023 030c 	bic.w	r3, r3, #12
 8003f1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	4313      	orrs	r3, r2
 8003f36:	693a      	ldr	r2, [r7, #16]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	011a      	lsls	r2, r3, #4
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
 8003f46:	031b      	lsls	r3, r3, #12
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003f56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003f5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3718      	adds	r7, #24
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d020      	beq.n	8004028 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d01b      	beq.n	8004028 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0202 	mvn.w	r2, #2
 8003ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa9e 	bl	8004550 <HAL_TIM_IC_CaptureCallback>
 8004014:	e005      	b.n	8004022 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa90 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f000 faa1 	bl	8004564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d020      	beq.n	8004074 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01b      	beq.n	8004074 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0204 	mvn.w	r2, #4
 8004044:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2202      	movs	r2, #2
 800404a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004056:	2b00      	cmp	r3, #0
 8004058:	d003      	beq.n	8004062 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa78 	bl	8004550 <HAL_TIM_IC_CaptureCallback>
 8004060:	e005      	b.n	800406e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fa6a 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fa7b 	bl	8004564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d020      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f003 0308 	and.w	r3, r3, #8
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01b      	beq.n	80040c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0208 	mvn.w	r2, #8
 8004090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2204      	movs	r2, #4
 8004096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa52 	bl	8004550 <HAL_TIM_IC_CaptureCallback>
 80040ac:	e005      	b.n	80040ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa44 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 fa55 	bl	8004564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	f003 0310 	and.w	r3, r3, #16
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d020      	beq.n	800410c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01b      	beq.n	800410c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0210 	mvn.w	r2, #16
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2208      	movs	r2, #8
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa2c 	bl	8004550 <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa1e 	bl	800453c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fa2f 	bl	8004564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0201 	mvn.w	r2, #1
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f9fc 	bl	8004528 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 ff42 	bl	8004fd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004164:	2b00      	cmp	r3, #0
 8004166:	d007      	beq.n	8004178 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 ff3a 	bl	8004fec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00c      	beq.n	800419c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d007      	beq.n	800419c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f9ee 	bl	8004578 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00c      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d007      	beq.n	80041c0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f06f 0220 	mvn.w	r2, #32
 80041b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 ff02 	bl	8004fc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e088      	b.n	80042f8 <HAL_TIM_IC_ConfigChannel+0x130>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004204:	f000 fd32 	bl	8004c6c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	699a      	ldr	r2, [r3, #24]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 020c 	bic.w	r2, r2, #12
 8004216:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6999      	ldr	r1, [r3, #24]
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	689a      	ldr	r2, [r3, #8]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	619a      	str	r2, [r3, #24]
 800422a:	e060      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b04      	cmp	r3, #4
 8004230:	d11c      	bne.n	800426c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004242:	f000 fd81 	bl	8004d48 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004254:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6999      	ldr	r1, [r3, #24]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	021a      	lsls	r2, r3, #8
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	619a      	str	r2, [r3, #24]
 800426a:	e040      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b08      	cmp	r3, #8
 8004270:	d11b      	bne.n	80042aa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004282:	f000 fd9e 	bl	8004dc2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69da      	ldr	r2, [r3, #28]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 020c 	bic.w	r2, r2, #12
 8004294:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	69d9      	ldr	r1, [r3, #28]
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	430a      	orrs	r2, r1
 80042a6:	61da      	str	r2, [r3, #28]
 80042a8:	e021      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b0c      	cmp	r3, #12
 80042ae:	d11c      	bne.n	80042ea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80042c0:	f000 fdbb 	bl	8004e3a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	69da      	ldr	r2, [r3, #28]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80042d2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69d9      	ldr	r1, [r3, #28]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	021a      	lsls	r2, r3, #8
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	61da      	str	r2, [r3, #28]
 80042e8:	e001      	b.n	80042ee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800431a:	2302      	movs	r3, #2
 800431c:	e0ff      	b.n	800451e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b14      	cmp	r3, #20
 800432a:	f200 80f0 	bhi.w	800450e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800432e:	a201      	add	r2, pc, #4	@ (adr r2, 8004334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004334:	08004389 	.word	0x08004389
 8004338:	0800450f 	.word	0x0800450f
 800433c:	0800450f 	.word	0x0800450f
 8004340:	0800450f 	.word	0x0800450f
 8004344:	080043c9 	.word	0x080043c9
 8004348:	0800450f 	.word	0x0800450f
 800434c:	0800450f 	.word	0x0800450f
 8004350:	0800450f 	.word	0x0800450f
 8004354:	0800440b 	.word	0x0800440b
 8004358:	0800450f 	.word	0x0800450f
 800435c:	0800450f 	.word	0x0800450f
 8004360:	0800450f 	.word	0x0800450f
 8004364:	0800444b 	.word	0x0800444b
 8004368:	0800450f 	.word	0x0800450f
 800436c:	0800450f 	.word	0x0800450f
 8004370:	0800450f 	.word	0x0800450f
 8004374:	0800448d 	.word	0x0800448d
 8004378:	0800450f 	.word	0x0800450f
 800437c:	0800450f 	.word	0x0800450f
 8004380:	0800450f 	.word	0x0800450f
 8004384:	080044cd 	.word	0x080044cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f996 	bl	80046c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0208 	orr.w	r2, r2, #8
 80043a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699a      	ldr	r2, [r3, #24]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0204 	bic.w	r2, r2, #4
 80043b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6999      	ldr	r1, [r3, #24]
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	619a      	str	r2, [r3, #24]
      break;
 80043c6:	e0a5      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68b9      	ldr	r1, [r7, #8]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 fa06 	bl	80047e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6999      	ldr	r1, [r3, #24]
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	619a      	str	r2, [r3, #24]
      break;
 8004408:	e084      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fa6f 	bl	80048f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0208 	orr.w	r2, r2, #8
 8004424:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0204 	bic.w	r2, r2, #4
 8004434:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69d9      	ldr	r1, [r3, #28]
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	61da      	str	r2, [r3, #28]
      break;
 8004448:	e064      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	4618      	mov	r0, r3
 8004452:	f000 fad7 	bl	8004a04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004464:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004474:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69d9      	ldr	r1, [r3, #28]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	021a      	lsls	r2, r3, #8
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	61da      	str	r2, [r3, #28]
      break;
 800448a:	e043      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fb20 	bl	8004ad8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0204 	bic.w	r2, r2, #4
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691a      	ldr	r2, [r3, #16]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044ca:	e023      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68b9      	ldr	r1, [r7, #8]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f000 fb64 	bl	8004ba0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	021a      	lsls	r2, r3, #8
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800450c:	e002      	b.n	8004514 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
      break;
 8004512:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800451c:	7dfb      	ldrb	r3, [r7, #23]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop

08004528 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004580:	bf00      	nop
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a40      	ldr	r2, [pc, #256]	@ (80046a0 <TIM_Base_SetConfig+0x114>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d013      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045aa:	d00f      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3d      	ldr	r2, [pc, #244]	@ (80046a4 <TIM_Base_SetConfig+0x118>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d00b      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3c      	ldr	r2, [pc, #240]	@ (80046a8 <TIM_Base_SetConfig+0x11c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d007      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3b      	ldr	r2, [pc, #236]	@ (80046ac <TIM_Base_SetConfig+0x120>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_Base_SetConfig+0x40>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a3a      	ldr	r2, [pc, #232]	@ (80046b0 <TIM_Base_SetConfig+0x124>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d108      	bne.n	80045de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	4313      	orrs	r3, r2
 80045dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a2f      	ldr	r2, [pc, #188]	@ (80046a0 <TIM_Base_SetConfig+0x114>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d01f      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ec:	d01b      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2c      	ldr	r2, [pc, #176]	@ (80046a4 <TIM_Base_SetConfig+0x118>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d017      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2b      	ldr	r2, [pc, #172]	@ (80046a8 <TIM_Base_SetConfig+0x11c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d013      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2a      	ldr	r2, [pc, #168]	@ (80046ac <TIM_Base_SetConfig+0x120>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d00f      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a29      	ldr	r2, [pc, #164]	@ (80046b0 <TIM_Base_SetConfig+0x124>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d00b      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a28      	ldr	r2, [pc, #160]	@ (80046b4 <TIM_Base_SetConfig+0x128>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d007      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a27      	ldr	r2, [pc, #156]	@ (80046b8 <TIM_Base_SetConfig+0x12c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d003      	beq.n	8004626 <TIM_Base_SetConfig+0x9a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <TIM_Base_SetConfig+0x130>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d108      	bne.n	8004638 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a10      	ldr	r2, [pc, #64]	@ (80046a0 <TIM_Base_SetConfig+0x114>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00f      	beq.n	8004684 <TIM_Base_SetConfig+0xf8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <TIM_Base_SetConfig+0x124>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d00b      	beq.n	8004684 <TIM_Base_SetConfig+0xf8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a11      	ldr	r2, [pc, #68]	@ (80046b4 <TIM_Base_SetConfig+0x128>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d007      	beq.n	8004684 <TIM_Base_SetConfig+0xf8>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a10      	ldr	r2, [pc, #64]	@ (80046b8 <TIM_Base_SetConfig+0x12c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d003      	beq.n	8004684 <TIM_Base_SetConfig+0xf8>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a0f      	ldr	r2, [pc, #60]	@ (80046bc <TIM_Base_SetConfig+0x130>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d103      	bne.n	800468c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	615a      	str	r2, [r3, #20]
}
 8004692:	bf00      	nop
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	40012c00 	.word	0x40012c00
 80046a4:	40000400 	.word	0x40000400
 80046a8:	40000800 	.word	0x40000800
 80046ac:	40000c00 	.word	0x40000c00
 80046b0:	40013400 	.word	0x40013400
 80046b4:	40014000 	.word	0x40014000
 80046b8:	40014400 	.word	0x40014400
 80046bc:	40014800 	.word	0x40014800

080046c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	f023 0201 	bic.w	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	4313      	orrs	r3, r2
 8004704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f023 0302 	bic.w	r3, r3, #2
 800470c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a2c      	ldr	r2, [pc, #176]	@ (80047cc <TIM_OC1_SetConfig+0x10c>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d00f      	beq.n	8004740 <TIM_OC1_SetConfig+0x80>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a2b      	ldr	r2, [pc, #172]	@ (80047d0 <TIM_OC1_SetConfig+0x110>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_OC1_SetConfig+0x80>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <TIM_OC1_SetConfig+0x114>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_OC1_SetConfig+0x80>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a29      	ldr	r2, [pc, #164]	@ (80047d8 <TIM_OC1_SetConfig+0x118>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_OC1_SetConfig+0x80>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a28      	ldr	r2, [pc, #160]	@ (80047dc <TIM_OC1_SetConfig+0x11c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d10c      	bne.n	800475a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f023 0308 	bic.w	r3, r3, #8
 8004746:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a1b      	ldr	r2, [pc, #108]	@ (80047cc <TIM_OC1_SetConfig+0x10c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00f      	beq.n	8004782 <TIM_OC1_SetConfig+0xc2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1a      	ldr	r2, [pc, #104]	@ (80047d0 <TIM_OC1_SetConfig+0x110>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d00b      	beq.n	8004782 <TIM_OC1_SetConfig+0xc2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a19      	ldr	r2, [pc, #100]	@ (80047d4 <TIM_OC1_SetConfig+0x114>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d007      	beq.n	8004782 <TIM_OC1_SetConfig+0xc2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a18      	ldr	r2, [pc, #96]	@ (80047d8 <TIM_OC1_SetConfig+0x118>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d003      	beq.n	8004782 <TIM_OC1_SetConfig+0xc2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a17      	ldr	r2, [pc, #92]	@ (80047dc <TIM_OC1_SetConfig+0x11c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d111      	bne.n	80047a6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	621a      	str	r2, [r3, #32]
}
 80047c0:	bf00      	nop
 80047c2:	371c      	adds	r7, #28
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	40012c00 	.word	0x40012c00
 80047d0:	40013400 	.word	0x40013400
 80047d4:	40014000 	.word	0x40014000
 80047d8:	40014400 	.word	0x40014400
 80047dc:	40014800 	.word	0x40014800

080047e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f023 0210 	bic.w	r2, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800480e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800481a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f023 0320 	bic.w	r3, r3, #32
 800482e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	011b      	lsls	r3, r3, #4
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a28      	ldr	r2, [pc, #160]	@ (80048e0 <TIM_OC2_SetConfig+0x100>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <TIM_OC2_SetConfig+0x6c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a27      	ldr	r2, [pc, #156]	@ (80048e4 <TIM_OC2_SetConfig+0x104>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d10d      	bne.n	8004868 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4313      	orrs	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <TIM_OC2_SetConfig+0x100>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00f      	beq.n	8004890 <TIM_OC2_SetConfig+0xb0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <TIM_OC2_SetConfig+0x104>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00b      	beq.n	8004890 <TIM_OC2_SetConfig+0xb0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a1b      	ldr	r2, [pc, #108]	@ (80048e8 <TIM_OC2_SetConfig+0x108>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d007      	beq.n	8004890 <TIM_OC2_SetConfig+0xb0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a1a      	ldr	r2, [pc, #104]	@ (80048ec <TIM_OC2_SetConfig+0x10c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d003      	beq.n	8004890 <TIM_OC2_SetConfig+0xb0>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a19      	ldr	r2, [pc, #100]	@ (80048f0 <TIM_OC2_SetConfig+0x110>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d113      	bne.n	80048b8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800489e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	693a      	ldr	r2, [r7, #16]
 80048bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	621a      	str	r2, [r3, #32]
}
 80048d2:	bf00      	nop
 80048d4:	371c      	adds	r7, #28
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40013400 	.word	0x40013400
 80048e8:	40014000 	.word	0x40014000
 80048ec:	40014400 	.word	0x40014400
 80048f0:	40014800 	.word	0x40014800

080048f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004922:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	021b      	lsls	r3, r3, #8
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a27      	ldr	r2, [pc, #156]	@ (80049f0 <TIM_OC3_SetConfig+0xfc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d003      	beq.n	800495e <TIM_OC3_SetConfig+0x6a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a26      	ldr	r2, [pc, #152]	@ (80049f4 <TIM_OC3_SetConfig+0x100>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d10d      	bne.n	800497a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004964:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	021b      	lsls	r3, r3, #8
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	4313      	orrs	r3, r2
 8004970:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004978:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a1c      	ldr	r2, [pc, #112]	@ (80049f0 <TIM_OC3_SetConfig+0xfc>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00f      	beq.n	80049a2 <TIM_OC3_SetConfig+0xae>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1b      	ldr	r2, [pc, #108]	@ (80049f4 <TIM_OC3_SetConfig+0x100>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d00b      	beq.n	80049a2 <TIM_OC3_SetConfig+0xae>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1a      	ldr	r2, [pc, #104]	@ (80049f8 <TIM_OC3_SetConfig+0x104>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d007      	beq.n	80049a2 <TIM_OC3_SetConfig+0xae>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a19      	ldr	r2, [pc, #100]	@ (80049fc <TIM_OC3_SetConfig+0x108>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d003      	beq.n	80049a2 <TIM_OC3_SetConfig+0xae>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a18      	ldr	r2, [pc, #96]	@ (8004a00 <TIM_OC3_SetConfig+0x10c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d113      	bne.n	80049ca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	621a      	str	r2, [r3, #32]
}
 80049e4:	bf00      	nop
 80049e6:	371c      	adds	r7, #28
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40013400 	.word	0x40013400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800

08004a04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	031b      	lsls	r3, r3, #12
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	@ (8004ac4 <TIM_OC4_SetConfig+0xc0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00f      	beq.n	8004a88 <TIM_OC4_SetConfig+0x84>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	@ (8004ac8 <TIM_OC4_SetConfig+0xc4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d00b      	beq.n	8004a88 <TIM_OC4_SetConfig+0x84>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a16      	ldr	r2, [pc, #88]	@ (8004acc <TIM_OC4_SetConfig+0xc8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d007      	beq.n	8004a88 <TIM_OC4_SetConfig+0x84>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a15      	ldr	r2, [pc, #84]	@ (8004ad0 <TIM_OC4_SetConfig+0xcc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_OC4_SetConfig+0x84>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a14      	ldr	r2, [pc, #80]	@ (8004ad4 <TIM_OC4_SetConfig+0xd0>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d109      	bne.n	8004a9c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	019b      	lsls	r3, r3, #6
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	621a      	str	r2, [r3, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	371c      	adds	r7, #28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40012c00 	.word	0x40012c00
 8004ac8:	40013400 	.word	0x40013400
 8004acc:	40014000 	.word	0x40014000
 8004ad0:	40014400 	.word	0x40014400
 8004ad4:	40014800 	.word	0x40014800

08004ad8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b1c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a17      	ldr	r2, [pc, #92]	@ (8004b8c <TIM_OC5_SetConfig+0xb4>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00f      	beq.n	8004b52 <TIM_OC5_SetConfig+0x7a>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a16      	ldr	r2, [pc, #88]	@ (8004b90 <TIM_OC5_SetConfig+0xb8>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d00b      	beq.n	8004b52 <TIM_OC5_SetConfig+0x7a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a15      	ldr	r2, [pc, #84]	@ (8004b94 <TIM_OC5_SetConfig+0xbc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d007      	beq.n	8004b52 <TIM_OC5_SetConfig+0x7a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a14      	ldr	r2, [pc, #80]	@ (8004b98 <TIM_OC5_SetConfig+0xc0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d003      	beq.n	8004b52 <TIM_OC5_SetConfig+0x7a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a13      	ldr	r2, [pc, #76]	@ (8004b9c <TIM_OC5_SetConfig+0xc4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d109      	bne.n	8004b66 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	621a      	str	r2, [r3, #32]
}
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40012c00 	.word	0x40012c00
 8004b90:	40013400 	.word	0x40013400
 8004b94:	40014000 	.word	0x40014000
 8004b98:	40014400 	.word	0x40014400
 8004b9c:	40014800 	.word	0x40014800

08004ba0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	021b      	lsls	r3, r3, #8
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004be6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	051b      	lsls	r3, r3, #20
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	@ (8004c58 <TIM_OC6_SetConfig+0xb8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00f      	beq.n	8004c1c <TIM_OC6_SetConfig+0x7c>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a17      	ldr	r2, [pc, #92]	@ (8004c5c <TIM_OC6_SetConfig+0xbc>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00b      	beq.n	8004c1c <TIM_OC6_SetConfig+0x7c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a16      	ldr	r2, [pc, #88]	@ (8004c60 <TIM_OC6_SetConfig+0xc0>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d007      	beq.n	8004c1c <TIM_OC6_SetConfig+0x7c>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a15      	ldr	r2, [pc, #84]	@ (8004c64 <TIM_OC6_SetConfig+0xc4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d003      	beq.n	8004c1c <TIM_OC6_SetConfig+0x7c>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a14      	ldr	r2, [pc, #80]	@ (8004c68 <TIM_OC6_SetConfig+0xc8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d109      	bne.n	8004c30 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	693a      	ldr	r2, [r7, #16]
 8004c48:	621a      	str	r2, [r3, #32]
}
 8004c4a:	bf00      	nop
 8004c4c:	371c      	adds	r7, #28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40013400 	.word	0x40013400
 8004c60:	40014000 	.word	0x40014000
 8004c64:	40014400 	.word	0x40014400
 8004c68:	40014800 	.word	0x40014800

08004c6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
 8004c78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1b      	ldr	r3, [r3, #32]
 8004c7e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
 8004c84:	f023 0201 	bic.w	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4a26      	ldr	r2, [pc, #152]	@ (8004d30 <TIM_TI1_SetConfig+0xc4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d017      	beq.n	8004cca <TIM_TI1_SetConfig+0x5e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca0:	d013      	beq.n	8004cca <TIM_TI1_SetConfig+0x5e>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	4a23      	ldr	r2, [pc, #140]	@ (8004d34 <TIM_TI1_SetConfig+0xc8>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_TI1_SetConfig+0x5e>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	4a22      	ldr	r2, [pc, #136]	@ (8004d38 <TIM_TI1_SetConfig+0xcc>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_TI1_SetConfig+0x5e>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4a21      	ldr	r2, [pc, #132]	@ (8004d3c <TIM_TI1_SetConfig+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_TI1_SetConfig+0x5e>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4a20      	ldr	r2, [pc, #128]	@ (8004d40 <TIM_TI1_SetConfig+0xd4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_TI1_SetConfig+0x5e>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004d44 <TIM_TI1_SetConfig+0xd8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d101      	bne.n	8004cce <TIM_TI1_SetConfig+0x62>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e000      	b.n	8004cd0 <TIM_TI1_SetConfig+0x64>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	e003      	b.n	8004cee <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f043 0301 	orr.w	r3, r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004cf4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f023 030a 	bic.w	r3, r3, #10
 8004d08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 030a 	and.w	r3, r3, #10
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	697a      	ldr	r2, [r7, #20]
 8004d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40012c00 	.word	0x40012c00
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40013400 	.word	0x40013400
 8004d44:	40014000 	.word	0x40014000

08004d48 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	f023 0210 	bic.w	r2, r3, #16
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	021b      	lsls	r3, r3, #8
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	031b      	lsls	r3, r3, #12
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	693a      	ldr	r2, [r7, #16]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d9a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	4313      	orrs	r3, r2
 8004da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	621a      	str	r2, [r3, #32]
}
 8004db6:	bf00      	nop
 8004db8:	371c      	adds	r7, #28
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b087      	sub	sp, #28
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	60f8      	str	r0, [r7, #12]
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	693a      	ldr	r2, [r7, #16]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004e12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	021b      	lsls	r3, r3, #8
 8004e18:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	621a      	str	r2, [r3, #32]
}
 8004e2e:	bf00      	nop
 8004e30:	371c      	adds	r7, #28
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	60f8      	str	r0, [r7, #12]
 8004e42:	60b9      	str	r1, [r7, #8]
 8004e44:	607a      	str	r2, [r7, #4]
 8004e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a1b      	ldr	r3, [r3, #32]
 8004e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	021b      	lsls	r3, r3, #8
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004e78:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	031b      	lsls	r3, r3, #12
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004e8c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	031b      	lsls	r3, r3, #12
 8004e92:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d101      	bne.n	8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec8:	2302      	movs	r3, #2
 8004eca:	e068      	b.n	8004f9e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a2e      	ldr	r2, [pc, #184]	@ (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d004      	beq.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d108      	bne.n	8004f12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1e      	ldr	r2, [pc, #120]	@ (8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d01d      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f3e:	d018      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d013      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00e      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d009      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a13      	ldr	r2, [pc, #76]	@ (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d004      	beq.n	8004f72 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d10c      	bne.n	8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	68ba      	ldr	r2, [r7, #8]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3714      	adds	r7, #20
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40013400 	.word	0x40013400
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40014000 	.word	0x40014000

08004fc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fcc:	bf00      	nop
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ff4:	bf00      	nop
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e040      	b.n	8005094 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d106      	bne.n	8005028 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7fb ff9c 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2224      	movs	r2, #36	@ 0x24
 800502c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fae0 	bl	800560c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f825 	bl	800509c <UART_SetConfig>
 8005052:	4603      	mov	r3, r0
 8005054:	2b01      	cmp	r3, #1
 8005056:	d101      	bne.n	800505c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e01b      	b.n	8005094 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800506a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800507a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fb5f 	bl	8005750 <UART_CheckIdleState>
 8005092:	4603      	mov	r3, r0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a0:	b08a      	sub	sp, #40	@ 0x28
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	689a      	ldr	r2, [r3, #8]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	431a      	orrs	r2, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	431a      	orrs	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4ba4      	ldr	r3, [pc, #656]	@ (800535c <UART_SetConfig+0x2c0>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050d4:	430b      	orrs	r3, r1
 80050d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	430a      	orrs	r2, r1
 80050ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a99      	ldr	r2, [pc, #612]	@ (8005360 <UART_SetConfig+0x2c4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d004      	beq.n	8005108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a1b      	ldr	r3, [r3, #32]
 8005102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005104:	4313      	orrs	r3, r2
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005118:	430a      	orrs	r2, r1
 800511a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a90      	ldr	r2, [pc, #576]	@ (8005364 <UART_SetConfig+0x2c8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d126      	bne.n	8005174 <UART_SetConfig+0xd8>
 8005126:	4b90      	ldr	r3, [pc, #576]	@ (8005368 <UART_SetConfig+0x2cc>)
 8005128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512c:	f003 0303 	and.w	r3, r3, #3
 8005130:	2b03      	cmp	r3, #3
 8005132:	d81b      	bhi.n	800516c <UART_SetConfig+0xd0>
 8005134:	a201      	add	r2, pc, #4	@ (adr r2, 800513c <UART_SetConfig+0xa0>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	0800514d 	.word	0x0800514d
 8005140:	0800515d 	.word	0x0800515d
 8005144:	08005155 	.word	0x08005155
 8005148:	08005165 	.word	0x08005165
 800514c:	2301      	movs	r3, #1
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005152:	e116      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005154:	2302      	movs	r3, #2
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515a:	e112      	b.n	8005382 <UART_SetConfig+0x2e6>
 800515c:	2304      	movs	r3, #4
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005162:	e10e      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005164:	2308      	movs	r3, #8
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516a:	e10a      	b.n	8005382 <UART_SetConfig+0x2e6>
 800516c:	2310      	movs	r3, #16
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005172:	e106      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a7c      	ldr	r2, [pc, #496]	@ (800536c <UART_SetConfig+0x2d0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d138      	bne.n	80051f0 <UART_SetConfig+0x154>
 800517e:	4b7a      	ldr	r3, [pc, #488]	@ (8005368 <UART_SetConfig+0x2cc>)
 8005180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005184:	f003 030c 	and.w	r3, r3, #12
 8005188:	2b0c      	cmp	r3, #12
 800518a:	d82d      	bhi.n	80051e8 <UART_SetConfig+0x14c>
 800518c:	a201      	add	r2, pc, #4	@ (adr r2, 8005194 <UART_SetConfig+0xf8>)
 800518e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005192:	bf00      	nop
 8005194:	080051c9 	.word	0x080051c9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051d9 	.word	0x080051d9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	080051e9 	.word	0x080051e9
 80051bc:	080051e9 	.word	0x080051e9
 80051c0:	080051e9 	.word	0x080051e9
 80051c4:	080051e1 	.word	0x080051e1
 80051c8:	2300      	movs	r3, #0
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ce:	e0d8      	b.n	8005382 <UART_SetConfig+0x2e6>
 80051d0:	2302      	movs	r3, #2
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d6:	e0d4      	b.n	8005382 <UART_SetConfig+0x2e6>
 80051d8:	2304      	movs	r3, #4
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051de:	e0d0      	b.n	8005382 <UART_SetConfig+0x2e6>
 80051e0:	2308      	movs	r3, #8
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e0cc      	b.n	8005382 <UART_SetConfig+0x2e6>
 80051e8:	2310      	movs	r3, #16
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ee:	e0c8      	b.n	8005382 <UART_SetConfig+0x2e6>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a5e      	ldr	r2, [pc, #376]	@ (8005370 <UART_SetConfig+0x2d4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d125      	bne.n	8005246 <UART_SetConfig+0x1aa>
 80051fa:	4b5b      	ldr	r3, [pc, #364]	@ (8005368 <UART_SetConfig+0x2cc>)
 80051fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005200:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005204:	2b30      	cmp	r3, #48	@ 0x30
 8005206:	d016      	beq.n	8005236 <UART_SetConfig+0x19a>
 8005208:	2b30      	cmp	r3, #48	@ 0x30
 800520a:	d818      	bhi.n	800523e <UART_SetConfig+0x1a2>
 800520c:	2b20      	cmp	r3, #32
 800520e:	d00a      	beq.n	8005226 <UART_SetConfig+0x18a>
 8005210:	2b20      	cmp	r3, #32
 8005212:	d814      	bhi.n	800523e <UART_SetConfig+0x1a2>
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <UART_SetConfig+0x182>
 8005218:	2b10      	cmp	r3, #16
 800521a:	d008      	beq.n	800522e <UART_SetConfig+0x192>
 800521c:	e00f      	b.n	800523e <UART_SetConfig+0x1a2>
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005224:	e0ad      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005226:	2302      	movs	r3, #2
 8005228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522c:	e0a9      	b.n	8005382 <UART_SetConfig+0x2e6>
 800522e:	2304      	movs	r3, #4
 8005230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005234:	e0a5      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005236:	2308      	movs	r3, #8
 8005238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523c:	e0a1      	b.n	8005382 <UART_SetConfig+0x2e6>
 800523e:	2310      	movs	r3, #16
 8005240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005244:	e09d      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a4a      	ldr	r2, [pc, #296]	@ (8005374 <UART_SetConfig+0x2d8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d125      	bne.n	800529c <UART_SetConfig+0x200>
 8005250:	4b45      	ldr	r3, [pc, #276]	@ (8005368 <UART_SetConfig+0x2cc>)
 8005252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005256:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800525a:	2bc0      	cmp	r3, #192	@ 0xc0
 800525c:	d016      	beq.n	800528c <UART_SetConfig+0x1f0>
 800525e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005260:	d818      	bhi.n	8005294 <UART_SetConfig+0x1f8>
 8005262:	2b80      	cmp	r3, #128	@ 0x80
 8005264:	d00a      	beq.n	800527c <UART_SetConfig+0x1e0>
 8005266:	2b80      	cmp	r3, #128	@ 0x80
 8005268:	d814      	bhi.n	8005294 <UART_SetConfig+0x1f8>
 800526a:	2b00      	cmp	r3, #0
 800526c:	d002      	beq.n	8005274 <UART_SetConfig+0x1d8>
 800526e:	2b40      	cmp	r3, #64	@ 0x40
 8005270:	d008      	beq.n	8005284 <UART_SetConfig+0x1e8>
 8005272:	e00f      	b.n	8005294 <UART_SetConfig+0x1f8>
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800527a:	e082      	b.n	8005382 <UART_SetConfig+0x2e6>
 800527c:	2302      	movs	r3, #2
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e07e      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005284:	2304      	movs	r3, #4
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e07a      	b.n	8005382 <UART_SetConfig+0x2e6>
 800528c:	2308      	movs	r3, #8
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005292:	e076      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005294:	2310      	movs	r3, #16
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e072      	b.n	8005382 <UART_SetConfig+0x2e6>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a35      	ldr	r2, [pc, #212]	@ (8005378 <UART_SetConfig+0x2dc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d12a      	bne.n	80052fc <UART_SetConfig+0x260>
 80052a6:	4b30      	ldr	r3, [pc, #192]	@ (8005368 <UART_SetConfig+0x2cc>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052b4:	d01a      	beq.n	80052ec <UART_SetConfig+0x250>
 80052b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ba:	d81b      	bhi.n	80052f4 <UART_SetConfig+0x258>
 80052bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c0:	d00c      	beq.n	80052dc <UART_SetConfig+0x240>
 80052c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c6:	d815      	bhi.n	80052f4 <UART_SetConfig+0x258>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <UART_SetConfig+0x238>
 80052cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d0:	d008      	beq.n	80052e4 <UART_SetConfig+0x248>
 80052d2:	e00f      	b.n	80052f4 <UART_SetConfig+0x258>
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052da:	e052      	b.n	8005382 <UART_SetConfig+0x2e6>
 80052dc:	2302      	movs	r3, #2
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e2:	e04e      	b.n	8005382 <UART_SetConfig+0x2e6>
 80052e4:	2304      	movs	r3, #4
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ea:	e04a      	b.n	8005382 <UART_SetConfig+0x2e6>
 80052ec:	2308      	movs	r3, #8
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f2:	e046      	b.n	8005382 <UART_SetConfig+0x2e6>
 80052f4:	2310      	movs	r3, #16
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fa:	e042      	b.n	8005382 <UART_SetConfig+0x2e6>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a17      	ldr	r2, [pc, #92]	@ (8005360 <UART_SetConfig+0x2c4>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d13a      	bne.n	800537c <UART_SetConfig+0x2e0>
 8005306:	4b18      	ldr	r3, [pc, #96]	@ (8005368 <UART_SetConfig+0x2cc>)
 8005308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800530c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005314:	d01a      	beq.n	800534c <UART_SetConfig+0x2b0>
 8005316:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800531a:	d81b      	bhi.n	8005354 <UART_SetConfig+0x2b8>
 800531c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005320:	d00c      	beq.n	800533c <UART_SetConfig+0x2a0>
 8005322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005326:	d815      	bhi.n	8005354 <UART_SetConfig+0x2b8>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <UART_SetConfig+0x298>
 800532c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005330:	d008      	beq.n	8005344 <UART_SetConfig+0x2a8>
 8005332:	e00f      	b.n	8005354 <UART_SetConfig+0x2b8>
 8005334:	2300      	movs	r3, #0
 8005336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800533a:	e022      	b.n	8005382 <UART_SetConfig+0x2e6>
 800533c:	2302      	movs	r3, #2
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005342:	e01e      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005344:	2304      	movs	r3, #4
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534a:	e01a      	b.n	8005382 <UART_SetConfig+0x2e6>
 800534c:	2308      	movs	r3, #8
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005352:	e016      	b.n	8005382 <UART_SetConfig+0x2e6>
 8005354:	2310      	movs	r3, #16
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535a:	e012      	b.n	8005382 <UART_SetConfig+0x2e6>
 800535c:	efff69f3 	.word	0xefff69f3
 8005360:	40008000 	.word	0x40008000
 8005364:	40013800 	.word	0x40013800
 8005368:	40021000 	.word	0x40021000
 800536c:	40004400 	.word	0x40004400
 8005370:	40004800 	.word	0x40004800
 8005374:	40004c00 	.word	0x40004c00
 8005378:	40005000 	.word	0x40005000
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a9f      	ldr	r2, [pc, #636]	@ (8005604 <UART_SetConfig+0x568>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d17a      	bne.n	8005482 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800538c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005390:	2b08      	cmp	r3, #8
 8005392:	d824      	bhi.n	80053de <UART_SetConfig+0x342>
 8005394:	a201      	add	r2, pc, #4	@ (adr r2, 800539c <UART_SetConfig+0x300>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	080053df 	.word	0x080053df
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053df 	.word	0x080053df
 80053ac:	080053cf 	.word	0x080053cf
 80053b0:	080053df 	.word	0x080053df
 80053b4:	080053df 	.word	0x080053df
 80053b8:	080053df 	.word	0x080053df
 80053bc:	080053d7 	.word	0x080053d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c0:	f7fd ff64 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 80053c4:	61f8      	str	r0, [r7, #28]
        break;
 80053c6:	e010      	b.n	80053ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005608 <UART_SetConfig+0x56c>)
 80053ca:	61fb      	str	r3, [r7, #28]
        break;
 80053cc:	e00d      	b.n	80053ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fd fec5 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80053d2:	61f8      	str	r0, [r7, #28]
        break;
 80053d4:	e009      	b.n	80053ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053da:	61fb      	str	r3, [r7, #28]
        break;
 80053dc:	e005      	b.n	80053ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80fb 	beq.w	80055e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	4413      	add	r3, r2
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d305      	bcc.n	800540e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	429a      	cmp	r2, r3
 800540c:	d903      	bls.n	8005416 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005414:	e0e8      	b.n	80055e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2200      	movs	r2, #0
 800541a:	461c      	mov	r4, r3
 800541c:	4615      	mov	r5, r2
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	022b      	lsls	r3, r5, #8
 8005428:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800542c:	0222      	lsls	r2, r4, #8
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6849      	ldr	r1, [r1, #4]
 8005432:	0849      	lsrs	r1, r1, #1
 8005434:	2000      	movs	r0, #0
 8005436:	4688      	mov	r8, r1
 8005438:	4681      	mov	r9, r0
 800543a:	eb12 0a08 	adds.w	sl, r2, r8
 800543e:	eb43 0b09 	adc.w	fp, r3, r9
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	603b      	str	r3, [r7, #0]
 800544a:	607a      	str	r2, [r7, #4]
 800544c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005450:	4650      	mov	r0, sl
 8005452:	4659      	mov	r1, fp
 8005454:	f7fa feb8 	bl	80001c8 <__aeabi_uldivmod>
 8005458:	4602      	mov	r2, r0
 800545a:	460b      	mov	r3, r1
 800545c:	4613      	mov	r3, r2
 800545e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005466:	d308      	bcc.n	800547a <UART_SetConfig+0x3de>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800546e:	d204      	bcs.n	800547a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	60da      	str	r2, [r3, #12]
 8005478:	e0b6      	b.n	80055e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005480:	e0b2      	b.n	80055e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800548a:	d15e      	bne.n	800554a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800548c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005490:	2b08      	cmp	r3, #8
 8005492:	d828      	bhi.n	80054e6 <UART_SetConfig+0x44a>
 8005494:	a201      	add	r2, pc, #4	@ (adr r2, 800549c <UART_SetConfig+0x400>)
 8005496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549a:	bf00      	nop
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	080054e7 	.word	0x080054e7
 80054ac:	080054d7 	.word	0x080054d7
 80054b0:	080054e7 	.word	0x080054e7
 80054b4:	080054e7 	.word	0x080054e7
 80054b8:	080054e7 	.word	0x080054e7
 80054bc:	080054df 	.word	0x080054df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c0:	f7fd fee4 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 80054c4:	61f8      	str	r0, [r7, #28]
        break;
 80054c6:	e014      	b.n	80054f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054c8:	f7fd fef6 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 80054cc:	61f8      	str	r0, [r7, #28]
        break;
 80054ce:	e010      	b.n	80054f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005608 <UART_SetConfig+0x56c>)
 80054d2:	61fb      	str	r3, [r7, #28]
        break;
 80054d4:	e00d      	b.n	80054f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054d6:	f7fd fe41 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80054da:	61f8      	str	r0, [r7, #28]
        break;
 80054dc:	e009      	b.n	80054f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054e2:	61fb      	str	r3, [r7, #28]
        break;
 80054e4:	e005      	b.n	80054f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d077      	beq.n	80055e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	005a      	lsls	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	085b      	lsrs	r3, r3, #1
 8005502:	441a      	add	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	fbb2 f3f3 	udiv	r3, r2, r3
 800550c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b0f      	cmp	r3, #15
 8005512:	d916      	bls.n	8005542 <UART_SetConfig+0x4a6>
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800551a:	d212      	bcs.n	8005542 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	b29b      	uxth	r3, r3
 8005520:	f023 030f 	bic.w	r3, r3, #15
 8005524:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	085b      	lsrs	r3, r3, #1
 800552a:	b29b      	uxth	r3, r3
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	b29a      	uxth	r2, r3
 8005532:	8afb      	ldrh	r3, [r7, #22]
 8005534:	4313      	orrs	r3, r2
 8005536:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	8afa      	ldrh	r2, [r7, #22]
 800553e:	60da      	str	r2, [r3, #12]
 8005540:	e052      	b.n	80055e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005548:	e04e      	b.n	80055e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800554a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800554e:	2b08      	cmp	r3, #8
 8005550:	d827      	bhi.n	80055a2 <UART_SetConfig+0x506>
 8005552:	a201      	add	r2, pc, #4	@ (adr r2, 8005558 <UART_SetConfig+0x4bc>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	0800557d 	.word	0x0800557d
 800555c:	08005585 	.word	0x08005585
 8005560:	0800558d 	.word	0x0800558d
 8005564:	080055a3 	.word	0x080055a3
 8005568:	08005593 	.word	0x08005593
 800556c:	080055a3 	.word	0x080055a3
 8005570:	080055a3 	.word	0x080055a3
 8005574:	080055a3 	.word	0x080055a3
 8005578:	0800559b 	.word	0x0800559b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800557c:	f7fd fe86 	bl	800328c <HAL_RCC_GetPCLK1Freq>
 8005580:	61f8      	str	r0, [r7, #28]
        break;
 8005582:	e014      	b.n	80055ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005584:	f7fd fe98 	bl	80032b8 <HAL_RCC_GetPCLK2Freq>
 8005588:	61f8      	str	r0, [r7, #28]
        break;
 800558a:	e010      	b.n	80055ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800558c:	4b1e      	ldr	r3, [pc, #120]	@ (8005608 <UART_SetConfig+0x56c>)
 800558e:	61fb      	str	r3, [r7, #28]
        break;
 8005590:	e00d      	b.n	80055ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005592:	f7fd fde3 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8005596:	61f8      	str	r0, [r7, #28]
        break;
 8005598:	e009      	b.n	80055ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800559e:	61fb      	str	r3, [r7, #28]
        break;
 80055a0:	e005      	b.n	80055ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055ac:	bf00      	nop
    }

    if (pclk != 0U)
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d019      	beq.n	80055e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	085a      	lsrs	r2, r3, #1
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	441a      	add	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d909      	bls.n	80055e2 <UART_SetConfig+0x546>
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055d4:	d205      	bcs.n	80055e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	60da      	str	r2, [r3, #12]
 80055e0:	e002      	b.n	80055e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3728      	adds	r7, #40	@ 0x28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005602:	bf00      	nop
 8005604:	40008000 	.word	0x40008000
 8005608:	00f42400 	.word	0x00f42400

0800560c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	430a      	orrs	r2, r1
 8005634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	430a      	orrs	r2, r1
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00a      	beq.n	80056be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01a      	beq.n	8005722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	430a      	orrs	r2, r1
 8005700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800570a:	d10a      	bne.n	8005722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b098      	sub	sp, #96	@ 0x60
 8005754:	af02      	add	r7, sp, #8
 8005756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005760:	f7fb fd38 	bl	80011d4 <HAL_GetTick>
 8005764:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d12e      	bne.n	80057d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800577c:	2200      	movs	r2, #0
 800577e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f88c 	bl	80058a0 <UART_WaitOnFlagUntilTimeout>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	d021      	beq.n	80057d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800579c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	461a      	mov	r2, r3
 80057aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e6      	bne.n	800578e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2220      	movs	r2, #32
 80057c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e062      	b.n	8005898 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d149      	bne.n	8005874 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f856 	bl	80058a0 <UART_WaitOnFlagUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03c      	beq.n	8005874 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	623b      	str	r3, [r7, #32]
   return(result);
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800580e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	461a      	mov	r2, r3
 8005816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005818:	633b      	str	r3, [r7, #48]	@ 0x30
 800581a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800581e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e6      	bne.n	80057fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	e853 3f00 	ldrex	r3, [r3]
 800583a:	60fb      	str	r3, [r7, #12]
   return(result);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3308      	adds	r3, #8
 800584a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800584c:	61fa      	str	r2, [r7, #28]
 800584e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005850:	69b9      	ldr	r1, [r7, #24]
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	e841 2300 	strex	r3, r2, [r1]
 8005858:	617b      	str	r3, [r7, #20]
   return(result);
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1e5      	bne.n	800582c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2220      	movs	r2, #32
 8005864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e011      	b.n	8005898 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3758      	adds	r7, #88	@ 0x58
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	603b      	str	r3, [r7, #0]
 80058ac:	4613      	mov	r3, r2
 80058ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b0:	e049      	b.n	8005946 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b8:	d045      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ba:	f7fb fc8b 	bl	80011d4 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d302      	bcc.n	80058d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e048      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d031      	beq.n	8005946 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d110      	bne.n	8005912 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2208      	movs	r2, #8
 80058f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f000 f838 	bl	800596e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2208      	movs	r2, #8
 8005902:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e029      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800591c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005920:	d111      	bne.n	8005946 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800592a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 f81e 	bl	800596e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e00f      	b.n	8005966 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69da      	ldr	r2, [r3, #28]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4013      	ands	r3, r2
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	429a      	cmp	r2, r3
 8005954:	bf0c      	ite	eq
 8005956:	2301      	moveq	r3, #1
 8005958:	2300      	movne	r3, #0
 800595a:	b2db      	uxtb	r3, r3
 800595c:	461a      	mov	r2, r3
 800595e:	79fb      	ldrb	r3, [r7, #7]
 8005960:	429a      	cmp	r2, r3
 8005962:	d0a6      	beq.n	80058b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800596e:	b480      	push	{r7}
 8005970:	b095      	sub	sp, #84	@ 0x54
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800597e:	e853 3f00 	ldrex	r3, [r3]
 8005982:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800598a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005994:	643b      	str	r3, [r7, #64]	@ 0x40
 8005996:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800599a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e6      	bne.n	8005976 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3308      	adds	r3, #8
 80059ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b0:	6a3b      	ldr	r3, [r7, #32]
 80059b2:	e853 3f00 	ldrex	r3, [r3]
 80059b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f023 0301 	bic.w	r3, r3, #1
 80059be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3308      	adds	r3, #8
 80059c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e5      	bne.n	80059a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d118      	bne.n	8005a16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	e853 3f00 	ldrex	r3, [r3]
 80059f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	f023 0310 	bic.w	r3, r3, #16
 80059f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	461a      	mov	r2, r3
 8005a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	e841 2300 	strex	r3, r2, [r1]
 8005a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1e6      	bne.n	80059e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a2a:	bf00      	nop
 8005a2c:	3754      	adds	r7, #84	@ 0x54
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr

08005a36 <memset>:
 8005a36:	4402      	add	r2, r0
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d100      	bne.n	8005a40 <memset+0xa>
 8005a3e:	4770      	bx	lr
 8005a40:	f803 1b01 	strb.w	r1, [r3], #1
 8005a44:	e7f9      	b.n	8005a3a <memset+0x4>
	...

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a80 <__libc_init_array+0x38>)
 8005a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a84 <__libc_init_array+0x3c>)
 8005a4e:	1b64      	subs	r4, r4, r5
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	2600      	movs	r6, #0
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	4d0b      	ldr	r5, [pc, #44]	@ (8005a88 <__libc_init_array+0x40>)
 8005a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a8c <__libc_init_array+0x44>)
 8005a5c:	f000 f818 	bl	8005a90 <_init>
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	2600      	movs	r6, #0
 8005a66:	42a6      	cmp	r6, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a70:	4798      	blx	r3
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7a:	4798      	blx	r3
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	08005af8 	.word	0x08005af8
 8005a84:	08005af8 	.word	0x08005af8
 8005a88:	08005af8 	.word	0x08005af8
 8005a8c:	08005afc 	.word	0x08005afc

08005a90 <_init>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	bf00      	nop
 8005a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a96:	bc08      	pop	{r3}
 8005a98:	469e      	mov	lr, r3
 8005a9a:	4770      	bx	lr

08005a9c <_fini>:
 8005a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a9e:	bf00      	nop
 8005aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa2:	bc08      	pop	{r3}
 8005aa4:	469e      	mov	lr, r3
 8005aa6:	4770      	bx	lr
