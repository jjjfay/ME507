
Starting_Over.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000725c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  080073ec  080073ec  000083ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800754c  0800754c  000090a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800754c  0800754c  0000854c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007554  08007554  000090a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007554  08007554  00008554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007558  08007558  00008558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a4  20000000  0800755c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000390  200000a4  08007600  000090a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000434  08007600  00009434  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015940  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  0001ea14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00021680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f46  00000000  00000000  00022a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4a0  00000000  00000000  0002396e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a70  00000000  00000000  0004de0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107e21  00000000  00000000  0006587e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d69f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c7c  00000000  00000000  0016d6e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00173360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a4 	.word	0x200000a4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080073d4 	.word	0x080073d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	080073d4 	.word	0x080073d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_init>:
/**
 * @brief A function to initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_init(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize the motor driver channels
	start_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fa71 	bl	8000a54 <start_PWM>

	//initialize the encoder reader channels
	init_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f804 	bl	8000584 <init_channels>


}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <init_channels>:
/**
 * @brief A function to initialize the channels for reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void init_channels(encoder_t* p_enc){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	//HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_ALL);
	//HAL_TIM_Encoder_Start(p_enc->hal_tim,  p_enc->channel2);
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_1);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f004 fab2 	bl	8004afc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_2);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	689b      	ldr	r3, [r3, #8]
 800059c:	2104      	movs	r1, #4
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 faac 	bl	8004afc <HAL_TIM_Encoder_Start>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fe97 	bl	80012e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f860 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 fa16 	bl	80009e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005bc:	f000 f924 	bl	8000808 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c0:	f000 f97c 	bl	80008bc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 f9e0 	bl	8000988 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c8:	f000 f8a8 	bl	800071c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  //initialize the controller

  controller_init(&hand_cont);
 80005cc:	4820      	ldr	r0, [pc, #128]	@ (8000650 <main+0xa4>)
 80005ce:	f7ff ffc7 	bl	8000560 <controller_init>

  //set_setpoint(&hand_cont,hand_mot_pos);

  //set_K(&hand_cont,10000);

  set_duty(&hand_mot,799999);
 80005d2:	4920      	ldr	r1, [pc, #128]	@ (8000654 <main+0xa8>)
 80005d4:	4820      	ldr	r0, [pc, #128]	@ (8000658 <main+0xac>)
 80005d6:	f000 fa55 	bl	8000a84 <set_duty>
  {

	  //m = sprintf(tst_buff,"\n\rThe encoder position value is: %d\n",get_pos(&hand_enc));
	  //HAL_UART_Transmit(&huart2,tst_buff,m,400);

	  m = sprintf(tst_buff,"\r");
 80005da:	4920      	ldr	r1, [pc, #128]	@ (800065c <main+0xb0>)
 80005dc:	4820      	ldr	r0, [pc, #128]	@ (8000660 <main+0xb4>)
 80005de:	f005 fec7 	bl	8006370 <siprintf>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <main+0xb8>)
 80005e6:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,tst_buff,m,400);
 80005e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000664 <main+0xb8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	b29a      	uxth	r2, r3
 80005ee:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80005f2:	491b      	ldr	r1, [pc, #108]	@ (8000660 <main+0xb4>)
 80005f4:	481c      	ldr	r0, [pc, #112]	@ (8000668 <main+0xbc>)
 80005f6:	f005 f88f 	bl	8005718 <HAL_UART_Transmit>

	  m = sprintf(tst_buff,"\033[1G");
 80005fa:	491c      	ldr	r1, [pc, #112]	@ (800066c <main+0xc0>)
 80005fc:	4818      	ldr	r0, [pc, #96]	@ (8000660 <main+0xb4>)
 80005fe:	f005 feb7 	bl	8006370 <siprintf>
 8000602:	4603      	mov	r3, r0
 8000604:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <main+0xb8>)
 8000606:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,tst_buff,m,400);
 8000608:	4b16      	ldr	r3, [pc, #88]	@ (8000664 <main+0xb8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	b29a      	uxth	r2, r3
 800060e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000612:	4913      	ldr	r1, [pc, #76]	@ (8000660 <main+0xb4>)
 8000614:	4814      	ldr	r0, [pc, #80]	@ (8000668 <main+0xbc>)
 8000616:	f005 f87f 	bl	8005718 <HAL_UART_Transmit>

	  m = sprintf(tst_buff,"\rThe myo value is: %d",read_current(&hmyo));
 800061a:	4815      	ldr	r0, [pc, #84]	@ (8000670 <main+0xc4>)
 800061c:	f000 fbae 	bl	8000d7c <read_current>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4913      	ldr	r1, [pc, #76]	@ (8000674 <main+0xc8>)
 8000626:	480e      	ldr	r0, [pc, #56]	@ (8000660 <main+0xb4>)
 8000628:	f005 fea2 	bl	8006370 <siprintf>
 800062c:	4603      	mov	r3, r0
 800062e:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <main+0xb8>)
 8000630:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2,tst_buff,m,400);
 8000632:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <main+0xb8>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	b29a      	uxth	r2, r3
 8000638:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800063c:	4908      	ldr	r1, [pc, #32]	@ (8000660 <main+0xb4>)
 800063e:	480a      	ldr	r0, [pc, #40]	@ (8000668 <main+0xbc>)
 8000640:	f005 f86a 	bl	8005718 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 8000644:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000648:	f000 fec0 	bl	80013cc <HAL_Delay>
	  m = sprintf(tst_buff,"\r");
 800064c:	bf00      	nop
 800064e:	e7c4      	b.n	80005da <main+0x2e>
 8000650:	20000024 	.word	0x20000024
 8000654:	000c34ff 	.word	0x000c34ff
 8000658:	20000014 	.word	0x20000014
 800065c:	0800748c 	.word	0x0800748c
 8000660:	20000244 	.word	0x20000244
 8000664:	200002dc 	.word	0x200002dc
 8000668:	200001bc 	.word	0x200001bc
 800066c:	08007490 	.word	0x08007490
 8000670:	20000034 	.word	0x20000034
 8000674:	08007498 	.word	0x08007498

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b096      	sub	sp, #88	@ 0x58
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	2244      	movs	r2, #68	@ 0x44
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f005 fed5 	bl	8006436 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	463b      	mov	r3, r7
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800069e:	f002 fd17 	bl	80030d0 <HAL_PWREx_ControlVoltageScaling>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a8:	f000 f9ce 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b6:	2310      	movs	r3, #16
 80006b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006be:	2302      	movs	r3, #2
 80006c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006c6:	230a      	movs	r3, #10
 80006c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ca:	2307      	movs	r3, #7
 80006cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 0314 	add.w	r3, r7, #20
 80006da:	4618      	mov	r0, r3
 80006dc:	f002 fd4e 	bl	800317c <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006e6:	f000 f9af 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2303      	movs	r3, #3
 80006f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f003 f916 	bl	8003934 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800070e:	f000 f99b 	bl	8000a48 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3758      	adds	r7, #88	@ 0x58
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
 800073a:	611a      	str	r2, [r3, #16]
 800073c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800073e:	4b2f      	ldr	r3, [pc, #188]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <MX_ADC1_Init+0xe4>)
 8000742:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000744:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800074a:	4b2c      	ldr	r3, [pc, #176]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000756:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000758:	2200      	movs	r2, #0
 800075a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800075c:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800075e:	2204      	movs	r2, #4
 8000760:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000762:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000764:	2200      	movs	r2, #0
 8000766:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000768:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800076a:	2200      	movs	r2, #0
 800076c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800076e:	4b23      	ldr	r3, [pc, #140]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000770:	2201      	movs	r2, #1
 8000772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800077c:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800077e:	2200      	movs	r2, #0
 8000780:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000784:	2200      	movs	r2, #0
 8000786:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <MX_ADC1_Init+0xe0>)
 800078a:	2200      	movs	r2, #0
 800078c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000792:	2200      	movs	r2, #0
 8000794:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000796:	4b19      	ldr	r3, [pc, #100]	@ (80007fc <MX_ADC1_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800079e:	4817      	ldr	r0, [pc, #92]	@ (80007fc <MX_ADC1_Init+0xe0>)
 80007a0:	f001 f86a 	bl	8001878 <HAL_ADC_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80007aa:	f000 f94d 	bl	8000a48 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4810      	ldr	r0, [pc, #64]	@ (80007fc <MX_ADC1_Init+0xe0>)
 80007ba:	f002 f93b 	bl	8002a34 <HAL_ADCEx_MultiModeConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007c4:	f000 f940 	bl	8000a48 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000804 <MX_ADC1_Init+0xe8>)
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007cc:	2306      	movs	r3, #6
 80007ce:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007d4:	237f      	movs	r3, #127	@ 0x7f
 80007d6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007d8:	2304      	movs	r3, #4
 80007da:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	4805      	ldr	r0, [pc, #20]	@ (80007fc <MX_ADC1_Init+0xe0>)
 80007e6:	f001 fb6b 	bl	8001ec0 <HAL_ADC_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80007f0:	f000 f92a 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	200000c0 	.word	0x200000c0
 8000800:	50040000 	.word	0x50040000
 8000804:	04300002 	.word	0x04300002

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b08c      	sub	sp, #48	@ 0x30
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2224      	movs	r2, #36	@ 0x24
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f005 fe0d 	bl	8006436 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000826:	4b23      	ldr	r3, [pc, #140]	@ (80008b4 <MX_TIM1_Init+0xac>)
 8000828:	4a23      	ldr	r2, [pc, #140]	@ (80008b8 <MX_TIM1_Init+0xb0>)
 800082a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_TIM1_Init+0xac>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_TIM1_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000838:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_TIM1_Init+0xac>)
 800083a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000840:	4b1c      	ldr	r3, [pc, #112]	@ (80008b4 <MX_TIM1_Init+0xac>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_TIM1_Init+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_TIM1_Init+0xac>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000852:	2303      	movs	r3, #3
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086a:	2301      	movs	r3, #1
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <MX_TIM1_Init+0xac>)
 800087e:	f004 f897 	bl	80049b0 <HAL_TIM_Encoder_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000888:	f000 f8de 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000898:	463b      	mov	r3, r7
 800089a:	4619      	mov	r1, r3
 800089c:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_TIM1_Init+0xac>)
 800089e:	f004 fe65 	bl	800556c <HAL_TIMEx_MasterConfigSynchronization>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80008a8:	f000 f8ce 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	3730      	adds	r7, #48	@ 0x30
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000124 	.word	0x20000124
 80008b8:	40012c00 	.word	0x40012c00

080008bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]
 80008de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e0:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_TIM2_Init+0xc4>)
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008e8:	4b25      	ldr	r3, [pc, #148]	@ (8000980 <MX_TIM2_Init+0xc4>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_TIM2_Init+0xc4>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 80008f4:	4b22      	ldr	r3, [pc, #136]	@ (8000980 <MX_TIM2_Init+0xc4>)
 80008f6:	4a23      	ldr	r2, [pc, #140]	@ (8000984 <MX_TIM2_Init+0xc8>)
 80008f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b21      	ldr	r3, [pc, #132]	@ (8000980 <MX_TIM2_Init+0xc4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b1f      	ldr	r3, [pc, #124]	@ (8000980 <MX_TIM2_Init+0xc4>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000906:	481e      	ldr	r0, [pc, #120]	@ (8000980 <MX_TIM2_Init+0xc4>)
 8000908:	f003 fef4 	bl	80046f4 <HAL_TIM_PWM_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000912:	f000 f899 	bl	8000a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4816      	ldr	r0, [pc, #88]	@ (8000980 <MX_TIM2_Init+0xc4>)
 8000926:	f004 fe21 	bl	800556c <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000930:	f000 f88a 	bl	8000a48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000934:	2360      	movs	r3, #96	@ 0x60
 8000936:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	480d      	ldr	r0, [pc, #52]	@ (8000980 <MX_TIM2_Init+0xc4>)
 800094c:	f004 f964 	bl	8004c18 <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000956:	f000 f877 	bl	8000a48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095a:	463b      	mov	r3, r7
 800095c:	2204      	movs	r2, #4
 800095e:	4619      	mov	r1, r3
 8000960:	4807      	ldr	r0, [pc, #28]	@ (8000980 <MX_TIM2_Init+0xc4>)
 8000962:	f004 f959 	bl	8004c18 <HAL_TIM_PWM_ConfigChannel>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800096c:	f000 f86c 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000970:	4803      	ldr	r0, [pc, #12]	@ (8000980 <MX_TIM2_Init+0xc4>)
 8000972:	f000 fb19 	bl	8000fa8 <HAL_TIM_MspPostInit>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	@ 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20000170 	.word	0x20000170
 8000984:	000c34ff 	.word	0x000c34ff

08000988 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <MX_USART2_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 8000994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000998:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART2_UART_Init+0x58>)
 80009cc:	f004 fe56 	bl	800567c <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f837 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200001bc 	.word	0x200001bc
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 8000a24:	f043 0301 	orr.w	r3, r3, #1
 8000a28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_GPIO_Init+0x5c>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <Error_Handler+0x8>

08000a54 <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel1);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68da      	ldr	r2, [r3, #12]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	4619      	mov	r1, r3
 8000a66:	4610      	mov	r0, r2
 8000a68:	f003 fe9c 	bl	80047a4 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel2);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	4619      	mov	r1, r3
 8000a76:	4610      	mov	r0, r2
 8000a78:	f003 fe94 	bl	80047a4 <HAL_TIM_PWM_Start>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <set_duty>:
			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->channel2);

}

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

	// Print to the console so we can see what's happening
	    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 8000a8e:	6839      	ldr	r1, [r7, #0]
 8000a90:	4884      	ldr	r0, [pc, #528]	@ (8000ca4 <set_duty+0x220>)
 8000a92:	f005 fc5b 	bl	800634c <iprintf>

	    // Assign the duty cycle to a field in the structure
	    p_mot->pwm_val = pwm_sig;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	683a      	ldr	r2, [r7, #0]
 8000a9a:	601a      	str	r2, [r3, #0]
	    // dereferencing and accessing struct fields
	    // p_mot->duty = duty;
	    // is shorthand for
	    // (*p_mot).duty = duty;

	    if (pwm_sig > 0) {
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	dd6e      	ble.n	8000b80 <set_duty+0xfc>

	    	//forwards
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,pwm_sig);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d105      	bne.n	8000ab6 <set_duty+0x32>
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ab4:	e02c      	b.n	8000b10 <set_duty+0x8c>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d105      	bne.n	8000aca <set_duty+0x46>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ac8:	e022      	b.n	8000b10 <set_duty+0x8c>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	d105      	bne.n	8000ade <set_duty+0x5a>
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	681a      	ldr	r2, [r3, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000adc:	e018      	b.n	8000b10 <set_duty+0x8c>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b0c      	cmp	r3, #12
 8000ae4:	d105      	bne.n	8000af2 <set_duty+0x6e>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	68db      	ldr	r3, [r3, #12]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	e00e      	b.n	8000b10 <set_duty+0x8c>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b10      	cmp	r3, #16
 8000af8:	d105      	bne.n	8000b06 <set_duty+0x82>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b04:	e004      	b.n	8000b10 <set_duty+0x8c>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	689b      	ldr	r3, [r3, #8]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d105      	bne.n	8000b24 <set_duty+0xa0>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	635a      	str	r2, [r3, #52]	@ 0x34
	      }




}
 8000b22:	e127      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	d105      	bne.n	8000b38 <set_duty+0xb4>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	6393      	str	r3, [r2, #56]	@ 0x38
 8000b36:	e11d      	b.n	8000d74 <set_duty+0x2f0>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	2b08      	cmp	r3, #8
 8000b3e:	d105      	bne.n	8000b4c <set_duty+0xc8>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	2300      	movs	r3, #0
 8000b48:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000b4a:	e113      	b.n	8000d74 <set_duty+0x2f0>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2b0c      	cmp	r3, #12
 8000b52:	d105      	bne.n	8000b60 <set_duty+0xdc>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5e:	e109      	b.n	8000d74 <set_duty+0x2f0>
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	2b10      	cmp	r3, #16
 8000b66:	d105      	bne.n	8000b74 <set_duty+0xf0>
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	2300      	movs	r3, #0
 8000b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b72:	e0ff      	b.n	8000d74 <set_duty+0x2f0>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000b7e:	e0f9      	b.n	8000d74 <set_duty+0x2f0>
	    else if(pwm_sig == 0){
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d17a      	bne.n	8000c7c <set_duty+0x1f8>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,640);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d106      	bne.n	8000b9c <set_duty+0x118>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000b98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b9a:	e031      	b.n	8000c00 <set_duty+0x17c>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d106      	bne.n	8000bb2 <set_duty+0x12e>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bae:	6393      	str	r3, [r2, #56]	@ 0x38
 8000bb0:	e026      	b.n	8000c00 <set_duty+0x17c>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d106      	bne.n	8000bc8 <set_duty+0x144>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bc4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000bc6:	e01b      	b.n	8000c00 <set_duty+0x17c>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b0c      	cmp	r3, #12
 8000bce:	d106      	bne.n	8000bde <set_duty+0x15a>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bdc:	e010      	b.n	8000c00 <set_duty+0x17c>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b10      	cmp	r3, #16
 8000be4:	d106      	bne.n	8000bf4 <set_duty+0x170>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bf2:	e005      	b.n	8000c00 <set_duty+0x17c>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000bfe:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d106      	bne.n	8000c16 <set_duty+0x192>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000c12:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000c14:	e0ae      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d106      	bne.n	8000c2c <set_duty+0x1a8>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	68db      	ldr	r3, [r3, #12]
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000c28:	6393      	str	r3, [r2, #56]	@ 0x38
 8000c2a:	e0a3      	b.n	8000d74 <set_duty+0x2f0>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d106      	bne.n	8000c42 <set_duty+0x1be>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000c3e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000c40:	e098      	b.n	8000d74 <set_duty+0x2f0>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b0c      	cmp	r3, #12
 8000c48:	d106      	bne.n	8000c58 <set_duty+0x1d4>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	e08d      	b.n	8000d74 <set_duty+0x2f0>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	689b      	ldr	r3, [r3, #8]
 8000c5c:	2b10      	cmp	r3, #16
 8000c5e:	d106      	bne.n	8000c6e <set_duty+0x1ea>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000c6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c6c:	e082      	b.n	8000d74 <set_duty+0x2f0>
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000c78:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000c7a:	e07b      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,0);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d105      	bne.n	8000c90 <set_duty+0x20c>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c8e:	e02e      	b.n	8000cee <set_duty+0x26a>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d107      	bne.n	8000ca8 <set_duty+0x224>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	6393      	str	r3, [r2, #56]	@ 0x38
 8000ca2:	e024      	b.n	8000cee <set_duty+0x26a>
 8000ca4:	080074b0 	.word	0x080074b0
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d105      	bne.n	8000cbc <set_duty+0x238>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000cba:	e018      	b.n	8000cee <set_duty+0x26a>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b0c      	cmp	r3, #12
 8000cc2:	d105      	bne.n	8000cd0 <set_duty+0x24c>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	2300      	movs	r3, #0
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	e00e      	b.n	8000cee <set_duty+0x26a>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b10      	cmp	r3, #16
 8000cd6:	d105      	bne.n	8000ce4 <set_duty+0x260>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ce2:	e004      	b.n	8000cee <set_duty+0x26a>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	2300      	movs	r3, #0
 8000cec:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d106      	bne.n	8000d04 <set_duty+0x280>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	425a      	negs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000d02:	e037      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d107      	bne.n	8000d1c <set_duty+0x298>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	4259      	negs	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	460b      	mov	r3, r1
 8000d18:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000d1a:	e02b      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d107      	bne.n	8000d34 <set_duty+0x2b0>
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	4259      	negs	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000d32:	e01f      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	2b0c      	cmp	r3, #12
 8000d3a:	d107      	bne.n	8000d4c <set_duty+0x2c8>
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4259      	negs	r1, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	460b      	mov	r3, r1
 8000d48:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000d4a:	e013      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	2b10      	cmp	r3, #16
 8000d52:	d107      	bne.n	8000d64 <set_duty+0x2e0>
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	4259      	negs	r1, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000d62:	e007      	b.n	8000d74 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	4259      	negs	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000d72:	e7ff      	b.n	8000d74 <set_duty+0x2f0>
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <read_current>:
/**
 * @brief A function to get the ADC value for the myoelectric sensor.
 *
 * @param p_myo The myoelectric sensor object to perform the function on.
 */
uint16_t read_current(myo_t *p_myo){
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(p_myo->hal_adc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 fec5 	bl	8001b18 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(p_myo->hal_adc,100);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2164      	movs	r1, #100	@ 0x64
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 ffad 	bl	8001cf4 <HAL_ADC_PollForConversion>
	p_myo->current_value = HAL_ADC_GetValue(p_myo->hal_adc);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f001 f880 	bl	8001ea4 <HAL_ADC_GetValue>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b21a      	sxth	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(p_myo->hal_adc);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 ff6b 	bl	8001c8c <HAL_ADC_Stop>
	//stop ADC?

	//now convert results to a desired output style


	return p_myo->current_value;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dbc:	b29b      	uxth	r3, r3

}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
	...

08000dc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <HAL_MspInit+0x44>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e0c <HAL_MspInit+0x44>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dda:	4b0c      	ldr	r3, [pc, #48]	@ (8000e0c <HAL_MspInit+0x44>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <HAL_MspInit+0x44>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	4a08      	ldr	r2, [pc, #32]	@ (8000e0c <HAL_MspInit+0x44>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df2:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_MspInit+0x44>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b0ac      	sub	sp, #176	@ 0xb0
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2288      	movs	r2, #136	@ 0x88
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4618      	mov	r0, r3
 8000e32:	f005 fb00 	bl	8006436 <memset>
  if(hadc->Instance==ADC1)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a27      	ldr	r2, [pc, #156]	@ (8000ed8 <HAL_ADC_MspInit+0xc8>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d146      	bne.n	8000ece <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e44:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e46:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e56:	2308      	movs	r3, #8
 8000e58:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e62:	2302      	movs	r3, #2
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e6a:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 ff83 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000e7c:	f7ff fde4 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000e80:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000e82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e84:	4a15      	ldr	r2, [pc, #84]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000e86:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e98:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8000edc <HAL_ADC_MspInit+0xcc>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ec2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	@ (8000ee0 <HAL_ADC_MspInit+0xd0>)
 8000eca:	f001 ff49 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	37b0      	adds	r7, #176	@ 0xb0
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	50040000 	.word	0x50040000
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	48000800 	.word	0x48000800

08000ee4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <HAL_TIM_Encoder_MspInit+0x80>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d129      	bne.n	8000f5a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f06:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0a:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f10:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f22:	4a11      	ldr	r2, [pc, #68]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_TIM_Encoder_MspInit+0x84>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = HAND_ENCB_Pin|HAND_ENCA_Pin;
 8000f36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f56:	f001 ff03 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	@ 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40012c00 	.word	0x40012c00
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f7c:	d10b      	bne.n	8000f96 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_TIM_PWM_MspInit+0x38>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fc8:	d11c      	bne.n	8001004 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	4b10      	ldr	r3, [pc, #64]	@ (800100c <HAL_TIM_MspPostInit+0x64>)
 8000fcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fce:	4a0f      	ldr	r2, [pc, #60]	@ (800100c <HAL_TIM_MspPostInit+0x64>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <HAL_TIM_MspPostInit+0x64>)
 8000fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = HAND_PWMA_Pin|HAND_PWMB_Pin;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001000:	f001 feae 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40021000 	.word	0x40021000

08001010 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b0ac      	sub	sp, #176	@ 0xb0
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
 8001026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2288      	movs	r2, #136	@ 0x88
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f005 fa00 	bl	8006436 <memset>
  if(huart->Instance==USART2)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <HAL_UART_MspInit+0xb0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d13b      	bne.n	80010b8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001040:	2302      	movs	r3, #2
 8001042:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f002 fe95 	bl	8003d7c <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001058:	f7ff fcf6 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800105c:	4b19      	ldr	r3, [pc, #100]	@ (80010c4 <HAL_UART_MspInit+0xb4>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001060:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <HAL_UART_MspInit+0xb4>)
 8001062:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001066:	6593      	str	r3, [r2, #88]	@ 0x58
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_UART_MspInit+0xb4>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800106c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_UART_MspInit+0xb4>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001078:	4a12      	ldr	r2, [pc, #72]	@ (80010c4 <HAL_UART_MspInit+0xb4>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001080:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <HAL_UART_MspInit+0xb4>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108c:	230c      	movs	r3, #12
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109e:	2303      	movs	r3, #3
 80010a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a4:	2307      	movs	r3, #7
 80010a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010aa:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b4:	f001 fe54 	bl	8002d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010b8:	bf00      	nop
 80010ba:	37b0      	adds	r7, #176	@ 0xb0
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40004400 	.word	0x40004400
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f935 	bl	800138c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}

08001126 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e00a      	b.n	800114e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001138:	f3af 8000 	nop.w
 800113c:	4601      	mov	r1, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1c5a      	adds	r2, r3, #1
 8001142:	60ba      	str	r2, [r7, #8]
 8001144:	b2ca      	uxtb	r2, r1
 8001146:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbf0      	blt.n	8001138 <_read+0x12>
  }

  return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	e009      	b.n	8001186 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	60ba      	str	r2, [r7, #8]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	429a      	cmp	r2, r3
 800118c:	dbf1      	blt.n	8001172 <_write+0x12>
  }
  return len;
 800118e:	687b      	ldr	r3, [r7, #4]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <_close>:

int _close(int file)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011c0:	605a      	str	r2, [r3, #4]
  return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_isatty>:

int _isatty(int file)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d8:	2301      	movs	r3, #1
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f005 f950 	bl	80064d4 <__errno>
 8001234:	4603      	mov	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	4a05      	ldr	r2, [pc, #20]	@ (8001264 <_sbrk+0x64>)
 8001250:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20018000 	.word	0x20018000
 8001260:	00000400 	.word	0x00000400
 8001264:	200002e0 	.word	0x200002e0
 8001268:	20000438 	.word	0x20000438

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SystemInit+0x20>)
 8001272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001276:	4a05      	ldr	r2, [pc, #20]	@ (800128c <SystemInit+0x20>)
 8001278:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800127c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001290:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001294:	f7ff ffea 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopForever+0x6>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopForever+0xe>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopForever+0x16>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f005 f90f 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012c2:	f7ff f973 	bl	80005ac <main>

080012c6 <LoopForever>:

LoopForever:
    b LoopForever
 80012c6:	e7fe      	b.n	80012c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d0:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80012d4:	0800755c 	.word	0x0800755c
  ldr r2, =_sbss
 80012d8:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 80012dc:	20000434 	.word	0x20000434

080012e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC1_2_IRQHandler>

080012e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f001 fd03 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012f2:	200f      	movs	r0, #15
 80012f4:	f000 f80e 	bl	8001314 <HAL_InitTick>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	e001      	b.n	8001308 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001304:	f7ff fd60 	bl	8000dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001308:	79fb      	ldrb	r3, [r7, #7]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <HAL_InitTick+0x6c>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <HAL_InitTick+0x70>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <HAL_InitTick+0x6c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f001 fd01 	bl	8002d46 <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d809      	bhi.n	8001364 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f001 fcd9 	bl	8002d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800135c:	4a0a      	ldr	r2, [pc, #40]	@ (8001388 <HAL_InitTick+0x74>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e007      	b.n	8001374 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e004      	b.n	8001374 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	e001      	b.n	8001374 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000044 	.word	0x20000044
 8001384:	2000003c 	.word	0x2000003c
 8001388:	20000040 	.word	0x20000040

0800138c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <HAL_IncTick+0x20>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_IncTick+0x24>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4413      	add	r3, r2
 800139c:	4a04      	ldr	r2, [pc, #16]	@ (80013b0 <HAL_IncTick+0x24>)
 800139e:	6013      	str	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000044 	.word	0x20000044
 80013b0:	200002e4 	.word	0x200002e4

080013b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  return uwTick;
 80013b8:	4b03      	ldr	r3, [pc, #12]	@ (80013c8 <HAL_GetTick+0x14>)
 80013ba:	681b      	ldr	r3, [r3, #0]
}
 80013bc:	4618      	mov	r0, r3
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200002e4 	.word	0x200002e4

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff ffee 	bl	80013b4 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4413      	add	r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	bf00      	nop
 80013f4:	f7ff ffde 	bl	80013b4 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	bf00      	nop
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000044 	.word	0x20000044

08001414 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	431a      	orrs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	609a      	str	r2, [r3, #8]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3360      	adds	r3, #96	@ 0x60
 800148e:	461a      	mov	r2, r3
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <LL_ADC_SetOffset+0x44>)
 800149e:	4013      	ands	r3, r2
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	4313      	orrs	r3, r2
 80014ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80014b4:	bf00      	nop
 80014b6:	371c      	adds	r7, #28
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	03fff000 	.word	0x03fff000

080014c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3360      	adds	r3, #96	@ 0x60
 80014d2:	461a      	mov	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b087      	sub	sp, #28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	3360      	adds	r3, #96	@ 0x60
 8001500:	461a      	mov	r2, r3
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	4413      	add	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	431a      	orrs	r2, r3
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800151a:	bf00      	nop
 800151c:	371c      	adds	r7, #28
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3330      	adds	r3, #48	@ 0x30
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0a1b      	lsrs	r3, r3, #8
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f003 031f 	and.w	r3, r3, #31
 8001576:	211f      	movs	r1, #31
 8001578:	fa01 f303 	lsl.w	r3, r1, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	0e9b      	lsrs	r3, r3, #26
 8001584:	f003 011f 	and.w	r1, r3, #31
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	fa01 f303 	lsl.w	r3, r1, r3
 8001592:	431a      	orrs	r2, r3
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001598:	bf00      	nop
 800159a:	371c      	adds	r7, #28
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b087      	sub	sp, #28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	3314      	adds	r3, #20
 80015b4:	461a      	mov	r2, r3
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	0e5b      	lsrs	r3, r3, #25
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	4413      	add	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	0d1b      	lsrs	r3, r3, #20
 80015cc:	f003 031f 	and.w	r3, r3, #31
 80015d0:	2107      	movs	r1, #7
 80015d2:	fa01 f303 	lsl.w	r3, r1, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	401a      	ands	r2, r3
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	0d1b      	lsrs	r3, r3, #20
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015ee:	bf00      	nop
 80015f0:	371c      	adds	r7, #28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
	...

080015fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001614:	43db      	mvns	r3, r3
 8001616:	401a      	ands	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f003 0318 	and.w	r3, r3, #24
 800161e:	4908      	ldr	r1, [pc, #32]	@ (8001640 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001620:	40d9      	lsrs	r1, r3
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	400b      	ands	r3, r1
 8001626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800162a:	431a      	orrs	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001632:	bf00      	nop
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	0007ffff 	.word	0x0007ffff

08001644 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 031f 	and.w	r3, r3, #31
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800168c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6093      	str	r3, [r2, #8]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80016b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016b4:	d101      	bne.n	80016ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80016d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80016dc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001704:	d101      	bne.n	800170a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001706:	2301      	movs	r3, #1
 8001708:	e000      	b.n	800170c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001728:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800172c:	f043 0201 	orr.w	r2, r3, #1
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001750:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001754:	f043 0202 	orr.w	r2, r3, #2
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b01      	cmp	r3, #1
 800177a:	d101      	bne.n	8001780 <LL_ADC_IsEnabled+0x18>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <LL_ADC_IsEnabled+0x1a>
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d101      	bne.n	80017a6 <LL_ADC_IsDisableOngoing+0x18>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e000      	b.n	80017a8 <LL_ADC_IsDisableOngoing+0x1a>
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017c8:	f043 0204 	orr.w	r2, r3, #4
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017f0:	f043 0210 	orr.w	r2, r3, #16
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b04      	cmp	r3, #4
 8001816:	d101      	bne.n	800181c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800183a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800183e:	f043 0220 	orr.w	r2, r3, #32
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b08      	cmp	r3, #8
 8001864:	d101      	bne.n	800186a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b089      	sub	sp, #36	@ 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001880:	2300      	movs	r3, #0
 8001882:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e130      	b.n	8001af4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800189c:	2b00      	cmp	r3, #0
 800189e:	d109      	bne.n	80018b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff fab5 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fef1 	bl	80016a0 <LL_ADC_IsDeepPowerDownEnabled>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d004      	beq.n	80018ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff fed7 	bl	800167c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7ff ff0c 	bl	80016f0 <LL_ADC_IsInternalRegulatorEnabled>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d115      	bne.n	800190a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fef0 	bl	80016c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80018e8:	4b84      	ldr	r3, [pc, #528]	@ (8001afc <HAL_ADC_Init+0x284>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	4a84      	ldr	r2, [pc, #528]	@ (8001b00 <HAL_ADC_Init+0x288>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	3301      	adds	r3, #1
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018fc:	e002      	b.n	8001904 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	3b01      	subs	r3, #1
 8001902:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff feee 	bl	80016f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10d      	bne.n	8001936 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800191e:	f043 0210 	orr.w	r2, r3, #16
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	f043 0201 	orr.w	r2, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff62 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001940:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001946:	f003 0310 	and.w	r3, r3, #16
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 80c9 	bne.w	8001ae2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	2b00      	cmp	r3, #0
 8001954:	f040 80c5 	bne.w	8001ae2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800195c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001960:	f043 0202 	orr.w	r2, r3, #2
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fefb 	bl	8001768 <LL_ADC_IsEnabled>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d115      	bne.n	80019a4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001978:	4862      	ldr	r0, [pc, #392]	@ (8001b04 <HAL_ADC_Init+0x28c>)
 800197a:	f7ff fef5 	bl	8001768 <LL_ADC_IsEnabled>
 800197e:	4604      	mov	r4, r0
 8001980:	4861      	ldr	r0, [pc, #388]	@ (8001b08 <HAL_ADC_Init+0x290>)
 8001982:	f7ff fef1 	bl	8001768 <LL_ADC_IsEnabled>
 8001986:	4603      	mov	r3, r0
 8001988:	431c      	orrs	r4, r3
 800198a:	4860      	ldr	r0, [pc, #384]	@ (8001b0c <HAL_ADC_Init+0x294>)
 800198c:	f7ff feec 	bl	8001768 <LL_ADC_IsEnabled>
 8001990:	4603      	mov	r3, r0
 8001992:	4323      	orrs	r3, r4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d105      	bne.n	80019a4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4619      	mov	r1, r3
 800199e:	485c      	ldr	r0, [pc, #368]	@ (8001b10 <HAL_ADC_Init+0x298>)
 80019a0:	f7ff fd38 	bl	8001414 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	7e5b      	ldrb	r3, [r3, #25]
 80019a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d106      	bne.n	80019e0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d6:	3b01      	subs	r3, #1
 80019d8:	045b      	lsls	r3, r3, #17
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ec:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	68da      	ldr	r2, [r3, #12]
 8001a02:	4b44      	ldr	r3, [pc, #272]	@ (8001b14 <HAL_ADC_Init+0x29c>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	69b9      	ldr	r1, [r7, #24]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff1c 	bl	8001852 <LL_ADC_INJ_IsConversionOngoing>
 8001a1a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d13d      	bne.n	8001a9e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d13a      	bne.n	8001a9e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a2c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a34:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001a44:	f023 0302 	bic.w	r3, r3, #2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	6812      	ldr	r2, [r2, #0]
 8001a4c:	69b9      	ldr	r1, [r7, #24]
 8001a4e:	430b      	orrs	r3, r1
 8001a50:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d118      	bne.n	8001a8e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001a66:	f023 0304 	bic.w	r3, r3, #4
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 0201 	orr.w	r2, r2, #1
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	e007      	b.n	8001a9e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d10c      	bne.n	8001ac0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aac:	f023 010f 	bic.w	r1, r3, #15
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	69db      	ldr	r3, [r3, #28]
 8001ab4:	1e5a      	subs	r2, r3, #1
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001abe:	e007      	b.n	8001ad0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 020f 	bic.w	r2, r2, #15
 8001ace:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f023 0303 	bic.w	r3, r3, #3
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ae0:	e007      	b.n	8001af2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001af2:	7ffb      	ldrb	r3, [r7, #31]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3724      	adds	r7, #36	@ 0x24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}
 8001afc:	2000003c 	.word	0x2000003c
 8001b00:	053e2d63 	.word	0x053e2d63
 8001b04:	50040000 	.word	0x50040000
 8001b08:	50040100 	.word	0x50040100
 8001b0c:	50040200 	.word	0x50040200
 8001b10:	50040300 	.word	0x50040300
 8001b14:	fff0c007 	.word	0xfff0c007

08001b18 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b20:	4857      	ldr	r0, [pc, #348]	@ (8001c80 <HAL_ADC_Start+0x168>)
 8001b22:	f7ff fd8f 	bl	8001644 <LL_ADC_GetMultimode>
 8001b26:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe69 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 809c 	bne.w	8001c72 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADC_Start+0x30>
 8001b44:	2302      	movs	r3, #2
 8001b46:	e097      	b.n	8001c78 <HAL_ADC_Start+0x160>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fe63 	bl	800281c <ADC_Enable>
 8001b56:	4603      	mov	r3, r0
 8001b58:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 8083 	bne.w	8001c68 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a42      	ldr	r2, [pc, #264]	@ (8001c84 <HAL_ADC_Start+0x16c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d002      	beq.n	8001b86 <HAL_ADC_Start+0x6e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	e000      	b.n	8001b88 <HAL_ADC_Start+0x70>
 8001b86:	4b40      	ldr	r3, [pc, #256]	@ (8001c88 <HAL_ADC_Start+0x170>)
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d002      	beq.n	8001b96 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001bae:	d106      	bne.n	8001bbe <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb4:	f023 0206 	bic.w	r2, r3, #6
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bbc:	e002      	b.n	8001bc4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	221c      	movs	r2, #28
 8001bca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c84 <HAL_ADC_Start+0x16c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d002      	beq.n	8001be4 <HAL_ADC_Start+0xcc>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	e000      	b.n	8001be6 <HAL_ADC_Start+0xce>
 8001be4:	4b28      	ldr	r3, [pc, #160]	@ (8001c88 <HAL_ADC_Start+0x170>)
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d008      	beq.n	8001c00 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d002      	beq.n	8001c00 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2b09      	cmp	r3, #9
 8001bfe:	d114      	bne.n	8001c2a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d007      	beq.n	8001c1e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fdc6 	bl	80017b4 <LL_ADC_REG_StartConversion>
 8001c28:	e025      	b.n	8001c76 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a12      	ldr	r2, [pc, #72]	@ (8001c84 <HAL_ADC_Start+0x16c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d002      	beq.n	8001c46 <HAL_ADC_Start+0x12e>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	e000      	b.n	8001c48 <HAL_ADC_Start+0x130>
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_ADC_Start+0x170>)
 8001c48:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00f      	beq.n	8001c76 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c5e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	655a      	str	r2, [r3, #84]	@ 0x54
 8001c66:	e006      	b.n	8001c76 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001c70:	e001      	b.n	8001c76 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c72:	2302      	movs	r3, #2
 8001c74:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3718      	adds	r7, #24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	50040300 	.word	0x50040300
 8001c84:	50040100 	.word	0x50040100
 8001c88:	50040000 	.word	0x50040000

08001c8c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_Stop+0x16>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e023      	b.n	8001cea <HAL_ADC_Stop+0x5e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001caa:	2103      	movs	r1, #3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fcf9 	bl	80026a4 <ADC_ConversionStop>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d111      	bne.n	8001ce0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 fe33 	bl	8002928 <ADC_Disable>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001cc6:	7bfb      	ldrb	r3, [r7, #15]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d109      	bne.n	8001ce0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f043 0201 	orr.w	r2, r3, #1
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cfe:	4866      	ldr	r0, [pc, #408]	@ (8001e98 <HAL_ADC_PollForConversion+0x1a4>)
 8001d00:	f7ff fca0 	bl	8001644 <LL_ADC_GetMultimode>
 8001d04:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d102      	bne.n	8001d14 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001d0e:	2308      	movs	r3, #8
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e02a      	b.n	8001d6a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d005      	beq.n	8001d26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	2b05      	cmp	r3, #5
 8001d1e:	d002      	beq.n	8001d26 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b09      	cmp	r3, #9
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d38:	f043 0220 	orr.w	r2, r3, #32
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e0a4      	b.n	8001e8e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d44:	2304      	movs	r3, #4
 8001d46:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001d48:	e00f      	b.n	8001d6a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001d4a:	4853      	ldr	r0, [pc, #332]	@ (8001e98 <HAL_ADC_PollForConversion+0x1a4>)
 8001d4c:	f7ff fc88 	bl	8001660 <LL_ADC_GetMultiDMATransfer>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d007      	beq.n	8001d66 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d5a:	f043 0220 	orr.w	r2, r3, #32
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e093      	b.n	8001e8e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d66:	2304      	movs	r3, #4
 8001d68:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d6a:	f7ff fb23 	bl	80013b4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d70:	e021      	b.n	8001db6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d01d      	beq.n	8001db6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d7a:	f7ff fb1b 	bl	80013b4 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d302      	bcc.n	8001d90 <HAL_ADC_PollForConversion+0x9c>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d112      	bne.n	8001db6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10b      	bne.n	8001db6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001da2:	f043 0204 	orr.w	r2, r3, #4
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e06b      	b.n	8001e8e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0d6      	beq.n	8001d72 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fba6 	bl	8001526 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d01c      	beq.n	8001e1a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7e5b      	ldrb	r3, [r3, #25]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d118      	bne.n	8001e1a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	d111      	bne.n	8001e1a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d105      	bne.n	8001e1a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e12:	f043 0201 	orr.w	r2, r3, #1
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001e9c <HAL_ADC_PollForConversion+0x1a8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d002      	beq.n	8001e2a <HAL_ADC_PollForConversion+0x136>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	e000      	b.n	8001e2c <HAL_ADC_PollForConversion+0x138>
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <HAL_ADC_PollForConversion+0x1ac>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d008      	beq.n	8001e46 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	2b05      	cmp	r3, #5
 8001e3e:	d002      	beq.n	8001e46 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	d104      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	e00c      	b.n	8001e6a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	@ (8001e9c <HAL_ADC_PollForConversion+0x1a8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d002      	beq.n	8001e60 <HAL_ADC_PollForConversion+0x16c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_PollForConversion+0x16e>
 8001e60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ea0 <HAL_ADC_PollForConversion+0x1ac>)
 8001e62:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d104      	bne.n	8001e7a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	e008      	b.n	8001e8c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d103      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	220c      	movs	r2, #12
 8001e8a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	50040300 	.word	0x50040300
 8001e9c:	50040100 	.word	0x50040100
 8001ea0:	50040000 	.word	0x50040000

08001ea4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b0b6      	sub	sp, #216	@ 0xd8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x22>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e3c9      	b.n	8002676 <HAL_ADC_ConfigChannel+0x7b6>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fc88 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f040 83aa 	bne.w	8002650 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d824      	bhi.n	8001f56 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	3b02      	subs	r3, #2
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d81b      	bhi.n	8001f4e <HAL_ADC_ConfigChannel+0x8e>
 8001f16:	a201      	add	r2, pc, #4	@ (adr r2, 8001f1c <HAL_ADC_ConfigChannel+0x5c>)
 8001f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f1c:	08001f2d 	.word	0x08001f2d
 8001f20:	08001f35 	.word	0x08001f35
 8001f24:	08001f3d 	.word	0x08001f3d
 8001f28:	08001f45 	.word	0x08001f45
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001f2c:	230c      	movs	r3, #12
 8001f2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f32:	e010      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001f34:	2312      	movs	r3, #18
 8001f36:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f3a:	e00c      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001f3c:	2318      	movs	r3, #24
 8001f3e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f42:	e008      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f4c:	e003      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001f4e:	2306      	movs	r3, #6
 8001f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001f54:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001f64:	f7ff faf2 	bl	800154c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fc49 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8001f72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fc69 	bl	8001852 <LL_ADC_INJ_IsConversionOngoing>
 8001f80:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 81a4 	bne.w	80022d6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 819f 	bne.w	80022d6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	6819      	ldr	r1, [r3, #0]
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	f7ff fafd 	bl	80015a4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d00a      	beq.n	8001fe2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	6919      	ldr	r1, [r3, #16]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001fdc:	f7ff fa4e 	bl	800147c <LL_ADC_SetOffset>
 8001fe0:	e179      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fa6b 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10a      	bne.n	800200e <HAL_ADC_ConfigChannel+0x14e>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fa60 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 8002004:	4603      	mov	r3, r0
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	e01e      	b.n	800204c <HAL_ADC_ConfigChannel+0x18c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fa55 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002024:	fa93 f3a3 	rbit	r3, r3
 8002028:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800202c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002030:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002034:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800203c:	2320      	movs	r3, #32
 800203e:	e004      	b.n	800204a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002040:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002044:	fab3 f383 	clz	r3, r3
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002054:	2b00      	cmp	r3, #0
 8002056:	d105      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1a4>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	0e9b      	lsrs	r3, r3, #26
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	e018      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1d6>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002070:	fa93 f3a3 	rbit	r3, r3
 8002074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002078:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800207c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002080:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002088:	2320      	movs	r3, #32
 800208a:	e004      	b.n	8002096 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800208c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002090:	fab3 f383 	clz	r3, r3
 8002094:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002096:	429a      	cmp	r2, r3
 8002098:	d106      	bne.n	80020a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fa24 	bl	80014f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2101      	movs	r1, #1
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fa08 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10a      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x214>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2101      	movs	r1, #1
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff f9fd 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	f003 021f 	and.w	r2, r3, #31
 80020d2:	e01e      	b.n	8002112 <HAL_ADC_ConfigChannel+0x252>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2101      	movs	r1, #1
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff f9f2 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80020f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80020f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80020fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002102:	2320      	movs	r3, #32
 8002104:	e004      	b.n	8002110 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800210a:	fab3 f383 	clz	r3, r3
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <HAL_ADC_ConfigChannel+0x26a>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	0e9b      	lsrs	r3, r3, #26
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	e018      	b.n	800215c <HAL_ADC_ConfigChannel+0x29c>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002132:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800213e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002142:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002146:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e004      	b.n	800215c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002152:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002156:	fab3 f383 	clz	r3, r3
 800215a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800215c:	429a      	cmp	r2, r3
 800215e:	d106      	bne.n	800216e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	2101      	movs	r1, #1
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff f9c1 	bl	80014f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2102      	movs	r1, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff f9a5 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x2da>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2102      	movs	r1, #2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff f99a 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	0e9b      	lsrs	r3, r3, #26
 8002194:	f003 021f 	and.w	r2, r3, #31
 8002198:	e01e      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x318>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2102      	movs	r1, #2
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff f98f 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021b0:	fa93 f3a3 	rbit	r3, r3
 80021b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80021b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80021bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80021c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80021c8:	2320      	movs	r3, #32
 80021ca:	e004      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80021cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d105      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x330>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	e014      	b.n	800221a <HAL_ADC_ConfigChannel+0x35a>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80021f8:	fa93 f3a3 	rbit	r3, r3
 80021fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80021fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002204:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800220c:	2320      	movs	r3, #32
 800220e:	e004      	b.n	800221a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002210:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800221a:	429a      	cmp	r2, r3
 800221c:	d106      	bne.n	800222c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2200      	movs	r2, #0
 8002224:	2102      	movs	r1, #2
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff f962 	bl	80014f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2103      	movs	r1, #3
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff f946 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 8002238:	4603      	mov	r3, r0
 800223a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x398>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2103      	movs	r1, #3
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff f93b 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 800224e:	4603      	mov	r3, r0
 8002250:	0e9b      	lsrs	r3, r3, #26
 8002252:	f003 021f 	and.w	r2, r3, #31
 8002256:	e017      	b.n	8002288 <HAL_ADC_ConfigChannel+0x3c8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2103      	movs	r1, #3
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f930 	bl	80014c4 <LL_ADC_GetOffsetChannel>
 8002264:	4603      	mov	r3, r0
 8002266:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002268:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800226a:	fa93 f3a3 	rbit	r3, r3
 800226e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002272:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002274:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800227a:	2320      	movs	r3, #32
 800227c:	e003      	b.n	8002286 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800227e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	b2db      	uxtb	r3, r3
 8002286:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002290:	2b00      	cmp	r3, #0
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x3e0>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	0e9b      	lsrs	r3, r3, #26
 800229a:	f003 031f 	and.w	r3, r3, #31
 800229e:	e011      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x404>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80022ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80022b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80022bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d106      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2200      	movs	r2, #0
 80022ce:	2103      	movs	r1, #3
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff f90d 	bl	80014f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fa44 	bl	8001768 <LL_ADC_IsEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8140 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	461a      	mov	r2, r3
 80022f6:	f7ff f981 	bl	80015fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4a8f      	ldr	r2, [pc, #572]	@ (800253c <HAL_ADC_ConfigChannel+0x67c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	f040 8131 	bne.w	8002568 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10b      	bne.n	800232e <HAL_ADC_ConfigChannel+0x46e>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2b09      	cmp	r3, #9
 8002324:	bf94      	ite	ls
 8002326:	2301      	movls	r3, #1
 8002328:	2300      	movhi	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	e019      	b.n	8002362 <HAL_ADC_ConfigChannel+0x4a2>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800233c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800233e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002340:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e003      	b.n	8002352 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800234a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	3301      	adds	r3, #1
 8002354:	f003 031f 	and.w	r3, r3, #31
 8002358:	2b09      	cmp	r3, #9
 800235a:	bf94      	ite	ls
 800235c:	2301      	movls	r3, #1
 800235e:	2300      	movhi	r3, #0
 8002360:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002362:	2b00      	cmp	r3, #0
 8002364:	d079      	beq.n	800245a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800236e:	2b00      	cmp	r3, #0
 8002370:	d107      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x4c2>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e9b      	lsrs	r3, r3, #26
 8002378:	3301      	adds	r3, #1
 800237a:	069b      	lsls	r3, r3, #26
 800237c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002380:	e015      	b.n	80023ae <HAL_ADC_ConfigChannel+0x4ee>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002390:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002392:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800239a:	2320      	movs	r3, #32
 800239c:	e003      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800239e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80023a0:	fab3 f383 	clz	r3, r3
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	3301      	adds	r3, #1
 80023a8:	069b      	lsls	r3, r3, #26
 80023aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d109      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x50e>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0e9b      	lsrs	r3, r3, #26
 80023c0:	3301      	adds	r3, #1
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	2101      	movs	r1, #1
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	e017      	b.n	80023fe <HAL_ADC_ConfigChannel+0x53e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80023dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80023e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80023e6:	2320      	movs	r3, #32
 80023e8:	e003      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80023ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023ec:	fab3 f383 	clz	r3, r3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	2101      	movs	r1, #1
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	ea42 0103 	orr.w	r1, r2, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x564>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	3301      	adds	r3, #1
 8002416:	f003 021f 	and.w	r2, r3, #31
 800241a:	4613      	mov	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	4413      	add	r3, r2
 8002420:	051b      	lsls	r3, r3, #20
 8002422:	e018      	b.n	8002456 <HAL_ADC_ConfigChannel+0x596>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800242c:	fa93 f3a3 	rbit	r3, r3
 8002430:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002434:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800243c:	2320      	movs	r3, #32
 800243e:	e003      	b.n	8002448 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002442:	fab3 f383 	clz	r3, r3
 8002446:	b2db      	uxtb	r3, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f003 021f 	and.w	r2, r3, #31
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002456:	430b      	orrs	r3, r1
 8002458:	e081      	b.n	800255e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d107      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x5b6>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	3301      	adds	r3, #1
 800246e:	069b      	lsls	r3, r3, #26
 8002470:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002474:	e015      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x5e2>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800248e:	2320      	movs	r3, #32
 8002490:	e003      	b.n	800249a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	b2db      	uxtb	r3, r3
 800249a:	3301      	adds	r3, #1
 800249c:	069b      	lsls	r3, r3, #26
 800249e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x602>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	0e9b      	lsrs	r3, r3, #26
 80024b4:	3301      	adds	r3, #1
 80024b6:	f003 031f 	and.w	r3, r3, #31
 80024ba:	2101      	movs	r1, #1
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	e017      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x632>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	61bb      	str	r3, [r7, #24]
  return result;
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80024d4:	6a3b      	ldr	r3, [r7, #32]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	ea42 0103 	orr.w	r1, r2, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10d      	bne.n	800251e <HAL_ADC_ConfigChannel+0x65e>
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0e9b      	lsrs	r3, r3, #26
 8002508:	3301      	adds	r3, #1
 800250a:	f003 021f 	and.w	r2, r3, #31
 800250e:	4613      	mov	r3, r2
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	4413      	add	r3, r2
 8002514:	3b1e      	subs	r3, #30
 8002516:	051b      	lsls	r3, r3, #20
 8002518:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800251c:	e01e      	b.n	800255c <HAL_ADC_ConfigChannel+0x69c>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	fa93 f3a3 	rbit	r3, r3
 800252a:	60fb      	str	r3, [r7, #12]
  return result;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d104      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002536:	2320      	movs	r3, #32
 8002538:	e006      	b.n	8002548 <HAL_ADC_ConfigChannel+0x688>
 800253a:	bf00      	nop
 800253c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	3301      	adds	r3, #1
 800254a:	f003 021f 	and.w	r2, r3, #31
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	3b1e      	subs	r3, #30
 8002556:	051b      	lsls	r3, r3, #20
 8002558:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800255c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002562:	4619      	mov	r1, r3
 8002564:	f7ff f81e 	bl	80015a4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b44      	ldr	r3, [pc, #272]	@ (8002680 <HAL_ADC_ConfigChannel+0x7c0>)
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d07a      	beq.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002574:	4843      	ldr	r0, [pc, #268]	@ (8002684 <HAL_ADC_ConfigChannel+0x7c4>)
 8002576:	f7fe ff73 	bl	8001460 <LL_ADC_GetCommonPathInternalCh>
 800257a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a41      	ldr	r2, [pc, #260]	@ (8002688 <HAL_ADC_ConfigChannel+0x7c8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d12c      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002588:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800258c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d126      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a3c      	ldr	r2, [pc, #240]	@ (800268c <HAL_ADC_ConfigChannel+0x7cc>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_ADC_ConfigChannel+0x6e8>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002690 <HAL_ADC_ConfigChannel+0x7d0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d15d      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025b0:	4619      	mov	r1, r3
 80025b2:	4834      	ldr	r0, [pc, #208]	@ (8002684 <HAL_ADC_ConfigChannel+0x7c4>)
 80025b4:	f7fe ff41 	bl	800143a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b8:	4b36      	ldr	r3, [pc, #216]	@ (8002694 <HAL_ADC_ConfigChannel+0x7d4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	4a36      	ldr	r2, [pc, #216]	@ (8002698 <HAL_ADC_ConfigChannel+0x7d8>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025d2:	e002      	b.n	80025da <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025e0:	e040      	b.n	8002664 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a2d      	ldr	r2, [pc, #180]	@ (800269c <HAL_ADC_ConfigChannel+0x7dc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d118      	bne.n	800261e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80025f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d112      	bne.n	800261e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a23      	ldr	r2, [pc, #140]	@ (800268c <HAL_ADC_ConfigChannel+0x7cc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_ADC_ConfigChannel+0x74c>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a22      	ldr	r2, [pc, #136]	@ (8002690 <HAL_ADC_ConfigChannel+0x7d0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d12d      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800260c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002610:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002614:	4619      	mov	r1, r3
 8002616:	481b      	ldr	r0, [pc, #108]	@ (8002684 <HAL_ADC_ConfigChannel+0x7c4>)
 8002618:	f7fe ff0f 	bl	800143a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800261c:	e024      	b.n	8002668 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1f      	ldr	r2, [pc, #124]	@ (80026a0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d120      	bne.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002628:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800262c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11a      	bne.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a14      	ldr	r2, [pc, #80]	@ (800268c <HAL_ADC_ConfigChannel+0x7cc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d115      	bne.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800263e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002642:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002646:	4619      	mov	r1, r3
 8002648:	480e      	ldr	r0, [pc, #56]	@ (8002684 <HAL_ADC_ConfigChannel+0x7c4>)
 800264a:	f7fe fef6 	bl	800143a <LL_ADC_SetCommonPathInternalCh>
 800264e:	e00c      	b.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002654:	f043 0220 	orr.w	r2, r3, #32
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002662:	e002      	b.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002664:	bf00      	nop
 8002666:	e000      	b.n	800266a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002668:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002672:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002676:	4618      	mov	r0, r3
 8002678:	37d8      	adds	r7, #216	@ 0xd8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	80080000 	.word	0x80080000
 8002684:	50040300 	.word	0x50040300
 8002688:	c7520000 	.word	0xc7520000
 800268c:	50040000 	.word	0x50040000
 8002690:	50040200 	.word	0x50040200
 8002694:	2000003c 	.word	0x2000003c
 8002698:	053e2d63 	.word	0x053e2d63
 800269c:	cb840000 	.word	0xcb840000
 80026a0:	80000001 	.word	0x80000001

080026a4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f8a2 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 80026c0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff f8c3 	bl	8001852 <LL_ADC_INJ_IsConversionOngoing>
 80026cc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d103      	bne.n	80026dc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8098 	beq.w	800280c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d02a      	beq.n	8002740 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7e5b      	ldrb	r3, [r3, #25]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d126      	bne.n	8002740 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7e1b      	ldrb	r3, [r3, #24]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d122      	bne.n	8002740 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026fe:	e014      	b.n	800272a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4a45      	ldr	r2, [pc, #276]	@ (8002818 <ADC_ConversionStop+0x174>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d90d      	bls.n	8002724 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270c:	f043 0210 	orr.w	r2, r3, #16
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e074      	b.n	800280e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	3301      	adds	r3, #1
 8002728:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002734:	2b40      	cmp	r3, #64	@ 0x40
 8002736:	d1e3      	bne.n	8002700 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2240      	movs	r2, #64	@ 0x40
 800273e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d014      	beq.n	8002770 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff f85a 	bl	8001804 <LL_ADC_REG_IsConversionOngoing>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00c      	beq.n	8002770 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f817 	bl	800178e <LL_ADC_IsDisableOngoing>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d104      	bne.n	8002770 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7ff f836 	bl	80017dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d014      	beq.n	80027a0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f869 	bl	8001852 <LL_ADC_INJ_IsConversionOngoing>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fe ffff 	bl	800178e <LL_ADC_IsDisableOngoing>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7ff f845 	bl	800182a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d005      	beq.n	80027b2 <ADC_ConversionStop+0x10e>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b03      	cmp	r3, #3
 80027aa:	d105      	bne.n	80027b8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80027ac:	230c      	movs	r3, #12
 80027ae:	617b      	str	r3, [r7, #20]
        break;
 80027b0:	e005      	b.n	80027be <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80027b2:	2308      	movs	r3, #8
 80027b4:	617b      	str	r3, [r7, #20]
        break;
 80027b6:	e002      	b.n	80027be <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80027b8:	2304      	movs	r3, #4
 80027ba:	617b      	str	r3, [r7, #20]
        break;
 80027bc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80027be:	f7fe fdf9 	bl	80013b4 <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80027c4:	e01b      	b.n	80027fe <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80027c6:	f7fe fdf5 	bl	80013b4 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d914      	bls.n	80027fe <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	4013      	ands	r3, r2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00d      	beq.n	80027fe <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e6:	f043 0210 	orr.w	r2, r3, #16
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	f043 0201 	orr.w	r2, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e007      	b.n	800280e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1dc      	bne.n	80027c6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3720      	adds	r7, #32
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	a33fffff 	.word	0xa33fffff

0800281c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe ff9b 	bl	8001768 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d169      	bne.n	800290c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689a      	ldr	r2, [r3, #8]
 800283e:	4b36      	ldr	r3, [pc, #216]	@ (8002918 <ADC_Enable+0xfc>)
 8002840:	4013      	ands	r3, r2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00d      	beq.n	8002862 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284a:	f043 0210 	orr.w	r2, r3, #16
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002856:	f043 0201 	orr.w	r2, r3, #1
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e055      	b.n	800290e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fe ff56 	bl	8001718 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800286c:	482b      	ldr	r0, [pc, #172]	@ (800291c <ADC_Enable+0x100>)
 800286e:	f7fe fdf7 	bl	8001460 <LL_ADC_GetCommonPathInternalCh>
 8002872:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002874:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800287c:	4b28      	ldr	r3, [pc, #160]	@ (8002920 <ADC_Enable+0x104>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	099b      	lsrs	r3, r3, #6
 8002882:	4a28      	ldr	r2, [pc, #160]	@ (8002924 <ADC_Enable+0x108>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	099b      	lsrs	r3, r3, #6
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002896:	e002      	b.n	800289e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	3b01      	subs	r3, #1
 800289c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f9      	bne.n	8002898 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80028a4:	f7fe fd86 	bl	80013b4 <HAL_GetTick>
 80028a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028aa:	e028      	b.n	80028fe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe ff59 	bl	8001768 <LL_ADC_IsEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe ff29 	bl	8001718 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028c6:	f7fe fd75 	bl	80013b4 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d914      	bls.n	80028fe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d00d      	beq.n	80028fe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028e6:	f043 0210 	orr.w	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e007      	b.n	800290e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d1cf      	bne.n	80028ac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	8000003f 	.word	0x8000003f
 800291c:	50040300 	.word	0x50040300
 8002920:	2000003c 	.word	0x2000003c
 8002924:	053e2d63 	.word	0x053e2d63

08002928 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fe ff2a 	bl	800178e <LL_ADC_IsDisableOngoing>
 800293a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fe ff11 	bl	8001768 <LL_ADC_IsEnabled>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d047      	beq.n	80029dc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d144      	bne.n	80029dc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030d 	and.w	r3, r3, #13
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10c      	bne.n	800297a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe feeb 	bl	8001740 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2203      	movs	r2, #3
 8002970:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002972:	f7fe fd1f 	bl	80013b4 <HAL_GetTick>
 8002976:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002978:	e029      	b.n	80029ce <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f043 0210 	orr.w	r2, r3, #16
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e023      	b.n	80029de <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002996:	f7fe fd0d 	bl	80013b4 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d914      	bls.n	80029ce <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00d      	beq.n	80029ce <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	f043 0210 	orr.w	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c2:	f043 0201 	orr.w	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e007      	b.n	80029de <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1dc      	bne.n	8002996 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <LL_ADC_IsEnabled>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <LL_ADC_IsEnabled+0x18>
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <LL_ADC_IsEnabled+0x1a>
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <LL_ADC_REG_IsConversionOngoing>:
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d101      	bne.n	8002a24 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a34:	b590      	push	{r4, r7, lr}
 8002a36:	b09f      	sub	sp, #124	@ 0x7c
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e093      	b.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a47      	ldr	r2, [pc, #284]	@ (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d102      	bne.n	8002a72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a6c:	4b46      	ldr	r3, [pc, #280]	@ (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	e001      	b.n	8002a76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10b      	bne.n	8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a80:	f043 0220 	orr.w	r2, r3, #32
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e072      	b.n	8002b7a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff ffb8 	bl	8002a0c <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff ffb2 	bl	8002a0c <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d154      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002aae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d151      	bne.n	8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ab4:	4b35      	ldr	r3, [pc, #212]	@ (8002b8c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d02c      	beq.n	8002b1a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6859      	ldr	r1, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ad2:	035b      	lsls	r3, r3, #13
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ada:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002adc:	4829      	ldr	r0, [pc, #164]	@ (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ade:	f7ff ff82 	bl	80029e6 <LL_ADC_IsEnabled>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4828      	ldr	r0, [pc, #160]	@ (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ae6:	f7ff ff7e 	bl	80029e6 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	431c      	orrs	r4, r3
 8002aee:	4828      	ldr	r0, [pc, #160]	@ (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002af0:	f7ff ff79 	bl	80029e6 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4323      	orrs	r3, r4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d137      	bne.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b04:	f023 030f 	bic.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	6811      	ldr	r1, [r2, #0]
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	6892      	ldr	r2, [r2, #8]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	431a      	orrs	r2, r3
 8002b14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b16:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b18:	e028      	b.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b24:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b26:	4817      	ldr	r0, [pc, #92]	@ (8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b28:	f7ff ff5d 	bl	80029e6 <LL_ADC_IsEnabled>
 8002b2c:	4604      	mov	r4, r0
 8002b2e:	4816      	ldr	r0, [pc, #88]	@ (8002b88 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b30:	f7ff ff59 	bl	80029e6 <LL_ADC_IsEnabled>
 8002b34:	4603      	mov	r3, r0
 8002b36:	431c      	orrs	r4, r3
 8002b38:	4815      	ldr	r0, [pc, #84]	@ (8002b90 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002b3a:	f7ff ff54 	bl	80029e6 <LL_ADC_IsEnabled>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	4323      	orrs	r3, r4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d112      	bne.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002b4e:	f023 030f 	bic.w	r3, r3, #15
 8002b52:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002b54:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b56:	e009      	b.n	8002b6c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5c:	f043 0220 	orr.w	r2, r3, #32
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002b6a:	e000      	b.n	8002b6e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b76:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	377c      	adds	r7, #124	@ 0x7c
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	50040000 	.word	0x50040000
 8002b88:	50040100 	.word	0x50040100
 8002b8c:	50040300 	.word	0x50040300
 8002b90:	50040200 	.word	0x50040200

08002b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc6:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	60d3      	str	r3, [r2, #12]
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	f003 0307 	and.w	r3, r3, #7
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	@ (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	@ (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	@ 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	@ 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	@ (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff47 	bl	8002b94 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff5c 	bl	8002bdc <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff8e 	bl	8002c4c <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5d 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7ff ffb0 	bl	8002cb4 <SysTick_Config>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d6e:	e17f      	b.n	8003070 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	2101      	movs	r1, #1
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 8171 	beq.w	800306a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d005      	beq.n	8002da0 <HAL_GPIO_Init+0x40>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d130      	bne.n	8002e02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	091b      	lsrs	r3, r3, #4
 8002dec:	f003 0201 	and.w	r2, r3, #1
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d118      	bne.n	8002e40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e14:	2201      	movs	r2, #1
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f003 0201 	and.w	r2, r3, #1
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f003 0303 	and.w	r3, r3, #3
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d017      	beq.n	8002e7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	4013      	ands	r3, r2
 8002e62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f003 0303 	and.w	r3, r3, #3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d123      	bne.n	8002ed0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	08da      	lsrs	r2, r3, #3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3208      	adds	r2, #8
 8002e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	220f      	movs	r2, #15
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	691a      	ldr	r2, [r3, #16]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	f003 0307 	and.w	r3, r3, #7
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	08da      	lsrs	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3208      	adds	r2, #8
 8002eca:	6939      	ldr	r1, [r7, #16]
 8002ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 0203 	and.w	r2, r3, #3
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 80ac 	beq.w	800306a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f12:	4b5f      	ldr	r3, [pc, #380]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f16:	4a5e      	ldr	r2, [pc, #376]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f18:	f043 0301 	orr.w	r3, r3, #1
 8002f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003090 <HAL_GPIO_Init+0x330>)
 8002f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003094 <HAL_GPIO_Init+0x334>)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	089b      	lsrs	r3, r3, #2
 8002f30:	3302      	adds	r3, #2
 8002f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	220f      	movs	r2, #15
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x242>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	@ (8003098 <HAL_GPIO_Init+0x338>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x23e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4e      	ldr	r2, [pc, #312]	@ (800309c <HAL_GPIO_Init+0x33c>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x23a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4d      	ldr	r2, [pc, #308]	@ (80030a0 <HAL_GPIO_Init+0x340>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x236>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4c      	ldr	r2, [pc, #304]	@ (80030a4 <HAL_GPIO_Init+0x344>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x232>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4b      	ldr	r2, [pc, #300]	@ (80030a8 <HAL_GPIO_Init+0x348>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x22e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4a      	ldr	r2, [pc, #296]	@ (80030ac <HAL_GPIO_Init+0x34c>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x22a>
 8002f86:	2306      	movs	r3, #6
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f8a:	2307      	movs	r3, #7
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x244>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fb4:	4937      	ldr	r1, [pc, #220]	@ (8003094 <HAL_GPIO_Init+0x334>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002fe6:	4a32      	ldr	r2, [pc, #200]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002fec:	4b30      	ldr	r3, [pc, #192]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003010:	4a27      	ldr	r2, [pc, #156]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003016:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800303a:	4a1d      	ldr	r2, [pc, #116]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003064:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_GPIO_Init+0x350>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	3301      	adds	r3, #1
 800306e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	f47f ae78 	bne.w	8002d70 <HAL_GPIO_Init+0x10>
  }
}
 8003080:	bf00      	nop
 8003082:	bf00      	nop
 8003084:	371c      	adds	r7, #28
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	40021000 	.word	0x40021000
 8003094:	40010000 	.word	0x40010000
 8003098:	48000400 	.word	0x48000400
 800309c:	48000800 	.word	0x48000800
 80030a0:	48000c00 	.word	0x48000c00
 80030a4:	48001000 	.word	0x48001000
 80030a8:	48001400 	.word	0x48001400
 80030ac:	48001800 	.word	0x48001800
 80030b0:	40010400 	.word	0x40010400

080030b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030b8:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_PWREx_GetVoltageRange+0x18>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40007000 	.word	0x40007000

080030d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030de:	d130      	bne.n	8003142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e0:	4b23      	ldr	r3, [pc, #140]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030ec:	d038      	beq.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ee:	4b20      	ldr	r3, [pc, #128]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2232      	movs	r2, #50	@ 0x32
 8003104:	fb02 f303 	mul.w	r3, r2, r3
 8003108:	4a1b      	ldr	r2, [pc, #108]	@ (8003178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	3301      	adds	r3, #1
 8003112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003114:	e002      	b.n	800311c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b01      	subs	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800311c:	4b14      	ldr	r3, [pc, #80]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003128:	d102      	bne.n	8003130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f2      	bne.n	8003116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003130:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313c:	d110      	bne.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e00f      	b.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003142:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314e:	d007      	beq.n	8003160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003150:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003158:	4a05      	ldr	r2, [pc, #20]	@ (8003170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800315e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40007000 	.word	0x40007000
 8003174:	2000003c 	.word	0x2000003c
 8003178:	431bde83 	.word	0x431bde83

0800317c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b088      	sub	sp, #32
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3ca      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318e:	4b97      	ldr	r3, [pc, #604]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 030c 	and.w	r3, r3, #12
 8003196:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003198:	4b94      	ldr	r3, [pc, #592]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 80e4 	beq.w	8003378 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d007      	beq.n	80031c6 <HAL_RCC_OscConfig+0x4a>
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b0c      	cmp	r3, #12
 80031ba:	f040 808b 	bne.w	80032d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	f040 8087 	bne.w	80032d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031c6:	4b89      	ldr	r3, [pc, #548]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d005      	beq.n	80031de <HAL_RCC_OscConfig+0x62>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e3a2      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	4b82      	ldr	r3, [pc, #520]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d004      	beq.n	80031f8 <HAL_RCC_OscConfig+0x7c>
 80031ee:	4b7f      	ldr	r3, [pc, #508]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031f6:	e005      	b.n	8003204 <HAL_RCC_OscConfig+0x88>
 80031f8:	4b7c      	ldr	r3, [pc, #496]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80031fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031fe:	091b      	lsrs	r3, r3, #4
 8003200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003204:	4293      	cmp	r3, r2
 8003206:	d223      	bcs.n	8003250 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fd55 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e383      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321c:	4b73      	ldr	r3, [pc, #460]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a72      	ldr	r2, [pc, #456]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003222:	f043 0308 	orr.w	r3, r3, #8
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	4b70      	ldr	r3, [pc, #448]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	496d      	ldr	r1, [pc, #436]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800323a:	4b6c      	ldr	r3, [pc, #432]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4968      	ldr	r1, [pc, #416]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800324a:	4313      	orrs	r3, r2
 800324c:	604b      	str	r3, [r1, #4]
 800324e:	e025      	b.n	800329c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003250:	4b66      	ldr	r3, [pc, #408]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a65      	ldr	r2, [pc, #404]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003256:	f043 0308 	orr.w	r3, r3, #8
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	4b63      	ldr	r3, [pc, #396]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	4960      	ldr	r1, [pc, #384]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800326e:	4b5f      	ldr	r3, [pc, #380]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	495b      	ldr	r1, [pc, #364]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800327e:	4313      	orrs	r3, r2
 8003280:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	4618      	mov	r0, r3
 800328e:	f000 fd15 	bl	8003cbc <RCC_SetFlashLatencyFromMSIRange>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e343      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800329c:	f000 fc4a 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 80032a0:	4602      	mov	r2, r0
 80032a2:	4b52      	ldr	r3, [pc, #328]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	f003 030f 	and.w	r3, r3, #15
 80032ac:	4950      	ldr	r1, [pc, #320]	@ (80033f0 <HAL_RCC_OscConfig+0x274>)
 80032ae:	5ccb      	ldrb	r3, [r1, r3]
 80032b0:	f003 031f 	and.w	r3, r3, #31
 80032b4:	fa22 f303 	lsr.w	r3, r2, r3
 80032b8:	4a4e      	ldr	r2, [pc, #312]	@ (80033f4 <HAL_RCC_OscConfig+0x278>)
 80032ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032bc:	4b4e      	ldr	r3, [pc, #312]	@ (80033f8 <HAL_RCC_OscConfig+0x27c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe f827 	bl	8001314 <HAL_InitTick>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d052      	beq.n	8003376 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	e327      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d032      	beq.n	8003342 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032dc:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a42      	ldr	r2, [pc, #264]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e8:	f7fe f864 	bl	80013b4 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f0:	f7fe f860 	bl	80013b4 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e310      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003302:	4b3a      	ldr	r3, [pc, #232]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0f0      	beq.n	80032f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800330e:	4b37      	ldr	r3, [pc, #220]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a36      	ldr	r2, [pc, #216]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b34      	ldr	r3, [pc, #208]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	4931      	ldr	r1, [pc, #196]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003328:	4313      	orrs	r3, r2
 800332a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800332c:	4b2f      	ldr	r3, [pc, #188]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	021b      	lsls	r3, r3, #8
 800333a:	492c      	ldr	r1, [pc, #176]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
 8003340:	e01a      	b.n	8003378 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003342:	4b2a      	ldr	r3, [pc, #168]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a29      	ldr	r2, [pc, #164]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003348:	f023 0301 	bic.w	r3, r3, #1
 800334c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800334e:	f7fe f831 	bl	80013b4 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003356:	f7fe f82d 	bl	80013b4 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e2dd      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003368:	4b20      	ldr	r3, [pc, #128]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1f0      	bne.n	8003356 <HAL_RCC_OscConfig+0x1da>
 8003374:	e000      	b.n	8003378 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0301 	and.w	r3, r3, #1
 8003380:	2b00      	cmp	r3, #0
 8003382:	d074      	beq.n	800346e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b08      	cmp	r3, #8
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x21a>
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	d10e      	bne.n	80033ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b03      	cmp	r3, #3
 8003394:	d10b      	bne.n	80033ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d064      	beq.n	800346c <HAL_RCC_OscConfig+0x2f0>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d160      	bne.n	800346c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e2ba      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033b6:	d106      	bne.n	80033c6 <HAL_RCC_OscConfig+0x24a>
 80033b8:	4b0c      	ldr	r3, [pc, #48]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0b      	ldr	r2, [pc, #44]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80033be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c2:	6013      	str	r3, [r2, #0]
 80033c4:	e026      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033ce:	d115      	bne.n	80033fc <HAL_RCC_OscConfig+0x280>
 80033d0:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a05      	ldr	r2, [pc, #20]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80033d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b03      	ldr	r3, [pc, #12]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a02      	ldr	r2, [pc, #8]	@ (80033ec <HAL_RCC_OscConfig+0x270>)
 80033e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	e014      	b.n	8003414 <HAL_RCC_OscConfig+0x298>
 80033ea:	bf00      	nop
 80033ec:	40021000 	.word	0x40021000
 80033f0:	080074d0 	.word	0x080074d0
 80033f4:	2000003c 	.word	0x2000003c
 80033f8:	20000040 	.word	0x20000040
 80033fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a9f      	ldr	r2, [pc, #636]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b9d      	ldr	r3, [pc, #628]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a9c      	ldr	r2, [pc, #624]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fd ffca 	bl	80013b4 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fd ffc6 	bl	80013b4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e276      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003436:	4b92      	ldr	r3, [pc, #584]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x2a8>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003444:	f7fd ffb6 	bl	80013b4 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fd ffb2 	bl	80013b4 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e262      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800345e:	4b88      	ldr	r3, [pc, #544]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x2d0>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d060      	beq.n	800353c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b04      	cmp	r3, #4
 800347e:	d005      	beq.n	800348c <HAL_RCC_OscConfig+0x310>
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	2b0c      	cmp	r3, #12
 8003484:	d119      	bne.n	80034ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d116      	bne.n	80034ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800348c:	4b7c      	ldr	r3, [pc, #496]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_OscConfig+0x328>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e23f      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b76      	ldr	r3, [pc, #472]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	4973      	ldr	r1, [pc, #460]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b8:	e040      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d023      	beq.n	800350a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a6e      	ldr	r2, [pc, #440]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80034c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ce:	f7fd ff71 	bl	80013b4 <HAL_GetTick>
 80034d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d6:	f7fd ff6d 	bl	80013b4 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e21d      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034e8:	4b65      	ldr	r3, [pc, #404]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0f0      	beq.n	80034d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b62      	ldr	r3, [pc, #392]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	061b      	lsls	r3, r3, #24
 8003502:	495f      	ldr	r1, [pc, #380]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003504:	4313      	orrs	r3, r2
 8003506:	604b      	str	r3, [r1, #4]
 8003508:	e018      	b.n	800353c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800350a:	4b5d      	ldr	r3, [pc, #372]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a5c      	ldr	r2, [pc, #368]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003516:	f7fd ff4d 	bl	80013b4 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351e:	f7fd ff49 	bl	80013b4 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e1f9      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0308 	and.w	r3, r3, #8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d03c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01c      	beq.n	800358a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003550:	4b4b      	ldr	r3, [pc, #300]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003556:	4a4a      	ldr	r2, [pc, #296]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003560:	f7fd ff28 	bl	80013b4 <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003568:	f7fd ff24 	bl	80013b4 <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e1d4      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800357a:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800357c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ef      	beq.n	8003568 <HAL_RCC_OscConfig+0x3ec>
 8003588:	e01b      	b.n	80035c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358a:	4b3d      	ldr	r3, [pc, #244]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003590:	4a3b      	ldr	r2, [pc, #236]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd ff0b 	bl	80013b4 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd ff07 	bl	80013b4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1b7      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035b4:	4b32      	ldr	r3, [pc, #200]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1ef      	bne.n	80035a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	f000 80a6 	beq.w	800371c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d0:	2300      	movs	r3, #0
 80035d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80035d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10d      	bne.n	80035fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ec:	4b24      	ldr	r3, [pc, #144]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035f8:	2301      	movs	r3, #1
 80035fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035fc:	4b21      	ldr	r3, [pc, #132]	@ (8003684 <HAL_RCC_OscConfig+0x508>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d118      	bne.n	800363a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003608:	4b1e      	ldr	r3, [pc, #120]	@ (8003684 <HAL_RCC_OscConfig+0x508>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1d      	ldr	r2, [pc, #116]	@ (8003684 <HAL_RCC_OscConfig+0x508>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003614:	f7fd fece 	bl	80013b4 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fd feca 	bl	80013b4 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e17a      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800362e:	4b15      	ldr	r3, [pc, #84]	@ (8003684 <HAL_RCC_OscConfig+0x508>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x4d8>
 8003642:	4b0f      	ldr	r3, [pc, #60]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003652:	e029      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b05      	cmp	r3, #5
 800365a:	d115      	bne.n	8003688 <HAL_RCC_OscConfig+0x50c>
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	4a07      	ldr	r2, [pc, #28]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003664:	f043 0304 	orr.w	r3, r3, #4
 8003668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	4a03      	ldr	r2, [pc, #12]	@ (8003680 <HAL_RCC_OscConfig+0x504>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0x52c>
 800367e:	bf00      	nop
 8003680:	40021000 	.word	0x40021000
 8003684:	40007000 	.word	0x40007000
 8003688:	4b9c      	ldr	r3, [pc, #624]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800368e:	4a9b      	ldr	r2, [pc, #620]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003698:	4b98      	ldr	r3, [pc, #608]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 800369a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800369e:	4a97      	ldr	r2, [pc, #604]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80036a0:	f023 0304 	bic.w	r3, r3, #4
 80036a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d016      	beq.n	80036de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b0:	f7fd fe80 	bl	80013b4 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036b6:	e00a      	b.n	80036ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036b8:	f7fd fe7c 	bl	80013b4 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e12a      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ce:	4b8b      	ldr	r3, [pc, #556]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ed      	beq.n	80036b8 <HAL_RCC_OscConfig+0x53c>
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036de:	f7fd fe69 	bl	80013b4 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036e4:	e00a      	b.n	80036fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e6:	f7fd fe65 	bl	80013b4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e113      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036fc:	4b7f      	ldr	r3, [pc, #508]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1ed      	bne.n	80036e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800370a:	7ffb      	ldrb	r3, [r7, #31]
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b7a      	ldr	r3, [pc, #488]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003714:	4a79      	ldr	r2, [pc, #484]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80fe 	beq.w	8003922 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372a:	2b02      	cmp	r3, #2
 800372c:	f040 80d0 	bne.w	80038d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003730:	4b72      	ldr	r3, [pc, #456]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f003 0203 	and.w	r2, r3, #3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	429a      	cmp	r2, r3
 8003742:	d130      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800374e:	3b01      	subs	r3, #1
 8003750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d127      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003760:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003762:	429a      	cmp	r2, r3
 8003764:	d11f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003770:	2a07      	cmp	r2, #7
 8003772:	bf14      	ite	ne
 8003774:	2201      	movne	r2, #1
 8003776:	2200      	moveq	r2, #0
 8003778:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800377a:	4293      	cmp	r3, r2
 800377c:	d113      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	3b01      	subs	r3, #1
 800378c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800378e:	429a      	cmp	r2, r3
 8003790:	d109      	bne.n	80037a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	3b01      	subs	r3, #1
 80037a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d06e      	beq.n	8003884 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d069      	beq.n	8003880 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037ac:	4b53      	ldr	r3, [pc, #332]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037b8:	4b50      	ldr	r3, [pc, #320]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0ad      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037c8:	4b4c      	ldr	r3, [pc, #304]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a4b      	ldr	r2, [pc, #300]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80037ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037d4:	f7fd fdee 	bl	80013b4 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037dc:	f7fd fdea 	bl	80013b4 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e09a      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ee:	4b43      	ldr	r3, [pc, #268]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fa:	4b40      	ldr	r3, [pc, #256]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	4b40      	ldr	r3, [pc, #256]	@ (8003900 <HAL_RCC_OscConfig+0x784>)
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800380a:	3a01      	subs	r2, #1
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003814:	0212      	lsls	r2, r2, #8
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800381c:	0852      	lsrs	r2, r2, #1
 800381e:	3a01      	subs	r2, #1
 8003820:	0552      	lsls	r2, r2, #21
 8003822:	4311      	orrs	r1, r2
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003828:	0852      	lsrs	r2, r2, #1
 800382a:	3a01      	subs	r2, #1
 800382c:	0652      	lsls	r2, r2, #25
 800382e:	4311      	orrs	r1, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003834:	0912      	lsrs	r2, r2, #4
 8003836:	0452      	lsls	r2, r2, #17
 8003838:	430a      	orrs	r2, r1
 800383a:	4930      	ldr	r1, [pc, #192]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 800383c:	4313      	orrs	r3, r2
 800383e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003840:	4b2e      	ldr	r3, [pc, #184]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a2d      	ldr	r2, [pc, #180]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800384c:	4b2b      	ldr	r3, [pc, #172]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003858:	f7fd fdac 	bl	80013b4 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fd fda8 	bl	80013b4 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e058      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b22      	ldr	r3, [pc, #136]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800387e:	e050      	b.n	8003922 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e04f      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003884:	4b1d      	ldr	r3, [pc, #116]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d148      	bne.n	8003922 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003890:	4b1a      	ldr	r3, [pc, #104]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b17      	ldr	r3, [pc, #92]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a16      	ldr	r2, [pc, #88]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038a8:	f7fd fd84 	bl	80013b4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fd80 	bl	80013b4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e030      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b0e      	ldr	r3, [pc, #56]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x734>
 80038ce:	e028      	b.n	8003922 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d023      	beq.n	800391e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d6:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a08      	ldr	r2, [pc, #32]	@ (80038fc <HAL_RCC_OscConfig+0x780>)
 80038dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e2:	f7fd fd67 	bl	80013b4 <HAL_GetTick>
 80038e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	e00c      	b.n	8003904 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ea:	f7fd fd63 	bl	80013b4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d905      	bls.n	8003904 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e013      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
 80038fc:	40021000 	.word	0x40021000
 8003900:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	4b09      	ldr	r3, [pc, #36]	@ (800392c <HAL_RCC_OscConfig+0x7b0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1ec      	bne.n	80038ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <HAL_RCC_OscConfig+0x7b0>)
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	4905      	ldr	r1, [pc, #20]	@ (800392c <HAL_RCC_OscConfig+0x7b0>)
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_OscConfig+0x7b4>)
 8003918:	4013      	ands	r3, r2
 800391a:	60cb      	str	r3, [r1, #12]
 800391c:	e001      	b.n	8003922 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40021000 	.word	0x40021000
 8003930:	feeefffc 	.word	0xfeeefffc

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0e7      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b75      	ldr	r3, [pc, #468]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d910      	bls.n	8003978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b72      	ldr	r3, [pc, #456]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f023 0207 	bic.w	r2, r3, #7
 800395e:	4970      	ldr	r1, [pc, #448]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4313      	orrs	r3, r2
 8003964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003966:	4b6e      	ldr	r3, [pc, #440]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0307 	and.w	r3, r3, #7
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	429a      	cmp	r2, r3
 8003972:	d001      	beq.n	8003978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e0cf      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0302 	and.w	r3, r3, #2
 8003980:	2b00      	cmp	r3, #0
 8003982:	d010      	beq.n	80039a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	4b66      	ldr	r3, [pc, #408]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003990:	429a      	cmp	r2, r3
 8003992:	d908      	bls.n	80039a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003994:	4b63      	ldr	r3, [pc, #396]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4960      	ldr	r1, [pc, #384]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d04c      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d107      	bne.n	80039ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	4b5a      	ldr	r3, [pc, #360]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d121      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e0a6      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	4b54      	ldr	r3, [pc, #336]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d115      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e09a      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d109      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e08e      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fa:	4b4a      	ldr	r3, [pc, #296]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e086      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a0a:	4b46      	ldr	r3, [pc, #280]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f023 0203 	bic.w	r2, r3, #3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4943      	ldr	r1, [pc, #268]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a1c:	f7fd fcca 	bl	80013b4 <HAL_GetTick>
 8003a20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	e00a      	b.n	8003a3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a24:	f7fd fcc6 	bl	80013b4 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e06e      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 020c 	and.w	r2, r3, #12
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d1eb      	bne.n	8003a24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b31      	ldr	r3, [pc, #196]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d208      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b2e      	ldr	r3, [pc, #184]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	492b      	ldr	r1, [pc, #172]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7a:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d210      	bcs.n	8003aaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a88:	4b25      	ldr	r3, [pc, #148]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 0207 	bic.w	r2, r3, #7
 8003a90:	4923      	ldr	r1, [pc, #140]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	4b21      	ldr	r3, [pc, #132]	@ (8003b20 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e036      	b.n	8003b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4918      	ldr	r1, [pc, #96]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad4:	4b13      	ldr	r3, [pc, #76]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4910      	ldr	r1, [pc, #64]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ae8:	f000 f824 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	091b      	lsrs	r3, r3, #4
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	490b      	ldr	r1, [pc, #44]	@ (8003b28 <HAL_RCC_ClockConfig+0x1f4>)
 8003afa:	5ccb      	ldrb	r3, [r1, r3]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
 8003b04:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b08:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <HAL_RCC_ClockConfig+0x1fc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7fd fc01 	bl	8001314 <HAL_InitTick>
 8003b12:	4603      	mov	r3, r0
 8003b14:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b16:	7afb      	ldrb	r3, [r7, #11]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40021000 	.word	0x40021000
 8003b28:	080074d0 	.word	0x080074d0
 8003b2c:	2000003c 	.word	0x2000003c
 8003b30:	20000040 	.word	0x20000040

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b089      	sub	sp, #36	@ 0x24
 8003b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b42:	4b3e      	ldr	r3, [pc, #248]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0x34>
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b0c      	cmp	r3, #12
 8003b60:	d121      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d11e      	bne.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b68:	4b34      	ldr	r3, [pc, #208]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0308 	and.w	r3, r3, #8
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b74:	4b31      	ldr	r3, [pc, #196]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	f003 030f 	and.w	r3, r3, #15
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e005      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b84:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	091b      	lsrs	r3, r3, #4
 8003b8a:	f003 030f 	and.w	r3, r3, #15
 8003b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b90:	4a2b      	ldr	r2, [pc, #172]	@ (8003c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba4:	e00a      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d102      	bne.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bac:	4b25      	ldr	r3, [pc, #148]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	e004      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bb8:	4b23      	ldr	r3, [pc, #140]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d134      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0xa6>
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d003      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0xac>
 8003bd8:	e005      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003bda:	4b1a      	ldr	r3, [pc, #104]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8003bdc:	617b      	str	r3, [r7, #20]
      break;
 8003bde:	e005      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003be0:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8003be2:	617b      	str	r3, [r7, #20]
      break;
 8003be4:	e002      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	617b      	str	r3, [r7, #20]
      break;
 8003bea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bec:	4b13      	ldr	r3, [pc, #76]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	091b      	lsrs	r3, r3, #4
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	0a1b      	lsrs	r3, r3, #8
 8003c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	fb03 f202 	mul.w	r2, r3, r2
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	0e5b      	lsrs	r3, r3, #25
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	005b      	lsls	r3, r3, #1
 8003c20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c2c:	69bb      	ldr	r3, [r7, #24]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3724      	adds	r7, #36	@ 0x24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	080074e8 	.word	0x080074e8
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	@ (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	2000003c 	.word	0x2000003c

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b06      	ldr	r3, [pc, #24]	@ (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4904      	ldr	r1, [pc, #16]	@ (8003c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	f003 031f 	and.w	r3, r3, #31
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	080074e0 	.word	0x080074e0

08003c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c94:	f7ff ffda 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b06      	ldr	r3, [pc, #24]	@ (8003cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	0adb      	lsrs	r3, r3, #11
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	4904      	ldr	r1, [pc, #16]	@ (8003cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	080074e0 	.word	0x080074e0

08003cbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d003      	beq.n	8003cdc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cd4:	f7ff f9ee 	bl	80030b4 <HAL_PWREx_GetVoltageRange>
 8003cd8:	6178      	str	r0, [r7, #20]
 8003cda:	e014      	b.n	8003d06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cdc:	4b25      	ldr	r3, [pc, #148]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	4a24      	ldr	r2, [pc, #144]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ce6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ce8:	4b22      	ldr	r3, [pc, #136]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cf4:	f7ff f9de 	bl	80030b4 <HAL_PWREx_GetVoltageRange>
 8003cf8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cfe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d0c:	d10b      	bne.n	8003d26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b80      	cmp	r3, #128	@ 0x80
 8003d12:	d919      	bls.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d18:	d902      	bls.n	8003d20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	613b      	str	r3, [r7, #16]
 8003d1e:	e013      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e010      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b80      	cmp	r3, #128	@ 0x80
 8003d2a:	d902      	bls.n	8003d32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	e00a      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b80      	cmp	r3, #128	@ 0x80
 8003d36:	d102      	bne.n	8003d3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d38:	2302      	movs	r3, #2
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	e004      	b.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b70      	cmp	r3, #112	@ 0x70
 8003d42:	d101      	bne.n	8003d48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d44:	2301      	movs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d48:	4b0b      	ldr	r3, [pc, #44]	@ (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 0207 	bic.w	r2, r3, #7
 8003d50:	4909      	ldr	r1, [pc, #36]	@ (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d58:	4b07      	ldr	r3, [pc, #28]	@ (8003d78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d001      	beq.n	8003d6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3718      	adds	r7, #24
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	40021000 	.word	0x40021000
 8003d78:	40022000 	.word	0x40022000

08003d7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d84:	2300      	movs	r3, #0
 8003d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d88:	2300      	movs	r3, #0
 8003d8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d041      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003da0:	d02a      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003da2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003da6:	d824      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003da8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dac:	d008      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003db2:	d81e      	bhi.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dbc:	d010      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dbe:	e018      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc0:	4b86      	ldr	r3, [pc, #536]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a85      	ldr	r2, [pc, #532]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fabb 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dde:	e00c      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3320      	adds	r3, #32
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fba6 	bl	8004538 <RCCEx_PLLSAI2_Config>
 8003dec:	4603      	mov	r3, r0
 8003dee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df0:	e003      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	74fb      	strb	r3, [r7, #19]
      break;
 8003df6:	e000      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e00:	4b76      	ldr	r3, [pc, #472]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e0e:	4973      	ldr	r1, [pc, #460]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7cfb      	ldrb	r3, [r7, #19]
 8003e1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d041      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e30:	d02a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e36:	d824      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e3c:	d008      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e42:	d81e      	bhi.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e4c:	d010      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e4e:	e018      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e50:	4b62      	ldr	r3, [pc, #392]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a61      	ldr	r2, [pc, #388]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e5c:	e015      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fa73 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e6e:	e00c      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3320      	adds	r3, #32
 8003e74:	2100      	movs	r1, #0
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fb5e 	bl	8004538 <RCCEx_PLLSAI2_Config>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	74fb      	strb	r3, [r7, #19]
      break;
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10b      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e90:	4b52      	ldr	r3, [pc, #328]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e9e:	494f      	ldr	r1, [pc, #316]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003ea6:	e001      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a0 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ebe:	4b47      	ldr	r3, [pc, #284]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00d      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	4b41      	ldr	r3, [pc, #260]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed8:	4a40      	ldr	r2, [pc, #256]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ee0:	4b3e      	ldr	r3, [pc, #248]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	60bb      	str	r3, [r7, #8]
 8003eea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eec:	2301      	movs	r3, #1
 8003eee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efc:	f7fd fa5a 	bl	80013b4 <HAL_GetTick>
 8003f00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f02:	e009      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f04:	f7fd fa56 	bl	80013b4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d902      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	74fb      	strb	r3, [r7, #19]
        break;
 8003f16:	e005      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f18:	4b31      	ldr	r3, [pc, #196]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ef      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d15c      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d01f      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d019      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f48:	4b24      	ldr	r3, [pc, #144]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f54:	4b21      	ldr	r3, [pc, #132]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f5a:	4a20      	ldr	r2, [pc, #128]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f64:	4b1d      	ldr	r3, [pc, #116]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f74:	4a19      	ldr	r2, [pc, #100]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d016      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f86:	f7fd fa15 	bl	80013b4 <HAL_GetTick>
 8003f8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8c:	e00b      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8e:	f7fd fa11 	bl	80013b4 <HAL_GetTick>
 8003f92:	4602      	mov	r2, r0
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d902      	bls.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0ec      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fba:	4b08      	ldr	r3, [pc, #32]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fca:	4904      	ldr	r1, [pc, #16]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fd2:	e009      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	74bb      	strb	r3, [r7, #18]
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fda:	bf00      	nop
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b9e      	ldr	r3, [pc, #632]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff2:	4a9d      	ldr	r2, [pc, #628]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4b98      	ldr	r3, [pc, #608]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	4994      	ldr	r1, [pc, #592]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b8f      	ldr	r3, [pc, #572]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004036:	498c      	ldr	r1, [pc, #560]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404a:	4b87      	ldr	r3, [pc, #540]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004050:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	4983      	ldr	r1, [pc, #524]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800406c:	4b7e      	ldr	r3, [pc, #504]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004072:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	497b      	ldr	r1, [pc, #492]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800408e:	4b76      	ldr	r3, [pc, #472]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004094:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409c:	4972      	ldr	r1, [pc, #456]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040be:	496a      	ldr	r1, [pc, #424]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d2:	4b65      	ldr	r3, [pc, #404]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040e0:	4961      	ldr	r1, [pc, #388]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040f4:	4b5c      	ldr	r3, [pc, #368]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004102:	4959      	ldr	r1, [pc, #356]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004116:	4b54      	ldr	r3, [pc, #336]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004124:	4950      	ldr	r1, [pc, #320]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004138:	4b4b      	ldr	r3, [pc, #300]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800413e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004146:	4948      	ldr	r1, [pc, #288]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800415a:	4b43      	ldr	r3, [pc, #268]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004160:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004168:	493f      	ldr	r1, [pc, #252]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d028      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800417c:	4b3a      	ldr	r3, [pc, #232]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004182:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800418a:	4937      	ldr	r1, [pc, #220]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004196:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800419a:	d106      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800419c:	4b32      	ldr	r3, [pc, #200]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	4a31      	ldr	r2, [pc, #196]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041a6:	60d3      	str	r3, [r2, #12]
 80041a8:	e011      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041b2:	d10c      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	2101      	movs	r1, #1
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 f8c8 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80041c0:	4603      	mov	r3, r0
 80041c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041c4:	7cfb      	ldrb	r3, [r7, #19]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041ca:	7cfb      	ldrb	r3, [r7, #19]
 80041cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d028      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041da:	4b23      	ldr	r3, [pc, #140]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e8:	491f      	ldr	r1, [pc, #124]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041f8:	d106      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004204:	60d3      	str	r3, [r2, #12]
 8004206:	e011      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004210:	d10c      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3304      	adds	r3, #4
 8004216:	2101      	movs	r1, #1
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f899 	bl	8004350 <RCCEx_PLLSAI1_Config>
 800421e:	4603      	mov	r3, r0
 8004220:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004222:	7cfb      	ldrb	r3, [r7, #19]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d02b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004238:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004246:	4908      	ldr	r1, [pc, #32]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004256:	d109      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b03      	ldr	r3, [pc, #12]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a02      	ldr	r2, [pc, #8]	@ (8004268 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
 8004264:	e014      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004274:	d10c      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	2101      	movs	r1, #1
 800427c:	4618      	mov	r0, r3
 800427e:	f000 f867 	bl	8004350 <RCCEx_PLLSAI1_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800428c:	7cfb      	ldrb	r3, [r7, #19]
 800428e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d02f      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800429c:	4b2b      	ldr	r3, [pc, #172]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042aa:	4928      	ldr	r1, [pc, #160]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ba:	d10d      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f844 	bl	8004350 <RCCEx_PLLSAI1_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d014      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	74bb      	strb	r3, [r7, #18]
 80042d6:	e011      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042e0:	d10c      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3320      	adds	r3, #32
 80042e6:	2102      	movs	r1, #2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f925 	bl	8004538 <RCCEx_PLLSAI2_Config>
 80042ee:	4603      	mov	r3, r0
 80042f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d001      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004308:	4b10      	ldr	r3, [pc, #64]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800430a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004316:	490d      	ldr	r1, [pc, #52]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00b      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433a:	4904      	ldr	r1, [pc, #16]	@ (800434c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004342:	7cbb      	ldrb	r3, [r7, #18]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000

08004350 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800435a:	2300      	movs	r3, #0
 800435c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800435e:	4b75      	ldr	r3, [pc, #468]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d018      	beq.n	800439c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800436a:	4b72      	ldr	r3, [pc, #456]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0203 	and.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d10d      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
       ||
 800437e:	2b00      	cmp	r3, #0
 8004380:	d009      	beq.n	8004396 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004382:	4b6c      	ldr	r3, [pc, #432]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
       ||
 8004392:	429a      	cmp	r2, r3
 8004394:	d047      	beq.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	73fb      	strb	r3, [r7, #15]
 800439a:	e044      	b.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d018      	beq.n	80043d6 <RCCEx_PLLSAI1_Config+0x86>
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	d825      	bhi.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d002      	beq.n	80043b2 <RCCEx_PLLSAI1_Config+0x62>
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d009      	beq.n	80043c4 <RCCEx_PLLSAI1_Config+0x74>
 80043b0:	e020      	b.n	80043f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043b2:	4b60      	ldr	r3, [pc, #384]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d11d      	bne.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c2:	e01a      	b.n	80043fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043c4:	4b5b      	ldr	r3, [pc, #364]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d4:	e013      	b.n	80043fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043d6:	4b57      	ldr	r3, [pc, #348]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10f      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043e2:	4b54      	ldr	r3, [pc, #336]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043f2:	e006      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
      break;
 80043f8:	e004      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fa:	bf00      	nop
 80043fc:	e002      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
    }

    if(status == HAL_OK)
 8004404:	7bfb      	ldrb	r3, [r7, #15]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800440a:	4b4a      	ldr	r3, [pc, #296]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6819      	ldr	r1, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	430b      	orrs	r3, r1
 8004420:	4944      	ldr	r1, [pc, #272]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004422:	4313      	orrs	r3, r2
 8004424:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d17d      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800442c:	4b41      	ldr	r3, [pc, #260]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a40      	ldr	r2, [pc, #256]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004432:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004436:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fc ffbc 	bl	80013b4 <HAL_GetTick>
 800443c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443e:	e009      	b.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004440:	f7fc ffb8 	bl	80013b4 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d902      	bls.n	8004454 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	73fb      	strb	r3, [r7, #15]
        break;
 8004452:	e005      	b.n	8004460 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004454:	4b37      	ldr	r3, [pc, #220]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1ef      	bne.n	8004440 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d160      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800446c:	4b31      	ldr	r3, [pc, #196]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004474:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6892      	ldr	r2, [r2, #8]
 800447c:	0211      	lsls	r1, r2, #8
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	0912      	lsrs	r2, r2, #4
 8004484:	0452      	lsls	r2, r2, #17
 8004486:	430a      	orrs	r2, r1
 8004488:	492a      	ldr	r1, [pc, #168]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	610b      	str	r3, [r1, #16]
 800448e:	e027      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d112      	bne.n	80044bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004496:	4b27      	ldr	r3, [pc, #156]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800449e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6892      	ldr	r2, [r2, #8]
 80044a6:	0211      	lsls	r1, r2, #8
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6912      	ldr	r2, [r2, #16]
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0552      	lsls	r2, r2, #21
 80044b2:	430a      	orrs	r2, r1
 80044b4:	491f      	ldr	r1, [pc, #124]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	610b      	str	r3, [r1, #16]
 80044ba:	e011      	b.n	80044e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044bc:	4b1d      	ldr	r3, [pc, #116]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6892      	ldr	r2, [r2, #8]
 80044cc:	0211      	lsls	r1, r2, #8
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	6952      	ldr	r2, [r2, #20]
 80044d2:	0852      	lsrs	r2, r2, #1
 80044d4:	3a01      	subs	r2, #1
 80044d6:	0652      	lsls	r2, r2, #25
 80044d8:	430a      	orrs	r2, r1
 80044da:	4916      	ldr	r1, [pc, #88]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e0:	4b14      	ldr	r3, [pc, #80]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a13      	ldr	r2, [pc, #76]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fc ff62 	bl	80013b4 <HAL_GetTick>
 80044f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044f2:	e009      	b.n	8004508 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044f4:	f7fc ff5e 	bl	80013b4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d902      	bls.n	8004508 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	73fb      	strb	r3, [r7, #15]
          break;
 8004506:	e005      	b.n	8004514 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004508:	4b0a      	ldr	r3, [pc, #40]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004514:	7bfb      	ldrb	r3, [r7, #15]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800451a:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	4904      	ldr	r1, [pc, #16]	@ (8004534 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	4313      	orrs	r3, r2
 8004526:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40021000 	.word	0x40021000

08004538 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004546:	4b6a      	ldr	r3, [pc, #424]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d018      	beq.n	8004584 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004552:	4b67      	ldr	r3, [pc, #412]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f003 0203 	and.w	r2, r3, #3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d10d      	bne.n	800457e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
       ||
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800456a:	4b61      	ldr	r3, [pc, #388]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	091b      	lsrs	r3, r3, #4
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
       ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d047      	beq.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e044      	b.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d018      	beq.n	80045be <RCCEx_PLLSAI2_Config+0x86>
 800458c:	2b03      	cmp	r3, #3
 800458e:	d825      	bhi.n	80045dc <RCCEx_PLLSAI2_Config+0xa4>
 8004590:	2b01      	cmp	r3, #1
 8004592:	d002      	beq.n	800459a <RCCEx_PLLSAI2_Config+0x62>
 8004594:	2b02      	cmp	r3, #2
 8004596:	d009      	beq.n	80045ac <RCCEx_PLLSAI2_Config+0x74>
 8004598:	e020      	b.n	80045dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800459a:	4b55      	ldr	r3, [pc, #340]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d11d      	bne.n	80045e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045aa:	e01a      	b.n	80045e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045ac:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d116      	bne.n	80045e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045bc:	e013      	b.n	80045e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045be:	4b4c      	ldr	r3, [pc, #304]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045ca:	4b49      	ldr	r3, [pc, #292]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045da:	e006      	b.n	80045ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      break;
 80045e0:	e004      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80045ec:	7bfb      	ldrb	r3, [r7, #15]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10d      	bne.n	800460e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045f2:	4b3f      	ldr	r3, [pc, #252]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6819      	ldr	r1, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	430b      	orrs	r3, r1
 8004608:	4939      	ldr	r1, [pc, #228]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d167      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a35      	ldr	r2, [pc, #212]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800461e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004620:	f7fc fec8 	bl	80013b4 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004626:	e009      	b.n	800463c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004628:	f7fc fec4 	bl	80013b4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d902      	bls.n	800463c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	73fb      	strb	r3, [r7, #15]
        break;
 800463a:	e005      	b.n	8004648 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463c:	4b2c      	ldr	r3, [pc, #176]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d1ef      	bne.n	8004628 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d14a      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d111      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004654:	4b26      	ldr	r3, [pc, #152]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800465c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6892      	ldr	r2, [r2, #8]
 8004664:	0211      	lsls	r1, r2, #8
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	0912      	lsrs	r2, r2, #4
 800466c:	0452      	lsls	r2, r2, #17
 800466e:	430a      	orrs	r2, r1
 8004670:	491f      	ldr	r1, [pc, #124]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004672:	4313      	orrs	r3, r2
 8004674:	614b      	str	r3, [r1, #20]
 8004676:	e011      	b.n	800469c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004678:	4b1d      	ldr	r3, [pc, #116]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004680:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6892      	ldr	r2, [r2, #8]
 8004688:	0211      	lsls	r1, r2, #8
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6912      	ldr	r2, [r2, #16]
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0652      	lsls	r2, r2, #25
 8004694:	430a      	orrs	r2, r1
 8004696:	4916      	ldr	r1, [pc, #88]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	4313      	orrs	r3, r2
 800469a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800469c:	4b14      	ldr	r3, [pc, #80]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a13      	ldr	r2, [pc, #76]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a8:	f7fc fe84 	bl	80013b4 <HAL_GetTick>
 80046ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046ae:	e009      	b.n	80046c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b0:	f7fc fe80 	bl	80013b4 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d902      	bls.n	80046c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	73fb      	strb	r3, [r7, #15]
          break;
 80046c2:	e005      	b.n	80046d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c4:	4b0a      	ldr	r3, [pc, #40]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0ef      	beq.n	80046b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d106      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d8:	695a      	ldr	r2, [r3, #20]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	4904      	ldr	r1, [pc, #16]	@ (80046f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	40021000 	.word	0x40021000

080046f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e049      	b.n	800479a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fc26 	bl	8000f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fb84 	bl	8004e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x24>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e03c      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d109      	bne.n	80047e2 <HAL_TIM_PWM_Start+0x3e>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	bf14      	ite	ne
 80047da:	2301      	movne	r3, #1
 80047dc:	2300      	moveq	r3, #0
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	e02f      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d109      	bne.n	80047fc <HAL_TIM_PWM_Start+0x58>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	bf14      	ite	ne
 80047f4:	2301      	movne	r3, #1
 80047f6:	2300      	moveq	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	e022      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d109      	bne.n	8004816 <HAL_TIM_PWM_Start+0x72>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b01      	cmp	r3, #1
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e015      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b10      	cmp	r3, #16
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start+0x8c>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e008      	b.n	8004842 <HAL_TIM_PWM_Start+0x9e>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b01      	cmp	r3, #1
 800483a:	bf14      	ite	ne
 800483c:	2301      	movne	r3, #1
 800483e:	2300      	moveq	r3, #0
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e09c      	b.n	8004984 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d104      	bne.n	800485a <HAL_TIM_PWM_Start+0xb6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004858:	e023      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b04      	cmp	r3, #4
 800485e:	d104      	bne.n	800486a <HAL_TIM_PWM_Start+0xc6>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004868:	e01b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b08      	cmp	r3, #8
 800486e:	d104      	bne.n	800487a <HAL_TIM_PWM_Start+0xd6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004878:	e013      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d104      	bne.n	800488a <HAL_TIM_PWM_Start+0xe6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004888:	e00b      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b10      	cmp	r3, #16
 800488e:	d104      	bne.n	800489a <HAL_TIM_PWM_Start+0xf6>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004898:	e003      	b.n	80048a2 <HAL_TIM_PWM_Start+0xfe>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2202      	movs	r2, #2
 800489e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2201      	movs	r2, #1
 80048a8:	6839      	ldr	r1, [r7, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fe38 	bl	8005520 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a35      	ldr	r2, [pc, #212]	@ (800498c <HAL_TIM_PWM_Start+0x1e8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a34      	ldr	r2, [pc, #208]	@ (8004990 <HAL_TIM_PWM_Start+0x1ec>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a32      	ldr	r2, [pc, #200]	@ (8004994 <HAL_TIM_PWM_Start+0x1f0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a31      	ldr	r2, [pc, #196]	@ (8004998 <HAL_TIM_PWM_Start+0x1f4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIM_PWM_Start+0x13e>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a2f      	ldr	r2, [pc, #188]	@ (800499c <HAL_TIM_PWM_Start+0x1f8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x142>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_PWM_Start+0x144>
 80048e6:	2300      	movs	r3, #0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a22      	ldr	r2, [pc, #136]	@ (800498c <HAL_TIM_PWM_Start+0x1e8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d01d      	beq.n	8004942 <HAL_TIM_PWM_Start+0x19e>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800490e:	d018      	beq.n	8004942 <HAL_TIM_PWM_Start+0x19e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a22      	ldr	r2, [pc, #136]	@ (80049a0 <HAL_TIM_PWM_Start+0x1fc>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <HAL_TIM_PWM_Start+0x19e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a21      	ldr	r2, [pc, #132]	@ (80049a4 <HAL_TIM_PWM_Start+0x200>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d00e      	beq.n	8004942 <HAL_TIM_PWM_Start+0x19e>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a1f      	ldr	r2, [pc, #124]	@ (80049a8 <HAL_TIM_PWM_Start+0x204>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d009      	beq.n	8004942 <HAL_TIM_PWM_Start+0x19e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a17      	ldr	r2, [pc, #92]	@ (8004990 <HAL_TIM_PWM_Start+0x1ec>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_TIM_PWM_Start+0x19e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a15      	ldr	r2, [pc, #84]	@ (8004994 <HAL_TIM_PWM_Start+0x1f0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d115      	bne.n	800496e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	4b18      	ldr	r3, [pc, #96]	@ (80049ac <HAL_TIM_PWM_Start+0x208>)
 800494a:	4013      	ands	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2b06      	cmp	r3, #6
 8004952:	d015      	beq.n	8004980 <HAL_TIM_PWM_Start+0x1dc>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800495a:	d011      	beq.n	8004980 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f042 0201 	orr.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	e008      	b.n	8004980 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	e000      	b.n	8004982 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004980:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40013400 	.word	0x40013400
 8004994:	40014000 	.word	0x40014000
 8004998:	40014400 	.word	0x40014400
 800499c:	40014800 	.word	0x40014800
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e097      	b.n	8004af4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fc fa83 	bl	8000ee4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6812      	ldr	r2, [r2, #0]
 80049f0:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80049f4:	f023 0307 	bic.w	r3, r3, #7
 80049f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4610      	mov	r0, r2
 8004a06:	f000 fa1b 	bl	8004e40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	021b      	lsls	r3, r3, #8
 8004a42:	4313      	orrs	r3, r2
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a50:	f023 030c 	bic.w	r3, r3, #12
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68da      	ldr	r2, [r3, #12]
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	021b      	lsls	r3, r3, #8
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	011a      	lsls	r2, r3, #4
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	031b      	lsls	r3, r3, #12
 8004a80:	4313      	orrs	r3, r2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d110      	bne.n	8004b4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d102      	bne.n	8004b38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b32:	7b7b      	ldrb	r3, [r7, #13]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d001      	beq.n	8004b3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e069      	b.n	8004c10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b4c:	e031      	b.n	8004bb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d110      	bne.n	8004b76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b54:	7bbb      	ldrb	r3, [r7, #14]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d102      	bne.n	8004b60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b5a:	7b3b      	ldrb	r3, [r7, #12]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e055      	b.n	8004c10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b74:	e01d      	b.n	8004bb2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d108      	bne.n	8004b8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b7c:	7bbb      	ldrb	r3, [r7, #14]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b82:	7b7b      	ldrb	r3, [r7, #13]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d102      	bne.n	8004b8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b88:	7b3b      	ldrb	r3, [r7, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e03e      	b.n	8004c10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2202      	movs	r2, #2
 8004bae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d003      	beq.n	8004bc0 <HAL_TIM_Encoder_Start+0xc4>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d008      	beq.n	8004bd0 <HAL_TIM_Encoder_Start+0xd4>
 8004bbe:	e00f      	b.n	8004be0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fca9 	bl	8005520 <TIM_CCxChannelCmd>
      break;
 8004bce:	e016      	b.n	8004bfe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	2104      	movs	r1, #4
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fca1 	bl	8005520 <TIM_CCxChannelCmd>
      break;
 8004bde:	e00e      	b.n	8004bfe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2201      	movs	r2, #1
 8004be6:	2100      	movs	r1, #0
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fc99 	bl	8005520 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	2104      	movs	r1, #4
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fc92 	bl	8005520 <TIM_CCxChannelCmd>
      break;
 8004bfc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e0ff      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b14      	cmp	r3, #20
 8004c42:	f200 80f0 	bhi.w	8004e26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004c46:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4c:	08004ca1 	.word	0x08004ca1
 8004c50:	08004e27 	.word	0x08004e27
 8004c54:	08004e27 	.word	0x08004e27
 8004c58:	08004e27 	.word	0x08004e27
 8004c5c:	08004ce1 	.word	0x08004ce1
 8004c60:	08004e27 	.word	0x08004e27
 8004c64:	08004e27 	.word	0x08004e27
 8004c68:	08004e27 	.word	0x08004e27
 8004c6c:	08004d23 	.word	0x08004d23
 8004c70:	08004e27 	.word	0x08004e27
 8004c74:	08004e27 	.word	0x08004e27
 8004c78:	08004e27 	.word	0x08004e27
 8004c7c:	08004d63 	.word	0x08004d63
 8004c80:	08004e27 	.word	0x08004e27
 8004c84:	08004e27 	.word	0x08004e27
 8004c88:	08004e27 	.word	0x08004e27
 8004c8c:	08004da5 	.word	0x08004da5
 8004c90:	08004e27 	.word	0x08004e27
 8004c94:	08004e27 	.word	0x08004e27
 8004c98:	08004e27 	.word	0x08004e27
 8004c9c:	08004de5 	.word	0x08004de5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f964 	bl	8004f74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0208 	orr.w	r2, r2, #8
 8004cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	699a      	ldr	r2, [r3, #24]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0204 	bic.w	r2, r2, #4
 8004cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6999      	ldr	r1, [r3, #24]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691a      	ldr	r2, [r3, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	619a      	str	r2, [r3, #24]
      break;
 8004cde:	e0a5      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f9d4 	bl	8005094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	021a      	lsls	r2, r3, #8
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]
      break;
 8004d20:	e084      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fa3d 	bl	80051a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0208 	orr.w	r2, r2, #8
 8004d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69da      	ldr	r2, [r3, #28]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0204 	bic.w	r2, r2, #4
 8004d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	69d9      	ldr	r1, [r3, #28]
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	61da      	str	r2, [r3, #28]
      break;
 8004d60:	e064      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 faa5 	bl	80052b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	021a      	lsls	r2, r3, #8
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	61da      	str	r2, [r3, #28]
      break;
 8004da2:	e043      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 faee 	bl	800538c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0208 	orr.w	r2, r2, #8
 8004dbe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004de2:	e023      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fb32 	bl	8005454 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dfe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004e24:	e002      	b.n	8004e2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]
      break;
 8004e2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop

08004e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a40      	ldr	r2, [pc, #256]	@ (8004f54 <TIM_Base_SetConfig+0x114>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d013      	beq.n	8004e80 <TIM_Base_SetConfig+0x40>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e5e:	d00f      	beq.n	8004e80 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a3d      	ldr	r2, [pc, #244]	@ (8004f58 <TIM_Base_SetConfig+0x118>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00b      	beq.n	8004e80 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3c      	ldr	r2, [pc, #240]	@ (8004f5c <TIM_Base_SetConfig+0x11c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d007      	beq.n	8004e80 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3b      	ldr	r2, [pc, #236]	@ (8004f60 <TIM_Base_SetConfig+0x120>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d003      	beq.n	8004e80 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3a      	ldr	r2, [pc, #232]	@ (8004f64 <TIM_Base_SetConfig+0x124>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d108      	bne.n	8004e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a2f      	ldr	r2, [pc, #188]	@ (8004f54 <TIM_Base_SetConfig+0x114>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d01f      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ea0:	d01b      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8004f58 <TIM_Base_SetConfig+0x118>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d017      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2b      	ldr	r2, [pc, #172]	@ (8004f5c <TIM_Base_SetConfig+0x11c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d013      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004f60 <TIM_Base_SetConfig+0x120>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d00f      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a29      	ldr	r2, [pc, #164]	@ (8004f64 <TIM_Base_SetConfig+0x124>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00b      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a28      	ldr	r2, [pc, #160]	@ (8004f68 <TIM_Base_SetConfig+0x128>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d007      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <TIM_Base_SetConfig+0x12c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_Base_SetConfig+0x9a>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a26      	ldr	r2, [pc, #152]	@ (8004f70 <TIM_Base_SetConfig+0x130>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d108      	bne.n	8004eec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	@ (8004f54 <TIM_Base_SetConfig+0x114>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00f      	beq.n	8004f38 <TIM_Base_SetConfig+0xf8>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a12      	ldr	r2, [pc, #72]	@ (8004f64 <TIM_Base_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_Base_SetConfig+0xf8>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a11      	ldr	r2, [pc, #68]	@ (8004f68 <TIM_Base_SetConfig+0x128>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_Base_SetConfig+0xf8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a10      	ldr	r2, [pc, #64]	@ (8004f6c <TIM_Base_SetConfig+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_Base_SetConfig+0xf8>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0f      	ldr	r2, [pc, #60]	@ (8004f70 <TIM_Base_SetConfig+0x130>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d103      	bne.n	8004f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	615a      	str	r2, [r3, #20]
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800
 8004f60:	40000c00 	.word	0x40000c00
 8004f64:	40013400 	.word	0x40013400
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40014400 	.word	0x40014400
 8004f70:	40014800 	.word	0x40014800

08004f74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	f023 0201 	bic.w	r2, r3, #1
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f023 0302 	bic.w	r3, r3, #2
 8004fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a2c      	ldr	r2, [pc, #176]	@ (8005080 <TIM_OC1_SetConfig+0x10c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x80>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8005084 <TIM_OC1_SetConfig+0x110>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x80>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a2a      	ldr	r2, [pc, #168]	@ (8005088 <TIM_OC1_SetConfig+0x114>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x80>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a29      	ldr	r2, [pc, #164]	@ (800508c <TIM_OC1_SetConfig+0x118>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC1_SetConfig+0x80>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a28      	ldr	r2, [pc, #160]	@ (8005090 <TIM_OC1_SetConfig+0x11c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10c      	bne.n	800500e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0308 	bic.w	r3, r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a1b      	ldr	r2, [pc, #108]	@ (8005080 <TIM_OC1_SetConfig+0x10c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d00f      	beq.n	8005036 <TIM_OC1_SetConfig+0xc2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a1a      	ldr	r2, [pc, #104]	@ (8005084 <TIM_OC1_SetConfig+0x110>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00b      	beq.n	8005036 <TIM_OC1_SetConfig+0xc2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a19      	ldr	r2, [pc, #100]	@ (8005088 <TIM_OC1_SetConfig+0x114>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d007      	beq.n	8005036 <TIM_OC1_SetConfig+0xc2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a18      	ldr	r2, [pc, #96]	@ (800508c <TIM_OC1_SetConfig+0x118>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_OC1_SetConfig+0xc2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <TIM_OC1_SetConfig+0x11c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d111      	bne.n	800505a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800503c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	621a      	str	r2, [r3, #32]
}
 8005074:	bf00      	nop
 8005076:	371c      	adds	r7, #28
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00
 8005084:	40013400 	.word	0x40013400
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800

08005094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f023 0210 	bic.w	r2, r3, #16
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	4313      	orrs	r3, r2
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0320 	bic.w	r3, r3, #32
 80050e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	011b      	lsls	r3, r3, #4
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a28      	ldr	r2, [pc, #160]	@ (8005194 <TIM_OC2_SetConfig+0x100>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d003      	beq.n	8005100 <TIM_OC2_SetConfig+0x6c>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a27      	ldr	r2, [pc, #156]	@ (8005198 <TIM_OC2_SetConfig+0x104>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d10d      	bne.n	800511c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	4313      	orrs	r3, r2
 8005112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800511a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a1d      	ldr	r2, [pc, #116]	@ (8005194 <TIM_OC2_SetConfig+0x100>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00f      	beq.n	8005144 <TIM_OC2_SetConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a1c      	ldr	r2, [pc, #112]	@ (8005198 <TIM_OC2_SetConfig+0x104>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_OC2_SetConfig+0xb0>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a1b      	ldr	r2, [pc, #108]	@ (800519c <TIM_OC2_SetConfig+0x108>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_OC2_SetConfig+0xb0>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1a      	ldr	r2, [pc, #104]	@ (80051a0 <TIM_OC2_SetConfig+0x10c>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_OC2_SetConfig+0xb0>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <TIM_OC2_SetConfig+0x110>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d113      	bne.n	800516c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800514a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005152:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40013400 	.word	0x40013400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f023 0303 	bic.w	r3, r3, #3
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a27      	ldr	r2, [pc, #156]	@ (80052a4 <TIM_OC3_SetConfig+0xfc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <TIM_OC3_SetConfig+0x6a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a26      	ldr	r2, [pc, #152]	@ (80052a8 <TIM_OC3_SetConfig+0x100>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d10d      	bne.n	800522e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005218:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	021b      	lsls	r3, r3, #8
 8005220:	697a      	ldr	r2, [r7, #20]
 8005222:	4313      	orrs	r3, r2
 8005224:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800522c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a1c      	ldr	r2, [pc, #112]	@ (80052a4 <TIM_OC3_SetConfig+0xfc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_OC3_SetConfig+0xae>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <TIM_OC3_SetConfig+0x100>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_OC3_SetConfig+0xae>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a1a      	ldr	r2, [pc, #104]	@ (80052ac <TIM_OC3_SetConfig+0x104>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_OC3_SetConfig+0xae>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a19      	ldr	r2, [pc, #100]	@ (80052b0 <TIM_OC3_SetConfig+0x108>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_OC3_SetConfig+0xae>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a18      	ldr	r2, [pc, #96]	@ (80052b4 <TIM_OC3_SetConfig+0x10c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d113      	bne.n	800527e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800525c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	011b      	lsls	r3, r3, #4
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	4313      	orrs	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	697a      	ldr	r2, [r7, #20]
 8005296:	621a      	str	r2, [r3, #32]
}
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr
 80052a4:	40012c00 	.word	0x40012c00
 80052a8:	40013400 	.word	0x40013400
 80052ac:	40014000 	.word	0x40014000
 80052b0:	40014400 	.word	0x40014400
 80052b4:	40014800 	.word	0x40014800

080052b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69db      	ldr	r3, [r3, #28]
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	031b      	lsls	r3, r3, #12
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a18      	ldr	r2, [pc, #96]	@ (8005378 <TIM_OC4_SetConfig+0xc0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00f      	beq.n	800533c <TIM_OC4_SetConfig+0x84>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a17      	ldr	r2, [pc, #92]	@ (800537c <TIM_OC4_SetConfig+0xc4>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_OC4_SetConfig+0x84>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <TIM_OC4_SetConfig+0xc8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_OC4_SetConfig+0x84>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a15      	ldr	r2, [pc, #84]	@ (8005384 <TIM_OC4_SetConfig+0xcc>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC4_SetConfig+0x84>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a14      	ldr	r2, [pc, #80]	@ (8005388 <TIM_OC4_SetConfig+0xd0>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40012c00 	.word	0x40012c00
 800537c:	40013400 	.word	0x40013400
 8005380:	40014000 	.word	0x40014000
 8005384:	40014400 	.word	0x40014400
 8005388:	40014800 	.word	0x40014800

0800538c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80053d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <TIM_OC5_SetConfig+0xb4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00f      	beq.n	8005406 <TIM_OC5_SetConfig+0x7a>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a16      	ldr	r2, [pc, #88]	@ (8005444 <TIM_OC5_SetConfig+0xb8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00b      	beq.n	8005406 <TIM_OC5_SetConfig+0x7a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a15      	ldr	r2, [pc, #84]	@ (8005448 <TIM_OC5_SetConfig+0xbc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_OC5_SetConfig+0x7a>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a14      	ldr	r2, [pc, #80]	@ (800544c <TIM_OC5_SetConfig+0xc0>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_OC5_SetConfig+0x7a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a13      	ldr	r2, [pc, #76]	@ (8005450 <TIM_OC5_SetConfig+0xc4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d109      	bne.n	800541a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40012c00 	.word	0x40012c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	4313      	orrs	r3, r2
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800549a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	051b      	lsls	r3, r3, #20
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a18      	ldr	r2, [pc, #96]	@ (800550c <TIM_OC6_SetConfig+0xb8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00f      	beq.n	80054d0 <TIM_OC6_SetConfig+0x7c>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	@ (8005510 <TIM_OC6_SetConfig+0xbc>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <TIM_OC6_SetConfig+0x7c>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	@ (8005514 <TIM_OC6_SetConfig+0xc0>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d007      	beq.n	80054d0 <TIM_OC6_SetConfig+0x7c>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a15      	ldr	r2, [pc, #84]	@ (8005518 <TIM_OC6_SetConfig+0xc4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d003      	beq.n	80054d0 <TIM_OC6_SetConfig+0x7c>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a14      	ldr	r2, [pc, #80]	@ (800551c <TIM_OC6_SetConfig+0xc8>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d109      	bne.n	80054e4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80054d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	697a      	ldr	r2, [r7, #20]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	40012c00 	.word	0x40012c00
 8005510:	40013400 	.word	0x40013400
 8005514:	40014000 	.word	0x40014000
 8005518:	40014400 	.word	0x40014400
 800551c:	40014800 	.word	0x40014800

08005520 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 031f 	and.w	r3, r3, #31
 8005532:	2201      	movs	r2, #1
 8005534:	fa02 f303 	lsl.w	r3, r2, r3
 8005538:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6a1a      	ldr	r2, [r3, #32]
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	43db      	mvns	r3, r3
 8005542:	401a      	ands	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6a1a      	ldr	r2, [r3, #32]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f003 031f 	and.w	r3, r3, #31
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	431a      	orrs	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005580:	2302      	movs	r3, #2
 8005582:	e068      	b.n	8005656 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d108      	bne.n	80055ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80055be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	4313      	orrs	r3, r2
 80055c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1e      	ldr	r2, [pc, #120]	@ (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01d      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055f6:	d018      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a1b      	ldr	r2, [pc, #108]	@ (800566c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d013      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a1a      	ldr	r2, [pc, #104]	@ (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d00e      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a18      	ldr	r2, [pc, #96]	@ (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a13      	ldr	r2, [pc, #76]	@ (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d10c      	bne.n	8005644 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	4313      	orrs	r3, r2
 800563a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3714      	adds	r7, #20
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40013400 	.word	0x40013400
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40014000 	.word	0x40014000

0800567c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e040      	b.n	8005710 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fb fcb6 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2224      	movs	r2, #36	@ 0x24
 80056a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0201 	bic.w	r2, r2, #1
 80056b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 fb6a 	bl	8005d9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8af 	bl	800582c <UART_SetConfig>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	e01b      	b.n	8005710 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0201 	orr.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fbe9 	bl	8005ee0 <UART_CheckIdleState>
 800570e:	4603      	mov	r3, r0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	@ 0x28
 800571c:	af02      	add	r7, sp, #8
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	603b      	str	r3, [r7, #0]
 8005724:	4613      	mov	r3, r2
 8005726:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800572c:	2b20      	cmp	r3, #32
 800572e:	d177      	bne.n	8005820 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <HAL_UART_Transmit+0x24>
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e070      	b.n	8005822 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2221      	movs	r2, #33	@ 0x21
 800574c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800574e:	f7fb fe31 	bl	80013b4 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	88fa      	ldrh	r2, [r7, #6]
 8005758:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800576c:	d108      	bne.n	8005780 <HAL_UART_Transmit+0x68>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005788:	e02f      	b.n	80057ea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	2200      	movs	r2, #0
 8005792:	2180      	movs	r1, #128	@ 0x80
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f000 fc4b 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d004      	beq.n	80057aa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2220      	movs	r2, #32
 80057a4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e03b      	b.n	8005822 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	881a      	ldrh	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057bc:	b292      	uxth	r2, r2
 80057be:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	3302      	adds	r3, #2
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e007      	b.n	80057d8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	781a      	ldrb	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	3301      	adds	r3, #1
 80057d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1c9      	bne.n	800578a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	9300      	str	r3, [sp, #0]
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2200      	movs	r2, #0
 80057fe:	2140      	movs	r1, #64	@ 0x40
 8005800:	68f8      	ldr	r0, [r7, #12]
 8005802:	f000 fc15 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d004      	beq.n	8005816 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e005      	b.n	8005822 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	e000      	b.n	8005822 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005820:	2302      	movs	r3, #2
  }
}
 8005822:	4618      	mov	r0, r3
 8005824:	3720      	adds	r7, #32
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
	...

0800582c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800582c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005830:	b08a      	sub	sp, #40	@ 0x28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005836:	2300      	movs	r3, #0
 8005838:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689a      	ldr	r2, [r3, #8]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	431a      	orrs	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	431a      	orrs	r2, r3
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	69db      	ldr	r3, [r3, #28]
 8005850:	4313      	orrs	r3, r2
 8005852:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	4ba4      	ldr	r3, [pc, #656]	@ (8005aec <UART_SetConfig+0x2c0>)
 800585c:	4013      	ands	r3, r2
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005864:	430b      	orrs	r3, r1
 8005866:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	430a      	orrs	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a99      	ldr	r2, [pc, #612]	@ (8005af0 <UART_SetConfig+0x2c4>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d004      	beq.n	8005898 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005894:	4313      	orrs	r3, r2
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a90      	ldr	r2, [pc, #576]	@ (8005af4 <UART_SetConfig+0x2c8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d126      	bne.n	8005904 <UART_SetConfig+0xd8>
 80058b6:	4b90      	ldr	r3, [pc, #576]	@ (8005af8 <UART_SetConfig+0x2cc>)
 80058b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058bc:	f003 0303 	and.w	r3, r3, #3
 80058c0:	2b03      	cmp	r3, #3
 80058c2:	d81b      	bhi.n	80058fc <UART_SetConfig+0xd0>
 80058c4:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <UART_SetConfig+0xa0>)
 80058c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ca:	bf00      	nop
 80058cc:	080058dd 	.word	0x080058dd
 80058d0:	080058ed 	.word	0x080058ed
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	080058f5 	.word	0x080058f5
 80058dc:	2301      	movs	r3, #1
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e116      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80058e4:	2302      	movs	r3, #2
 80058e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ea:	e112      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80058ec:	2304      	movs	r3, #4
 80058ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058f2:	e10e      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80058f4:	2308      	movs	r3, #8
 80058f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058fa:	e10a      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80058fc:	2310      	movs	r3, #16
 80058fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005902:	e106      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a7c      	ldr	r2, [pc, #496]	@ (8005afc <UART_SetConfig+0x2d0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d138      	bne.n	8005980 <UART_SetConfig+0x154>
 800590e:	4b7a      	ldr	r3, [pc, #488]	@ (8005af8 <UART_SetConfig+0x2cc>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005914:	f003 030c 	and.w	r3, r3, #12
 8005918:	2b0c      	cmp	r3, #12
 800591a:	d82d      	bhi.n	8005978 <UART_SetConfig+0x14c>
 800591c:	a201      	add	r2, pc, #4	@ (adr r2, 8005924 <UART_SetConfig+0xf8>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005959 	.word	0x08005959
 8005928:	08005979 	.word	0x08005979
 800592c:	08005979 	.word	0x08005979
 8005930:	08005979 	.word	0x08005979
 8005934:	08005969 	.word	0x08005969
 8005938:	08005979 	.word	0x08005979
 800593c:	08005979 	.word	0x08005979
 8005940:	08005979 	.word	0x08005979
 8005944:	08005961 	.word	0x08005961
 8005948:	08005979 	.word	0x08005979
 800594c:	08005979 	.word	0x08005979
 8005950:	08005979 	.word	0x08005979
 8005954:	08005971 	.word	0x08005971
 8005958:	2300      	movs	r3, #0
 800595a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800595e:	e0d8      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005960:	2302      	movs	r3, #2
 8005962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005966:	e0d4      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005968:	2304      	movs	r3, #4
 800596a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800596e:	e0d0      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005970:	2308      	movs	r3, #8
 8005972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005976:	e0cc      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005978:	2310      	movs	r3, #16
 800597a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800597e:	e0c8      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a5e      	ldr	r2, [pc, #376]	@ (8005b00 <UART_SetConfig+0x2d4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d125      	bne.n	80059d6 <UART_SetConfig+0x1aa>
 800598a:	4b5b      	ldr	r3, [pc, #364]	@ (8005af8 <UART_SetConfig+0x2cc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005990:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005994:	2b30      	cmp	r3, #48	@ 0x30
 8005996:	d016      	beq.n	80059c6 <UART_SetConfig+0x19a>
 8005998:	2b30      	cmp	r3, #48	@ 0x30
 800599a:	d818      	bhi.n	80059ce <UART_SetConfig+0x1a2>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d00a      	beq.n	80059b6 <UART_SetConfig+0x18a>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d814      	bhi.n	80059ce <UART_SetConfig+0x1a2>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d002      	beq.n	80059ae <UART_SetConfig+0x182>
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d008      	beq.n	80059be <UART_SetConfig+0x192>
 80059ac:	e00f      	b.n	80059ce <UART_SetConfig+0x1a2>
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b4:	e0ad      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80059b6:	2302      	movs	r3, #2
 80059b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059bc:	e0a9      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80059be:	2304      	movs	r3, #4
 80059c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c4:	e0a5      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80059c6:	2308      	movs	r3, #8
 80059c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059cc:	e0a1      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80059ce:	2310      	movs	r3, #16
 80059d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059d4:	e09d      	b.n	8005b12 <UART_SetConfig+0x2e6>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a4a      	ldr	r2, [pc, #296]	@ (8005b04 <UART_SetConfig+0x2d8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d125      	bne.n	8005a2c <UART_SetConfig+0x200>
 80059e0:	4b45      	ldr	r3, [pc, #276]	@ (8005af8 <UART_SetConfig+0x2cc>)
 80059e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80059ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80059ec:	d016      	beq.n	8005a1c <UART_SetConfig+0x1f0>
 80059ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80059f0:	d818      	bhi.n	8005a24 <UART_SetConfig+0x1f8>
 80059f2:	2b80      	cmp	r3, #128	@ 0x80
 80059f4:	d00a      	beq.n	8005a0c <UART_SetConfig+0x1e0>
 80059f6:	2b80      	cmp	r3, #128	@ 0x80
 80059f8:	d814      	bhi.n	8005a24 <UART_SetConfig+0x1f8>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <UART_SetConfig+0x1d8>
 80059fe:	2b40      	cmp	r3, #64	@ 0x40
 8005a00:	d008      	beq.n	8005a14 <UART_SetConfig+0x1e8>
 8005a02:	e00f      	b.n	8005a24 <UART_SetConfig+0x1f8>
 8005a04:	2300      	movs	r3, #0
 8005a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a0a:	e082      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a12:	e07e      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a14:	2304      	movs	r3, #4
 8005a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a1a:	e07a      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a1c:	2308      	movs	r3, #8
 8005a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a22:	e076      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a24:	2310      	movs	r3, #16
 8005a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a2a:	e072      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a35      	ldr	r2, [pc, #212]	@ (8005b08 <UART_SetConfig+0x2dc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d12a      	bne.n	8005a8c <UART_SetConfig+0x260>
 8005a36:	4b30      	ldr	r3, [pc, #192]	@ (8005af8 <UART_SetConfig+0x2cc>)
 8005a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a44:	d01a      	beq.n	8005a7c <UART_SetConfig+0x250>
 8005a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a4a:	d81b      	bhi.n	8005a84 <UART_SetConfig+0x258>
 8005a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a50:	d00c      	beq.n	8005a6c <UART_SetConfig+0x240>
 8005a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a56:	d815      	bhi.n	8005a84 <UART_SetConfig+0x258>
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <UART_SetConfig+0x238>
 8005a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a60:	d008      	beq.n	8005a74 <UART_SetConfig+0x248>
 8005a62:	e00f      	b.n	8005a84 <UART_SetConfig+0x258>
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a6a:	e052      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a72:	e04e      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a74:	2304      	movs	r3, #4
 8005a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a7a:	e04a      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a7c:	2308      	movs	r3, #8
 8005a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a82:	e046      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a84:	2310      	movs	r3, #16
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a8a:	e042      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <UART_SetConfig+0x2c4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d13a      	bne.n	8005b0c <UART_SetConfig+0x2e0>
 8005a96:	4b18      	ldr	r3, [pc, #96]	@ (8005af8 <UART_SetConfig+0x2cc>)
 8005a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005aa0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aa4:	d01a      	beq.n	8005adc <UART_SetConfig+0x2b0>
 8005aa6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005aaa:	d81b      	bhi.n	8005ae4 <UART_SetConfig+0x2b8>
 8005aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab0:	d00c      	beq.n	8005acc <UART_SetConfig+0x2a0>
 8005ab2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ab6:	d815      	bhi.n	8005ae4 <UART_SetConfig+0x2b8>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d003      	beq.n	8005ac4 <UART_SetConfig+0x298>
 8005abc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ac0:	d008      	beq.n	8005ad4 <UART_SetConfig+0x2a8>
 8005ac2:	e00f      	b.n	8005ae4 <UART_SetConfig+0x2b8>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aca:	e022      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005acc:	2302      	movs	r3, #2
 8005ace:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ad2:	e01e      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005ad4:	2304      	movs	r3, #4
 8005ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ada:	e01a      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005adc:	2308      	movs	r3, #8
 8005ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ae2:	e016      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aea:	e012      	b.n	8005b12 <UART_SetConfig+0x2e6>
 8005aec:	efff69f3 	.word	0xefff69f3
 8005af0:	40008000 	.word	0x40008000
 8005af4:	40013800 	.word	0x40013800
 8005af8:	40021000 	.word	0x40021000
 8005afc:	40004400 	.word	0x40004400
 8005b00:	40004800 	.word	0x40004800
 8005b04:	40004c00 	.word	0x40004c00
 8005b08:	40005000 	.word	0x40005000
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a9f      	ldr	r2, [pc, #636]	@ (8005d94 <UART_SetConfig+0x568>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d17a      	bne.n	8005c12 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b20:	2b08      	cmp	r3, #8
 8005b22:	d824      	bhi.n	8005b6e <UART_SetConfig+0x342>
 8005b24:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <UART_SetConfig+0x300>)
 8005b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2a:	bf00      	nop
 8005b2c:	08005b51 	.word	0x08005b51
 8005b30:	08005b6f 	.word	0x08005b6f
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b6f 	.word	0x08005b6f
 8005b3c:	08005b5f 	.word	0x08005b5f
 8005b40:	08005b6f 	.word	0x08005b6f
 8005b44:	08005b6f 	.word	0x08005b6f
 8005b48:	08005b6f 	.word	0x08005b6f
 8005b4c:	08005b67 	.word	0x08005b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b50:	f7fe f888 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005b54:	61f8      	str	r0, [r7, #28]
        break;
 8005b56:	e010      	b.n	8005b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b58:	4b8f      	ldr	r3, [pc, #572]	@ (8005d98 <UART_SetConfig+0x56c>)
 8005b5a:	61fb      	str	r3, [r7, #28]
        break;
 8005b5c:	e00d      	b.n	8005b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b5e:	f7fd ffe9 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005b62:	61f8      	str	r0, [r7, #28]
        break;
 8005b64:	e009      	b.n	8005b7a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b6a:	61fb      	str	r3, [r7, #28]
        break;
 8005b6c:	e005      	b.n	8005b7a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 80fb 	beq.w	8005d78 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	005b      	lsls	r3, r3, #1
 8005b8a:	4413      	add	r3, r2
 8005b8c:	69fa      	ldr	r2, [r7, #28]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d305      	bcc.n	8005b9e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b98:	69fa      	ldr	r2, [r7, #28]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d903      	bls.n	8005ba6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ba4:	e0e8      	b.n	8005d78 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	461c      	mov	r4, r3
 8005bac:	4615      	mov	r5, r2
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	022b      	lsls	r3, r5, #8
 8005bb8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005bbc:	0222      	lsls	r2, r4, #8
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	6849      	ldr	r1, [r1, #4]
 8005bc2:	0849      	lsrs	r1, r1, #1
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	4688      	mov	r8, r1
 8005bc8:	4681      	mov	r9, r0
 8005bca:	eb12 0a08 	adds.w	sl, r2, r8
 8005bce:	eb43 0b09 	adc.w	fp, r3, r9
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005be0:	4650      	mov	r0, sl
 8005be2:	4659      	mov	r1, fp
 8005be4:	f7fa fb44 	bl	8000270 <__aeabi_uldivmod>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4613      	mov	r3, r2
 8005bee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bf6:	d308      	bcc.n	8005c0a <UART_SetConfig+0x3de>
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bfe:	d204      	bcs.n	8005c0a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	e0b6      	b.n	8005d78 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c10:	e0b2      	b.n	8005d78 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c1a:	d15e      	bne.n	8005cda <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005c1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d828      	bhi.n	8005c76 <UART_SetConfig+0x44a>
 8005c24:	a201      	add	r2, pc, #4	@ (adr r2, 8005c2c <UART_SetConfig+0x400>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	08005c77 	.word	0x08005c77
 8005c3c:	08005c67 	.word	0x08005c67
 8005c40:	08005c77 	.word	0x08005c77
 8005c44:	08005c77 	.word	0x08005c77
 8005c48:	08005c77 	.word	0x08005c77
 8005c4c:	08005c6f 	.word	0x08005c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fe f808 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005c54:	61f8      	str	r0, [r7, #28]
        break;
 8005c56:	e014      	b.n	8005c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fe f81a 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	61f8      	str	r0, [r7, #28]
        break;
 8005c5e:	e010      	b.n	8005c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b4d      	ldr	r3, [pc, #308]	@ (8005d98 <UART_SetConfig+0x56c>)
 8005c62:	61fb      	str	r3, [r7, #28]
        break;
 8005c64:	e00d      	b.n	8005c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c66:	f7fd ff65 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005c6a:	61f8      	str	r0, [r7, #28]
        break;
 8005c6c:	e009      	b.n	8005c82 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c72:	61fb      	str	r3, [r7, #28]
        break;
 8005c74:	e005      	b.n	8005c82 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d077      	beq.n	8005d78 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	005a      	lsls	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	441a      	add	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b0f      	cmp	r3, #15
 8005ca2:	d916      	bls.n	8005cd2 <UART_SetConfig+0x4a6>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005caa:	d212      	bcs.n	8005cd2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	f023 030f 	bic.w	r3, r3, #15
 8005cb4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	085b      	lsrs	r3, r3, #1
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	8afb      	ldrh	r3, [r7, #22]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	8afa      	ldrh	r2, [r7, #22]
 8005cce:	60da      	str	r2, [r3, #12]
 8005cd0:	e052      	b.n	8005d78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cd8:	e04e      	b.n	8005d78 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cde:	2b08      	cmp	r3, #8
 8005ce0:	d827      	bhi.n	8005d32 <UART_SetConfig+0x506>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <UART_SetConfig+0x4bc>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d0d 	.word	0x08005d0d
 8005cec:	08005d15 	.word	0x08005d15
 8005cf0:	08005d1d 	.word	0x08005d1d
 8005cf4:	08005d33 	.word	0x08005d33
 8005cf8:	08005d23 	.word	0x08005d23
 8005cfc:	08005d33 	.word	0x08005d33
 8005d00:	08005d33 	.word	0x08005d33
 8005d04:	08005d33 	.word	0x08005d33
 8005d08:	08005d2b 	.word	0x08005d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d0c:	f7fd ffaa 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005d10:	61f8      	str	r0, [r7, #28]
        break;
 8005d12:	e014      	b.n	8005d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d14:	f7fd ffbc 	bl	8003c90 <HAL_RCC_GetPCLK2Freq>
 8005d18:	61f8      	str	r0, [r7, #28]
        break;
 8005d1a:	e010      	b.n	8005d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005d98 <UART_SetConfig+0x56c>)
 8005d1e:	61fb      	str	r3, [r7, #28]
        break;
 8005d20:	e00d      	b.n	8005d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d22:	f7fd ff07 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8005d26:	61f8      	str	r0, [r7, #28]
        break;
 8005d28:	e009      	b.n	8005d3e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2e:	61fb      	str	r3, [r7, #28]
        break;
 8005d30:	e005      	b.n	8005d3e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005d3c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d019      	beq.n	8005d78 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	085a      	lsrs	r2, r3, #1
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	441a      	add	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	d909      	bls.n	8005d72 <UART_SetConfig+0x546>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d64:	d205      	bcs.n	8005d72 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e002      	b.n	8005d78 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3728      	adds	r7, #40	@ 0x28
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d92:	bf00      	nop
 8005d94:	40008000 	.word	0x40008000
 8005d98:	00f42400 	.word	0x00f42400

08005d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00a      	beq.n	8005dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	430a      	orrs	r2, r1
 8005dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00a      	beq.n	8005de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d00a      	beq.n	8005e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	f003 0304 	and.w	r3, r3, #4
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00a      	beq.n	8005e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	f003 0310 	and.w	r3, r3, #16
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e52:	f003 0320 	and.w	r3, r3, #32
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e9a:	d10a      	bne.n	8005eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b098      	sub	sp, #96	@ 0x60
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ef0:	f7fb fa60 	bl	80013b4 <HAL_GetTick>
 8005ef4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	2b08      	cmp	r3, #8
 8005f02:	d12e      	bne.n	8005f62 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f04:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f88c 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d021      	beq.n	8005f62 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	e853 3f00 	ldrex	r3, [r3]
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f32:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f3e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f40:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f44:	e841 2300 	strex	r3, r2, [r1]
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1e6      	bne.n	8005f1e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e062      	b.n	8006028 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d149      	bne.n	8006004 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f70:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f856 	bl	8006030 <UART_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d03c      	beq.n	8006004 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	623b      	str	r3, [r7, #32]
   return(result);
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb0:	e841 2300 	strex	r3, r2, [r1]
 8005fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1e6      	bne.n	8005f8a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	e853 3f00 	ldrex	r3, [r3]
 8005fca:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f023 0301 	bic.w	r3, r3, #1
 8005fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3308      	adds	r3, #8
 8005fda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fdc:	61fa      	str	r2, [r7, #28]
 8005fde:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	69b9      	ldr	r1, [r7, #24]
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	617b      	str	r3, [r7, #20]
   return(result);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e5      	bne.n	8005fbc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e011      	b.n	8006028 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2220      	movs	r2, #32
 8006008:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3758      	adds	r7, #88	@ 0x58
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	603b      	str	r3, [r7, #0]
 800603c:	4613      	mov	r3, r2
 800603e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006040:	e049      	b.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006048:	d045      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fb f9b3 	bl	80013b4 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <UART_WaitOnFlagUntilTimeout+0x30>
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e048      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	d031      	beq.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b08      	cmp	r3, #8
 800607e:	d110      	bne.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2208      	movs	r2, #8
 8006086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f838 	bl	80060fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2208      	movs	r2, #8
 8006092:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e029      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80060b0:	d111      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80060ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 f81e 	bl	80060fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e00f      	b.n	80060f6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4013      	ands	r3, r2
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	bf0c      	ite	eq
 80060e6:	2301      	moveq	r3, #1
 80060e8:	2300      	movne	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d0a6      	beq.n	8006042 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060fe:	b480      	push	{r7}
 8006100:	b095      	sub	sp, #84	@ 0x54
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800611a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006124:	643b      	str	r3, [r7, #64]	@ 0x40
 8006126:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800612a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e6      	bne.n	8006106 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3308      	adds	r3, #8
 800613e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	61fb      	str	r3, [r7, #28]
   return(result);
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3308      	adds	r3, #8
 8006156:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800615a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800615e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e5      	bne.n	8006138 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006170:	2b01      	cmp	r3, #1
 8006172:	d118      	bne.n	80061a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	60bb      	str	r3, [r7, #8]
   return(result);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f023 0310 	bic.w	r3, r3, #16
 8006188:	647b      	str	r3, [r7, #68]	@ 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006192:	61bb      	str	r3, [r7, #24]
 8006194:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	613b      	str	r3, [r7, #16]
   return(result);
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e6      	bne.n	8006174 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80061ba:	bf00      	nop
 80061bc:	3754      	adds	r7, #84	@ 0x54
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
	...

080061c8 <std>:
 80061c8:	2300      	movs	r3, #0
 80061ca:	b510      	push	{r4, lr}
 80061cc:	4604      	mov	r4, r0
 80061ce:	e9c0 3300 	strd	r3, r3, [r0]
 80061d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061d6:	6083      	str	r3, [r0, #8]
 80061d8:	8181      	strh	r1, [r0, #12]
 80061da:	6643      	str	r3, [r0, #100]	@ 0x64
 80061dc:	81c2      	strh	r2, [r0, #14]
 80061de:	6183      	str	r3, [r0, #24]
 80061e0:	4619      	mov	r1, r3
 80061e2:	2208      	movs	r2, #8
 80061e4:	305c      	adds	r0, #92	@ 0x5c
 80061e6:	f000 f926 	bl	8006436 <memset>
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <std+0x58>)
 80061ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <std+0x5c>)
 80061f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <std+0x60>)
 80061f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061f6:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <std+0x64>)
 80061f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80061fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <std+0x68>)
 80061fc:	6224      	str	r4, [r4, #32]
 80061fe:	429c      	cmp	r4, r3
 8006200:	d006      	beq.n	8006210 <std+0x48>
 8006202:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006206:	4294      	cmp	r4, r2
 8006208:	d002      	beq.n	8006210 <std+0x48>
 800620a:	33d0      	adds	r3, #208	@ 0xd0
 800620c:	429c      	cmp	r4, r3
 800620e:	d105      	bne.n	800621c <std+0x54>
 8006210:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006218:	f000 b986 	b.w	8006528 <__retarget_lock_init_recursive>
 800621c:	bd10      	pop	{r4, pc}
 800621e:	bf00      	nop
 8006220:	080063b1 	.word	0x080063b1
 8006224:	080063d3 	.word	0x080063d3
 8006228:	0800640b 	.word	0x0800640b
 800622c:	0800642f 	.word	0x0800642f
 8006230:	200002e8 	.word	0x200002e8

08006234 <stdio_exit_handler>:
 8006234:	4a02      	ldr	r2, [pc, #8]	@ (8006240 <stdio_exit_handler+0xc>)
 8006236:	4903      	ldr	r1, [pc, #12]	@ (8006244 <stdio_exit_handler+0x10>)
 8006238:	4803      	ldr	r0, [pc, #12]	@ (8006248 <stdio_exit_handler+0x14>)
 800623a:	f000 b869 	b.w	8006310 <_fwalk_sglue>
 800623e:	bf00      	nop
 8006240:	20000048 	.word	0x20000048
 8006244:	08007079 	.word	0x08007079
 8006248:	20000058 	.word	0x20000058

0800624c <cleanup_stdio>:
 800624c:	6841      	ldr	r1, [r0, #4]
 800624e:	4b0c      	ldr	r3, [pc, #48]	@ (8006280 <cleanup_stdio+0x34>)
 8006250:	4299      	cmp	r1, r3
 8006252:	b510      	push	{r4, lr}
 8006254:	4604      	mov	r4, r0
 8006256:	d001      	beq.n	800625c <cleanup_stdio+0x10>
 8006258:	f000 ff0e 	bl	8007078 <_fflush_r>
 800625c:	68a1      	ldr	r1, [r4, #8]
 800625e:	4b09      	ldr	r3, [pc, #36]	@ (8006284 <cleanup_stdio+0x38>)
 8006260:	4299      	cmp	r1, r3
 8006262:	d002      	beq.n	800626a <cleanup_stdio+0x1e>
 8006264:	4620      	mov	r0, r4
 8006266:	f000 ff07 	bl	8007078 <_fflush_r>
 800626a:	68e1      	ldr	r1, [r4, #12]
 800626c:	4b06      	ldr	r3, [pc, #24]	@ (8006288 <cleanup_stdio+0x3c>)
 800626e:	4299      	cmp	r1, r3
 8006270:	d004      	beq.n	800627c <cleanup_stdio+0x30>
 8006272:	4620      	mov	r0, r4
 8006274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006278:	f000 befe 	b.w	8007078 <_fflush_r>
 800627c:	bd10      	pop	{r4, pc}
 800627e:	bf00      	nop
 8006280:	200002e8 	.word	0x200002e8
 8006284:	20000350 	.word	0x20000350
 8006288:	200003b8 	.word	0x200003b8

0800628c <global_stdio_init.part.0>:
 800628c:	b510      	push	{r4, lr}
 800628e:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <global_stdio_init.part.0+0x30>)
 8006290:	4c0b      	ldr	r4, [pc, #44]	@ (80062c0 <global_stdio_init.part.0+0x34>)
 8006292:	4a0c      	ldr	r2, [pc, #48]	@ (80062c4 <global_stdio_init.part.0+0x38>)
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	4620      	mov	r0, r4
 8006298:	2200      	movs	r2, #0
 800629a:	2104      	movs	r1, #4
 800629c:	f7ff ff94 	bl	80061c8 <std>
 80062a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062a4:	2201      	movs	r2, #1
 80062a6:	2109      	movs	r1, #9
 80062a8:	f7ff ff8e 	bl	80061c8 <std>
 80062ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062b0:	2202      	movs	r2, #2
 80062b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062b6:	2112      	movs	r1, #18
 80062b8:	f7ff bf86 	b.w	80061c8 <std>
 80062bc:	20000420 	.word	0x20000420
 80062c0:	200002e8 	.word	0x200002e8
 80062c4:	08006235 	.word	0x08006235

080062c8 <__sfp_lock_acquire>:
 80062c8:	4801      	ldr	r0, [pc, #4]	@ (80062d0 <__sfp_lock_acquire+0x8>)
 80062ca:	f000 b92e 	b.w	800652a <__retarget_lock_acquire_recursive>
 80062ce:	bf00      	nop
 80062d0:	20000429 	.word	0x20000429

080062d4 <__sfp_lock_release>:
 80062d4:	4801      	ldr	r0, [pc, #4]	@ (80062dc <__sfp_lock_release+0x8>)
 80062d6:	f000 b929 	b.w	800652c <__retarget_lock_release_recursive>
 80062da:	bf00      	nop
 80062dc:	20000429 	.word	0x20000429

080062e0 <__sinit>:
 80062e0:	b510      	push	{r4, lr}
 80062e2:	4604      	mov	r4, r0
 80062e4:	f7ff fff0 	bl	80062c8 <__sfp_lock_acquire>
 80062e8:	6a23      	ldr	r3, [r4, #32]
 80062ea:	b11b      	cbz	r3, 80062f4 <__sinit+0x14>
 80062ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062f0:	f7ff bff0 	b.w	80062d4 <__sfp_lock_release>
 80062f4:	4b04      	ldr	r3, [pc, #16]	@ (8006308 <__sinit+0x28>)
 80062f6:	6223      	str	r3, [r4, #32]
 80062f8:	4b04      	ldr	r3, [pc, #16]	@ (800630c <__sinit+0x2c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1f5      	bne.n	80062ec <__sinit+0xc>
 8006300:	f7ff ffc4 	bl	800628c <global_stdio_init.part.0>
 8006304:	e7f2      	b.n	80062ec <__sinit+0xc>
 8006306:	bf00      	nop
 8006308:	0800624d 	.word	0x0800624d
 800630c:	20000420 	.word	0x20000420

08006310 <_fwalk_sglue>:
 8006310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006314:	4607      	mov	r7, r0
 8006316:	4688      	mov	r8, r1
 8006318:	4614      	mov	r4, r2
 800631a:	2600      	movs	r6, #0
 800631c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006320:	f1b9 0901 	subs.w	r9, r9, #1
 8006324:	d505      	bpl.n	8006332 <_fwalk_sglue+0x22>
 8006326:	6824      	ldr	r4, [r4, #0]
 8006328:	2c00      	cmp	r4, #0
 800632a:	d1f7      	bne.n	800631c <_fwalk_sglue+0xc>
 800632c:	4630      	mov	r0, r6
 800632e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006332:	89ab      	ldrh	r3, [r5, #12]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d907      	bls.n	8006348 <_fwalk_sglue+0x38>
 8006338:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800633c:	3301      	adds	r3, #1
 800633e:	d003      	beq.n	8006348 <_fwalk_sglue+0x38>
 8006340:	4629      	mov	r1, r5
 8006342:	4638      	mov	r0, r7
 8006344:	47c0      	blx	r8
 8006346:	4306      	orrs	r6, r0
 8006348:	3568      	adds	r5, #104	@ 0x68
 800634a:	e7e9      	b.n	8006320 <_fwalk_sglue+0x10>

0800634c <iprintf>:
 800634c:	b40f      	push	{r0, r1, r2, r3}
 800634e:	b507      	push	{r0, r1, r2, lr}
 8006350:	4906      	ldr	r1, [pc, #24]	@ (800636c <iprintf+0x20>)
 8006352:	ab04      	add	r3, sp, #16
 8006354:	6808      	ldr	r0, [r1, #0]
 8006356:	f853 2b04 	ldr.w	r2, [r3], #4
 800635a:	6881      	ldr	r1, [r0, #8]
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	f000 fb61 	bl	8006a24 <_vfiprintf_r>
 8006362:	b003      	add	sp, #12
 8006364:	f85d eb04 	ldr.w	lr, [sp], #4
 8006368:	b004      	add	sp, #16
 800636a:	4770      	bx	lr
 800636c:	20000054 	.word	0x20000054

08006370 <siprintf>:
 8006370:	b40e      	push	{r1, r2, r3}
 8006372:	b500      	push	{lr}
 8006374:	b09c      	sub	sp, #112	@ 0x70
 8006376:	ab1d      	add	r3, sp, #116	@ 0x74
 8006378:	9002      	str	r0, [sp, #8]
 800637a:	9006      	str	r0, [sp, #24]
 800637c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006380:	4809      	ldr	r0, [pc, #36]	@ (80063a8 <siprintf+0x38>)
 8006382:	9107      	str	r1, [sp, #28]
 8006384:	9104      	str	r1, [sp, #16]
 8006386:	4909      	ldr	r1, [pc, #36]	@ (80063ac <siprintf+0x3c>)
 8006388:	f853 2b04 	ldr.w	r2, [r3], #4
 800638c:	9105      	str	r1, [sp, #20]
 800638e:	6800      	ldr	r0, [r0, #0]
 8006390:	9301      	str	r3, [sp, #4]
 8006392:	a902      	add	r1, sp, #8
 8006394:	f000 fa20 	bl	80067d8 <_svfiprintf_r>
 8006398:	9b02      	ldr	r3, [sp, #8]
 800639a:	2200      	movs	r2, #0
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	b01c      	add	sp, #112	@ 0x70
 80063a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80063a4:	b003      	add	sp, #12
 80063a6:	4770      	bx	lr
 80063a8:	20000054 	.word	0x20000054
 80063ac:	ffff0208 	.word	0xffff0208

080063b0 <__sread>:
 80063b0:	b510      	push	{r4, lr}
 80063b2:	460c      	mov	r4, r1
 80063b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b8:	f000 f868 	bl	800648c <_read_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	bfab      	itete	ge
 80063c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063c2:	89a3      	ldrhlt	r3, [r4, #12]
 80063c4:	181b      	addge	r3, r3, r0
 80063c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063ca:	bfac      	ite	ge
 80063cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063ce:	81a3      	strhlt	r3, [r4, #12]
 80063d0:	bd10      	pop	{r4, pc}

080063d2 <__swrite>:
 80063d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d6:	461f      	mov	r7, r3
 80063d8:	898b      	ldrh	r3, [r1, #12]
 80063da:	05db      	lsls	r3, r3, #23
 80063dc:	4605      	mov	r5, r0
 80063de:	460c      	mov	r4, r1
 80063e0:	4616      	mov	r6, r2
 80063e2:	d505      	bpl.n	80063f0 <__swrite+0x1e>
 80063e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e8:	2302      	movs	r3, #2
 80063ea:	2200      	movs	r2, #0
 80063ec:	f000 f83c 	bl	8006468 <_lseek_r>
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	4632      	mov	r2, r6
 80063fe:	463b      	mov	r3, r7
 8006400:	4628      	mov	r0, r5
 8006402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006406:	f000 b853 	b.w	80064b0 <_write_r>

0800640a <__sseek>:
 800640a:	b510      	push	{r4, lr}
 800640c:	460c      	mov	r4, r1
 800640e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006412:	f000 f829 	bl	8006468 <_lseek_r>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	89a3      	ldrh	r3, [r4, #12]
 800641a:	bf15      	itete	ne
 800641c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800641e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006422:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006426:	81a3      	strheq	r3, [r4, #12]
 8006428:	bf18      	it	ne
 800642a:	81a3      	strhne	r3, [r4, #12]
 800642c:	bd10      	pop	{r4, pc}

0800642e <__sclose>:
 800642e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006432:	f000 b809 	b.w	8006448 <_close_r>

08006436 <memset>:
 8006436:	4402      	add	r2, r0
 8006438:	4603      	mov	r3, r0
 800643a:	4293      	cmp	r3, r2
 800643c:	d100      	bne.n	8006440 <memset+0xa>
 800643e:	4770      	bx	lr
 8006440:	f803 1b01 	strb.w	r1, [r3], #1
 8006444:	e7f9      	b.n	800643a <memset+0x4>
	...

08006448 <_close_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d06      	ldr	r5, [pc, #24]	@ (8006464 <_close_r+0x1c>)
 800644c:	2300      	movs	r3, #0
 800644e:	4604      	mov	r4, r0
 8006450:	4608      	mov	r0, r1
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	f7fa fea0 	bl	8001198 <_close>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_close_r+0x1a>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_close_r+0x1a>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	20000424 	.word	0x20000424

08006468 <_lseek_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	@ (8006488 <_lseek_r+0x20>)
 800646c:	4604      	mov	r4, r0
 800646e:	4608      	mov	r0, r1
 8006470:	4611      	mov	r1, r2
 8006472:	2200      	movs	r2, #0
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f7fa feb5 	bl	80011e6 <_lseek>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_lseek_r+0x1e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_lseek_r+0x1e>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	20000424 	.word	0x20000424

0800648c <_read_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	@ (80064ac <_read_r+0x20>)
 8006490:	4604      	mov	r4, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	602a      	str	r2, [r5, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fa fe43 	bl	8001126 <_read>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_read_r+0x1e>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_read_r+0x1e>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	20000424 	.word	0x20000424

080064b0 <_write_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	@ (80064d0 <_write_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fa fe4e 	bl	8001160 <_write>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_write_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_write_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20000424 	.word	0x20000424

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	@ (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20000054 	.word	0x20000054

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	@ (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006524 <__libc_init_array+0x44>)
 80064f4:	f000 ff6e 	bl	80073d4 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08007554 	.word	0x08007554
 800651c:	08007554 	.word	0x08007554
 8006520:	08007554 	.word	0x08007554
 8006524:	08007558 	.word	0x08007558

08006528 <__retarget_lock_init_recursive>:
 8006528:	4770      	bx	lr

0800652a <__retarget_lock_acquire_recursive>:
 800652a:	4770      	bx	lr

0800652c <__retarget_lock_release_recursive>:
 800652c:	4770      	bx	lr
	...

08006530 <_free_r>:
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4605      	mov	r5, r0
 8006534:	2900      	cmp	r1, #0
 8006536:	d041      	beq.n	80065bc <_free_r+0x8c>
 8006538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653c:	1f0c      	subs	r4, r1, #4
 800653e:	2b00      	cmp	r3, #0
 8006540:	bfb8      	it	lt
 8006542:	18e4      	addlt	r4, r4, r3
 8006544:	f000 f8e0 	bl	8006708 <__malloc_lock>
 8006548:	4a1d      	ldr	r2, [pc, #116]	@ (80065c0 <_free_r+0x90>)
 800654a:	6813      	ldr	r3, [r2, #0]
 800654c:	b933      	cbnz	r3, 800655c <_free_r+0x2c>
 800654e:	6063      	str	r3, [r4, #4]
 8006550:	6014      	str	r4, [r2, #0]
 8006552:	4628      	mov	r0, r5
 8006554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006558:	f000 b8dc 	b.w	8006714 <__malloc_unlock>
 800655c:	42a3      	cmp	r3, r4
 800655e:	d908      	bls.n	8006572 <_free_r+0x42>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	1821      	adds	r1, r4, r0
 8006564:	428b      	cmp	r3, r1
 8006566:	bf01      	itttt	eq
 8006568:	6819      	ldreq	r1, [r3, #0]
 800656a:	685b      	ldreq	r3, [r3, #4]
 800656c:	1809      	addeq	r1, r1, r0
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	e7ed      	b.n	800654e <_free_r+0x1e>
 8006572:	461a      	mov	r2, r3
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	b10b      	cbz	r3, 800657c <_free_r+0x4c>
 8006578:	42a3      	cmp	r3, r4
 800657a:	d9fa      	bls.n	8006572 <_free_r+0x42>
 800657c:	6811      	ldr	r1, [r2, #0]
 800657e:	1850      	adds	r0, r2, r1
 8006580:	42a0      	cmp	r0, r4
 8006582:	d10b      	bne.n	800659c <_free_r+0x6c>
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	4401      	add	r1, r0
 8006588:	1850      	adds	r0, r2, r1
 800658a:	4283      	cmp	r3, r0
 800658c:	6011      	str	r1, [r2, #0]
 800658e:	d1e0      	bne.n	8006552 <_free_r+0x22>
 8006590:	6818      	ldr	r0, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	6053      	str	r3, [r2, #4]
 8006596:	4408      	add	r0, r1
 8006598:	6010      	str	r0, [r2, #0]
 800659a:	e7da      	b.n	8006552 <_free_r+0x22>
 800659c:	d902      	bls.n	80065a4 <_free_r+0x74>
 800659e:	230c      	movs	r3, #12
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	e7d6      	b.n	8006552 <_free_r+0x22>
 80065a4:	6820      	ldr	r0, [r4, #0]
 80065a6:	1821      	adds	r1, r4, r0
 80065a8:	428b      	cmp	r3, r1
 80065aa:	bf04      	itt	eq
 80065ac:	6819      	ldreq	r1, [r3, #0]
 80065ae:	685b      	ldreq	r3, [r3, #4]
 80065b0:	6063      	str	r3, [r4, #4]
 80065b2:	bf04      	itt	eq
 80065b4:	1809      	addeq	r1, r1, r0
 80065b6:	6021      	streq	r1, [r4, #0]
 80065b8:	6054      	str	r4, [r2, #4]
 80065ba:	e7ca      	b.n	8006552 <_free_r+0x22>
 80065bc:	bd38      	pop	{r3, r4, r5, pc}
 80065be:	bf00      	nop
 80065c0:	20000430 	.word	0x20000430

080065c4 <sbrk_aligned>:
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006604 <sbrk_aligned+0x40>)
 80065c8:	460c      	mov	r4, r1
 80065ca:	6831      	ldr	r1, [r6, #0]
 80065cc:	4605      	mov	r5, r0
 80065ce:	b911      	cbnz	r1, 80065d6 <sbrk_aligned+0x12>
 80065d0:	f000 fe28 	bl	8007224 <_sbrk_r>
 80065d4:	6030      	str	r0, [r6, #0]
 80065d6:	4621      	mov	r1, r4
 80065d8:	4628      	mov	r0, r5
 80065da:	f000 fe23 	bl	8007224 <_sbrk_r>
 80065de:	1c43      	adds	r3, r0, #1
 80065e0:	d103      	bne.n	80065ea <sbrk_aligned+0x26>
 80065e2:	f04f 34ff 	mov.w	r4, #4294967295
 80065e6:	4620      	mov	r0, r4
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	1cc4      	adds	r4, r0, #3
 80065ec:	f024 0403 	bic.w	r4, r4, #3
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d0f8      	beq.n	80065e6 <sbrk_aligned+0x22>
 80065f4:	1a21      	subs	r1, r4, r0
 80065f6:	4628      	mov	r0, r5
 80065f8:	f000 fe14 	bl	8007224 <_sbrk_r>
 80065fc:	3001      	adds	r0, #1
 80065fe:	d1f2      	bne.n	80065e6 <sbrk_aligned+0x22>
 8006600:	e7ef      	b.n	80065e2 <sbrk_aligned+0x1e>
 8006602:	bf00      	nop
 8006604:	2000042c 	.word	0x2000042c

08006608 <_malloc_r>:
 8006608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800660c:	1ccd      	adds	r5, r1, #3
 800660e:	f025 0503 	bic.w	r5, r5, #3
 8006612:	3508      	adds	r5, #8
 8006614:	2d0c      	cmp	r5, #12
 8006616:	bf38      	it	cc
 8006618:	250c      	movcc	r5, #12
 800661a:	2d00      	cmp	r5, #0
 800661c:	4606      	mov	r6, r0
 800661e:	db01      	blt.n	8006624 <_malloc_r+0x1c>
 8006620:	42a9      	cmp	r1, r5
 8006622:	d904      	bls.n	800662e <_malloc_r+0x26>
 8006624:	230c      	movs	r3, #12
 8006626:	6033      	str	r3, [r6, #0]
 8006628:	2000      	movs	r0, #0
 800662a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800662e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006704 <_malloc_r+0xfc>
 8006632:	f000 f869 	bl	8006708 <__malloc_lock>
 8006636:	f8d8 3000 	ldr.w	r3, [r8]
 800663a:	461c      	mov	r4, r3
 800663c:	bb44      	cbnz	r4, 8006690 <_malloc_r+0x88>
 800663e:	4629      	mov	r1, r5
 8006640:	4630      	mov	r0, r6
 8006642:	f7ff ffbf 	bl	80065c4 <sbrk_aligned>
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	4604      	mov	r4, r0
 800664a:	d158      	bne.n	80066fe <_malloc_r+0xf6>
 800664c:	f8d8 4000 	ldr.w	r4, [r8]
 8006650:	4627      	mov	r7, r4
 8006652:	2f00      	cmp	r7, #0
 8006654:	d143      	bne.n	80066de <_malloc_r+0xd6>
 8006656:	2c00      	cmp	r4, #0
 8006658:	d04b      	beq.n	80066f2 <_malloc_r+0xea>
 800665a:	6823      	ldr	r3, [r4, #0]
 800665c:	4639      	mov	r1, r7
 800665e:	4630      	mov	r0, r6
 8006660:	eb04 0903 	add.w	r9, r4, r3
 8006664:	f000 fdde 	bl	8007224 <_sbrk_r>
 8006668:	4581      	cmp	r9, r0
 800666a:	d142      	bne.n	80066f2 <_malloc_r+0xea>
 800666c:	6821      	ldr	r1, [r4, #0]
 800666e:	1a6d      	subs	r5, r5, r1
 8006670:	4629      	mov	r1, r5
 8006672:	4630      	mov	r0, r6
 8006674:	f7ff ffa6 	bl	80065c4 <sbrk_aligned>
 8006678:	3001      	adds	r0, #1
 800667a:	d03a      	beq.n	80066f2 <_malloc_r+0xea>
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	442b      	add	r3, r5
 8006680:	6023      	str	r3, [r4, #0]
 8006682:	f8d8 3000 	ldr.w	r3, [r8]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	bb62      	cbnz	r2, 80066e4 <_malloc_r+0xdc>
 800668a:	f8c8 7000 	str.w	r7, [r8]
 800668e:	e00f      	b.n	80066b0 <_malloc_r+0xa8>
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	1b52      	subs	r2, r2, r5
 8006694:	d420      	bmi.n	80066d8 <_malloc_r+0xd0>
 8006696:	2a0b      	cmp	r2, #11
 8006698:	d917      	bls.n	80066ca <_malloc_r+0xc2>
 800669a:	1961      	adds	r1, r4, r5
 800669c:	42a3      	cmp	r3, r4
 800669e:	6025      	str	r5, [r4, #0]
 80066a0:	bf18      	it	ne
 80066a2:	6059      	strne	r1, [r3, #4]
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	bf08      	it	eq
 80066a8:	f8c8 1000 	streq.w	r1, [r8]
 80066ac:	5162      	str	r2, [r4, r5]
 80066ae:	604b      	str	r3, [r1, #4]
 80066b0:	4630      	mov	r0, r6
 80066b2:	f000 f82f 	bl	8006714 <__malloc_unlock>
 80066b6:	f104 000b 	add.w	r0, r4, #11
 80066ba:	1d23      	adds	r3, r4, #4
 80066bc:	f020 0007 	bic.w	r0, r0, #7
 80066c0:	1ac2      	subs	r2, r0, r3
 80066c2:	bf1c      	itt	ne
 80066c4:	1a1b      	subne	r3, r3, r0
 80066c6:	50a3      	strne	r3, [r4, r2]
 80066c8:	e7af      	b.n	800662a <_malloc_r+0x22>
 80066ca:	6862      	ldr	r2, [r4, #4]
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	bf0c      	ite	eq
 80066d0:	f8c8 2000 	streq.w	r2, [r8]
 80066d4:	605a      	strne	r2, [r3, #4]
 80066d6:	e7eb      	b.n	80066b0 <_malloc_r+0xa8>
 80066d8:	4623      	mov	r3, r4
 80066da:	6864      	ldr	r4, [r4, #4]
 80066dc:	e7ae      	b.n	800663c <_malloc_r+0x34>
 80066de:	463c      	mov	r4, r7
 80066e0:	687f      	ldr	r7, [r7, #4]
 80066e2:	e7b6      	b.n	8006652 <_malloc_r+0x4a>
 80066e4:	461a      	mov	r2, r3
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	42a3      	cmp	r3, r4
 80066ea:	d1fb      	bne.n	80066e4 <_malloc_r+0xdc>
 80066ec:	2300      	movs	r3, #0
 80066ee:	6053      	str	r3, [r2, #4]
 80066f0:	e7de      	b.n	80066b0 <_malloc_r+0xa8>
 80066f2:	230c      	movs	r3, #12
 80066f4:	6033      	str	r3, [r6, #0]
 80066f6:	4630      	mov	r0, r6
 80066f8:	f000 f80c 	bl	8006714 <__malloc_unlock>
 80066fc:	e794      	b.n	8006628 <_malloc_r+0x20>
 80066fe:	6005      	str	r5, [r0, #0]
 8006700:	e7d6      	b.n	80066b0 <_malloc_r+0xa8>
 8006702:	bf00      	nop
 8006704:	20000430 	.word	0x20000430

08006708 <__malloc_lock>:
 8006708:	4801      	ldr	r0, [pc, #4]	@ (8006710 <__malloc_lock+0x8>)
 800670a:	f7ff bf0e 	b.w	800652a <__retarget_lock_acquire_recursive>
 800670e:	bf00      	nop
 8006710:	20000428 	.word	0x20000428

08006714 <__malloc_unlock>:
 8006714:	4801      	ldr	r0, [pc, #4]	@ (800671c <__malloc_unlock+0x8>)
 8006716:	f7ff bf09 	b.w	800652c <__retarget_lock_release_recursive>
 800671a:	bf00      	nop
 800671c:	20000428 	.word	0x20000428

08006720 <__ssputs_r>:
 8006720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006724:	688e      	ldr	r6, [r1, #8]
 8006726:	461f      	mov	r7, r3
 8006728:	42be      	cmp	r6, r7
 800672a:	680b      	ldr	r3, [r1, #0]
 800672c:	4682      	mov	sl, r0
 800672e:	460c      	mov	r4, r1
 8006730:	4690      	mov	r8, r2
 8006732:	d82d      	bhi.n	8006790 <__ssputs_r+0x70>
 8006734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800673c:	d026      	beq.n	800678c <__ssputs_r+0x6c>
 800673e:	6965      	ldr	r5, [r4, #20]
 8006740:	6909      	ldr	r1, [r1, #16]
 8006742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006746:	eba3 0901 	sub.w	r9, r3, r1
 800674a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800674e:	1c7b      	adds	r3, r7, #1
 8006750:	444b      	add	r3, r9
 8006752:	106d      	asrs	r5, r5, #1
 8006754:	429d      	cmp	r5, r3
 8006756:	bf38      	it	cc
 8006758:	461d      	movcc	r5, r3
 800675a:	0553      	lsls	r3, r2, #21
 800675c:	d527      	bpl.n	80067ae <__ssputs_r+0x8e>
 800675e:	4629      	mov	r1, r5
 8006760:	f7ff ff52 	bl	8006608 <_malloc_r>
 8006764:	4606      	mov	r6, r0
 8006766:	b360      	cbz	r0, 80067c2 <__ssputs_r+0xa2>
 8006768:	6921      	ldr	r1, [r4, #16]
 800676a:	464a      	mov	r2, r9
 800676c:	f000 fd6a 	bl	8007244 <memcpy>
 8006770:	89a3      	ldrh	r3, [r4, #12]
 8006772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800677a:	81a3      	strh	r3, [r4, #12]
 800677c:	6126      	str	r6, [r4, #16]
 800677e:	6165      	str	r5, [r4, #20]
 8006780:	444e      	add	r6, r9
 8006782:	eba5 0509 	sub.w	r5, r5, r9
 8006786:	6026      	str	r6, [r4, #0]
 8006788:	60a5      	str	r5, [r4, #8]
 800678a:	463e      	mov	r6, r7
 800678c:	42be      	cmp	r6, r7
 800678e:	d900      	bls.n	8006792 <__ssputs_r+0x72>
 8006790:	463e      	mov	r6, r7
 8006792:	6820      	ldr	r0, [r4, #0]
 8006794:	4632      	mov	r2, r6
 8006796:	4641      	mov	r1, r8
 8006798:	f000 fd2a 	bl	80071f0 <memmove>
 800679c:	68a3      	ldr	r3, [r4, #8]
 800679e:	1b9b      	subs	r3, r3, r6
 80067a0:	60a3      	str	r3, [r4, #8]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	4433      	add	r3, r6
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	2000      	movs	r0, #0
 80067aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ae:	462a      	mov	r2, r5
 80067b0:	f000 fd56 	bl	8007260 <_realloc_r>
 80067b4:	4606      	mov	r6, r0
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d1e0      	bne.n	800677c <__ssputs_r+0x5c>
 80067ba:	6921      	ldr	r1, [r4, #16]
 80067bc:	4650      	mov	r0, sl
 80067be:	f7ff feb7 	bl	8006530 <_free_r>
 80067c2:	230c      	movs	r3, #12
 80067c4:	f8ca 3000 	str.w	r3, [sl]
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ce:	81a3      	strh	r3, [r4, #12]
 80067d0:	f04f 30ff 	mov.w	r0, #4294967295
 80067d4:	e7e9      	b.n	80067aa <__ssputs_r+0x8a>
	...

080067d8 <_svfiprintf_r>:
 80067d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067dc:	4698      	mov	r8, r3
 80067de:	898b      	ldrh	r3, [r1, #12]
 80067e0:	061b      	lsls	r3, r3, #24
 80067e2:	b09d      	sub	sp, #116	@ 0x74
 80067e4:	4607      	mov	r7, r0
 80067e6:	460d      	mov	r5, r1
 80067e8:	4614      	mov	r4, r2
 80067ea:	d510      	bpl.n	800680e <_svfiprintf_r+0x36>
 80067ec:	690b      	ldr	r3, [r1, #16]
 80067ee:	b973      	cbnz	r3, 800680e <_svfiprintf_r+0x36>
 80067f0:	2140      	movs	r1, #64	@ 0x40
 80067f2:	f7ff ff09 	bl	8006608 <_malloc_r>
 80067f6:	6028      	str	r0, [r5, #0]
 80067f8:	6128      	str	r0, [r5, #16]
 80067fa:	b930      	cbnz	r0, 800680a <_svfiprintf_r+0x32>
 80067fc:	230c      	movs	r3, #12
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	f04f 30ff 	mov.w	r0, #4294967295
 8006804:	b01d      	add	sp, #116	@ 0x74
 8006806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680a:	2340      	movs	r3, #64	@ 0x40
 800680c:	616b      	str	r3, [r5, #20]
 800680e:	2300      	movs	r3, #0
 8006810:	9309      	str	r3, [sp, #36]	@ 0x24
 8006812:	2320      	movs	r3, #32
 8006814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006818:	f8cd 800c 	str.w	r8, [sp, #12]
 800681c:	2330      	movs	r3, #48	@ 0x30
 800681e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80069bc <_svfiprintf_r+0x1e4>
 8006822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006826:	f04f 0901 	mov.w	r9, #1
 800682a:	4623      	mov	r3, r4
 800682c:	469a      	mov	sl, r3
 800682e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006832:	b10a      	cbz	r2, 8006838 <_svfiprintf_r+0x60>
 8006834:	2a25      	cmp	r2, #37	@ 0x25
 8006836:	d1f9      	bne.n	800682c <_svfiprintf_r+0x54>
 8006838:	ebba 0b04 	subs.w	fp, sl, r4
 800683c:	d00b      	beq.n	8006856 <_svfiprintf_r+0x7e>
 800683e:	465b      	mov	r3, fp
 8006840:	4622      	mov	r2, r4
 8006842:	4629      	mov	r1, r5
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff ff6b 	bl	8006720 <__ssputs_r>
 800684a:	3001      	adds	r0, #1
 800684c:	f000 80a7 	beq.w	800699e <_svfiprintf_r+0x1c6>
 8006850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006852:	445a      	add	r2, fp
 8006854:	9209      	str	r2, [sp, #36]	@ 0x24
 8006856:	f89a 3000 	ldrb.w	r3, [sl]
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 809f 	beq.w	800699e <_svfiprintf_r+0x1c6>
 8006860:	2300      	movs	r3, #0
 8006862:	f04f 32ff 	mov.w	r2, #4294967295
 8006866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800686a:	f10a 0a01 	add.w	sl, sl, #1
 800686e:	9304      	str	r3, [sp, #16]
 8006870:	9307      	str	r3, [sp, #28]
 8006872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006876:	931a      	str	r3, [sp, #104]	@ 0x68
 8006878:	4654      	mov	r4, sl
 800687a:	2205      	movs	r2, #5
 800687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006880:	484e      	ldr	r0, [pc, #312]	@ (80069bc <_svfiprintf_r+0x1e4>)
 8006882:	f7f9 fca5 	bl	80001d0 <memchr>
 8006886:	9a04      	ldr	r2, [sp, #16]
 8006888:	b9d8      	cbnz	r0, 80068c2 <_svfiprintf_r+0xea>
 800688a:	06d0      	lsls	r0, r2, #27
 800688c:	bf44      	itt	mi
 800688e:	2320      	movmi	r3, #32
 8006890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006894:	0711      	lsls	r1, r2, #28
 8006896:	bf44      	itt	mi
 8006898:	232b      	movmi	r3, #43	@ 0x2b
 800689a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800689e:	f89a 3000 	ldrb.w	r3, [sl]
 80068a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80068a4:	d015      	beq.n	80068d2 <_svfiprintf_r+0xfa>
 80068a6:	9a07      	ldr	r2, [sp, #28]
 80068a8:	4654      	mov	r4, sl
 80068aa:	2000      	movs	r0, #0
 80068ac:	f04f 0c0a 	mov.w	ip, #10
 80068b0:	4621      	mov	r1, r4
 80068b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b6:	3b30      	subs	r3, #48	@ 0x30
 80068b8:	2b09      	cmp	r3, #9
 80068ba:	d94b      	bls.n	8006954 <_svfiprintf_r+0x17c>
 80068bc:	b1b0      	cbz	r0, 80068ec <_svfiprintf_r+0x114>
 80068be:	9207      	str	r2, [sp, #28]
 80068c0:	e014      	b.n	80068ec <_svfiprintf_r+0x114>
 80068c2:	eba0 0308 	sub.w	r3, r0, r8
 80068c6:	fa09 f303 	lsl.w	r3, r9, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	9304      	str	r3, [sp, #16]
 80068ce:	46a2      	mov	sl, r4
 80068d0:	e7d2      	b.n	8006878 <_svfiprintf_r+0xa0>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	1d19      	adds	r1, r3, #4
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	9103      	str	r1, [sp, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	bfbb      	ittet	lt
 80068de:	425b      	neglt	r3, r3
 80068e0:	f042 0202 	orrlt.w	r2, r2, #2
 80068e4:	9307      	strge	r3, [sp, #28]
 80068e6:	9307      	strlt	r3, [sp, #28]
 80068e8:	bfb8      	it	lt
 80068ea:	9204      	strlt	r2, [sp, #16]
 80068ec:	7823      	ldrb	r3, [r4, #0]
 80068ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80068f0:	d10a      	bne.n	8006908 <_svfiprintf_r+0x130>
 80068f2:	7863      	ldrb	r3, [r4, #1]
 80068f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f6:	d132      	bne.n	800695e <_svfiprintf_r+0x186>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	1d1a      	adds	r2, r3, #4
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	9203      	str	r2, [sp, #12]
 8006900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006904:	3402      	adds	r4, #2
 8006906:	9305      	str	r3, [sp, #20]
 8006908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80069cc <_svfiprintf_r+0x1f4>
 800690c:	7821      	ldrb	r1, [r4, #0]
 800690e:	2203      	movs	r2, #3
 8006910:	4650      	mov	r0, sl
 8006912:	f7f9 fc5d 	bl	80001d0 <memchr>
 8006916:	b138      	cbz	r0, 8006928 <_svfiprintf_r+0x150>
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	eba0 000a 	sub.w	r0, r0, sl
 800691e:	2240      	movs	r2, #64	@ 0x40
 8006920:	4082      	lsls	r2, r0
 8006922:	4313      	orrs	r3, r2
 8006924:	3401      	adds	r4, #1
 8006926:	9304      	str	r3, [sp, #16]
 8006928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692c:	4824      	ldr	r0, [pc, #144]	@ (80069c0 <_svfiprintf_r+0x1e8>)
 800692e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006932:	2206      	movs	r2, #6
 8006934:	f7f9 fc4c 	bl	80001d0 <memchr>
 8006938:	2800      	cmp	r0, #0
 800693a:	d036      	beq.n	80069aa <_svfiprintf_r+0x1d2>
 800693c:	4b21      	ldr	r3, [pc, #132]	@ (80069c4 <_svfiprintf_r+0x1ec>)
 800693e:	bb1b      	cbnz	r3, 8006988 <_svfiprintf_r+0x1b0>
 8006940:	9b03      	ldr	r3, [sp, #12]
 8006942:	3307      	adds	r3, #7
 8006944:	f023 0307 	bic.w	r3, r3, #7
 8006948:	3308      	adds	r3, #8
 800694a:	9303      	str	r3, [sp, #12]
 800694c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694e:	4433      	add	r3, r6
 8006950:	9309      	str	r3, [sp, #36]	@ 0x24
 8006952:	e76a      	b.n	800682a <_svfiprintf_r+0x52>
 8006954:	fb0c 3202 	mla	r2, ip, r2, r3
 8006958:	460c      	mov	r4, r1
 800695a:	2001      	movs	r0, #1
 800695c:	e7a8      	b.n	80068b0 <_svfiprintf_r+0xd8>
 800695e:	2300      	movs	r3, #0
 8006960:	3401      	adds	r4, #1
 8006962:	9305      	str	r3, [sp, #20]
 8006964:	4619      	mov	r1, r3
 8006966:	f04f 0c0a 	mov.w	ip, #10
 800696a:	4620      	mov	r0, r4
 800696c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006970:	3a30      	subs	r2, #48	@ 0x30
 8006972:	2a09      	cmp	r2, #9
 8006974:	d903      	bls.n	800697e <_svfiprintf_r+0x1a6>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0c6      	beq.n	8006908 <_svfiprintf_r+0x130>
 800697a:	9105      	str	r1, [sp, #20]
 800697c:	e7c4      	b.n	8006908 <_svfiprintf_r+0x130>
 800697e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006982:	4604      	mov	r4, r0
 8006984:	2301      	movs	r3, #1
 8006986:	e7f0      	b.n	800696a <_svfiprintf_r+0x192>
 8006988:	ab03      	add	r3, sp, #12
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	462a      	mov	r2, r5
 800698e:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <_svfiprintf_r+0x1f0>)
 8006990:	a904      	add	r1, sp, #16
 8006992:	4638      	mov	r0, r7
 8006994:	f3af 8000 	nop.w
 8006998:	1c42      	adds	r2, r0, #1
 800699a:	4606      	mov	r6, r0
 800699c:	d1d6      	bne.n	800694c <_svfiprintf_r+0x174>
 800699e:	89ab      	ldrh	r3, [r5, #12]
 80069a0:	065b      	lsls	r3, r3, #25
 80069a2:	f53f af2d 	bmi.w	8006800 <_svfiprintf_r+0x28>
 80069a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a8:	e72c      	b.n	8006804 <_svfiprintf_r+0x2c>
 80069aa:	ab03      	add	r3, sp, #12
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	462a      	mov	r2, r5
 80069b0:	4b05      	ldr	r3, [pc, #20]	@ (80069c8 <_svfiprintf_r+0x1f0>)
 80069b2:	a904      	add	r1, sp, #16
 80069b4:	4638      	mov	r0, r7
 80069b6:	f000 f9bb 	bl	8006d30 <_printf_i>
 80069ba:	e7ed      	b.n	8006998 <_svfiprintf_r+0x1c0>
 80069bc:	08007518 	.word	0x08007518
 80069c0:	08007522 	.word	0x08007522
 80069c4:	00000000 	.word	0x00000000
 80069c8:	08006721 	.word	0x08006721
 80069cc:	0800751e 	.word	0x0800751e

080069d0 <__sfputc_r>:
 80069d0:	6893      	ldr	r3, [r2, #8]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	b410      	push	{r4}
 80069d8:	6093      	str	r3, [r2, #8]
 80069da:	da08      	bge.n	80069ee <__sfputc_r+0x1e>
 80069dc:	6994      	ldr	r4, [r2, #24]
 80069de:	42a3      	cmp	r3, r4
 80069e0:	db01      	blt.n	80069e6 <__sfputc_r+0x16>
 80069e2:	290a      	cmp	r1, #10
 80069e4:	d103      	bne.n	80069ee <__sfputc_r+0x1e>
 80069e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069ea:	f000 bb6d 	b.w	80070c8 <__swbuf_r>
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	1c58      	adds	r0, r3, #1
 80069f2:	6010      	str	r0, [r2, #0]
 80069f4:	7019      	strb	r1, [r3, #0]
 80069f6:	4608      	mov	r0, r1
 80069f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069fc:	4770      	bx	lr

080069fe <__sfputs_r>:
 80069fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a00:	4606      	mov	r6, r0
 8006a02:	460f      	mov	r7, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	18d5      	adds	r5, r2, r3
 8006a08:	42ac      	cmp	r4, r5
 8006a0a:	d101      	bne.n	8006a10 <__sfputs_r+0x12>
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	e007      	b.n	8006a20 <__sfputs_r+0x22>
 8006a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a14:	463a      	mov	r2, r7
 8006a16:	4630      	mov	r0, r6
 8006a18:	f7ff ffda 	bl	80069d0 <__sfputc_r>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d1f3      	bne.n	8006a08 <__sfputs_r+0xa>
 8006a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a24 <_vfiprintf_r>:
 8006a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	460d      	mov	r5, r1
 8006a2a:	b09d      	sub	sp, #116	@ 0x74
 8006a2c:	4614      	mov	r4, r2
 8006a2e:	4698      	mov	r8, r3
 8006a30:	4606      	mov	r6, r0
 8006a32:	b118      	cbz	r0, 8006a3c <_vfiprintf_r+0x18>
 8006a34:	6a03      	ldr	r3, [r0, #32]
 8006a36:	b90b      	cbnz	r3, 8006a3c <_vfiprintf_r+0x18>
 8006a38:	f7ff fc52 	bl	80062e0 <__sinit>
 8006a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a3e:	07d9      	lsls	r1, r3, #31
 8006a40:	d405      	bmi.n	8006a4e <_vfiprintf_r+0x2a>
 8006a42:	89ab      	ldrh	r3, [r5, #12]
 8006a44:	059a      	lsls	r2, r3, #22
 8006a46:	d402      	bmi.n	8006a4e <_vfiprintf_r+0x2a>
 8006a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a4a:	f7ff fd6e 	bl	800652a <__retarget_lock_acquire_recursive>
 8006a4e:	89ab      	ldrh	r3, [r5, #12]
 8006a50:	071b      	lsls	r3, r3, #28
 8006a52:	d501      	bpl.n	8006a58 <_vfiprintf_r+0x34>
 8006a54:	692b      	ldr	r3, [r5, #16]
 8006a56:	b99b      	cbnz	r3, 8006a80 <_vfiprintf_r+0x5c>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f000 fb72 	bl	8007144 <__swsetup_r>
 8006a60:	b170      	cbz	r0, 8006a80 <_vfiprintf_r+0x5c>
 8006a62:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006a64:	07dc      	lsls	r4, r3, #31
 8006a66:	d504      	bpl.n	8006a72 <_vfiprintf_r+0x4e>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b01d      	add	sp, #116	@ 0x74
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a72:	89ab      	ldrh	r3, [r5, #12]
 8006a74:	0598      	lsls	r0, r3, #22
 8006a76:	d4f7      	bmi.n	8006a68 <_vfiprintf_r+0x44>
 8006a78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006a7a:	f7ff fd57 	bl	800652c <__retarget_lock_release_recursive>
 8006a7e:	e7f3      	b.n	8006a68 <_vfiprintf_r+0x44>
 8006a80:	2300      	movs	r3, #0
 8006a82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a84:	2320      	movs	r3, #32
 8006a86:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a8e:	2330      	movs	r3, #48	@ 0x30
 8006a90:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006c40 <_vfiprintf_r+0x21c>
 8006a94:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a98:	f04f 0901 	mov.w	r9, #1
 8006a9c:	4623      	mov	r3, r4
 8006a9e:	469a      	mov	sl, r3
 8006aa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aa4:	b10a      	cbz	r2, 8006aaa <_vfiprintf_r+0x86>
 8006aa6:	2a25      	cmp	r2, #37	@ 0x25
 8006aa8:	d1f9      	bne.n	8006a9e <_vfiprintf_r+0x7a>
 8006aaa:	ebba 0b04 	subs.w	fp, sl, r4
 8006aae:	d00b      	beq.n	8006ac8 <_vfiprintf_r+0xa4>
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	4629      	mov	r1, r5
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7ff ffa1 	bl	80069fe <__sfputs_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	f000 80a7 	beq.w	8006c10 <_vfiprintf_r+0x1ec>
 8006ac2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac4:	445a      	add	r2, fp
 8006ac6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f000 809f 	beq.w	8006c10 <_vfiprintf_r+0x1ec>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006adc:	f10a 0a01 	add.w	sl, sl, #1
 8006ae0:	9304      	str	r3, [sp, #16]
 8006ae2:	9307      	str	r3, [sp, #28]
 8006ae4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ae8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006aea:	4654      	mov	r4, sl
 8006aec:	2205      	movs	r2, #5
 8006aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006af2:	4853      	ldr	r0, [pc, #332]	@ (8006c40 <_vfiprintf_r+0x21c>)
 8006af4:	f7f9 fb6c 	bl	80001d0 <memchr>
 8006af8:	9a04      	ldr	r2, [sp, #16]
 8006afa:	b9d8      	cbnz	r0, 8006b34 <_vfiprintf_r+0x110>
 8006afc:	06d1      	lsls	r1, r2, #27
 8006afe:	bf44      	itt	mi
 8006b00:	2320      	movmi	r3, #32
 8006b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b06:	0713      	lsls	r3, r2, #28
 8006b08:	bf44      	itt	mi
 8006b0a:	232b      	movmi	r3, #43	@ 0x2b
 8006b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b10:	f89a 3000 	ldrb.w	r3, [sl]
 8006b14:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b16:	d015      	beq.n	8006b44 <_vfiprintf_r+0x120>
 8006b18:	9a07      	ldr	r2, [sp, #28]
 8006b1a:	4654      	mov	r4, sl
 8006b1c:	2000      	movs	r0, #0
 8006b1e:	f04f 0c0a 	mov.w	ip, #10
 8006b22:	4621      	mov	r1, r4
 8006b24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b28:	3b30      	subs	r3, #48	@ 0x30
 8006b2a:	2b09      	cmp	r3, #9
 8006b2c:	d94b      	bls.n	8006bc6 <_vfiprintf_r+0x1a2>
 8006b2e:	b1b0      	cbz	r0, 8006b5e <_vfiprintf_r+0x13a>
 8006b30:	9207      	str	r2, [sp, #28]
 8006b32:	e014      	b.n	8006b5e <_vfiprintf_r+0x13a>
 8006b34:	eba0 0308 	sub.w	r3, r0, r8
 8006b38:	fa09 f303 	lsl.w	r3, r9, r3
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	9304      	str	r3, [sp, #16]
 8006b40:	46a2      	mov	sl, r4
 8006b42:	e7d2      	b.n	8006aea <_vfiprintf_r+0xc6>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	1d19      	adds	r1, r3, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	9103      	str	r1, [sp, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	bfbb      	ittet	lt
 8006b50:	425b      	neglt	r3, r3
 8006b52:	f042 0202 	orrlt.w	r2, r2, #2
 8006b56:	9307      	strge	r3, [sp, #28]
 8006b58:	9307      	strlt	r3, [sp, #28]
 8006b5a:	bfb8      	it	lt
 8006b5c:	9204      	strlt	r2, [sp, #16]
 8006b5e:	7823      	ldrb	r3, [r4, #0]
 8006b60:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b62:	d10a      	bne.n	8006b7a <_vfiprintf_r+0x156>
 8006b64:	7863      	ldrb	r3, [r4, #1]
 8006b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b68:	d132      	bne.n	8006bd0 <_vfiprintf_r+0x1ac>
 8006b6a:	9b03      	ldr	r3, [sp, #12]
 8006b6c:	1d1a      	adds	r2, r3, #4
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	9203      	str	r2, [sp, #12]
 8006b72:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b76:	3402      	adds	r4, #2
 8006b78:	9305      	str	r3, [sp, #20]
 8006b7a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006c50 <_vfiprintf_r+0x22c>
 8006b7e:	7821      	ldrb	r1, [r4, #0]
 8006b80:	2203      	movs	r2, #3
 8006b82:	4650      	mov	r0, sl
 8006b84:	f7f9 fb24 	bl	80001d0 <memchr>
 8006b88:	b138      	cbz	r0, 8006b9a <_vfiprintf_r+0x176>
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	eba0 000a 	sub.w	r0, r0, sl
 8006b90:	2240      	movs	r2, #64	@ 0x40
 8006b92:	4082      	lsls	r2, r0
 8006b94:	4313      	orrs	r3, r2
 8006b96:	3401      	adds	r4, #1
 8006b98:	9304      	str	r3, [sp, #16]
 8006b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9e:	4829      	ldr	r0, [pc, #164]	@ (8006c44 <_vfiprintf_r+0x220>)
 8006ba0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006ba4:	2206      	movs	r2, #6
 8006ba6:	f7f9 fb13 	bl	80001d0 <memchr>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d03f      	beq.n	8006c2e <_vfiprintf_r+0x20a>
 8006bae:	4b26      	ldr	r3, [pc, #152]	@ (8006c48 <_vfiprintf_r+0x224>)
 8006bb0:	bb1b      	cbnz	r3, 8006bfa <_vfiprintf_r+0x1d6>
 8006bb2:	9b03      	ldr	r3, [sp, #12]
 8006bb4:	3307      	adds	r3, #7
 8006bb6:	f023 0307 	bic.w	r3, r3, #7
 8006bba:	3308      	adds	r3, #8
 8006bbc:	9303      	str	r3, [sp, #12]
 8006bbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc0:	443b      	add	r3, r7
 8006bc2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bc4:	e76a      	b.n	8006a9c <_vfiprintf_r+0x78>
 8006bc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bca:	460c      	mov	r4, r1
 8006bcc:	2001      	movs	r0, #1
 8006bce:	e7a8      	b.n	8006b22 <_vfiprintf_r+0xfe>
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	3401      	adds	r4, #1
 8006bd4:	9305      	str	r3, [sp, #20]
 8006bd6:	4619      	mov	r1, r3
 8006bd8:	f04f 0c0a 	mov.w	ip, #10
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006be2:	3a30      	subs	r2, #48	@ 0x30
 8006be4:	2a09      	cmp	r2, #9
 8006be6:	d903      	bls.n	8006bf0 <_vfiprintf_r+0x1cc>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0c6      	beq.n	8006b7a <_vfiprintf_r+0x156>
 8006bec:	9105      	str	r1, [sp, #20]
 8006bee:	e7c4      	b.n	8006b7a <_vfiprintf_r+0x156>
 8006bf0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e7f0      	b.n	8006bdc <_vfiprintf_r+0x1b8>
 8006bfa:	ab03      	add	r3, sp, #12
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	462a      	mov	r2, r5
 8006c00:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <_vfiprintf_r+0x228>)
 8006c02:	a904      	add	r1, sp, #16
 8006c04:	4630      	mov	r0, r6
 8006c06:	f3af 8000 	nop.w
 8006c0a:	4607      	mov	r7, r0
 8006c0c:	1c78      	adds	r0, r7, #1
 8006c0e:	d1d6      	bne.n	8006bbe <_vfiprintf_r+0x19a>
 8006c10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c12:	07d9      	lsls	r1, r3, #31
 8006c14:	d405      	bmi.n	8006c22 <_vfiprintf_r+0x1fe>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	059a      	lsls	r2, r3, #22
 8006c1a:	d402      	bmi.n	8006c22 <_vfiprintf_r+0x1fe>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c1e:	f7ff fc85 	bl	800652c <__retarget_lock_release_recursive>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	065b      	lsls	r3, r3, #25
 8006c26:	f53f af1f 	bmi.w	8006a68 <_vfiprintf_r+0x44>
 8006c2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c2c:	e71e      	b.n	8006a6c <_vfiprintf_r+0x48>
 8006c2e:	ab03      	add	r3, sp, #12
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	462a      	mov	r2, r5
 8006c34:	4b05      	ldr	r3, [pc, #20]	@ (8006c4c <_vfiprintf_r+0x228>)
 8006c36:	a904      	add	r1, sp, #16
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 f879 	bl	8006d30 <_printf_i>
 8006c3e:	e7e4      	b.n	8006c0a <_vfiprintf_r+0x1e6>
 8006c40:	08007518 	.word	0x08007518
 8006c44:	08007522 	.word	0x08007522
 8006c48:	00000000 	.word	0x00000000
 8006c4c:	080069ff 	.word	0x080069ff
 8006c50:	0800751e 	.word	0x0800751e

08006c54 <_printf_common>:
 8006c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	4616      	mov	r6, r2
 8006c5a:	4698      	mov	r8, r3
 8006c5c:	688a      	ldr	r2, [r1, #8]
 8006c5e:	690b      	ldr	r3, [r1, #16]
 8006c60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c64:	4293      	cmp	r3, r2
 8006c66:	bfb8      	it	lt
 8006c68:	4613      	movlt	r3, r2
 8006c6a:	6033      	str	r3, [r6, #0]
 8006c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c70:	4607      	mov	r7, r0
 8006c72:	460c      	mov	r4, r1
 8006c74:	b10a      	cbz	r2, 8006c7a <_printf_common+0x26>
 8006c76:	3301      	adds	r3, #1
 8006c78:	6033      	str	r3, [r6, #0]
 8006c7a:	6823      	ldr	r3, [r4, #0]
 8006c7c:	0699      	lsls	r1, r3, #26
 8006c7e:	bf42      	ittt	mi
 8006c80:	6833      	ldrmi	r3, [r6, #0]
 8006c82:	3302      	addmi	r3, #2
 8006c84:	6033      	strmi	r3, [r6, #0]
 8006c86:	6825      	ldr	r5, [r4, #0]
 8006c88:	f015 0506 	ands.w	r5, r5, #6
 8006c8c:	d106      	bne.n	8006c9c <_printf_common+0x48>
 8006c8e:	f104 0a19 	add.w	sl, r4, #25
 8006c92:	68e3      	ldr	r3, [r4, #12]
 8006c94:	6832      	ldr	r2, [r6, #0]
 8006c96:	1a9b      	subs	r3, r3, r2
 8006c98:	42ab      	cmp	r3, r5
 8006c9a:	dc26      	bgt.n	8006cea <_printf_common+0x96>
 8006c9c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ca0:	6822      	ldr	r2, [r4, #0]
 8006ca2:	3b00      	subs	r3, #0
 8006ca4:	bf18      	it	ne
 8006ca6:	2301      	movne	r3, #1
 8006ca8:	0692      	lsls	r2, r2, #26
 8006caa:	d42b      	bmi.n	8006d04 <_printf_common+0xb0>
 8006cac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cb0:	4641      	mov	r1, r8
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	47c8      	blx	r9
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	d01e      	beq.n	8006cf8 <_printf_common+0xa4>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	6922      	ldr	r2, [r4, #16]
 8006cbe:	f003 0306 	and.w	r3, r3, #6
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	bf02      	ittt	eq
 8006cc6:	68e5      	ldreq	r5, [r4, #12]
 8006cc8:	6833      	ldreq	r3, [r6, #0]
 8006cca:	1aed      	subeq	r5, r5, r3
 8006ccc:	68a3      	ldr	r3, [r4, #8]
 8006cce:	bf0c      	ite	eq
 8006cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cd4:	2500      	movne	r5, #0
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	bfc4      	itt	gt
 8006cda:	1a9b      	subgt	r3, r3, r2
 8006cdc:	18ed      	addgt	r5, r5, r3
 8006cde:	2600      	movs	r6, #0
 8006ce0:	341a      	adds	r4, #26
 8006ce2:	42b5      	cmp	r5, r6
 8006ce4:	d11a      	bne.n	8006d1c <_printf_common+0xc8>
 8006ce6:	2000      	movs	r0, #0
 8006ce8:	e008      	b.n	8006cfc <_printf_common+0xa8>
 8006cea:	2301      	movs	r3, #1
 8006cec:	4652      	mov	r2, sl
 8006cee:	4641      	mov	r1, r8
 8006cf0:	4638      	mov	r0, r7
 8006cf2:	47c8      	blx	r9
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	d103      	bne.n	8006d00 <_printf_common+0xac>
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d00:	3501      	adds	r5, #1
 8006d02:	e7c6      	b.n	8006c92 <_printf_common+0x3e>
 8006d04:	18e1      	adds	r1, r4, r3
 8006d06:	1c5a      	adds	r2, r3, #1
 8006d08:	2030      	movs	r0, #48	@ 0x30
 8006d0a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d0e:	4422      	add	r2, r4
 8006d10:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d14:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d18:	3302      	adds	r3, #2
 8006d1a:	e7c7      	b.n	8006cac <_printf_common+0x58>
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	4622      	mov	r2, r4
 8006d20:	4641      	mov	r1, r8
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c8      	blx	r9
 8006d26:	3001      	adds	r0, #1
 8006d28:	d0e6      	beq.n	8006cf8 <_printf_common+0xa4>
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7d9      	b.n	8006ce2 <_printf_common+0x8e>
	...

08006d30 <_printf_i>:
 8006d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d34:	7e0f      	ldrb	r7, [r1, #24]
 8006d36:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d38:	2f78      	cmp	r7, #120	@ 0x78
 8006d3a:	4691      	mov	r9, r2
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	460c      	mov	r4, r1
 8006d40:	469a      	mov	sl, r3
 8006d42:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d46:	d807      	bhi.n	8006d58 <_printf_i+0x28>
 8006d48:	2f62      	cmp	r7, #98	@ 0x62
 8006d4a:	d80a      	bhi.n	8006d62 <_printf_i+0x32>
 8006d4c:	2f00      	cmp	r7, #0
 8006d4e:	f000 80d2 	beq.w	8006ef6 <_printf_i+0x1c6>
 8006d52:	2f58      	cmp	r7, #88	@ 0x58
 8006d54:	f000 80b9 	beq.w	8006eca <_printf_i+0x19a>
 8006d58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d5c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d60:	e03a      	b.n	8006dd8 <_printf_i+0xa8>
 8006d62:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d66:	2b15      	cmp	r3, #21
 8006d68:	d8f6      	bhi.n	8006d58 <_printf_i+0x28>
 8006d6a:	a101      	add	r1, pc, #4	@ (adr r1, 8006d70 <_printf_i+0x40>)
 8006d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d70:	08006dc9 	.word	0x08006dc9
 8006d74:	08006ddd 	.word	0x08006ddd
 8006d78:	08006d59 	.word	0x08006d59
 8006d7c:	08006d59 	.word	0x08006d59
 8006d80:	08006d59 	.word	0x08006d59
 8006d84:	08006d59 	.word	0x08006d59
 8006d88:	08006ddd 	.word	0x08006ddd
 8006d8c:	08006d59 	.word	0x08006d59
 8006d90:	08006d59 	.word	0x08006d59
 8006d94:	08006d59 	.word	0x08006d59
 8006d98:	08006d59 	.word	0x08006d59
 8006d9c:	08006edd 	.word	0x08006edd
 8006da0:	08006e07 	.word	0x08006e07
 8006da4:	08006e97 	.word	0x08006e97
 8006da8:	08006d59 	.word	0x08006d59
 8006dac:	08006d59 	.word	0x08006d59
 8006db0:	08006eff 	.word	0x08006eff
 8006db4:	08006d59 	.word	0x08006d59
 8006db8:	08006e07 	.word	0x08006e07
 8006dbc:	08006d59 	.word	0x08006d59
 8006dc0:	08006d59 	.word	0x08006d59
 8006dc4:	08006e9f 	.word	0x08006e9f
 8006dc8:	6833      	ldr	r3, [r6, #0]
 8006dca:	1d1a      	adds	r2, r3, #4
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6032      	str	r2, [r6, #0]
 8006dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dd4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e09d      	b.n	8006f18 <_printf_i+0x1e8>
 8006ddc:	6833      	ldr	r3, [r6, #0]
 8006dde:	6820      	ldr	r0, [r4, #0]
 8006de0:	1d19      	adds	r1, r3, #4
 8006de2:	6031      	str	r1, [r6, #0]
 8006de4:	0606      	lsls	r6, r0, #24
 8006de6:	d501      	bpl.n	8006dec <_printf_i+0xbc>
 8006de8:	681d      	ldr	r5, [r3, #0]
 8006dea:	e003      	b.n	8006df4 <_printf_i+0xc4>
 8006dec:	0645      	lsls	r5, r0, #25
 8006dee:	d5fb      	bpl.n	8006de8 <_printf_i+0xb8>
 8006df0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	da03      	bge.n	8006e00 <_printf_i+0xd0>
 8006df8:	232d      	movs	r3, #45	@ 0x2d
 8006dfa:	426d      	negs	r5, r5
 8006dfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e00:	4859      	ldr	r0, [pc, #356]	@ (8006f68 <_printf_i+0x238>)
 8006e02:	230a      	movs	r3, #10
 8006e04:	e011      	b.n	8006e2a <_printf_i+0xfa>
 8006e06:	6821      	ldr	r1, [r4, #0]
 8006e08:	6833      	ldr	r3, [r6, #0]
 8006e0a:	0608      	lsls	r0, r1, #24
 8006e0c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e10:	d402      	bmi.n	8006e18 <_printf_i+0xe8>
 8006e12:	0649      	lsls	r1, r1, #25
 8006e14:	bf48      	it	mi
 8006e16:	b2ad      	uxthmi	r5, r5
 8006e18:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e1a:	4853      	ldr	r0, [pc, #332]	@ (8006f68 <_printf_i+0x238>)
 8006e1c:	6033      	str	r3, [r6, #0]
 8006e1e:	bf14      	ite	ne
 8006e20:	230a      	movne	r3, #10
 8006e22:	2308      	moveq	r3, #8
 8006e24:	2100      	movs	r1, #0
 8006e26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e2a:	6866      	ldr	r6, [r4, #4]
 8006e2c:	60a6      	str	r6, [r4, #8]
 8006e2e:	2e00      	cmp	r6, #0
 8006e30:	bfa2      	ittt	ge
 8006e32:	6821      	ldrge	r1, [r4, #0]
 8006e34:	f021 0104 	bicge.w	r1, r1, #4
 8006e38:	6021      	strge	r1, [r4, #0]
 8006e3a:	b90d      	cbnz	r5, 8006e40 <_printf_i+0x110>
 8006e3c:	2e00      	cmp	r6, #0
 8006e3e:	d04b      	beq.n	8006ed8 <_printf_i+0x1a8>
 8006e40:	4616      	mov	r6, r2
 8006e42:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e46:	fb03 5711 	mls	r7, r3, r1, r5
 8006e4a:	5dc7      	ldrb	r7, [r0, r7]
 8006e4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e50:	462f      	mov	r7, r5
 8006e52:	42bb      	cmp	r3, r7
 8006e54:	460d      	mov	r5, r1
 8006e56:	d9f4      	bls.n	8006e42 <_printf_i+0x112>
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d10b      	bne.n	8006e74 <_printf_i+0x144>
 8006e5c:	6823      	ldr	r3, [r4, #0]
 8006e5e:	07df      	lsls	r7, r3, #31
 8006e60:	d508      	bpl.n	8006e74 <_printf_i+0x144>
 8006e62:	6923      	ldr	r3, [r4, #16]
 8006e64:	6861      	ldr	r1, [r4, #4]
 8006e66:	4299      	cmp	r1, r3
 8006e68:	bfde      	ittt	le
 8006e6a:	2330      	movle	r3, #48	@ 0x30
 8006e6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e70:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e74:	1b92      	subs	r2, r2, r6
 8006e76:	6122      	str	r2, [r4, #16]
 8006e78:	f8cd a000 	str.w	sl, [sp]
 8006e7c:	464b      	mov	r3, r9
 8006e7e:	aa03      	add	r2, sp, #12
 8006e80:	4621      	mov	r1, r4
 8006e82:	4640      	mov	r0, r8
 8006e84:	f7ff fee6 	bl	8006c54 <_printf_common>
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d14a      	bne.n	8006f22 <_printf_i+0x1f2>
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e90:	b004      	add	sp, #16
 8006e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	f043 0320 	orr.w	r3, r3, #32
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	4833      	ldr	r0, [pc, #204]	@ (8006f6c <_printf_i+0x23c>)
 8006ea0:	2778      	movs	r7, #120	@ 0x78
 8006ea2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	6831      	ldr	r1, [r6, #0]
 8006eaa:	061f      	lsls	r7, r3, #24
 8006eac:	f851 5b04 	ldr.w	r5, [r1], #4
 8006eb0:	d402      	bmi.n	8006eb8 <_printf_i+0x188>
 8006eb2:	065f      	lsls	r7, r3, #25
 8006eb4:	bf48      	it	mi
 8006eb6:	b2ad      	uxthmi	r5, r5
 8006eb8:	6031      	str	r1, [r6, #0]
 8006eba:	07d9      	lsls	r1, r3, #31
 8006ebc:	bf44      	itt	mi
 8006ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8006ec2:	6023      	strmi	r3, [r4, #0]
 8006ec4:	b11d      	cbz	r5, 8006ece <_printf_i+0x19e>
 8006ec6:	2310      	movs	r3, #16
 8006ec8:	e7ac      	b.n	8006e24 <_printf_i+0xf4>
 8006eca:	4827      	ldr	r0, [pc, #156]	@ (8006f68 <_printf_i+0x238>)
 8006ecc:	e7e9      	b.n	8006ea2 <_printf_i+0x172>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	f023 0320 	bic.w	r3, r3, #32
 8006ed4:	6023      	str	r3, [r4, #0]
 8006ed6:	e7f6      	b.n	8006ec6 <_printf_i+0x196>
 8006ed8:	4616      	mov	r6, r2
 8006eda:	e7bd      	b.n	8006e58 <_printf_i+0x128>
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	6825      	ldr	r5, [r4, #0]
 8006ee0:	6961      	ldr	r1, [r4, #20]
 8006ee2:	1d18      	adds	r0, r3, #4
 8006ee4:	6030      	str	r0, [r6, #0]
 8006ee6:	062e      	lsls	r6, r5, #24
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	d501      	bpl.n	8006ef0 <_printf_i+0x1c0>
 8006eec:	6019      	str	r1, [r3, #0]
 8006eee:	e002      	b.n	8006ef6 <_printf_i+0x1c6>
 8006ef0:	0668      	lsls	r0, r5, #25
 8006ef2:	d5fb      	bpl.n	8006eec <_printf_i+0x1bc>
 8006ef4:	8019      	strh	r1, [r3, #0]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6123      	str	r3, [r4, #16]
 8006efa:	4616      	mov	r6, r2
 8006efc:	e7bc      	b.n	8006e78 <_printf_i+0x148>
 8006efe:	6833      	ldr	r3, [r6, #0]
 8006f00:	1d1a      	adds	r2, r3, #4
 8006f02:	6032      	str	r2, [r6, #0]
 8006f04:	681e      	ldr	r6, [r3, #0]
 8006f06:	6862      	ldr	r2, [r4, #4]
 8006f08:	2100      	movs	r1, #0
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	f7f9 f960 	bl	80001d0 <memchr>
 8006f10:	b108      	cbz	r0, 8006f16 <_printf_i+0x1e6>
 8006f12:	1b80      	subs	r0, r0, r6
 8006f14:	6060      	str	r0, [r4, #4]
 8006f16:	6863      	ldr	r3, [r4, #4]
 8006f18:	6123      	str	r3, [r4, #16]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f20:	e7aa      	b.n	8006e78 <_printf_i+0x148>
 8006f22:	6923      	ldr	r3, [r4, #16]
 8006f24:	4632      	mov	r2, r6
 8006f26:	4649      	mov	r1, r9
 8006f28:	4640      	mov	r0, r8
 8006f2a:	47d0      	blx	sl
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d0ad      	beq.n	8006e8c <_printf_i+0x15c>
 8006f30:	6823      	ldr	r3, [r4, #0]
 8006f32:	079b      	lsls	r3, r3, #30
 8006f34:	d413      	bmi.n	8006f5e <_printf_i+0x22e>
 8006f36:	68e0      	ldr	r0, [r4, #12]
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	4298      	cmp	r0, r3
 8006f3c:	bfb8      	it	lt
 8006f3e:	4618      	movlt	r0, r3
 8006f40:	e7a6      	b.n	8006e90 <_printf_i+0x160>
 8006f42:	2301      	movs	r3, #1
 8006f44:	4632      	mov	r2, r6
 8006f46:	4649      	mov	r1, r9
 8006f48:	4640      	mov	r0, r8
 8006f4a:	47d0      	blx	sl
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	d09d      	beq.n	8006e8c <_printf_i+0x15c>
 8006f50:	3501      	adds	r5, #1
 8006f52:	68e3      	ldr	r3, [r4, #12]
 8006f54:	9903      	ldr	r1, [sp, #12]
 8006f56:	1a5b      	subs	r3, r3, r1
 8006f58:	42ab      	cmp	r3, r5
 8006f5a:	dcf2      	bgt.n	8006f42 <_printf_i+0x212>
 8006f5c:	e7eb      	b.n	8006f36 <_printf_i+0x206>
 8006f5e:	2500      	movs	r5, #0
 8006f60:	f104 0619 	add.w	r6, r4, #25
 8006f64:	e7f5      	b.n	8006f52 <_printf_i+0x222>
 8006f66:	bf00      	nop
 8006f68:	08007529 	.word	0x08007529
 8006f6c:	0800753a 	.word	0x0800753a

08006f70 <__sflush_r>:
 8006f70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f78:	0716      	lsls	r6, r2, #28
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	d454      	bmi.n	800702a <__sflush_r+0xba>
 8006f80:	684b      	ldr	r3, [r1, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	dc02      	bgt.n	8006f8c <__sflush_r+0x1c>
 8006f86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dd48      	ble.n	800701e <__sflush_r+0xae>
 8006f8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d045      	beq.n	800701e <__sflush_r+0xae>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f98:	682f      	ldr	r7, [r5, #0]
 8006f9a:	6a21      	ldr	r1, [r4, #32]
 8006f9c:	602b      	str	r3, [r5, #0]
 8006f9e:	d030      	beq.n	8007002 <__sflush_r+0x92>
 8006fa0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006fa2:	89a3      	ldrh	r3, [r4, #12]
 8006fa4:	0759      	lsls	r1, r3, #29
 8006fa6:	d505      	bpl.n	8006fb4 <__sflush_r+0x44>
 8006fa8:	6863      	ldr	r3, [r4, #4]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006fae:	b10b      	cbz	r3, 8006fb4 <__sflush_r+0x44>
 8006fb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006fb2:	1ad2      	subs	r2, r2, r3
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006fb8:	6a21      	ldr	r1, [r4, #32]
 8006fba:	4628      	mov	r0, r5
 8006fbc:	47b0      	blx	r6
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	d106      	bne.n	8006fd2 <__sflush_r+0x62>
 8006fc4:	6829      	ldr	r1, [r5, #0]
 8006fc6:	291d      	cmp	r1, #29
 8006fc8:	d82b      	bhi.n	8007022 <__sflush_r+0xb2>
 8006fca:	4a2a      	ldr	r2, [pc, #168]	@ (8007074 <__sflush_r+0x104>)
 8006fcc:	410a      	asrs	r2, r1
 8006fce:	07d6      	lsls	r6, r2, #31
 8006fd0:	d427      	bmi.n	8007022 <__sflush_r+0xb2>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6062      	str	r2, [r4, #4]
 8006fd6:	04d9      	lsls	r1, r3, #19
 8006fd8:	6922      	ldr	r2, [r4, #16]
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	d504      	bpl.n	8006fe8 <__sflush_r+0x78>
 8006fde:	1c42      	adds	r2, r0, #1
 8006fe0:	d101      	bne.n	8006fe6 <__sflush_r+0x76>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	b903      	cbnz	r3, 8006fe8 <__sflush_r+0x78>
 8006fe6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fea:	602f      	str	r7, [r5, #0]
 8006fec:	b1b9      	cbz	r1, 800701e <__sflush_r+0xae>
 8006fee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d002      	beq.n	8006ffc <__sflush_r+0x8c>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f7ff fa9a 	bl	8006530 <_free_r>
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8007000:	e00d      	b.n	800701e <__sflush_r+0xae>
 8007002:	2301      	movs	r3, #1
 8007004:	4628      	mov	r0, r5
 8007006:	47b0      	blx	r6
 8007008:	4602      	mov	r2, r0
 800700a:	1c50      	adds	r0, r2, #1
 800700c:	d1c9      	bne.n	8006fa2 <__sflush_r+0x32>
 800700e:	682b      	ldr	r3, [r5, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0c6      	beq.n	8006fa2 <__sflush_r+0x32>
 8007014:	2b1d      	cmp	r3, #29
 8007016:	d001      	beq.n	800701c <__sflush_r+0xac>
 8007018:	2b16      	cmp	r3, #22
 800701a:	d11e      	bne.n	800705a <__sflush_r+0xea>
 800701c:	602f      	str	r7, [r5, #0]
 800701e:	2000      	movs	r0, #0
 8007020:	e022      	b.n	8007068 <__sflush_r+0xf8>
 8007022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007026:	b21b      	sxth	r3, r3
 8007028:	e01b      	b.n	8007062 <__sflush_r+0xf2>
 800702a:	690f      	ldr	r7, [r1, #16]
 800702c:	2f00      	cmp	r7, #0
 800702e:	d0f6      	beq.n	800701e <__sflush_r+0xae>
 8007030:	0793      	lsls	r3, r2, #30
 8007032:	680e      	ldr	r6, [r1, #0]
 8007034:	bf08      	it	eq
 8007036:	694b      	ldreq	r3, [r1, #20]
 8007038:	600f      	str	r7, [r1, #0]
 800703a:	bf18      	it	ne
 800703c:	2300      	movne	r3, #0
 800703e:	eba6 0807 	sub.w	r8, r6, r7
 8007042:	608b      	str	r3, [r1, #8]
 8007044:	f1b8 0f00 	cmp.w	r8, #0
 8007048:	dde9      	ble.n	800701e <__sflush_r+0xae>
 800704a:	6a21      	ldr	r1, [r4, #32]
 800704c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800704e:	4643      	mov	r3, r8
 8007050:	463a      	mov	r2, r7
 8007052:	4628      	mov	r0, r5
 8007054:	47b0      	blx	r6
 8007056:	2800      	cmp	r0, #0
 8007058:	dc08      	bgt.n	800706c <__sflush_r+0xfc>
 800705a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800706c:	4407      	add	r7, r0
 800706e:	eba8 0800 	sub.w	r8, r8, r0
 8007072:	e7e7      	b.n	8007044 <__sflush_r+0xd4>
 8007074:	dfbffffe 	.word	0xdfbffffe

08007078 <_fflush_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	690b      	ldr	r3, [r1, #16]
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	b913      	cbnz	r3, 8007088 <_fflush_r+0x10>
 8007082:	2500      	movs	r5, #0
 8007084:	4628      	mov	r0, r5
 8007086:	bd38      	pop	{r3, r4, r5, pc}
 8007088:	b118      	cbz	r0, 8007092 <_fflush_r+0x1a>
 800708a:	6a03      	ldr	r3, [r0, #32]
 800708c:	b90b      	cbnz	r3, 8007092 <_fflush_r+0x1a>
 800708e:	f7ff f927 	bl	80062e0 <__sinit>
 8007092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f3      	beq.n	8007082 <_fflush_r+0xa>
 800709a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800709c:	07d0      	lsls	r0, r2, #31
 800709e:	d404      	bmi.n	80070aa <_fflush_r+0x32>
 80070a0:	0599      	lsls	r1, r3, #22
 80070a2:	d402      	bmi.n	80070aa <_fflush_r+0x32>
 80070a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070a6:	f7ff fa40 	bl	800652a <__retarget_lock_acquire_recursive>
 80070aa:	4628      	mov	r0, r5
 80070ac:	4621      	mov	r1, r4
 80070ae:	f7ff ff5f 	bl	8006f70 <__sflush_r>
 80070b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80070b4:	07da      	lsls	r2, r3, #31
 80070b6:	4605      	mov	r5, r0
 80070b8:	d4e4      	bmi.n	8007084 <_fflush_r+0xc>
 80070ba:	89a3      	ldrh	r3, [r4, #12]
 80070bc:	059b      	lsls	r3, r3, #22
 80070be:	d4e1      	bmi.n	8007084 <_fflush_r+0xc>
 80070c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80070c2:	f7ff fa33 	bl	800652c <__retarget_lock_release_recursive>
 80070c6:	e7dd      	b.n	8007084 <_fflush_r+0xc>

080070c8 <__swbuf_r>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	460e      	mov	r6, r1
 80070cc:	4614      	mov	r4, r2
 80070ce:	4605      	mov	r5, r0
 80070d0:	b118      	cbz	r0, 80070da <__swbuf_r+0x12>
 80070d2:	6a03      	ldr	r3, [r0, #32]
 80070d4:	b90b      	cbnz	r3, 80070da <__swbuf_r+0x12>
 80070d6:	f7ff f903 	bl	80062e0 <__sinit>
 80070da:	69a3      	ldr	r3, [r4, #24]
 80070dc:	60a3      	str	r3, [r4, #8]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	071a      	lsls	r2, r3, #28
 80070e2:	d501      	bpl.n	80070e8 <__swbuf_r+0x20>
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	b943      	cbnz	r3, 80070fa <__swbuf_r+0x32>
 80070e8:	4621      	mov	r1, r4
 80070ea:	4628      	mov	r0, r5
 80070ec:	f000 f82a 	bl	8007144 <__swsetup_r>
 80070f0:	b118      	cbz	r0, 80070fa <__swbuf_r+0x32>
 80070f2:	f04f 37ff 	mov.w	r7, #4294967295
 80070f6:	4638      	mov	r0, r7
 80070f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070fa:	6823      	ldr	r3, [r4, #0]
 80070fc:	6922      	ldr	r2, [r4, #16]
 80070fe:	1a98      	subs	r0, r3, r2
 8007100:	6963      	ldr	r3, [r4, #20]
 8007102:	b2f6      	uxtb	r6, r6
 8007104:	4283      	cmp	r3, r0
 8007106:	4637      	mov	r7, r6
 8007108:	dc05      	bgt.n	8007116 <__swbuf_r+0x4e>
 800710a:	4621      	mov	r1, r4
 800710c:	4628      	mov	r0, r5
 800710e:	f7ff ffb3 	bl	8007078 <_fflush_r>
 8007112:	2800      	cmp	r0, #0
 8007114:	d1ed      	bne.n	80070f2 <__swbuf_r+0x2a>
 8007116:	68a3      	ldr	r3, [r4, #8]
 8007118:	3b01      	subs	r3, #1
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	6022      	str	r2, [r4, #0]
 8007122:	701e      	strb	r6, [r3, #0]
 8007124:	6962      	ldr	r2, [r4, #20]
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	429a      	cmp	r2, r3
 800712a:	d004      	beq.n	8007136 <__swbuf_r+0x6e>
 800712c:	89a3      	ldrh	r3, [r4, #12]
 800712e:	07db      	lsls	r3, r3, #31
 8007130:	d5e1      	bpl.n	80070f6 <__swbuf_r+0x2e>
 8007132:	2e0a      	cmp	r6, #10
 8007134:	d1df      	bne.n	80070f6 <__swbuf_r+0x2e>
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	f7ff ff9d 	bl	8007078 <_fflush_r>
 800713e:	2800      	cmp	r0, #0
 8007140:	d0d9      	beq.n	80070f6 <__swbuf_r+0x2e>
 8007142:	e7d6      	b.n	80070f2 <__swbuf_r+0x2a>

08007144 <__swsetup_r>:
 8007144:	b538      	push	{r3, r4, r5, lr}
 8007146:	4b29      	ldr	r3, [pc, #164]	@ (80071ec <__swsetup_r+0xa8>)
 8007148:	4605      	mov	r5, r0
 800714a:	6818      	ldr	r0, [r3, #0]
 800714c:	460c      	mov	r4, r1
 800714e:	b118      	cbz	r0, 8007158 <__swsetup_r+0x14>
 8007150:	6a03      	ldr	r3, [r0, #32]
 8007152:	b90b      	cbnz	r3, 8007158 <__swsetup_r+0x14>
 8007154:	f7ff f8c4 	bl	80062e0 <__sinit>
 8007158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715c:	0719      	lsls	r1, r3, #28
 800715e:	d422      	bmi.n	80071a6 <__swsetup_r+0x62>
 8007160:	06da      	lsls	r2, r3, #27
 8007162:	d407      	bmi.n	8007174 <__swsetup_r+0x30>
 8007164:	2209      	movs	r2, #9
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	f04f 30ff 	mov.w	r0, #4294967295
 8007172:	e033      	b.n	80071dc <__swsetup_r+0x98>
 8007174:	0758      	lsls	r0, r3, #29
 8007176:	d512      	bpl.n	800719e <__swsetup_r+0x5a>
 8007178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800717a:	b141      	cbz	r1, 800718e <__swsetup_r+0x4a>
 800717c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007180:	4299      	cmp	r1, r3
 8007182:	d002      	beq.n	800718a <__swsetup_r+0x46>
 8007184:	4628      	mov	r0, r5
 8007186:	f7ff f9d3 	bl	8006530 <_free_r>
 800718a:	2300      	movs	r3, #0
 800718c:	6363      	str	r3, [r4, #52]	@ 0x34
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	2300      	movs	r3, #0
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	6923      	ldr	r3, [r4, #16]
 800719c:	6023      	str	r3, [r4, #0]
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	f043 0308 	orr.w	r3, r3, #8
 80071a4:	81a3      	strh	r3, [r4, #12]
 80071a6:	6923      	ldr	r3, [r4, #16]
 80071a8:	b94b      	cbnz	r3, 80071be <__swsetup_r+0x7a>
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80071b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071b4:	d003      	beq.n	80071be <__swsetup_r+0x7a>
 80071b6:	4621      	mov	r1, r4
 80071b8:	4628      	mov	r0, r5
 80071ba:	f000 f8a5 	bl	8007308 <__smakebuf_r>
 80071be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071c2:	f013 0201 	ands.w	r2, r3, #1
 80071c6:	d00a      	beq.n	80071de <__swsetup_r+0x9a>
 80071c8:	2200      	movs	r2, #0
 80071ca:	60a2      	str	r2, [r4, #8]
 80071cc:	6962      	ldr	r2, [r4, #20]
 80071ce:	4252      	negs	r2, r2
 80071d0:	61a2      	str	r2, [r4, #24]
 80071d2:	6922      	ldr	r2, [r4, #16]
 80071d4:	b942      	cbnz	r2, 80071e8 <__swsetup_r+0xa4>
 80071d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80071da:	d1c5      	bne.n	8007168 <__swsetup_r+0x24>
 80071dc:	bd38      	pop	{r3, r4, r5, pc}
 80071de:	0799      	lsls	r1, r3, #30
 80071e0:	bf58      	it	pl
 80071e2:	6962      	ldrpl	r2, [r4, #20]
 80071e4:	60a2      	str	r2, [r4, #8]
 80071e6:	e7f4      	b.n	80071d2 <__swsetup_r+0x8e>
 80071e8:	2000      	movs	r0, #0
 80071ea:	e7f7      	b.n	80071dc <__swsetup_r+0x98>
 80071ec:	20000054 	.word	0x20000054

080071f0 <memmove>:
 80071f0:	4288      	cmp	r0, r1
 80071f2:	b510      	push	{r4, lr}
 80071f4:	eb01 0402 	add.w	r4, r1, r2
 80071f8:	d902      	bls.n	8007200 <memmove+0x10>
 80071fa:	4284      	cmp	r4, r0
 80071fc:	4623      	mov	r3, r4
 80071fe:	d807      	bhi.n	8007210 <memmove+0x20>
 8007200:	1e43      	subs	r3, r0, #1
 8007202:	42a1      	cmp	r1, r4
 8007204:	d008      	beq.n	8007218 <memmove+0x28>
 8007206:	f811 2b01 	ldrb.w	r2, [r1], #1
 800720a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800720e:	e7f8      	b.n	8007202 <memmove+0x12>
 8007210:	4402      	add	r2, r0
 8007212:	4601      	mov	r1, r0
 8007214:	428a      	cmp	r2, r1
 8007216:	d100      	bne.n	800721a <memmove+0x2a>
 8007218:	bd10      	pop	{r4, pc}
 800721a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800721e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007222:	e7f7      	b.n	8007214 <memmove+0x24>

08007224 <_sbrk_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d06      	ldr	r5, [pc, #24]	@ (8007240 <_sbrk_r+0x1c>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	f7f9 ffe6 	bl	8001200 <_sbrk>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_sbrk_r+0x1a>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_sbrk_r+0x1a>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20000424 	.word	0x20000424

08007244 <memcpy>:
 8007244:	440a      	add	r2, r1
 8007246:	4291      	cmp	r1, r2
 8007248:	f100 33ff 	add.w	r3, r0, #4294967295
 800724c:	d100      	bne.n	8007250 <memcpy+0xc>
 800724e:	4770      	bx	lr
 8007250:	b510      	push	{r4, lr}
 8007252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800725a:	4291      	cmp	r1, r2
 800725c:	d1f9      	bne.n	8007252 <memcpy+0xe>
 800725e:	bd10      	pop	{r4, pc}

08007260 <_realloc_r>:
 8007260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	4680      	mov	r8, r0
 8007266:	4615      	mov	r5, r2
 8007268:	460c      	mov	r4, r1
 800726a:	b921      	cbnz	r1, 8007276 <_realloc_r+0x16>
 800726c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007270:	4611      	mov	r1, r2
 8007272:	f7ff b9c9 	b.w	8006608 <_malloc_r>
 8007276:	b92a      	cbnz	r2, 8007284 <_realloc_r+0x24>
 8007278:	f7ff f95a 	bl	8006530 <_free_r>
 800727c:	2400      	movs	r4, #0
 800727e:	4620      	mov	r0, r4
 8007280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007284:	f000 f89e 	bl	80073c4 <_malloc_usable_size_r>
 8007288:	4285      	cmp	r5, r0
 800728a:	4606      	mov	r6, r0
 800728c:	d802      	bhi.n	8007294 <_realloc_r+0x34>
 800728e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007292:	d8f4      	bhi.n	800727e <_realloc_r+0x1e>
 8007294:	4629      	mov	r1, r5
 8007296:	4640      	mov	r0, r8
 8007298:	f7ff f9b6 	bl	8006608 <_malloc_r>
 800729c:	4607      	mov	r7, r0
 800729e:	2800      	cmp	r0, #0
 80072a0:	d0ec      	beq.n	800727c <_realloc_r+0x1c>
 80072a2:	42b5      	cmp	r5, r6
 80072a4:	462a      	mov	r2, r5
 80072a6:	4621      	mov	r1, r4
 80072a8:	bf28      	it	cs
 80072aa:	4632      	movcs	r2, r6
 80072ac:	f7ff ffca 	bl	8007244 <memcpy>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4640      	mov	r0, r8
 80072b4:	f7ff f93c 	bl	8006530 <_free_r>
 80072b8:	463c      	mov	r4, r7
 80072ba:	e7e0      	b.n	800727e <_realloc_r+0x1e>

080072bc <__swhatbuf_r>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	460c      	mov	r4, r1
 80072c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072c4:	2900      	cmp	r1, #0
 80072c6:	b096      	sub	sp, #88	@ 0x58
 80072c8:	4615      	mov	r5, r2
 80072ca:	461e      	mov	r6, r3
 80072cc:	da0d      	bge.n	80072ea <__swhatbuf_r+0x2e>
 80072ce:	89a3      	ldrh	r3, [r4, #12]
 80072d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072d4:	f04f 0100 	mov.w	r1, #0
 80072d8:	bf14      	ite	ne
 80072da:	2340      	movne	r3, #64	@ 0x40
 80072dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072e0:	2000      	movs	r0, #0
 80072e2:	6031      	str	r1, [r6, #0]
 80072e4:	602b      	str	r3, [r5, #0]
 80072e6:	b016      	add	sp, #88	@ 0x58
 80072e8:	bd70      	pop	{r4, r5, r6, pc}
 80072ea:	466a      	mov	r2, sp
 80072ec:	f000 f848 	bl	8007380 <_fstat_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	dbec      	blt.n	80072ce <__swhatbuf_r+0x12>
 80072f4:	9901      	ldr	r1, [sp, #4]
 80072f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80072fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80072fe:	4259      	negs	r1, r3
 8007300:	4159      	adcs	r1, r3
 8007302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007306:	e7eb      	b.n	80072e0 <__swhatbuf_r+0x24>

08007308 <__smakebuf_r>:
 8007308:	898b      	ldrh	r3, [r1, #12]
 800730a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800730c:	079d      	lsls	r5, r3, #30
 800730e:	4606      	mov	r6, r0
 8007310:	460c      	mov	r4, r1
 8007312:	d507      	bpl.n	8007324 <__smakebuf_r+0x1c>
 8007314:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	2301      	movs	r3, #1
 800731e:	6163      	str	r3, [r4, #20]
 8007320:	b003      	add	sp, #12
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007324:	ab01      	add	r3, sp, #4
 8007326:	466a      	mov	r2, sp
 8007328:	f7ff ffc8 	bl	80072bc <__swhatbuf_r>
 800732c:	9f00      	ldr	r7, [sp, #0]
 800732e:	4605      	mov	r5, r0
 8007330:	4639      	mov	r1, r7
 8007332:	4630      	mov	r0, r6
 8007334:	f7ff f968 	bl	8006608 <_malloc_r>
 8007338:	b948      	cbnz	r0, 800734e <__smakebuf_r+0x46>
 800733a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800733e:	059a      	lsls	r2, r3, #22
 8007340:	d4ee      	bmi.n	8007320 <__smakebuf_r+0x18>
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	f043 0302 	orr.w	r3, r3, #2
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	e7e2      	b.n	8007314 <__smakebuf_r+0xc>
 800734e:	89a3      	ldrh	r3, [r4, #12]
 8007350:	6020      	str	r0, [r4, #0]
 8007352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007356:	81a3      	strh	r3, [r4, #12]
 8007358:	9b01      	ldr	r3, [sp, #4]
 800735a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800735e:	b15b      	cbz	r3, 8007378 <__smakebuf_r+0x70>
 8007360:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007364:	4630      	mov	r0, r6
 8007366:	f000 f81d 	bl	80073a4 <_isatty_r>
 800736a:	b128      	cbz	r0, 8007378 <__smakebuf_r+0x70>
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	f043 0301 	orr.w	r3, r3, #1
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	89a3      	ldrh	r3, [r4, #12]
 800737a:	431d      	orrs	r5, r3
 800737c:	81a5      	strh	r5, [r4, #12]
 800737e:	e7cf      	b.n	8007320 <__smakebuf_r+0x18>

08007380 <_fstat_r>:
 8007380:	b538      	push	{r3, r4, r5, lr}
 8007382:	4d07      	ldr	r5, [pc, #28]	@ (80073a0 <_fstat_r+0x20>)
 8007384:	2300      	movs	r3, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	4611      	mov	r1, r2
 800738c:	602b      	str	r3, [r5, #0]
 800738e:	f7f9 ff0f 	bl	80011b0 <_fstat>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	d102      	bne.n	800739c <_fstat_r+0x1c>
 8007396:	682b      	ldr	r3, [r5, #0]
 8007398:	b103      	cbz	r3, 800739c <_fstat_r+0x1c>
 800739a:	6023      	str	r3, [r4, #0]
 800739c:	bd38      	pop	{r3, r4, r5, pc}
 800739e:	bf00      	nop
 80073a0:	20000424 	.word	0x20000424

080073a4 <_isatty_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4d06      	ldr	r5, [pc, #24]	@ (80073c0 <_isatty_r+0x1c>)
 80073a8:	2300      	movs	r3, #0
 80073aa:	4604      	mov	r4, r0
 80073ac:	4608      	mov	r0, r1
 80073ae:	602b      	str	r3, [r5, #0]
 80073b0:	f7f9 ff0e 	bl	80011d0 <_isatty>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d102      	bne.n	80073be <_isatty_r+0x1a>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	b103      	cbz	r3, 80073be <_isatty_r+0x1a>
 80073bc:	6023      	str	r3, [r4, #0]
 80073be:	bd38      	pop	{r3, r4, r5, pc}
 80073c0:	20000424 	.word	0x20000424

080073c4 <_malloc_usable_size_r>:
 80073c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073c8:	1f18      	subs	r0, r3, #4
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfbc      	itt	lt
 80073ce:	580b      	ldrlt	r3, [r1, r0]
 80073d0:	18c0      	addlt	r0, r0, r3
 80073d2:	4770      	bx	lr

080073d4 <_init>:
 80073d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073d6:	bf00      	nop
 80073d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073da:	bc08      	pop	{r3}
 80073dc:	469e      	mov	lr, r3
 80073de:	4770      	bx	lr

080073e0 <_fini>:
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073e2:	bf00      	nop
 80073e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073e6:	bc08      	pop	{r3}
 80073e8:	469e      	mov	lr, r3
 80073ea:	4770      	bx	lr
