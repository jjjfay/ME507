
Starting_Over.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008100  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08008290  08008290  00009290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800847c  0800847c  0000a0bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800847c  0800847c  0000947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008484  08008484  0000a0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008488  08008488  00009488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  0800848c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f8  200000bc  08008548  0000a0bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006b4  08008548  0000a6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001633d  00000000  00000000  0000a0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c55  00000000  00000000  00020429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001370  00000000  00000000  00023080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f24  00000000  00000000  000243f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000032a1  00000000  00000000  00025314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bc2  00000000  00000000  000285b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001065ae  00000000  00000000  00040177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146725  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000575c  00000000  00000000  00146768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014bec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008278 	.word	0x08008278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	08008278 	.word	0x08008278

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_init>:
/**
 * @brief A function to initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_init(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize the motor driver channels
	start_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 ff6b 	bl	8001448 <start_PWM>

	//initialize the encoder reader channels
	init_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f88a 	bl	8000690 <init_channels>

	//zero the encoder
	zero(p_cont->p_enc);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	685b      	ldr	r3, [r3, #4]
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f8ad 	bl	80006e0 <zero>


}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <controller_deinit>:
/**
 * @brief A function to de-initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_deinit(controller_t* p_cont){
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]

	//de-initialize the motor driver channels
	stop_PWM(p_cont->p_mot);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 ff6c 	bl	8001478 <stop_PWM>

	//de-initialize the encoder reader channels
	deinit_channels(p_cont->p_enc);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f887 	bl	80006b8 <deinit_channels>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <move>:
 * @brief A function to move the controlled motor to the desired position.
 *
 * @param p_cont The controller object to perform the function on.
 */

int32_t move(controller_t* p_cont, int32_t gain){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]


	//The pwm value should range from 0 to 799,999
	//calculate the desired PWM value using the gain and setpoint.

	int32_t curr_pos = get_pos(p_cont->p_enc);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 f899 	bl	80006fa <get_pos>
 80005c8:	60f8      	str	r0, [r7, #12]

	p_cont->p_mot->pwm_val = gain*(p_cont->setpoint - curr_pos);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	68da      	ldr	r2, [r3, #12]
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	1ad2      	subs	r2, r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6839      	ldr	r1, [r7, #0]
 80005d8:	fb01 f202 	mul.w	r2, r1, r2
 80005dc:	601a      	str	r2, [r3, #0]

	//saturation

	if(p_cont->p_mot->pwm_val < 0){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	da19      	bge.n	800061c <move+0x68>

		if(p_cont->p_mot->pwm_val < -3999)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f513 6f7a 	cmn.w	r3, #4000	@ 0xfa0
 80005f2:	dc04      	bgt.n	80005fe <move+0x4a>
			{
				p_cont->p_mot->pwm_val = -3999;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000670 <move+0xbc>)
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	e028      	b.n	8000650 <move+0x9c>
			}
		else if(p_cont->p_mot->pwm_val > gain*-10){
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f06f 0109 	mvn.w	r1, #9
 800060a:	fb01 f303 	mul.w	r3, r1, r3
 800060e:	429a      	cmp	r2, r3
 8000610:	dd1e      	ble.n	8000650 <move+0x9c>

				p_cont->p_mot->pwm_val = 0;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	e019      	b.n	8000650 <move+0x9c>

				}
	}
	else{

		if(p_cont->p_mot->pwm_val > 3999)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000626:	db05      	blt.n	8000634 <move+0x80>
			{
				p_cont->p_mot->pwm_val = 3999;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	e00d      	b.n	8000650 <move+0x9c>
			}
		else if(p_cont->p_mot->pwm_val < gain*10){
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	6819      	ldr	r1, [r3, #0]
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4299      	cmp	r1, r3
 8000646:	da03      	bge.n	8000650 <move+0x9c>

				p_cont->p_mot->pwm_val = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
			}

	}

	//set the duty cycle of the motor
	set_duty(p_cont->p_mot, p_cont->p_mot->pwm_val);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4619      	mov	r1, r3
 800065c:	4610      	mov	r0, r2
 800065e:	f000 ff23 	bl	80014a8 <set_duty>

	//return the pwm_val for monitoring
	return p_cont->p_mot->pwm_val;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681b      	ldr	r3, [r3, #0]

}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	fffff061 	.word	0xfffff061

08000674 <set_setpoint>:
 * @brief A function to set the new controller set point.
 *
 * @param p_cont The controller object to perform the function on.
 * @param new_setpoint The new set point for the controller object.
 */
void set_setpoint(controller_t* p_cont, int32_t new_setpoint){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]

	p_cont->setpoint = new_setpoint;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	683a      	ldr	r2, [r7, #0]
 8000682:	60da      	str	r2, [r3, #12]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <init_channels>:
/**
 * @brief A function to initialize the channels for reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void init_channels(encoder_t* p_enc){
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_1);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f005 f9f0 	bl	8005a84 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_2);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	2104      	movs	r1, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 f9ea 	bl	8005a84 <HAL_TIM_Encoder_Start>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <deinit_channels>:
/**
 * @brief A function to stop the channels from reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void deinit_channels(encoder_t* p_enc){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	HAL_TIM_Encoder_Stop(p_enc->hal_tim,  TIM_CHANNEL_1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f005 fa6a 	bl	8005ba0 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(p_enc->hal_tim,  TIM_CHANNEL_2);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	2104      	movs	r1, #4
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fa64 	bl	8005ba0 <HAL_TIM_Encoder_Stop>

}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <zero>:

/**
 * @brief A function to zero the encoder count.
 */

void zero(encoder_t* p_enc){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	p_enc->mot_pos = 0;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]

}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr

080006fa <get_pos>:
 * @param p_enc The encoder object to perform the function on.
 *
 * @return count The encoder count to be returned.
 */

int32_t get_pos(encoder_t* p_enc){
 80006fa:	b480      	push	{r7}
 80006fc:	b083      	sub	sp, #12
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]

	p_enc->prev_count = p_enc->curr_count;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	691a      	ldr	r2, [r3, #16]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	615a      	str	r2, [r3, #20]
	p_enc->curr_count = (int32_t)(__HAL_TIM_GET_COUNTER(p_enc->hal_tim));
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	611a      	str	r2, [r3, #16]

	p_enc->delta = p_enc->curr_count - p_enc->prev_count;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	691a      	ldr	r2, [r3, #16]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	695b      	ldr	r3, [r3, #20]
 8000720:	1ad2      	subs	r2, r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	619a      	str	r2, [r3, #24]

	//address overflow issues
	if(p_enc->delta >= 32768){
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800072e:	db06      	blt.n	800073e <get_pos+0x44>

		p_enc->delta -= 65536;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f5a3 3280 	sub.w	r2, r3, #65536	@ 0x10000
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	e00a      	b.n	8000754 <get_pos+0x5a>
	}
	else if(p_enc->delta <= -32768){
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000746:	dc05      	bgt.n	8000754 <get_pos+0x5a>

		p_enc->delta += 65536;
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	619a      	str	r2, [r3, #24]
	}

	p_enc->mot_pos += p_enc->delta;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68da      	ldr	r2, [r3, #12]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	441a      	add	r2, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	60da      	str	r2, [r3, #12]


	return p_enc->mot_pos;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	68db      	ldr	r3, [r3, #12]
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
	...

08000774 <task1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Task 1 - SPIN TASK
void task1(void) {
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	static int32_t spin_pos = 0;
	static int32_t spin_pwm = 0;
	static int32_t smyo_av = 0;

	// State 0 - INIT_________________________________________________________________________________________
	if (currentState == 0) {
 8000778:	4b8b      	ldr	r3, [pc, #556]	@ (80009a8 <task1+0x234>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10a      	bne.n	8000796 <task1+0x22>
		//n = sprintf(print_buff,"\n\rTask 1, State 0\n");
		//HAL_UART_Transmit(&huart2,print_buff,n,400);

		//init the motor driver PWM channel and the
		//the encoder channels. Zero the encoder value
		controller_init(&spin_cont);
 8000780:	488a      	ldr	r0, [pc, #552]	@ (80009ac <task1+0x238>)
 8000782:	f7ff feed 	bl	8000560 <controller_init>

		//initialize the motor to be at rest
		set_duty(&spin_mot,0);
 8000786:	2100      	movs	r1, #0
 8000788:	4889      	ldr	r0, [pc, #548]	@ (80009b0 <task1+0x23c>)
 800078a:	f000 fe8d 	bl	80014a8 <set_duty>

		//calibrate the myo sensor by finding average value to use later as
		//threshold
		//smyo_av = find_average(&scali);

		currentState = 1;}
 800078e:	4b86      	ldr	r3, [pc, #536]	@ (80009a8 <task1+0x234>)
 8000790:	2201      	movs	r2, #1
 8000792:	601a      	str	r2, [r3, #0]
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
		HAL_UART_Transmit(&huart2,print_buff,n,400);

		currentState = 1;}
	//_____________________________________________________________________________________________________________
}
 8000794:	e106      	b.n	80009a4 <task1+0x230>
	else if (currentState == 1) {
 8000796:	4b84      	ldr	r3, [pc, #528]	@ (80009a8 <task1+0x234>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d130      	bne.n	8000800 <task1+0x8c>
		n = sprintf(print_buff,"\n\rTask 1, State 1\n");
 800079e:	4985      	ldr	r1, [pc, #532]	@ (80009b4 <task1+0x240>)
 80007a0:	4885      	ldr	r0, [pc, #532]	@ (80009b8 <task1+0x244>)
 80007a2:	f007 f8c9 	bl	8007938 <siprintf>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4a84      	ldr	r2, [pc, #528]	@ (80009bc <task1+0x248>)
 80007aa:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 80007ac:	4b83      	ldr	r3, [pc, #524]	@ (80009bc <task1+0x248>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80007b6:	4980      	ldr	r1, [pc, #512]	@ (80009b8 <task1+0x244>)
 80007b8:	4881      	ldr	r0, [pc, #516]	@ (80009c0 <task1+0x24c>)
 80007ba:	f006 fb65 	bl	8006e88 <HAL_UART_Transmit>
		smyo_curr = read_current(&smyo);
 80007be:	4881      	ldr	r0, [pc, #516]	@ (80009c4 <task1+0x250>)
 80007c0:	f000 ffea 	bl	8001798 <read_current>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b7f      	ldr	r3, [pc, #508]	@ (80009c8 <task1+0x254>)
 80007ca:	601a      	str	r2, [r3, #0]
			if(smyo_curr > 3000){
 80007cc:	4b7e      	ldr	r3, [pc, #504]	@ (80009c8 <task1+0x254>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80007d4:	4293      	cmp	r3, r2
 80007d6:	dd06      	ble.n	80007e6 <task1+0x72>
				smyo_dir = 1;
 80007d8:	4b7c      	ldr	r3, [pc, #496]	@ (80009cc <task1+0x258>)
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
				currentState = 2;
 80007de:	4b72      	ldr	r3, [pc, #456]	@ (80009a8 <task1+0x234>)
 80007e0:	2202      	movs	r2, #2
 80007e2:	601a      	str	r2, [r3, #0]
}
 80007e4:	e0de      	b.n	80009a4 <task1+0x230>
			else if(smyo_curr < 1000){
 80007e6:	4b78      	ldr	r3, [pc, #480]	@ (80009c8 <task1+0x254>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007ee:	f280 80d9 	bge.w	80009a4 <task1+0x230>
				smyo_dir = 0;
 80007f2:	4b76      	ldr	r3, [pc, #472]	@ (80009cc <task1+0x258>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
				currentState = 2;
 80007f8:	4b6b      	ldr	r3, [pc, #428]	@ (80009a8 <task1+0x234>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	e0d1      	b.n	80009a4 <task1+0x230>
	else if (currentState == 2) {
 8000800:	4b69      	ldr	r3, [pc, #420]	@ (80009a8 <task1+0x234>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2b02      	cmp	r3, #2
 8000806:	f040 80b9 	bne.w	800097c <task1+0x208>
		spin_pos = get_pos(&spin_enc);
 800080a:	4871      	ldr	r0, [pc, #452]	@ (80009d0 <task1+0x25c>)
 800080c:	f7ff ff75 	bl	80006fa <get_pos>
 8000810:	4603      	mov	r3, r0
 8000812:	4a70      	ldr	r2, [pc, #448]	@ (80009d4 <task1+0x260>)
 8000814:	6013      	str	r3, [r2, #0]
		n = sprintf(print_buff,"\n\rThe motor position is: %d\n", spin_pos);
 8000816:	4b6f      	ldr	r3, [pc, #444]	@ (80009d4 <task1+0x260>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	496e      	ldr	r1, [pc, #440]	@ (80009d8 <task1+0x264>)
 800081e:	4866      	ldr	r0, [pc, #408]	@ (80009b8 <task1+0x244>)
 8000820:	f007 f88a 	bl	8007938 <siprintf>
 8000824:	4603      	mov	r3, r0
 8000826:	4a65      	ldr	r2, [pc, #404]	@ (80009bc <task1+0x248>)
 8000828:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 800082a:	4b64      	ldr	r3, [pc, #400]	@ (80009bc <task1+0x248>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	b29a      	uxth	r2, r3
 8000830:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000834:	4960      	ldr	r1, [pc, #384]	@ (80009b8 <task1+0x244>)
 8000836:	4862      	ldr	r0, [pc, #392]	@ (80009c0 <task1+0x24c>)
 8000838:	f006 fb26 	bl	8006e88 <HAL_UART_Transmit>
		if(smyo_dir == 1){
 800083c:	4b63      	ldr	r3, [pc, #396]	@ (80009cc <task1+0x258>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d14d      	bne.n	80008e0 <task1+0x16c>
			n = sprintf(print_buff,"\n\rThe setpoint is 465");
 8000844:	4965      	ldr	r1, [pc, #404]	@ (80009dc <task1+0x268>)
 8000846:	485c      	ldr	r0, [pc, #368]	@ (80009b8 <task1+0x244>)
 8000848:	f007 f876 	bl	8007938 <siprintf>
 800084c:	4603      	mov	r3, r0
 800084e:	4a5b      	ldr	r2, [pc, #364]	@ (80009bc <task1+0x248>)
 8000850:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000852:	4b5a      	ldr	r3, [pc, #360]	@ (80009bc <task1+0x248>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	b29a      	uxth	r2, r3
 8000858:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800085c:	4956      	ldr	r1, [pc, #344]	@ (80009b8 <task1+0x244>)
 800085e:	4858      	ldr	r0, [pc, #352]	@ (80009c0 <task1+0x24c>)
 8000860:	f006 fb12 	bl	8006e88 <HAL_UART_Transmit>
			spin_sp = 200;
 8000864:	4b5e      	ldr	r3, [pc, #376]	@ (80009e0 <task1+0x26c>)
 8000866:	22c8      	movs	r2, #200	@ 0xc8
 8000868:	601a      	str	r2, [r3, #0]
			if(abs(spin_pos-spin_sp)<10){
 800086a:	4b5a      	ldr	r3, [pc, #360]	@ (80009d4 <task1+0x260>)
 800086c:	681a      	ldr	r2, [r3, #0]
 800086e:	4b5c      	ldr	r3, [pc, #368]	@ (80009e0 <task1+0x26c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	1ad3      	subs	r3, r2, r3
 8000874:	f113 0f09 	cmn.w	r3, #9
 8000878:	db11      	blt.n	800089e <task1+0x12a>
 800087a:	4b56      	ldr	r3, [pc, #344]	@ (80009d4 <task1+0x260>)
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	4b58      	ldr	r3, [pc, #352]	@ (80009e0 <task1+0x26c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	2b09      	cmp	r3, #9
 8000886:	dc0a      	bgt.n	800089e <task1+0x12a>
				currentState = 1;
 8000888:	4b47      	ldr	r3, [pc, #284]	@ (80009a8 <task1+0x234>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
				set_duty(&spin_mot,0);
 800088e:	2100      	movs	r1, #0
 8000890:	4847      	ldr	r0, [pc, #284]	@ (80009b0 <task1+0x23c>)
 8000892:	f000 fe09 	bl	80014a8 <set_duty>
				spin_pos = 200;
 8000896:	4b4f      	ldr	r3, [pc, #316]	@ (80009d4 <task1+0x260>)
 8000898:	22c8      	movs	r2, #200	@ 0xc8
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	e082      	b.n	80009a4 <task1+0x230>
				 set_setpoint(&spin_cont, spin_sp);
 800089e:	4b50      	ldr	r3, [pc, #320]	@ (80009e0 <task1+0x26c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4619      	mov	r1, r3
 80008a4:	4841      	ldr	r0, [pc, #260]	@ (80009ac <task1+0x238>)
 80008a6:	f7ff fee5 	bl	8000674 <set_setpoint>
				 spin_pwm = move(&spin_cont,1);
 80008aa:	2101      	movs	r1, #1
 80008ac:	483f      	ldr	r0, [pc, #252]	@ (80009ac <task1+0x238>)
 80008ae:	f7ff fe81 	bl	80005b4 <move>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a4b      	ldr	r2, [pc, #300]	@ (80009e4 <task1+0x270>)
 80008b6:	6013      	str	r3, [r2, #0]
				 n = sprintf(print_buff,"\n\rThe motor pwm value is: %d\n", spin_pwm);
 80008b8:	4b4a      	ldr	r3, [pc, #296]	@ (80009e4 <task1+0x270>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	494a      	ldr	r1, [pc, #296]	@ (80009e8 <task1+0x274>)
 80008c0:	483d      	ldr	r0, [pc, #244]	@ (80009b8 <task1+0x244>)
 80008c2:	f007 f839 	bl	8007938 <siprintf>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a3c      	ldr	r2, [pc, #240]	@ (80009bc <task1+0x248>)
 80008ca:	6013      	str	r3, [r2, #0]
				 HAL_UART_Transmit(&huart2,print_buff,n,400);
 80008cc:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <task1+0x248>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008d6:	4938      	ldr	r1, [pc, #224]	@ (80009b8 <task1+0x244>)
 80008d8:	4839      	ldr	r0, [pc, #228]	@ (80009c0 <task1+0x24c>)
 80008da:	f006 fad5 	bl	8006e88 <HAL_UART_Transmit>
}
 80008de:	e061      	b.n	80009a4 <task1+0x230>
			spin_sp = 0;
 80008e0:	4b3f      	ldr	r3, [pc, #252]	@ (80009e0 <task1+0x26c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
			n = sprintf(print_buff,"\n\rThe setpoint is 0");
 80008e6:	4941      	ldr	r1, [pc, #260]	@ (80009ec <task1+0x278>)
 80008e8:	4833      	ldr	r0, [pc, #204]	@ (80009b8 <task1+0x244>)
 80008ea:	f007 f825 	bl	8007938 <siprintf>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a32      	ldr	r2, [pc, #200]	@ (80009bc <task1+0x248>)
 80008f2:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 80008f4:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <task1+0x248>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
 80008fa:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008fe:	492e      	ldr	r1, [pc, #184]	@ (80009b8 <task1+0x244>)
 8000900:	482f      	ldr	r0, [pc, #188]	@ (80009c0 <task1+0x24c>)
 8000902:	f006 fac1 	bl	8006e88 <HAL_UART_Transmit>
			if(abs(spin_pos-spin_sp)<10){
 8000906:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <task1+0x260>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b35      	ldr	r3, [pc, #212]	@ (80009e0 <task1+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1ad3      	subs	r3, r2, r3
 8000910:	f113 0f09 	cmn.w	r3, #9
 8000914:	db11      	blt.n	800093a <task1+0x1c6>
 8000916:	4b2f      	ldr	r3, [pc, #188]	@ (80009d4 <task1+0x260>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b31      	ldr	r3, [pc, #196]	@ (80009e0 <task1+0x26c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b09      	cmp	r3, #9
 8000922:	dc0a      	bgt.n	800093a <task1+0x1c6>
				currentState = 1;
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <task1+0x234>)
 8000926:	2201      	movs	r2, #1
 8000928:	601a      	str	r2, [r3, #0]
				set_duty(&spin_mot,0);
 800092a:	2100      	movs	r1, #0
 800092c:	4820      	ldr	r0, [pc, #128]	@ (80009b0 <task1+0x23c>)
 800092e:	f000 fdbb 	bl	80014a8 <set_duty>
				spin_pos = 0;
 8000932:	4b28      	ldr	r3, [pc, #160]	@ (80009d4 <task1+0x260>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	e034      	b.n	80009a4 <task1+0x230>
				set_setpoint(&spin_cont, spin_sp);
 800093a:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <task1+0x26c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4619      	mov	r1, r3
 8000940:	481a      	ldr	r0, [pc, #104]	@ (80009ac <task1+0x238>)
 8000942:	f7ff fe97 	bl	8000674 <set_setpoint>
				spin_pwm = move(&spin_cont,1);
 8000946:	2101      	movs	r1, #1
 8000948:	4818      	ldr	r0, [pc, #96]	@ (80009ac <task1+0x238>)
 800094a:	f7ff fe33 	bl	80005b4 <move>
 800094e:	4603      	mov	r3, r0
 8000950:	4a24      	ldr	r2, [pc, #144]	@ (80009e4 <task1+0x270>)
 8000952:	6013      	str	r3, [r2, #0]
				n = sprintf(print_buff,"\n\rThe motor pwm value is: %d\n", spin_pwm);
 8000954:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <task1+0x270>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	461a      	mov	r2, r3
 800095a:	4923      	ldr	r1, [pc, #140]	@ (80009e8 <task1+0x274>)
 800095c:	4816      	ldr	r0, [pc, #88]	@ (80009b8 <task1+0x244>)
 800095e:	f006 ffeb 	bl	8007938 <siprintf>
 8000962:	4603      	mov	r3, r0
 8000964:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <task1+0x248>)
 8000966:	6013      	str	r3, [r2, #0]
				HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000968:	4b14      	ldr	r3, [pc, #80]	@ (80009bc <task1+0x248>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	b29a      	uxth	r2, r3
 800096e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000972:	4911      	ldr	r1, [pc, #68]	@ (80009b8 <task1+0x244>)
 8000974:	4812      	ldr	r0, [pc, #72]	@ (80009c0 <task1+0x24c>)
 8000976:	f006 fa87 	bl	8006e88 <HAL_UART_Transmit>
}
 800097a:	e013      	b.n	80009a4 <task1+0x230>
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
 800097c:	491c      	ldr	r1, [pc, #112]	@ (80009f0 <task1+0x27c>)
 800097e:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <task1+0x244>)
 8000980:	f006 ffda 	bl	8007938 <siprintf>
 8000984:	4603      	mov	r3, r0
 8000986:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <task1+0x248>)
 8000988:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 800098a:	4b0c      	ldr	r3, [pc, #48]	@ (80009bc <task1+0x248>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	b29a      	uxth	r2, r3
 8000990:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000994:	4908      	ldr	r1, [pc, #32]	@ (80009b8 <task1+0x244>)
 8000996:	480a      	ldr	r0, [pc, #40]	@ (80009c0 <task1+0x24c>)
 8000998:	f006 fa76 	bl	8006e88 <HAL_UART_Transmit>
		currentState = 1;}
 800099c:	4b02      	ldr	r3, [pc, #8]	@ (80009a8 <task1+0x234>)
 800099e:	2201      	movs	r2, #1
 80009a0:	601a      	str	r2, [r3, #0]
}
 80009a2:	e7ff      	b.n	80009a4 <task1+0x230>
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2000035c 	.word	0x2000035c
 80009ac:	2000003c 	.word	0x2000003c
 80009b0:	2000001c 	.word	0x2000001c
 80009b4:	08008290 	.word	0x08008290
 80009b8:	20000360 	.word	0x20000360
 80009bc:	200003f8 	.word	0x200003f8
 80009c0:	200002d0 	.word	0x200002d0
 80009c4:	2000004c 	.word	0x2000004c
 80009c8:	200003fc 	.word	0x200003fc
 80009cc:	20000400 	.word	0x20000400
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000404 	.word	0x20000404
 80009d8:	080082a4 	.word	0x080082a4
 80009dc:	080082c4 	.word	0x080082c4
 80009e0:	20000408 	.word	0x20000408
 80009e4:	2000040c 	.word	0x2000040c
 80009e8:	080082dc 	.word	0x080082dc
 80009ec:	080082fc 	.word	0x080082fc
 80009f0:	08008310 	.word	0x08008310

080009f4 <task2>:

// Task 2 - HAND TASK
void task2(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	static int32_t hand_pos = 0;
	static int32_t hmyo_av = 0;
	static int32_t hand_count = 0;

	// State 0 - INIT
	if (currentState == 0) {
 80009f8:	4b7e      	ldr	r3, [pc, #504]	@ (8000bf4 <task2+0x200>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d11a      	bne.n	8000a36 <task2+0x42>

		n = sprintf(print_buff,"\n\rTask 2, State 0\n");
 8000a00:	497d      	ldr	r1, [pc, #500]	@ (8000bf8 <task2+0x204>)
 8000a02:	487e      	ldr	r0, [pc, #504]	@ (8000bfc <task2+0x208>)
 8000a04:	f006 ff98 	bl	8007938 <siprintf>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	4a7d      	ldr	r2, [pc, #500]	@ (8000c00 <task2+0x20c>)
 8000a0c:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000a0e:	4b7c      	ldr	r3, [pc, #496]	@ (8000c00 <task2+0x20c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a18:	4978      	ldr	r1, [pc, #480]	@ (8000bfc <task2+0x208>)
 8000a1a:	487a      	ldr	r0, [pc, #488]	@ (8000c04 <task2+0x210>)
 8000a1c:	f006 fa34 	bl	8006e88 <HAL_UART_Transmit>

		//init the motor driver PWM channels
		start_PWM(&hand_mot);
 8000a20:	4879      	ldr	r0, [pc, #484]	@ (8000c08 <task2+0x214>)
 8000a22:	f000 fd11 	bl	8001448 <start_PWM>

		//initialize the motor to be at rest
		set_duty(&hand_mot,0);
 8000a26:	2100      	movs	r1, #0
 8000a28:	4877      	ldr	r0, [pc, #476]	@ (8000c08 <task2+0x214>)
 8000a2a:	f000 fd3d 	bl	80014a8 <set_duty>

		//calibrate the myo values?

		currentState = 1;}
 8000a2e:	4b71      	ldr	r3, [pc, #452]	@ (8000bf4 <task2+0x200>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
		HAL_UART_Transmit(&huart2,print_buff,n,400);

		currentState = 1;}
}
 8000a34:	e0dc      	b.n	8000bf0 <task2+0x1fc>
	else if (currentState == 1) {
 8000a36:	4b6f      	ldr	r3, [pc, #444]	@ (8000bf4 <task2+0x200>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d143      	bne.n	8000ac6 <task2+0xd2>
		n = sprintf(print_buff,"\n\rTask 2, State 1\n");
 8000a3e:	4973      	ldr	r1, [pc, #460]	@ (8000c0c <task2+0x218>)
 8000a40:	486e      	ldr	r0, [pc, #440]	@ (8000bfc <task2+0x208>)
 8000a42:	f006 ff79 	bl	8007938 <siprintf>
 8000a46:	4603      	mov	r3, r0
 8000a48:	4a6d      	ldr	r2, [pc, #436]	@ (8000c00 <task2+0x20c>)
 8000a4a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000a4c:	4b6c      	ldr	r3, [pc, #432]	@ (8000c00 <task2+0x20c>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a56:	4969      	ldr	r1, [pc, #420]	@ (8000bfc <task2+0x208>)
 8000a58:	486a      	ldr	r0, [pc, #424]	@ (8000c04 <task2+0x210>)
 8000a5a:	f006 fa15 	bl	8006e88 <HAL_UART_Transmit>
		hmyo_curr = read_current(&hmyo);
 8000a5e:	486c      	ldr	r0, [pc, #432]	@ (8000c10 <task2+0x21c>)
 8000a60:	f000 fe9a 	bl	8001798 <read_current>
 8000a64:	4603      	mov	r3, r0
 8000a66:	461a      	mov	r2, r3
 8000a68:	4b6a      	ldr	r3, [pc, #424]	@ (8000c14 <task2+0x220>)
 8000a6a:	601a      	str	r2, [r3, #0]
		n = sprintf(print_buff,"\n\rThe myo value is : %d\n", hmyo_curr);
 8000a6c:	4b69      	ldr	r3, [pc, #420]	@ (8000c14 <task2+0x220>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	4969      	ldr	r1, [pc, #420]	@ (8000c18 <task2+0x224>)
 8000a74:	4861      	ldr	r0, [pc, #388]	@ (8000bfc <task2+0x208>)
 8000a76:	f006 ff5f 	bl	8007938 <siprintf>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	4a60      	ldr	r2, [pc, #384]	@ (8000c00 <task2+0x20c>)
 8000a7e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000a80:	4b5f      	ldr	r3, [pc, #380]	@ (8000c00 <task2+0x20c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a8a:	495c      	ldr	r1, [pc, #368]	@ (8000bfc <task2+0x208>)
 8000a8c:	485d      	ldr	r0, [pc, #372]	@ (8000c04 <task2+0x210>)
 8000a8e:	f006 f9fb 	bl	8006e88 <HAL_UART_Transmit>
		if(hmyo_curr > 3000){
 8000a92:	4b60      	ldr	r3, [pc, #384]	@ (8000c14 <task2+0x220>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	dd06      	ble.n	8000aac <task2+0xb8>
						hmyo_dir = 1;
 8000a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8000c1c <task2+0x228>)
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	601a      	str	r2, [r3, #0]
						currentState = 2;
 8000aa4:	4b53      	ldr	r3, [pc, #332]	@ (8000bf4 <task2+0x200>)
 8000aa6:	2202      	movs	r2, #2
 8000aa8:	601a      	str	r2, [r3, #0]
}
 8000aaa:	e0a1      	b.n	8000bf0 <task2+0x1fc>
					else if(hmyo_curr < 1000){
 8000aac:	4b59      	ldr	r3, [pc, #356]	@ (8000c14 <task2+0x220>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ab4:	f280 809c 	bge.w	8000bf0 <task2+0x1fc>
						hmyo_dir = 0;
 8000ab8:	4b58      	ldr	r3, [pc, #352]	@ (8000c1c <task2+0x228>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
						currentState = 2;
 8000abe:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf4 <task2+0x200>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	e094      	b.n	8000bf0 <task2+0x1fc>
	else if (currentState == 2) {
 8000ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf4 <task2+0x200>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d17d      	bne.n	8000bca <task2+0x1d6>
		n = sprintf(print_buff,"\n\rTask 2, State 2\n");
 8000ace:	4954      	ldr	r1, [pc, #336]	@ (8000c20 <task2+0x22c>)
 8000ad0:	484a      	ldr	r0, [pc, #296]	@ (8000bfc <task2+0x208>)
 8000ad2:	f006 ff31 	bl	8007938 <siprintf>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a49      	ldr	r2, [pc, #292]	@ (8000c00 <task2+0x20c>)
 8000ada:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000adc:	4b48      	ldr	r3, [pc, #288]	@ (8000c00 <task2+0x20c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000ae6:	4945      	ldr	r1, [pc, #276]	@ (8000bfc <task2+0x208>)
 8000ae8:	4846      	ldr	r0, [pc, #280]	@ (8000c04 <task2+0x210>)
 8000aea:	f006 f9cd 	bl	8006e88 <HAL_UART_Transmit>
		if(hmyo_dir == 1 && hand_pos == 0){
 8000aee:	4b4b      	ldr	r3, [pc, #300]	@ (8000c1c <task2+0x228>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d130      	bne.n	8000b58 <task2+0x164>
 8000af6:	4b4b      	ldr	r3, [pc, #300]	@ (8000c24 <task2+0x230>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d12c      	bne.n	8000b58 <task2+0x164>
			n = sprintf(print_buff,"\n\rOpen Hand");
 8000afe:	494a      	ldr	r1, [pc, #296]	@ (8000c28 <task2+0x234>)
 8000b00:	483e      	ldr	r0, [pc, #248]	@ (8000bfc <task2+0x208>)
 8000b02:	f006 ff19 	bl	8007938 <siprintf>
 8000b06:	4603      	mov	r3, r0
 8000b08:	4a3d      	ldr	r2, [pc, #244]	@ (8000c00 <task2+0x20c>)
 8000b0a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000b0c:	4b3c      	ldr	r3, [pc, #240]	@ (8000c00 <task2+0x20c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	b29a      	uxth	r2, r3
 8000b12:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b16:	4939      	ldr	r1, [pc, #228]	@ (8000bfc <task2+0x208>)
 8000b18:	483a      	ldr	r0, [pc, #232]	@ (8000c04 <task2+0x210>)
 8000b1a:	f006 f9b5 	bl	8006e88 <HAL_UART_Transmit>
			if(hand_count > 15){
 8000b1e:	4b43      	ldr	r3, [pc, #268]	@ (8000c2c <task2+0x238>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	dd0e      	ble.n	8000b44 <task2+0x150>
				currentState = 1;
 8000b26:	4b33      	ldr	r3, [pc, #204]	@ (8000bf4 <task2+0x200>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	601a      	str	r2, [r3, #0]
				set_duty(&hand_mot,0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4836      	ldr	r0, [pc, #216]	@ (8000c08 <task2+0x214>)
 8000b30:	f000 fcba 	bl	80014a8 <set_duty>
				hand_pos = 1000;
 8000b34:	4b3b      	ldr	r3, [pc, #236]	@ (8000c24 <task2+0x230>)
 8000b36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000b3a:	601a      	str	r2, [r3, #0]
				hand_count = 0;
 8000b3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c2c <task2+0x238>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
			if(hand_count > 15){
 8000b42:	e03e      	b.n	8000bc2 <task2+0x1ce>
				set_duty(&hand_mot,1);
 8000b44:	2101      	movs	r1, #1
 8000b46:	4830      	ldr	r0, [pc, #192]	@ (8000c08 <task2+0x214>)
 8000b48:	f000 fcae 	bl	80014a8 <set_duty>
				hand_count++;
 8000b4c:	4b37      	ldr	r3, [pc, #220]	@ (8000c2c <task2+0x238>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a36      	ldr	r2, [pc, #216]	@ (8000c2c <task2+0x238>)
 8000b54:	6013      	str	r3, [r2, #0]
			if(hand_count > 15){
 8000b56:	e034      	b.n	8000bc2 <task2+0x1ce>
		else if(hmyo_dir ==0 && hand_pos == 1000){
 8000b58:	4b30      	ldr	r3, [pc, #192]	@ (8000c1c <task2+0x228>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d130      	bne.n	8000bc2 <task2+0x1ce>
 8000b60:	4b30      	ldr	r3, [pc, #192]	@ (8000c24 <task2+0x230>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b68:	d12b      	bne.n	8000bc2 <task2+0x1ce>
			n = sprintf(print_buff,"\n\rClose Hand");
 8000b6a:	4931      	ldr	r1, [pc, #196]	@ (8000c30 <task2+0x23c>)
 8000b6c:	4823      	ldr	r0, [pc, #140]	@ (8000bfc <task2+0x208>)
 8000b6e:	f006 fee3 	bl	8007938 <siprintf>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4a22      	ldr	r2, [pc, #136]	@ (8000c00 <task2+0x20c>)
 8000b76:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000b78:	4b21      	ldr	r3, [pc, #132]	@ (8000c00 <task2+0x20c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	b29a      	uxth	r2, r3
 8000b7e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b82:	491e      	ldr	r1, [pc, #120]	@ (8000bfc <task2+0x208>)
 8000b84:	481f      	ldr	r0, [pc, #124]	@ (8000c04 <task2+0x210>)
 8000b86:	f006 f97f 	bl	8006e88 <HAL_UART_Transmit>
			if(hand_count > 20){
 8000b8a:	4b28      	ldr	r3, [pc, #160]	@ (8000c2c <task2+0x238>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	2b14      	cmp	r3, #20
 8000b90:	dd0d      	ble.n	8000bae <task2+0x1ba>
					currentState = 1;
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <task2+0x200>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
					set_duty(&hand_mot,0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	481b      	ldr	r0, [pc, #108]	@ (8000c08 <task2+0x214>)
 8000b9c:	f000 fc84 	bl	80014a8 <set_duty>
					hand_pos = 0;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	@ (8000c24 <task2+0x230>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
					hand_count = 0;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <task2+0x238>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	e009      	b.n	8000bc2 <task2+0x1ce>
					set_duty(&hand_mot,-3);
 8000bae:	f06f 0102 	mvn.w	r1, #2
 8000bb2:	4815      	ldr	r0, [pc, #84]	@ (8000c08 <task2+0x214>)
 8000bb4:	f000 fc78 	bl	80014a8 <set_duty>
					hand_count++;
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <task2+0x238>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <task2+0x238>)
 8000bc0:	6013      	str	r3, [r2, #0]
		currentState = 1;
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <task2+0x200>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]
}
 8000bc8:	e012      	b.n	8000bf0 <task2+0x1fc>
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
 8000bca:	491a      	ldr	r1, [pc, #104]	@ (8000c34 <task2+0x240>)
 8000bcc:	480b      	ldr	r0, [pc, #44]	@ (8000bfc <task2+0x208>)
 8000bce:	f006 feb3 	bl	8007938 <siprintf>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <task2+0x20c>)
 8000bd6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000bd8:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <task2+0x20c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000be2:	4906      	ldr	r1, [pc, #24]	@ (8000bfc <task2+0x208>)
 8000be4:	4807      	ldr	r0, [pc, #28]	@ (8000c04 <task2+0x210>)
 8000be6:	f006 f94f 	bl	8006e88 <HAL_UART_Transmit>
		currentState = 1;}
 8000bea:	4b02      	ldr	r3, [pc, #8]	@ (8000bf4 <task2+0x200>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	601a      	str	r2, [r3, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20000410 	.word	0x20000410
 8000bf8:	0800833c 	.word	0x0800833c
 8000bfc:	20000414 	.word	0x20000414
 8000c00:	200004ac 	.word	0x200004ac
 8000c04:	200002d0 	.word	0x200002d0
 8000c08:	2000002c 	.word	0x2000002c
 8000c0c:	08008350 	.word	0x08008350
 8000c10:	20000054 	.word	0x20000054
 8000c14:	200004b0 	.word	0x200004b0
 8000c18:	08008364 	.word	0x08008364
 8000c1c:	200004b4 	.word	0x200004b4
 8000c20:	08008380 	.word	0x08008380
 8000c24:	200004b8 	.word	0x200004b8
 8000c28:	08008394 	.word	0x08008394
 8000c2c:	200004bc 	.word	0x200004bc
 8000c30:	080083a0 	.word	0x080083a0
 8000c34:	08008310 	.word	0x08008310

08000c38 <task3>:

// Task 3 - WIRELESS E STOP TASK___________________________________________________________________________________
void task3(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT__________________________________________________________________
	if (currentState == 0) {
 8000c3c:	4b27      	ldr	r3, [pc, #156]	@ (8000cdc <task3+0xa4>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10b      	bne.n	8000c5c <task3+0x24>

		//n = sprintf(print_buff,"\n\rTask 3, State 0\n");
		//HAL_UART_Transmit(&huart2,print_buff,n,400);

		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4826      	ldr	r0, [pc, #152]	@ (8000ce0 <task3+0xa8>)
 8000c48:	f004 fd2c 	bl	80056a4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_2);
 8000c4c:	2104      	movs	r1, #4
 8000c4e:	4824      	ldr	r0, [pc, #144]	@ (8000ce0 <task3+0xa8>)
 8000c50:	f004 fd28 	bl	80056a4 <HAL_TIM_IC_Start_IT>


		currentState = 1;}
 8000c54:	4b21      	ldr	r3, [pc, #132]	@ (8000cdc <task3+0xa4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;
	}
}
 8000c5a:	e03d      	b.n	8000cd8 <task3+0xa0>
	else if (currentState == 1) {
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <task3+0xa4>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d10c      	bne.n	8000c7e <task3+0x46>
		if(check_delta(radio_pulse) == 1)
 8000c64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce4 <task3+0xac>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fdb9 	bl	80017e2 <check_delta>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d130      	bne.n	8000cd8 <task3+0xa0>
				currentState = 2;
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <task3+0xa4>)
 8000c78:	2202      	movs	r2, #2
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	e02c      	b.n	8000cd8 <task3+0xa0>
	else if (currentState == 2) {
 8000c7e:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <task3+0xa4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d11e      	bne.n	8000cc4 <task3+0x8c>
		n = sprintf(print_buff,"\n\rTask 3, State 2 EMERGENCY STOP\n");
 8000c86:	4918      	ldr	r1, [pc, #96]	@ (8000ce8 <task3+0xb0>)
 8000c88:	4818      	ldr	r0, [pc, #96]	@ (8000cec <task3+0xb4>)
 8000c8a:	f006 fe55 	bl	8007938 <siprintf>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a17      	ldr	r2, [pc, #92]	@ (8000cf0 <task3+0xb8>)
 8000c92:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <task3+0xb8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000c9e:	4913      	ldr	r1, [pc, #76]	@ (8000cec <task3+0xb4>)
 8000ca0:	4814      	ldr	r0, [pc, #80]	@ (8000cf4 <task3+0xbc>)
 8000ca2:	f006 f8f1 	bl	8006e88 <HAL_UART_Transmit>
		set_duty(&spin_mot,0);
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4813      	ldr	r0, [pc, #76]	@ (8000cf8 <task3+0xc0>)
 8000caa:	f000 fbfd 	bl	80014a8 <set_duty>
		controller_deinit(&spin_cont);
 8000cae:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <task3+0xc4>)
 8000cb0:	f7ff fc6d 	bl	800058e <controller_deinit>
		set_duty(&hand_mot,0);
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4812      	ldr	r0, [pc, #72]	@ (8000d00 <task3+0xc8>)
 8000cb8:	f000 fbf6 	bl	80014a8 <set_duty>
		stop_PWM(&hand_mot);
 8000cbc:	4810      	ldr	r0, [pc, #64]	@ (8000d00 <task3+0xc8>)
 8000cbe:	f000 fbdb 	bl	8001478 <stop_PWM>
}
 8000cc2:	e009      	b.n	8000cd8 <task3+0xa0>
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
 8000cc4:	490f      	ldr	r1, [pc, #60]	@ (8000d04 <task3+0xcc>)
 8000cc6:	4809      	ldr	r0, [pc, #36]	@ (8000cec <task3+0xb4>)
 8000cc8:	f006 fe36 	bl	8007938 <siprintf>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4a08      	ldr	r2, [pc, #32]	@ (8000cf0 <task3+0xb8>)
 8000cd0:	6013      	str	r3, [r2, #0]
		currentState = 1;
 8000cd2:	4b02      	ldr	r3, [pc, #8]	@ (8000cdc <task3+0xa4>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200004c0 	.word	0x200004c0
 8000ce0:	200001a0 	.word	0x200001a0
 8000ce4:	2000005c 	.word	0x2000005c
 8000ce8:	080083b0 	.word	0x080083b0
 8000cec:	200004c4 	.word	0x200004c4
 8000cf0:	2000055c 	.word	0x2000055c
 8000cf4:	200002d0 	.word	0x200002d0
 8000cf8:	2000001c 	.word	0x2000001c
 8000cfc:	2000003c 	.word	0x2000003c
 8000d00:	2000002c 	.word	0x2000002c
 8000d04:	080083d4 	.word	0x080083d4

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f001 f86d 	bl	8001dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f81a 	bl	8000d48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000d14:	f000 f869 	bl	8000dea <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d18:	f000 fb2a 	bl	8001370 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d1c:	f000 f96a 	bl	8000ff4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d20:	f000 f9d0 	bl	80010c4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d24:	f000 faf4 	bl	8001310 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d28:	f000 f88a 	bl	8000e40 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000d2c:	f000 fa44 	bl	80011b8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d30:	f000 fa98 	bl	8001264 <MX_TIM4_Init>
  MX_ADC2_Init();
 8000d34:	f000 f8fa 	bl	8000f2c <MX_ADC2_Init>
	  //hand_count++;

	  //m = sprintf(tst_buff,"\n\rThe hand count is %d\n",hand_count_tst);
	  //HAL_UART_Transmit(&huart2,tst_buff,m,400);

	 task1();
 8000d38:	f7ff fd1c 	bl	8000774 <task1>
	 task2();
 8000d3c:	f7ff fe5a 	bl	80009f4 <task2>
	 task3();
 8000d40:	f7ff ff7a 	bl	8000c38 <task3>
	 task1();
 8000d44:	bf00      	nop
 8000d46:	e7f7      	b.n	8000d38 <main+0x30>

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b096      	sub	sp, #88	@ 0x58
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	2244      	movs	r2, #68	@ 0x44
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f006 fe0e 	bl	8007978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d6e:	f002 ff3b 	bl	8003be8 <HAL_PWREx_ControlVoltageScaling>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d78:	f000 fb60 	bl	800143c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d86:	2310      	movs	r3, #16
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d92:	2301      	movs	r3, #1
 8000d94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d96:	230a      	movs	r3, #10
 8000d98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d9a:	2307      	movs	r3, #7
 8000d9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4618      	mov	r0, r3
 8000dac:	f002 ff72 	bl	8003c94 <HAL_RCC_OscConfig>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000db6:	f000 fb41 	bl	800143c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	230f      	movs	r3, #15
 8000dbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fb3a 	bl	800444c <HAL_RCC_ClockConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dde:	f000 fb2d 	bl	800143c <Error_Handler>
  }
}
 8000de2:	bf00      	nop
 8000de4:	3758      	adds	r7, #88	@ 0x58
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b0a2      	sub	sp, #136	@ 0x88
 8000dee:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	463b      	mov	r3, r7
 8000df2:	2288      	movs	r2, #136	@ 0x88
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fdbe 	bl	8007978 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000dfc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e02:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e06:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e10:	2308      	movs	r3, #8
 8000e12:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e14:	2307      	movs	r3, #7
 8000e16:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000e24:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	463b      	mov	r3, r7
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f003 fd33 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000e34:	f000 fb02 	bl	800143c <Error_Handler>
  }
}
 8000e38:	bf00      	nop
 8000e3a:	3788      	adds	r7, #136	@ 0x88
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08a      	sub	sp, #40	@ 0x28
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
 8000e4e:	605a      	str	r2, [r3, #4]
 8000e50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
 8000e60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e62:	4b2f      	ldr	r3, [pc, #188]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e64:	4a2f      	ldr	r2, [pc, #188]	@ (8000f24 <MX_ADC1_Init+0xe4>)
 8000e66:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e80:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e86:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e92:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ec2:	4817      	ldr	r0, [pc, #92]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000ec4:	f001 fa38 	bl	8002338 <HAL_ADC_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ece:	f000 fab5 	bl	800143c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4810      	ldr	r0, [pc, #64]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000ede:	f002 fb09 	bl	80034f4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ee8:	f000 faa8 	bl	800143c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eec:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <MX_ADC1_Init+0xe8>)
 8000eee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef8:	237f      	movs	r3, #127	@ 0x7f
 8000efa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efc:	2304      	movs	r3, #4
 8000efe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_ADC1_Init+0xe0>)
 8000f0a:	f001 fd39 	bl	8002980 <HAL_ADC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000f14:	f000 fa92 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	@ 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200000d8 	.word	0x200000d8
 8000f24:	50040000 	.word	0x50040000
 8000f28:	04300002 	.word	0x04300002

08000f2c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f42:	4b29      	ldr	r3, [pc, #164]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f44:	4a29      	ldr	r2, [pc, #164]	@ (8000fec <MX_ADC2_Init+0xc0>)
 8000f46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f48:	4b27      	ldr	r3, [pc, #156]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4e:	4b26      	ldr	r3, [pc, #152]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f54:	4b24      	ldr	r3, [pc, #144]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f5a:	4b23      	ldr	r3, [pc, #140]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f66:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000f72:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f78:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f80:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f86:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f8c:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fa2:	4811      	ldr	r0, [pc, #68]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000fa4:	f001 f9c8 	bl	8002338 <HAL_ADC_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000fae:	f000 fa45 	bl	800143c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <MX_ADC2_Init+0xc4>)
 8000fb4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fb6:	2306      	movs	r3, #6
 8000fb8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fbe:	237f      	movs	r3, #127	@ 0x7f
 8000fc0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fca:	463b      	mov	r3, r7
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4806      	ldr	r0, [pc, #24]	@ (8000fe8 <MX_ADC2_Init+0xbc>)
 8000fd0:	f001 fcd6 	bl	8002980 <HAL_ADC_ConfigChannel>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000fda:	f000 fa2f 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	2000013c 	.word	0x2000013c
 8000fec:	50040100 	.word	0x50040100
 8000ff0:	08600004 	.word	0x08600004

08000ff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001006:	1d3b      	adds	r3, r7, #4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001012:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001014:	4a2a      	ldr	r2, [pc, #168]	@ (80010c0 <MX_TIM1_Init+0xcc>)
 8001016:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8001018:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <MX_TIM1_Init+0xc8>)
 800101a:	224f      	movs	r2, #79	@ 0x4f
 800101c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101e:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001024:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001026:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <MX_TIM1_Init+0xc8>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001032:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b20      	ldr	r3, [pc, #128]	@ (80010bc <MX_TIM1_Init+0xc8>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800103e:	481f      	ldr	r0, [pc, #124]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001040:	f004 fad8 	bl	80055f4 <HAL_TIM_IC_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800104a:	f000 f9f7 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800105a:	f107 0314 	add.w	r3, r7, #20
 800105e:	4619      	mov	r1, r3
 8001060:	4816      	ldr	r0, [pc, #88]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001062:	f005 fe1d 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800106c:	f000 f9e6 	bl	800143c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001074:	2301      	movs	r3, #1
 8001076:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	480d      	ldr	r0, [pc, #52]	@ (80010bc <MX_TIM1_Init+0xc8>)
 8001088:	f004 ff33 	bl	8005ef2 <HAL_TIM_IC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001092:	f000 f9d3 	bl	800143c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001096:	2302      	movs	r3, #2
 8001098:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800109a:	2302      	movs	r3, #2
 800109c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	2204      	movs	r2, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_TIM1_Init+0xc8>)
 80010a6:	f004 ff24 	bl	8005ef2 <HAL_TIM_IC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80010b0:	f000 f9c4 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	200001a0 	.word	0x200001a0
 80010c0:	40012c00 	.word	0x40012c00

080010c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b08a      	sub	sp, #40	@ 0x28
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ca:	f107 031c 	add.w	r3, r7, #28
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b32      	ldr	r3, [pc, #200]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f0:	4b30      	ldr	r3, [pc, #192]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b2f      	ldr	r3, [pc, #188]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 80010fe:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001102:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b2a      	ldr	r3, [pc, #168]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001110:	4828      	ldr	r0, [pc, #160]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 8001112:	f004 f87b 	bl	800520c <HAL_TIM_PWM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800111c:	f000 f98e 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4821      	ldr	r0, [pc, #132]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 8001130:	f005 fdb6 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800113a:	f000 f97f 	bl	800143c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113e:	2360      	movs	r3, #96	@ 0x60
 8001140:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4817      	ldr	r0, [pc, #92]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 8001156:	f004 ff69 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001160:	f000 f96c 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001164:	463b      	mov	r3, r7
 8001166:	2204      	movs	r2, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 800116c:	f004 ff5e 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001176:	f000 f961 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2208      	movs	r2, #8
 800117e:	4619      	mov	r1, r3
 8001180:	480c      	ldr	r0, [pc, #48]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 8001182:	f004 ff53 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 800118c:	f000 f956 	bl	800143c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	220c      	movs	r2, #12
 8001194:	4619      	mov	r1, r3
 8001196:	4807      	ldr	r0, [pc, #28]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 8001198:	f004 ff48 	bl	800602c <HAL_TIM_PWM_ConfigChannel>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 80011a2:	f000 f94b 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011a6:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <MX_TIM2_Init+0xf0>)
 80011a8:	f000 fcc4 	bl	8001b34 <HAL_TIM_MspPostInit>

}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	@ 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001ec 	.word	0x200001ec

080011b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	@ 0x30
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2224      	movs	r2, #36	@ 0x24
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f006 fbd6 	bl	8007978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011d6:	4b21      	ldr	r3, [pc, #132]	@ (800125c <MX_TIM3_Init+0xa4>)
 80011d8:	4a21      	ldr	r2, [pc, #132]	@ (8001260 <MX_TIM3_Init+0xa8>)
 80011da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	@ (800125c <MX_TIM3_Init+0xa4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	@ (800125c <MX_TIM3_Init+0xa4>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <MX_TIM3_Init+0xa4>)
 80011ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	@ (800125c <MX_TIM3_Init+0xa4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <MX_TIM3_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011fc:	2303      	movs	r3, #3
 80011fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001204:	2301      	movs	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001214:	2301      	movs	r3, #1
 8001216:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_TIM3_Init+0xa4>)
 8001228:	f004 fb86 	bl	8005938 <HAL_TIM_Encoder_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001232:	f000 f903 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800123e:	463b      	mov	r3, r7
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_TIM3_Init+0xa4>)
 8001244:	f005 fd2c 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800124e:	f000 f8f5 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3730      	adds	r7, #48	@ 0x30
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000238 	.word	0x20000238
 8001260:	40000400 	.word	0x40000400

08001264 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	@ 0x30
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	2224      	movs	r2, #36	@ 0x24
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f006 fb80 	bl	8007978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	463b      	mov	r3, r7
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001282:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_TIM4_Init+0xa4>)
 8001284:	4a21      	ldr	r2, [pc, #132]	@ (800130c <MX_TIM4_Init+0xa8>)
 8001286:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001288:	4b1f      	ldr	r3, [pc, #124]	@ (8001308 <MX_TIM4_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_TIM4_Init+0xa4>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_TIM4_Init+0xa4>)
 8001296:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129c:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_TIM4_Init+0xa4>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_TIM4_Init+0xa4>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a8:	2303      	movs	r3, #3
 80012aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012c0:	2301      	movs	r3, #1
 80012c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_TIM4_Init+0xa4>)
 80012d4:	f004 fb30 	bl	8005938 <HAL_TIM_Encoder_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80012de:	f000 f8ad 	bl	800143c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4806      	ldr	r0, [pc, #24]	@ (8001308 <MX_TIM4_Init+0xa4>)
 80012f0:	f005 fcd6 	bl	8006ca0 <HAL_TIMEx_MasterConfigSynchronization>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012fa:	f000 f89f 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012fe:	bf00      	nop
 8001300:	3730      	adds	r7, #48	@ 0x30
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000284 	.word	0x20000284
 800130c:	40000800 	.word	0x40000800

08001310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001314:	4b14      	ldr	r3, [pc, #80]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001316:	4a15      	ldr	r2, [pc, #84]	@ (800136c <MX_USART2_UART_Init+0x5c>)
 8001318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131a:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800131c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800132a:	2200      	movs	r2, #0
 800132c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001336:	220c      	movs	r2, #12
 8001338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001340:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001346:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001352:	4805      	ldr	r0, [pc, #20]	@ (8001368 <MX_USART2_UART_Init+0x58>)
 8001354:	f005 fd4a 	bl	8006dec <HAL_UART_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800135e:	f000 f86d 	bl	800143c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002d0 	.word	0x200002d0
 800136c:	40004400 	.word	0x40004400

08001370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b085      	sub	sp, #20
 8001374:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001376:	4b1b      	ldr	r3, [pc, #108]	@ (80013e4 <MX_GPIO_Init+0x74>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	4a1a      	ldr	r2, [pc, #104]	@ (80013e4 <MX_GPIO_Init+0x74>)
 800137c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <MX_GPIO_Init+0x74>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <MX_GPIO_Init+0x74>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001392:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <MX_GPIO_Init+0x74>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800139a:	4b12      	ldr	r3, [pc, #72]	@ (80013e4 <MX_GPIO_Init+0x74>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b0f      	ldr	r3, [pc, #60]	@ (80013e4 <MX_GPIO_Init+0x74>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013aa:	4a0e      	ldr	r2, [pc, #56]	@ (80013e4 <MX_GPIO_Init+0x74>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b2:	4b0c      	ldr	r3, [pc, #48]	@ (80013e4 <MX_GPIO_Init+0x74>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	@ (80013e4 <MX_GPIO_Init+0x74>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c2:	4a08      	ldr	r2, [pc, #32]	@ (80013e4 <MX_GPIO_Init+0x74>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013ca:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <MX_GPIO_Init+0x74>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
   *
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	7f1b      	ldrb	r3, [r3, #28]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d117      	bne.n	8001428 <HAL_TIM_IC_CaptureCallback+0x40>
          //store the previous value and read the captured value from the input capture register
	  	  ch1_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80013f8:	2100      	movs	r1, #0
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f004 ff2a 	bl	8006254 <HAL_TIM_ReadCapturedValue>
 8001400:	4603      	mov	r3, r0
 8001402:	b29a      	uxth	r2, r3
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001406:	801a      	strh	r2, [r3, #0]
	      ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001408:	2104      	movs	r1, #4
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f004 ff22 	bl	8006254 <HAL_TIM_ReadCapturedValue>
 8001410:	4603      	mov	r3, r0
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001416:	801a      	strh	r2, [r3, #0]


	      //calculate the width of the pwm pulse generated by the radio transmitter
	      radio_pulse = ch1_val - ch1_p;
 8001418:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <HAL_TIM_IC_CaptureCallback+0x4c>)
 800141a:	881a      	ldrh	r2, [r3, #0]
 800141c:	4b04      	ldr	r3, [pc, #16]	@ (8001430 <HAL_TIM_IC_CaptureCallback+0x48>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001426:	801a      	strh	r2, [r3, #0]
  }

}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000035a 	.word	0x2000035a
 8001434:	20000358 	.word	0x20000358
 8001438:	2000005c 	.word	0x2000005c

0800143c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001440:	b672      	cpsid	i
}
 8001442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <Error_Handler+0x8>

08001448 <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	4619      	mov	r1, r3
 800145a:	4610      	mov	r0, r2
 800145c:	f003 ff2e 	bl	80052bc <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel2);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	4619      	mov	r1, r3
 800146a:	4610      	mov	r0, r2
 800146c:	f003 ff26 	bl	80052bc <HAL_TIM_PWM_Start>
}
 8001470:	bf00      	nop
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <stop_PWM>:


void stop_PWM(motor_t* p_mot)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 */

			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->channel1);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4619      	mov	r1, r3
 800148a:	4610      	mov	r0, r2
 800148c:	f004 f81c 	bl	80054c8 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->channel2);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4619      	mov	r1, r3
 800149a:	4610      	mov	r0, r2
 800149c:	f004 f814 	bl	80054c8 <HAL_TIM_PWM_Stop>

}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <set_duty>:

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

	    // Assign the duty cycle to a field in the structure
	    p_mot->pwm_val = pwm_sig;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	601a      	str	r2, [r3, #0]
	    // dereferencing and accessing struct fields
	    // p_mot->duty = duty;
	    // is shorthand for
	    // (*p_mot).duty = duty;

	    if (pwm_sig > 0) {
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dd79      	ble.n	80015b2 <set_duty+0x10a>

	    	//forwards
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,0);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d105      	bne.n	80014d2 <set_duty+0x2a>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2200      	movs	r2, #0
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d0:	e02c      	b.n	800152c <set_duty+0x84>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	d105      	bne.n	80014e6 <set_duty+0x3e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	6393      	str	r3, [r2, #56]	@ 0x38
 80014e4:	e022      	b.n	800152c <set_duty+0x84>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d105      	bne.n	80014fa <set_duty+0x52>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014f8:	e018      	b.n	800152c <set_duty+0x84>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b0c      	cmp	r3, #12
 8001500:	d105      	bne.n	800150e <set_duty+0x66>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2300      	movs	r3, #0
 800150a:	6413      	str	r3, [r2, #64]	@ 0x40
 800150c:	e00e      	b.n	800152c <set_duty+0x84>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b10      	cmp	r3, #16
 8001514:	d105      	bne.n	8001522 <set_duty+0x7a>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2300      	movs	r3, #0
 800151e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001520:	e004      	b.n	800152c <set_duty+0x84>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <set_duty+0x9a>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	425a      	negs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	635a      	str	r2, [r3, #52]	@ 0x34
	      }




}
 8001540:	e124      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b04      	cmp	r3, #4
 8001548:	d107      	bne.n	800155a <set_duty+0xb2>
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	4259      	negs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	460b      	mov	r3, r1
 8001556:	6393      	str	r3, [r2, #56]	@ 0x38
 8001558:	e118      	b.n	800178c <set_duty+0x2e4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d107      	bne.n	8001572 <set_duty+0xca>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	4259      	negs	r1, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	460b      	mov	r3, r1
 800156e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001570:	e10c      	b.n	800178c <set_duty+0x2e4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d107      	bne.n	800158a <set_duty+0xe2>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	4259      	negs	r1, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	460b      	mov	r3, r1
 8001586:	6413      	str	r3, [r2, #64]	@ 0x40
 8001588:	e100      	b.n	800178c <set_duty+0x2e4>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d107      	bne.n	80015a2 <set_duty+0xfa>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4259      	negs	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	460b      	mov	r3, r1
 800159e:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a0:	e0f4      	b.n	800178c <set_duty+0x2e4>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	4259      	negs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	460b      	mov	r3, r1
 80015ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80015b0:	e0ec      	b.n	800178c <set_duty+0x2e4>
	    else if(pwm_sig == 0){
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d17a      	bne.n	80016ae <set_duty+0x206>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,640);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <set_duty+0x126>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80015ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80015cc:	e031      	b.n	8001632 <set_duty+0x18a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b04      	cmp	r3, #4
 80015d4:	d106      	bne.n	80015e4 <set_duty+0x13c>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80015e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80015e2:	e026      	b.n	8001632 <set_duty+0x18a>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	2b08      	cmp	r3, #8
 80015ea:	d106      	bne.n	80015fa <set_duty+0x152>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80015f6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80015f8:	e01b      	b.n	8001632 <set_duty+0x18a>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d106      	bne.n	8001610 <set_duty+0x168>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	e010      	b.n	8001632 <set_duty+0x18a>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b10      	cmp	r3, #16
 8001616:	d106      	bne.n	8001626 <set_duty+0x17e>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001622:	6593      	str	r3, [r2, #88]	@ 0x58
 8001624:	e005      	b.n	8001632 <set_duty+0x18a>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001630:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d106      	bne.n	8001648 <set_duty+0x1a0>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001646:	e0a1      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b04      	cmp	r3, #4
 800164e:	d106      	bne.n	800165e <set_duty+0x1b6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800165a:	6393      	str	r3, [r2, #56]	@ 0x38
 800165c:	e096      	b.n	800178c <set_duty+0x2e4>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	2b08      	cmp	r3, #8
 8001664:	d106      	bne.n	8001674 <set_duty+0x1cc>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001670:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001672:	e08b      	b.n	800178c <set_duty+0x2e4>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	2b0c      	cmp	r3, #12
 800167a:	d106      	bne.n	800168a <set_duty+0x1e2>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001686:	6413      	str	r3, [r2, #64]	@ 0x40
 8001688:	e080      	b.n	800178c <set_duty+0x2e4>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b10      	cmp	r3, #16
 8001690:	d106      	bne.n	80016a0 <set_duty+0x1f8>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800169c:	6593      	str	r3, [r2, #88]	@ 0x58
 800169e:	e075      	b.n	800178c <set_duty+0x2e4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80016aa:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80016ac:	e06e      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,pwm_sig);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d105      	bne.n	80016c2 <set_duty+0x21a>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c0:	e02c      	b.n	800171c <set_duty+0x274>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d105      	bne.n	80016d6 <set_duty+0x22e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	6393      	str	r3, [r2, #56]	@ 0x38
 80016d4:	e022      	b.n	800171c <set_duty+0x274>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d105      	bne.n	80016ea <set_duty+0x242>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80016e8:	e018      	b.n	800171c <set_duty+0x274>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b0c      	cmp	r3, #12
 80016f0:	d105      	bne.n	80016fe <set_duty+0x256>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68db      	ldr	r3, [r3, #12]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	e00e      	b.n	800171c <set_duty+0x274>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b10      	cmp	r3, #16
 8001704:	d105      	bne.n	8001712 <set_duty+0x26a>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	68db      	ldr	r3, [r3, #12]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001710:	e004      	b.n	800171c <set_duty+0x274>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <set_duty+0x288>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800172e:	e02d      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b04      	cmp	r3, #4
 8001736:	d105      	bne.n	8001744 <set_duty+0x29c>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2300      	movs	r3, #0
 8001740:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001742:	e023      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b08      	cmp	r3, #8
 800174a:	d105      	bne.n	8001758 <set_duty+0x2b0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001756:	e019      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b0c      	cmp	r3, #12
 800175e:	d105      	bne.n	800176c <set_duty+0x2c4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800176a:	e00f      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b10      	cmp	r3, #16
 8001772:	d105      	bne.n	8001780 <set_duty+0x2d8>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800177e:	e005      	b.n	800178c <set_duty+0x2e4>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2300      	movs	r3, #0
 8001788:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800178a:	e7ff      	b.n	800178c <set_duty+0x2e4>
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <read_current>:
/**
 * @brief A function to get the ADC value for the myoelectric sensor.
 *
 * @param p_myo The myoelectric sensor object to perform the function on.
 */
uint16_t read_current(myo_t *p_myo){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(p_myo->hal_adc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 ff17 	bl	80025d8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(p_myo->hal_adc,100);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2164      	movs	r1, #100	@ 0x64
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 ffff 	bl	80027b4 <HAL_ADC_PollForConversion>
	p_myo->current_value = HAL_ADC_GetValue(p_myo->hal_adc);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f001 f8d2 	bl	8002964 <HAL_ADC_GetValue>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b21a      	sxth	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(p_myo->hal_adc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 ffbd 	bl	800274c <HAL_ADC_Stop>
	//stop ADC?

	//now convert results to a desired output style


	return p_myo->current_value;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80017d8:	b29b      	uxth	r3, r3

}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <check_delta>:
 */

#include "radio.h"

int check_delta(int16_t pulse_width)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	80fb      	strh	r3, [r7, #6]
	//if the delta value is invalid, or is at the 1.5 ms base width return 0. If it is not at the
	//base value return a 1.
	if (900 < pulse_width && pulse_width < 1450)
 80017ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017f0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80017f4:	dd07      	ble.n	8001806 <check_delta+0x24>
 80017f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fa:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 80017fe:	4293      	cmp	r3, r2
 8001800:	dc01      	bgt.n	8001806 <check_delta+0x24>
	{
	    return 1;
 8001802:	2301      	movs	r3, #1
 8001804:	e00e      	b.n	8001824 <check_delta+0x42>
	}
	else if (1550 < pulse_width && pulse_width < 2500)
 8001806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180a:	f240 620e 	movw	r2, #1550	@ 0x60e
 800180e:	4293      	cmp	r3, r2
 8001810:	dd07      	ble.n	8001822 <check_delta+0x40>
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800181a:	4293      	cmp	r3, r2
 800181c:	dc01      	bgt.n	8001822 <check_delta+0x40>
	{
	    return 1;
 800181e:	2301      	movs	r3, #1
 8001820:	e000      	b.n	8001824 <check_delta+0x42>
	}
	else
	{
			return 0;
 8001822:	2300      	movs	r3, #0
	}
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	4b0f      	ldr	r3, [pc, #60]	@ (8001874 <HAL_MspInit+0x44>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800183a:	4a0e      	ldr	r2, [pc, #56]	@ (8001874 <HAL_MspInit+0x44>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6613      	str	r3, [r2, #96]	@ 0x60
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_MspInit+0x44>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_MspInit+0x44>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <HAL_MspInit+0x44>)
 8001854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_MspInit+0x44>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	603b      	str	r3, [r7, #0]
 8001864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08c      	sub	sp, #48	@ 0x30
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a33      	ldr	r2, [pc, #204]	@ (8001964 <HAL_ADC_MspInit+0xec>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12d      	bne.n	80018f6 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800189a:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_ADC_MspInit+0xf0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a31      	ldr	r2, [pc, #196]	@ (8001968 <HAL_ADC_MspInit+0xf0>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80018a4:	4b30      	ldr	r3, [pc, #192]	@ (8001968 <HAL_ADC_MspInit+0xf0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80018ac:	4b2f      	ldr	r3, [pc, #188]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b0:	4a2e      	ldr	r2, [pc, #184]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b8:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	4b29      	ldr	r3, [pc, #164]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c8:	4a28      	ldr	r2, [pc, #160]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d0:	4b26      	ldr	r3, [pc, #152]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = SMYO_Pin;
 80018dc:	2301      	movs	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018e0:	230b      	movs	r3, #11
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SMYO_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4820      	ldr	r0, [pc, #128]	@ (8001970 <HAL_ADC_MspInit+0xf8>)
 80018f0:	f001 ffc2 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80018f4:	e031      	b.n	800195a <HAL_ADC_MspInit+0xe2>
  else if(hadc->Instance==ADC2)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001974 <HAL_ADC_MspInit+0xfc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d12c      	bne.n	800195a <HAL_ADC_MspInit+0xe2>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_ADC_MspInit+0xf0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a18      	ldr	r2, [pc, #96]	@ (8001968 <HAL_ADC_MspInit+0xf0>)
 8001908:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800190a:	4b17      	ldr	r3, [pc, #92]	@ (8001968 <HAL_ADC_MspInit+0xf0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d10b      	bne.n	800192a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001912:	4b16      	ldr	r3, [pc, #88]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 8001914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001916:	4a15      	ldr	r2, [pc, #84]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 8001918:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800191c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800191e:	4b13      	ldr	r3, [pc, #76]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001922:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192a:	4b10      	ldr	r3, [pc, #64]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800192e:	4a0f      	ldr	r2, [pc, #60]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 8001930:	f043 0304 	orr.w	r3, r3, #4
 8001934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001936:	4b0d      	ldr	r3, [pc, #52]	@ (800196c <HAL_ADC_MspInit+0xf4>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HMYO_Pin;
 8001942:	2302      	movs	r3, #2
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001946:	230b      	movs	r3, #11
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(HMYO_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4806      	ldr	r0, [pc, #24]	@ (8001970 <HAL_ADC_MspInit+0xf8>)
 8001956:	f001 ff8f 	bl	8003878 <HAL_GPIO_Init>
}
 800195a:	bf00      	nop
 800195c:	3730      	adds	r7, #48	@ 0x30
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	50040000 	.word	0x50040000
 8001968:	20000560 	.word	0x20000560
 800196c:	40021000 	.word	0x40021000
 8001970:	48000800 	.word	0x48000800
 8001974:	50040100 	.word	0x50040100

08001978 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1c      	ldr	r2, [pc, #112]	@ (8001a08 <HAL_TIM_IC_MspInit+0x90>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d131      	bne.n	80019fe <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800199a:	4b1c      	ldr	r3, [pc, #112]	@ (8001a0c <HAL_TIM_IC_MspInit+0x94>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_TIM_IC_MspInit+0x94>)
 80019a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019a4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019a6:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_TIM_IC_MspInit+0x94>)
 80019a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ae:	613b      	str	r3, [r7, #16]
 80019b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b16      	ldr	r3, [pc, #88]	@ (8001a0c <HAL_TIM_IC_MspInit+0x94>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b6:	4a15      	ldr	r2, [pc, #84]	@ (8001a0c <HAL_TIM_IC_MspInit+0x94>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019be:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <HAL_TIM_IC_MspInit+0x94>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RADIO_Pin;
 80019ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RADIO_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019ea:	f001 ff45 	bl	8003878 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	2100      	movs	r1, #0
 80019f2:	201b      	movs	r0, #27
 80019f4:	f001 ff09 	bl	800380a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80019f8:	201b      	movs	r0, #27
 80019fa:	f001 ff22 	bl	8003842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40012c00 	.word	0x40012c00
 8001a0c:	40021000 	.word	0x40021000

08001a10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a20:	d10b      	bne.n	8001a3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a22:	4b09      	ldr	r3, [pc, #36]	@ (8001a48 <HAL_TIM_PWM_MspInit+0x38>)
 8001a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a26:	4a08      	ldr	r2, [pc, #32]	@ (8001a48 <HAL_TIM_PWM_MspInit+0x38>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_TIM_PWM_MspInit+0x38>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08c      	sub	sp, #48	@ 0x30
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
 8001a62:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a2e      	ldr	r2, [pc, #184]	@ (8001b24 <HAL_TIM_Encoder_MspInit+0xd8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d129      	bne.n	8001ac2 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	4a2d      	ldr	r2, [pc, #180]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b28      	ldr	r3, [pc, #160]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	4a27      	ldr	r2, [pc, #156]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a92:	4b25      	ldr	r3, [pc, #148]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SPIN_ENCA_Pin|SPIN_ENCB_Pin;
 8001a9e:	23c0      	movs	r3, #192	@ 0xc0
 8001aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab2:	f107 031c 	add.w	r3, r7, #28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001abc:	f001 fedc 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ac0:	e02c      	b.n	8001b1c <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a19      	ldr	r2, [pc, #100]	@ (8001b2c <HAL_TIM_Encoder_MspInit+0xe0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d127      	bne.n	8001b1c <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad0:	4a15      	ldr	r2, [pc, #84]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ad2:	f043 0304 	orr.w	r3, r3, #4
 8001ad6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae8:	4a0f      	ldr	r2, [pc, #60]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HAND_ENCA_Pin|HAND_ENCB_Pin;
 8001afc:	23c0      	movs	r3, #192	@ 0xc0
 8001afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	4619      	mov	r1, r3
 8001b16:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001b18:	f001 feae 	bl	8003878 <HAL_GPIO_Init>
}
 8001b1c:	bf00      	nop
 8001b1e:	3730      	adds	r7, #48	@ 0x30
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40000800 	.word	0x40000800
 8001b30:	48000400 	.word	0x48000400

08001b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b54:	d139      	bne.n	8001bca <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd4 <HAL_TIM_MspPostInit+0xa0>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd4 <HAL_TIM_MspPostInit+0xa0>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b62:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <HAL_TIM_MspPostInit+0xa0>)
 8001b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_TIM_MspPostInit+0xa0>)
 8001b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b72:	4a18      	ldr	r2, [pc, #96]	@ (8001bd4 <HAL_TIM_MspPostInit+0xa0>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b7a:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_TIM_MspPostInit+0xa0>)
 8001b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPIN_PWMA_Pin|SPIN_PWMB_Pin;
 8001b86:	2303      	movs	r3, #3
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b96:	2301      	movs	r3, #1
 8001b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ba4:	f001 fe68 	bl	8003878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAND_PWMA_Pin|HAND_PWMB_Pin;
 8001ba8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <HAL_TIM_MspPostInit+0xa4>)
 8001bc6:	f001 fe57 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	@ 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40021000 	.word	0x40021000
 8001bd8:	48000400 	.word	0x48000400

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0ac      	sub	sp, #176	@ 0xb0
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	2288      	movs	r2, #136	@ 0x88
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f005 febb 	bl	8007978 <memset>
  if(huart->Instance==USART2)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a21      	ldr	r2, [pc, #132]	@ (8001c8c <HAL_UART_MspInit+0xb0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d13b      	bne.n	8001c84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fe3b 	bl	8004894 <HAL_RCCEx_PeriphCLKConfig>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c24:	f7ff fc0a 	bl	800143c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c28:	4b19      	ldr	r3, [pc, #100]	@ (8001c90 <HAL_UART_MspInit+0xb4>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c2c:	4a18      	ldr	r2, [pc, #96]	@ (8001c90 <HAL_UART_MspInit+0xb4>)
 8001c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c32:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c34:	4b16      	ldr	r3, [pc, #88]	@ (8001c90 <HAL_UART_MspInit+0xb4>)
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <HAL_UART_MspInit+0xb4>)
 8001c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c44:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <HAL_UART_MspInit+0xb4>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c4c:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_UART_MspInit+0xb4>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c58:	230c      	movs	r3, #12
 8001c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c70:	2307      	movs	r3, #7
 8001c72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c80:	f001 fdfa 	bl	8003878 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c84:	bf00      	nop
 8001c86:	37b0      	adds	r7, #176	@ 0xb0
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40004400 	.word	0x40004400
 8001c90:	40021000 	.word	0x40021000

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <NMI_Handler+0x4>

08001c9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <HardFault_Handler+0x4>

08001ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <MemManage_Handler+0x4>

08001cac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <BusFault_Handler+0x4>

08001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb8:	bf00      	nop
 8001cba:	e7fd      	b.n	8001cb8 <UsageFault_Handler+0x4>

08001cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cea:	f000 f8d3 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cf8:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <TIM1_CC_IRQHandler+0x10>)
 8001cfa:	f003 fff8 	bl	8005cee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200001a0 	.word	0x200001a0

08001d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d10:	4a14      	ldr	r2, [pc, #80]	@ (8001d64 <_sbrk+0x5c>)
 8001d12:	4b15      	ldr	r3, [pc, #84]	@ (8001d68 <_sbrk+0x60>)
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <_sbrk+0x64>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d24:	4b11      	ldr	r3, [pc, #68]	@ (8001d6c <_sbrk+0x64>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	@ (8001d70 <_sbrk+0x68>)
 8001d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	4b10      	ldr	r3, [pc, #64]	@ (8001d6c <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d207      	bcs.n	8001d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d38:	f005 fe26 	bl	8007988 <__errno>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	220c      	movs	r2, #12
 8001d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d42:	f04f 33ff 	mov.w	r3, #4294967295
 8001d46:	e009      	b.n	8001d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d48:	4b08      	ldr	r3, [pc, #32]	@ (8001d6c <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	4a05      	ldr	r2, [pc, #20]	@ (8001d6c <_sbrk+0x64>)
 8001d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20018000 	.word	0x20018000
 8001d68:	00000400 	.word	0x00000400
 8001d6c:	20000564 	.word	0x20000564
 8001d70:	200006b8 	.word	0x200006b8

08001d74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <SystemInit+0x20>)
 8001d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <SystemInit+0x20>)
 8001d80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d9c:	f7ff ffea 	bl	8001d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopForever+0xe>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopForever+0x16>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f005 fde5 	bl	8007994 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dca:	f7fe ff9d 	bl	8000d08 <main>

08001dce <LoopForever>:

LoopForever:
    b LoopForever
 8001dce:	e7fe      	b.n	8001dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8001ddc:	0800848c 	.word	0x0800848c
  ldr r2, =_sbss
 8001de0:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8001de4:	200006b4 	.word	0x200006b4

08001de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC1_2_IRQHandler>

08001dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f001 fcfd 	bl	80037f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dfa:	200f      	movs	r0, #15
 8001dfc:	f000 f80e 	bl	8001e1c <HAL_InitTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	e001      	b.n	8001e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e0c:	f7ff fd10 	bl	8001830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e10:	79fb      	ldrb	r3, [r7, #7]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e28:	4b17      	ldr	r3, [pc, #92]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e30:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <HAL_InitTick+0x70>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <HAL_InitTick+0x6c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fd09 	bl	800385e <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d809      	bhi.n	8001e6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f001 fcd3 	bl	800380a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e64:	4a0a      	ldr	r2, [pc, #40]	@ (8001e90 <HAL_InitTick+0x74>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e004      	b.n	8001e7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e001      	b.n	8001e7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000068 	.word	0x20000068
 8001e8c:	20000060 	.word	0x20000060
 8001e90:	20000064 	.word	0x20000064

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	20000068 	.word	0x20000068
 8001eb8:	20000568 	.word	0x20000568

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000568 	.word	0x20000568

08001ed4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	609a      	str	r2, [r3, #8]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	609a      	str	r2, [r3, #8]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b087      	sub	sp, #28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3360      	adds	r3, #96	@ 0x60
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <LL_ADC_SetOffset+0x44>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f74:	bf00      	nop
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	03fff000 	.word	0x03fff000

08001f84 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	3360      	adds	r3, #96	@ 0x60
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3360      	adds	r3, #96	@ 0x60
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fda:	bf00      	nop
 8001fdc:	371c      	adds	r7, #28
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3330      	adds	r3, #48	@ 0x30
 800201c:	461a      	mov	r2, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	4413      	add	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	211f      	movs	r1, #31
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	0e9b      	lsrs	r3, r3, #26
 8002044:	f003 011f 	and.w	r1, r3, #31
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	f003 031f 	and.w	r3, r3, #31
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	431a      	orrs	r2, r3
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3314      	adds	r3, #20
 8002074:	461a      	mov	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0e5b      	lsrs	r3, r3, #25
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	0d1b      	lsrs	r3, r3, #20
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2107      	movs	r1, #7
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	401a      	ands	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	0d1b      	lsrs	r3, r3, #20
 800209e:	f003 031f 	and.w	r3, r3, #31
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	fa01 f303 	lsl.w	r3, r1, r3
 80020a8:	431a      	orrs	r2, r3
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	43db      	mvns	r3, r3
 80020d6:	401a      	ands	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0318 	and.w	r3, r3, #24
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <LL_ADC_SetChannelSingleDiff+0x44>)
 80020e0:	40d9      	lsrs	r1, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	400b      	ands	r3, r1
 80020e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ea:	431a      	orrs	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020f2:	bf00      	nop
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	0007ffff 	.word	0x0007ffff

08002104 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 031f 	and.w	r3, r3, #31
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800214c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6093      	str	r3, [r2, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002174:	d101      	bne.n	800217a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002198:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800219c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021c4:	d101      	bne.n	80021ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002210:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002214:	f043 0202 	orr.w	r2, r3, #2
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <LL_ADC_IsEnabled+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_IsEnabled+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr

0800224e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d101      	bne.n	8002266 <LL_ADC_IsDisableOngoing+0x18>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_IsDisableOngoing+0x1a>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002288:	f043 0204 	orr.w	r2, r3, #4
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d101      	bne.n	80022dc <LL_ADC_REG_IsConversionOngoing+0x18>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022fa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022fe:	f043 0220 	orr.w	r2, r3, #32
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0308 	and.w	r3, r3, #8
 8002322:	2b08      	cmp	r3, #8
 8002324:	d101      	bne.n	800232a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b089      	sub	sp, #36	@ 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e130      	b.n	80025b4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fa89 	bl	8001878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fef1 	bl	8002160 <LL_ADC_IsDeepPowerDownEnabled>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d004      	beq.n	800238e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fed7 	bl	800213c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ff0c 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fef0 	bl	8002188 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023a8:	4b84      	ldr	r3, [pc, #528]	@ (80025bc <HAL_ADC_Init+0x284>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	099b      	lsrs	r3, r3, #6
 80023ae:	4a84      	ldr	r2, [pc, #528]	@ (80025c0 <HAL_ADC_Init+0x288>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	099b      	lsrs	r3, r3, #6
 80023b6:	3301      	adds	r3, #1
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff feee 	bl	80021b0 <LL_ADC_IsInternalRegulatorEnabled>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023de:	f043 0210 	orr.w	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	f043 0201 	orr.w	r2, r3, #1
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff ff62 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002400:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 80c9 	bne.w	80025a2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 80c5 	bne.w	80025a2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002420:	f043 0202 	orr.w	r2, r3, #2
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fefb 	bl	8002228 <LL_ADC_IsEnabled>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d115      	bne.n	8002464 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002438:	4862      	ldr	r0, [pc, #392]	@ (80025c4 <HAL_ADC_Init+0x28c>)
 800243a:	f7ff fef5 	bl	8002228 <LL_ADC_IsEnabled>
 800243e:	4604      	mov	r4, r0
 8002440:	4861      	ldr	r0, [pc, #388]	@ (80025c8 <HAL_ADC_Init+0x290>)
 8002442:	f7ff fef1 	bl	8002228 <LL_ADC_IsEnabled>
 8002446:	4603      	mov	r3, r0
 8002448:	431c      	orrs	r4, r3
 800244a:	4860      	ldr	r0, [pc, #384]	@ (80025cc <HAL_ADC_Init+0x294>)
 800244c:	f7ff feec 	bl	8002228 <LL_ADC_IsEnabled>
 8002450:	4603      	mov	r3, r0
 8002452:	4323      	orrs	r3, r4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d105      	bne.n	8002464 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4619      	mov	r1, r3
 800245e:	485c      	ldr	r0, [pc, #368]	@ (80025d0 <HAL_ADC_Init+0x298>)
 8002460:	f7ff fd38 	bl	8001ed4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e5b      	ldrb	r3, [r3, #25]
 8002468:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800246e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002474:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800247a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002482:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002484:	4313      	orrs	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d106      	bne.n	80024a0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	3b01      	subs	r3, #1
 8002498:	045b      	lsls	r3, r3, #17
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d009      	beq.n	80024bc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ac:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	4b44      	ldr	r3, [pc, #272]	@ (80025d4 <HAL_ADC_Init+0x29c>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	69b9      	ldr	r1, [r7, #24]
 80024cc:	430b      	orrs	r3, r1
 80024ce:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff1c 	bl	8002312 <LL_ADC_INJ_IsConversionOngoing>
 80024da:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d13d      	bne.n	800255e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d13a      	bne.n	800255e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024ec:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024f4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002504:	f023 0302 	bic.w	r3, r3, #2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	430b      	orrs	r3, r1
 8002510:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002518:	2b01      	cmp	r3, #1
 800251a:	d118      	bne.n	800254e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002532:	4311      	orrs	r1, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002538:	4311      	orrs	r1, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800253e:	430a      	orrs	r2, r1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0201 	orr.w	r2, r2, #1
 800254a:	611a      	str	r2, [r3, #16]
 800254c:	e007      	b.n	800255e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	691b      	ldr	r3, [r3, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d10c      	bne.n	8002580 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	f023 010f 	bic.w	r1, r3, #15
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	1e5a      	subs	r2, r3, #1
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	631a      	str	r2, [r3, #48]	@ 0x30
 800257e:	e007      	b.n	8002590 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 020f 	bic.w	r2, r2, #15
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002594:	f023 0303 	bic.w	r3, r3, #3
 8002598:	f043 0201 	orr.w	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	655a      	str	r2, [r3, #84]	@ 0x54
 80025a0:	e007      	b.n	80025b2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80025b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3724      	adds	r7, #36	@ 0x24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd90      	pop	{r4, r7, pc}
 80025bc:	20000060 	.word	0x20000060
 80025c0:	053e2d63 	.word	0x053e2d63
 80025c4:	50040000 	.word	0x50040000
 80025c8:	50040100 	.word	0x50040100
 80025cc:	50040200 	.word	0x50040200
 80025d0:	50040300 	.word	0x50040300
 80025d4:	fff0c007 	.word	0xfff0c007

080025d8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025e0:	4857      	ldr	r0, [pc, #348]	@ (8002740 <HAL_ADC_Start+0x168>)
 80025e2:	f7ff fd8f 	bl	8002104 <LL_ADC_GetMultimode>
 80025e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fe69 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f040 809c 	bne.w	8002732 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002600:	2b01      	cmp	r3, #1
 8002602:	d101      	bne.n	8002608 <HAL_ADC_Start+0x30>
 8002604:	2302      	movs	r3, #2
 8002606:	e097      	b.n	8002738 <HAL_ADC_Start+0x160>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fe63 	bl	80032dc <ADC_Enable>
 8002616:	4603      	mov	r3, r0
 8002618:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 8083 	bne.w	8002728 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a42      	ldr	r2, [pc, #264]	@ (8002744 <HAL_ADC_Start+0x16c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d002      	beq.n	8002646 <HAL_ADC_Start+0x6e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e000      	b.n	8002648 <HAL_ADC_Start+0x70>
 8002646:	4b40      	ldr	r3, [pc, #256]	@ (8002748 <HAL_ADC_Start+0x170>)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	4293      	cmp	r3, r2
 800264e:	d002      	beq.n	8002656 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002666:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800266e:	d106      	bne.n	800267e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002674:	f023 0206 	bic.w	r2, r3, #6
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	659a      	str	r2, [r3, #88]	@ 0x58
 800267c:	e002      	b.n	8002684 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	221c      	movs	r2, #28
 800268a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2a      	ldr	r2, [pc, #168]	@ (8002744 <HAL_ADC_Start+0x16c>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d002      	beq.n	80026a4 <HAL_ADC_Start+0xcc>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	e000      	b.n	80026a6 <HAL_ADC_Start+0xce>
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <HAL_ADC_Start+0x170>)
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d008      	beq.n	80026c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d005      	beq.n	80026c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d002      	beq.n	80026c0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d114      	bne.n	80026ea <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80026d6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fdc6 	bl	8002274 <LL_ADC_REG_StartConversion>
 80026e8:	e025      	b.n	8002736 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a12      	ldr	r2, [pc, #72]	@ (8002744 <HAL_ADC_Start+0x16c>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d002      	beq.n	8002706 <HAL_ADC_Start+0x12e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	e000      	b.n	8002708 <HAL_ADC_Start+0x130>
 8002706:	4b10      	ldr	r3, [pc, #64]	@ (8002748 <HAL_ADC_Start+0x170>)
 8002708:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00f      	beq.n	8002736 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800271e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	655a      	str	r2, [r3, #84]	@ 0x54
 8002726:	e006      	b.n	8002736 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002730:	e001      	b.n	8002736 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002732:	2302      	movs	r3, #2
 8002734:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002736:	7dfb      	ldrb	r3, [r7, #23]
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	50040300 	.word	0x50040300
 8002744:	50040100 	.word	0x50040100
 8002748:	50040000 	.word	0x50040000

0800274c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADC_Stop+0x16>
 800275e:	2302      	movs	r3, #2
 8002760:	e023      	b.n	80027aa <HAL_ADC_Stop+0x5e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800276a:	2103      	movs	r1, #3
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 fcf9 	bl	8003164 <ADC_ConversionStop>
 8002772:	4603      	mov	r3, r0
 8002774:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d111      	bne.n	80027a0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 fe33 	bl	80033e8 <ADC_Disable>
 8002782:	4603      	mov	r3, r0
 8002784:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002790:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002794:	f023 0301 	bic.w	r3, r3, #1
 8002798:	f043 0201 	orr.w	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027be:	4866      	ldr	r0, [pc, #408]	@ (8002958 <HAL_ADC_PollForConversion+0x1a4>)
 80027c0:	f7ff fca0 	bl	8002104 <LL_ADC_GetMultimode>
 80027c4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	2b08      	cmp	r3, #8
 80027cc:	d102      	bne.n	80027d4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80027ce:	2308      	movs	r3, #8
 80027d0:	61fb      	str	r3, [r7, #28]
 80027d2:	e02a      	b.n	800282a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d002      	beq.n	80027e6 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b09      	cmp	r3, #9
 80027e4:	d111      	bne.n	800280a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f043 0220 	orr.w	r2, r3, #32
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0a4      	b.n	800294e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002804:	2304      	movs	r3, #4
 8002806:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002808:	e00f      	b.n	800282a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800280a:	4853      	ldr	r0, [pc, #332]	@ (8002958 <HAL_ADC_PollForConversion+0x1a4>)
 800280c:	f7ff fc88 	bl	8002120 <LL_ADC_GetMultiDMATransfer>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d007      	beq.n	8002826 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281a:	f043 0220 	orr.w	r2, r3, #32
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e093      	b.n	800294e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002826:	2304      	movs	r3, #4
 8002828:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800282a:	f7ff fb47 	bl	8001ebc <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002830:	e021      	b.n	8002876 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002838:	d01d      	beq.n	8002876 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800283a:	f7ff fb3f 	bl	8001ebc <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d302      	bcc.n	8002850 <HAL_ADC_PollForConversion+0x9c>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d112      	bne.n	8002876 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	4013      	ands	r3, r2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002862:	f043 0204 	orr.w	r2, r3, #4
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e06b      	b.n	800294e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0d6      	beq.n	8002832 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002888:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff fba6 	bl	8001fe6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01c      	beq.n	80028da <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	7e5b      	ldrb	r3, [r3, #25]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d118      	bne.n	80028da <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	2b08      	cmp	r3, #8
 80028b4:	d111      	bne.n	80028da <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1f      	ldr	r2, [pc, #124]	@ (800295c <HAL_ADC_PollForConversion+0x1a8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d002      	beq.n	80028ea <HAL_ADC_PollForConversion+0x136>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	e000      	b.n	80028ec <HAL_ADC_PollForConversion+0x138>
 80028ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002960 <HAL_ADC_PollForConversion+0x1ac>)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d008      	beq.n	8002906 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d005      	beq.n	8002906 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d002      	beq.n	8002906 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2b09      	cmp	r3, #9
 8002904:	d104      	bne.n	8002910 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e00c      	b.n	800292a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <HAL_ADC_PollForConversion+0x1a8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d002      	beq.n	8002920 <HAL_ADC_PollForConversion+0x16c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	e000      	b.n	8002922 <HAL_ADC_PollForConversion+0x16e>
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <HAL_ADC_PollForConversion+0x1ac>)
 8002922:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	2b08      	cmp	r3, #8
 800292e:	d104      	bne.n	800293a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2208      	movs	r2, #8
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e008      	b.n	800294c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d103      	bne.n	800294c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	220c      	movs	r2, #12
 800294a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	50040300 	.word	0x50040300
 800295c:	50040100 	.word	0x50040100
 8002960:	50040000 	.word	0x50040000

08002964 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
	...

08002980 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0b6      	sub	sp, #216	@ 0xd8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x22>
 800299e:	2302      	movs	r3, #2
 80029a0:	e3c9      	b.n	8003136 <HAL_ADC_ConfigChannel+0x7b6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fc88 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f040 83aa 	bne.w	8003110 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d824      	bhi.n	8002a16 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	3b02      	subs	r3, #2
 80029d2:	2b03      	cmp	r3, #3
 80029d4:	d81b      	bhi.n	8002a0e <HAL_ADC_ConfigChannel+0x8e>
 80029d6:	a201      	add	r2, pc, #4	@ (adr r2, 80029dc <HAL_ADC_ConfigChannel+0x5c>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	080029f5 	.word	0x080029f5
 80029e4:	080029fd 	.word	0x080029fd
 80029e8:	08002a05 	.word	0x08002a05
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80029ec:	230c      	movs	r3, #12
 80029ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029f2:	e010      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80029f4:	2312      	movs	r3, #18
 80029f6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80029fa:	e00c      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80029fc:	2318      	movs	r3, #24
 80029fe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a02:	e008      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a0c:	e003      	b.n	8002a16 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002a0e:	2306      	movs	r3, #6
 8002a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002a14:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002a24:	f7ff faf2 	bl	800200c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fc49 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8002a32:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fc69 	bl	8002312 <LL_ADC_INJ_IsConversionOngoing>
 8002a40:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	f040 81a4 	bne.w	8002d96 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 819f 	bne.w	8002d96 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6818      	ldr	r0, [r3, #0]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	461a      	mov	r2, r3
 8002a66:	f7ff fafd 	bl	8002064 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	08db      	lsrs	r3, r3, #3
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	2b04      	cmp	r3, #4
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6818      	ldr	r0, [r3, #0]
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6919      	ldr	r1, [r3, #16]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a9c:	f7ff fa4e 	bl	8001f3c <LL_ADC_SetOffset>
 8002aa0:	e179      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7ff fa6b 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d10a      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x14e>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fa60 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	0e9b      	lsrs	r3, r3, #26
 8002ac8:	f003 021f 	and.w	r2, r3, #31
 8002acc:	e01e      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x18c>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fa55 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ae4:	fa93 f3a3 	rbit	r3, r3
 8002ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002aec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002af0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002af4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002afc:	2320      	movs	r3, #32
 8002afe:	e004      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002b04:	fab3 f383 	clz	r3, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x1a4>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	0e9b      	lsrs	r3, r3, #26
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	e018      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x1d6>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b30:	fa93 f3a3 	rbit	r3, r3
 8002b34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002b40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d101      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002b48:	2320      	movs	r3, #32
 8002b4a:	e004      	b.n	8002b56 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002b4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b50:	fab3 f383 	clz	r3, r3
 8002b54:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d106      	bne.n	8002b68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fa24 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa08 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x214>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2101      	movs	r1, #1
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff f9fd 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	0e9b      	lsrs	r3, r3, #26
 8002b8e:	f003 021f 	and.w	r2, r3, #31
 8002b92:	e01e      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x252>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff f9f2 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002baa:	fa93 f3a3 	rbit	r3, r3
 8002bae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002bba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002bc2:	2320      	movs	r3, #32
 8002bc4:	e004      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002bc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x26a>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0e9b      	lsrs	r3, r3, #26
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	e018      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x29c>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bf6:	fa93 f3a3 	rbit	r3, r3
 8002bfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002bfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c02:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002c06:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002c12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2101      	movs	r1, #1
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff f9c1 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2102      	movs	r1, #2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff f9a5 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x2da>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2102      	movs	r1, #2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff f99a 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	e01e      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x318>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff f98f 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002c78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002c80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	e004      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c90:	fab3 f383 	clz	r3, r3
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x330>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0e9b      	lsrs	r3, r3, #26
 8002caa:	f003 031f 	and.w	r3, r3, #31
 8002cae:	e014      	b.n	8002cda <HAL_ADC_ConfigChannel+0x35a>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002cbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002cc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ccc:	2320      	movs	r3, #32
 8002cce:	e004      	b.n	8002cda <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002cd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f962 	bl	8001fb0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2103      	movs	r1, #3
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f946 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10a      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x398>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2103      	movs	r1, #3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff f93b 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	0e9b      	lsrs	r3, r3, #26
 8002d12:	f003 021f 	and.w	r2, r3, #31
 8002d16:	e017      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x3c8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff f930 	bl	8001f84 <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d32:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002d3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x3e0>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	0e9b      	lsrs	r3, r3, #26
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	e011      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x404>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002d6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d70:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002d72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002d78:	2320      	movs	r3, #32
 8002d7a:	e003      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7e:	fab3 f383 	clz	r3, r3
 8002d82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d106      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2103      	movs	r1, #3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff f90d 	bl	8001fb0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fa44 	bl	8002228 <LL_ADC_IsEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 8140 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	461a      	mov	r2, r3
 8002db6:	f7ff f981 	bl	80020bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	4a8f      	ldr	r2, [pc, #572]	@ (8002ffc <HAL_ADC_ConfigChannel+0x67c>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	f040 8131 	bne.w	8003028 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_ADC_ConfigChannel+0x46e>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 031f 	and.w	r3, r3, #31
 8002de2:	2b09      	cmp	r3, #9
 8002de4:	bf94      	ite	ls
 8002de6:	2301      	movls	r3, #1
 8002de8:	2300      	movhi	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	e019      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x4a2>
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002df6:	fa93 f3a3 	rbit	r3, r3
 8002dfa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002e06:	2320      	movs	r3, #32
 8002e08:	e003      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e0c:	fab3 f383 	clz	r3, r3
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	3301      	adds	r3, #1
 8002e14:	f003 031f 	and.w	r3, r3, #31
 8002e18:	2b09      	cmp	r3, #9
 8002e1a:	bf94      	ite	ls
 8002e1c:	2301      	movls	r3, #1
 8002e1e:	2300      	movhi	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d079      	beq.n	8002f1a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x4c2>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	3301      	adds	r3, #1
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e40:	e015      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x4ee>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e4a:	fa93 f3a3 	rbit	r3, r3
 8002e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002e50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e52:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002e54:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002e5a:	2320      	movs	r3, #32
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3301      	adds	r3, #1
 8002e68:	069b      	lsls	r3, r3, #26
 8002e6a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x50e>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	0e9b      	lsrs	r3, r3, #26
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	e017      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x53e>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002ea0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e003      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002eaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eac:	fab3 f383 	clz	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebe:	ea42 0103 	orr.w	r1, r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10a      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x564>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	f003 021f 	and.w	r2, r3, #31
 8002eda:	4613      	mov	r3, r2
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4413      	add	r3, r2
 8002ee0:	051b      	lsls	r3, r3, #20
 8002ee2:	e018      	b.n	8002f16 <HAL_ADC_ConfigChannel+0x596>
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002efc:	2320      	movs	r3, #32
 8002efe:	e003      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f02:	fab3 f383 	clz	r3, r3
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	3301      	adds	r3, #1
 8002f0a:	f003 021f 	and.w	r2, r3, #31
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f16:	430b      	orrs	r3, r1
 8002f18:	e081      	b.n	800301e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d107      	bne.n	8002f36 <HAL_ADC_ConfigChannel+0x5b6>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	0e9b      	lsrs	r3, r3, #26
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	069b      	lsls	r3, r3, #26
 8002f30:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f34:	e015      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x5e2>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e003      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	069b      	lsls	r3, r3, #26
 8002f5e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x602>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	0e9b      	lsrs	r3, r3, #26
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 031f 	and.w	r3, r3, #31
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	e017      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x632>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e003      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2101      	movs	r1, #1
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	ea42 0103 	orr.w	r1, r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x65e>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	3301      	adds	r3, #1
 8002fca:	f003 021f 	and.w	r2, r3, #31
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	3b1e      	subs	r3, #30
 8002fd6:	051b      	lsls	r3, r3, #20
 8002fd8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fdc:	e01e      	b.n	800301c <HAL_ADC_ConfigChannel+0x69c>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	fa93 f3a3 	rbit	r3, r3
 8002fea:	60fb      	str	r3, [r7, #12]
  return result;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d104      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	e006      	b.n	8003008 <HAL_ADC_ConfigChannel+0x688>
 8002ffa:	bf00      	nop
 8002ffc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fab3 f383 	clz	r3, r3
 8003006:	b2db      	uxtb	r3, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f003 021f 	and.w	r2, r3, #31
 800300e:	4613      	mov	r3, r2
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	4413      	add	r3, r2
 8003014:	3b1e      	subs	r3, #30
 8003016:	051b      	lsls	r3, r3, #20
 8003018:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800301c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003022:	4619      	mov	r1, r3
 8003024:	f7ff f81e 	bl	8002064 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b44      	ldr	r3, [pc, #272]	@ (8003140 <HAL_ADC_ConfigChannel+0x7c0>)
 800302e:	4013      	ands	r3, r2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d07a      	beq.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003034:	4843      	ldr	r0, [pc, #268]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c4>)
 8003036:	f7fe ff73 	bl	8001f20 <LL_ADC_GetCommonPathInternalCh>
 800303a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a41      	ldr	r2, [pc, #260]	@ (8003148 <HAL_ADC_ConfigChannel+0x7c8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d12c      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003048:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800304c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d126      	bne.n	80030a2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a3c      	ldr	r2, [pc, #240]	@ (800314c <HAL_ADC_ConfigChannel+0x7cc>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d004      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x6e8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a3b      	ldr	r2, [pc, #236]	@ (8003150 <HAL_ADC_ConfigChannel+0x7d0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d15d      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800306c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003070:	4619      	mov	r1, r3
 8003072:	4834      	ldr	r0, [pc, #208]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c4>)
 8003074:	f7fe ff41 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <HAL_ADC_ConfigChannel+0x7d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	4a36      	ldr	r2, [pc, #216]	@ (8003158 <HAL_ADC_ConfigChannel+0x7d8>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003092:	e002      	b.n	800309a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	3b01      	subs	r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1f9      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030a0:	e040      	b.n	8003124 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2d      	ldr	r2, [pc, #180]	@ (800315c <HAL_ADC_ConfigChannel+0x7dc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d118      	bne.n	80030de <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d112      	bne.n	80030de <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a23      	ldr	r2, [pc, #140]	@ (800314c <HAL_ADC_ConfigChannel+0x7cc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d004      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x74c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a22      	ldr	r2, [pc, #136]	@ (8003150 <HAL_ADC_ConfigChannel+0x7d0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d12d      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030d4:	4619      	mov	r1, r3
 80030d6:	481b      	ldr	r0, [pc, #108]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c4>)
 80030d8:	f7fe ff0f 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030dc:	e024      	b.n	8003128 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003160 <HAL_ADC_ConfigChannel+0x7e0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d120      	bne.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80030ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11a      	bne.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a14      	ldr	r2, [pc, #80]	@ (800314c <HAL_ADC_ConfigChannel+0x7cc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d115      	bne.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003102:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003106:	4619      	mov	r1, r3
 8003108:	480e      	ldr	r0, [pc, #56]	@ (8003144 <HAL_ADC_ConfigChannel+0x7c4>)
 800310a:	f7fe fef6 	bl	8001efa <LL_ADC_SetCommonPathInternalCh>
 800310e:	e00c      	b.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003122:	e002      	b.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003124:	bf00      	nop
 8003126:	e000      	b.n	800312a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003128:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003132:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003136:	4618      	mov	r0, r3
 8003138:	37d8      	adds	r7, #216	@ 0xd8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	80080000 	.word	0x80080000
 8003144:	50040300 	.word	0x50040300
 8003148:	c7520000 	.word	0xc7520000
 800314c:	50040000 	.word	0x50040000
 8003150:	50040200 	.word	0x50040200
 8003154:	20000060 	.word	0x20000060
 8003158:	053e2d63 	.word	0x053e2d63
 800315c:	cb840000 	.word	0xcb840000
 8003160:	80000001 	.word	0x80000001

08003164 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff f8a2 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8003180:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f8c3 	bl	8002312 <LL_ADC_INJ_IsConversionOngoing>
 800318c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8098 	beq.w	80032cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d02a      	beq.n	8003200 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7e5b      	ldrb	r3, [r3, #25]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d126      	bne.n	8003200 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	7e1b      	ldrb	r3, [r3, #24]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d122      	bne.n	8003200 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031be:	e014      	b.n	80031ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4a45      	ldr	r2, [pc, #276]	@ (80032d8 <ADC_ConversionStop+0x174>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d90d      	bls.n	80031e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d8:	f043 0201 	orr.w	r2, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e074      	b.n	80032ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	3301      	adds	r3, #1
 80031e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d1e3      	bne.n	80031c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2240      	movs	r2, #64	@ 0x40
 80031fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d014      	beq.n	8003230 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff f85a 	bl	80022c4 <LL_ADC_REG_IsConversionOngoing>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f7ff f817 	bl	800224e <LL_ADC_IsDisableOngoing>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff f836 	bl	800229c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d014      	beq.n	8003260 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f869 	bl	8002312 <LL_ADC_INJ_IsConversionOngoing>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00c      	beq.n	8003260 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe ffff 	bl	800224e <LL_ADC_IsDisableOngoing>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7ff f845 	bl	80022ea <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d005      	beq.n	8003272 <ADC_ConversionStop+0x10e>
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d105      	bne.n	8003278 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800326c:	230c      	movs	r3, #12
 800326e:	617b      	str	r3, [r7, #20]
        break;
 8003270:	e005      	b.n	800327e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003272:	2308      	movs	r3, #8
 8003274:	617b      	str	r3, [r7, #20]
        break;
 8003276:	e002      	b.n	800327e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003278:	2304      	movs	r3, #4
 800327a:	617b      	str	r3, [r7, #20]
        break;
 800327c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800327e:	f7fe fe1d 	bl	8001ebc <HAL_GetTick>
 8003282:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003284:	e01b      	b.n	80032be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003286:	f7fe fe19 	bl	8001ebc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b05      	cmp	r3, #5
 8003292:	d914      	bls.n	80032be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032a6:	f043 0210 	orr.w	r2, r3, #16
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f043 0201 	orr.w	r2, r3, #1
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e007      	b.n	80032ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1dc      	bne.n	8003286 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	a33fffff 	.word	0xa33fffff

080032dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe ff9b 	bl	8002228 <LL_ADC_IsEnabled>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d169      	bne.n	80033cc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	4b36      	ldr	r3, [pc, #216]	@ (80033d8 <ADC_Enable+0xfc>)
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00d      	beq.n	8003322 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	f043 0210 	orr.w	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003316:	f043 0201 	orr.w	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e055      	b.n	80033ce <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4618      	mov	r0, r3
 8003328:	f7fe ff56 	bl	80021d8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800332c:	482b      	ldr	r0, [pc, #172]	@ (80033dc <ADC_Enable+0x100>)
 800332e:	f7fe fdf7 	bl	8001f20 <LL_ADC_GetCommonPathInternalCh>
 8003332:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003334:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003338:	2b00      	cmp	r3, #0
 800333a:	d013      	beq.n	8003364 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <ADC_Enable+0x104>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	099b      	lsrs	r3, r3, #6
 8003342:	4a28      	ldr	r2, [pc, #160]	@ (80033e4 <ADC_Enable+0x108>)
 8003344:	fba2 2303 	umull	r2, r3, r2, r3
 8003348:	099b      	lsrs	r3, r3, #6
 800334a:	1c5a      	adds	r2, r3, #1
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003356:	e002      	b.n	800335e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	3b01      	subs	r3, #1
 800335c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f9      	bne.n	8003358 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003364:	f7fe fdaa 	bl	8001ebc <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800336a:	e028      	b.n	80033be <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fe ff59 	bl	8002228 <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d104      	bne.n	8003386 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fe ff29 	bl	80021d8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003386:	f7fe fd99 	bl	8001ebc <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d914      	bls.n	80033be <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d00d      	beq.n	80033be <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e007      	b.n	80033ce <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d1cf      	bne.n	800336c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	8000003f 	.word	0x8000003f
 80033dc:	50040300 	.word	0x50040300
 80033e0:	20000060 	.word	0x20000060
 80033e4:	053e2d63 	.word	0x053e2d63

080033e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7fe ff2a 	bl	800224e <LL_ADC_IsDisableOngoing>
 80033fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fe ff11 	bl	8002228 <LL_ADC_IsEnabled>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d047      	beq.n	800349c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d144      	bne.n	800349c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 030d 	and.w	r3, r3, #13
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10c      	bne.n	800343a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7fe feeb 	bl	8002200 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2203      	movs	r2, #3
 8003430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003432:	f7fe fd43 	bl	8001ebc <HAL_GetTick>
 8003436:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003438:	e029      	b.n	800348e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	f043 0210 	orr.w	r2, r3, #16
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	f043 0201 	orr.w	r2, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e023      	b.n	800349e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003456:	f7fe fd31 	bl	8001ebc <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d914      	bls.n	800348e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d00d      	beq.n	800348e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	f043 0210 	orr.w	r2, r3, #16
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e007      	b.n	800349e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1dc      	bne.n	8003456 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3710      	adds	r7, #16
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <LL_ADC_IsEnabled>:
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <LL_ADC_IsEnabled+0x18>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <LL_ADC_IsEnabled+0x1a>
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_REG_IsConversionOngoing>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0304 	and.w	r3, r3, #4
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d101      	bne.n	80034e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b09f      	sub	sp, #124	@ 0x7c
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800350a:	2b01      	cmp	r3, #1
 800350c:	d101      	bne.n	8003512 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800350e:	2302      	movs	r3, #2
 8003510:	e093      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800351a:	2300      	movs	r3, #0
 800351c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800351e:	2300      	movs	r3, #0
 8003520:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a47      	ldr	r2, [pc, #284]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d102      	bne.n	8003532 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800352c:	4b46      	ldr	r3, [pc, #280]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	e001      	b.n	8003536 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e072      	b.n	800363a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff ffb8 	bl	80034cc <LL_ADC_REG_IsConversionOngoing>
 800355c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff ffb2 	bl	80034cc <LL_ADC_REG_IsConversionOngoing>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d154      	bne.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800356e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003570:	2b00      	cmp	r3, #0
 8003572:	d151      	bne.n	8003618 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003574:	4b35      	ldr	r3, [pc, #212]	@ (800364c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003576:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d02c      	beq.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003592:	035b      	lsls	r3, r3, #13
 8003594:	430b      	orrs	r3, r1
 8003596:	431a      	orrs	r2, r3
 8003598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800359a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800359c:	4829      	ldr	r0, [pc, #164]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800359e:	f7ff ff82 	bl	80034a6 <LL_ADC_IsEnabled>
 80035a2:	4604      	mov	r4, r0
 80035a4:	4828      	ldr	r0, [pc, #160]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035a6:	f7ff ff7e 	bl	80034a6 <LL_ADC_IsEnabled>
 80035aa:	4603      	mov	r3, r0
 80035ac:	431c      	orrs	r4, r3
 80035ae:	4828      	ldr	r0, [pc, #160]	@ (8003650 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035b0:	f7ff ff79 	bl	80034a6 <LL_ADC_IsEnabled>
 80035b4:	4603      	mov	r3, r0
 80035b6:	4323      	orrs	r3, r4
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d137      	bne.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80035bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80035c4:	f023 030f 	bic.w	r3, r3, #15
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	6811      	ldr	r1, [r2, #0]
 80035cc:	683a      	ldr	r2, [r7, #0]
 80035ce:	6892      	ldr	r2, [r2, #8]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	431a      	orrs	r2, r3
 80035d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80035d8:	e028      	b.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80035da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035e6:	4817      	ldr	r0, [pc, #92]	@ (8003644 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035e8:	f7ff ff5d 	bl	80034a6 <LL_ADC_IsEnabled>
 80035ec:	4604      	mov	r4, r0
 80035ee:	4816      	ldr	r0, [pc, #88]	@ (8003648 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035f0:	f7ff ff59 	bl	80034a6 <LL_ADC_IsEnabled>
 80035f4:	4603      	mov	r3, r0
 80035f6:	431c      	orrs	r4, r3
 80035f8:	4815      	ldr	r0, [pc, #84]	@ (8003650 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035fa:	f7ff ff54 	bl	80034a6 <LL_ADC_IsEnabled>
 80035fe:	4603      	mov	r3, r0
 8003600:	4323      	orrs	r3, r4
 8003602:	2b00      	cmp	r3, #0
 8003604:	d112      	bne.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800360e:	f023 030f 	bic.w	r3, r3, #15
 8003612:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003614:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003616:	e009      	b.n	800362c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361c:	f043 0220 	orr.w	r2, r3, #32
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800362a:	e000      	b.n	800362e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800362c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003636:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800363a:	4618      	mov	r0, r3
 800363c:	377c      	adds	r7, #124	@ 0x7c
 800363e:	46bd      	mov	sp, r7
 8003640:	bd90      	pop	{r4, r7, pc}
 8003642:	bf00      	nop
 8003644:	50040000 	.word	0x50040000
 8003648:	50040100 	.word	0x50040100
 800364c:	50040300 	.word	0x50040300
 8003650:	50040200 	.word	0x50040200

08003654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003670:	4013      	ands	r3, r2
 8003672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800367c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003686:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <__NVIC_SetPriorityGrouping+0x44>)
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	60d3      	str	r3, [r2, #12]
}
 800368c:	bf00      	nop
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	e000ed00 	.word	0xe000ed00

0800369c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <__NVIC_GetPriorityGrouping+0x18>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	0a1b      	lsrs	r3, r3, #8
 80036a6:	f003 0307 	and.w	r3, r3, #7
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	db0b      	blt.n	80036e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	f003 021f 	and.w	r2, r3, #31
 80036d0:	4907      	ldr	r1, [pc, #28]	@ (80036f0 <__NVIC_EnableIRQ+0x38>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	095b      	lsrs	r3, r3, #5
 80036d8:	2001      	movs	r0, #1
 80036da:	fa00 f202 	lsl.w	r2, r0, r2
 80036de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000e100 	.word	0xe000e100

080036f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	6039      	str	r1, [r7, #0]
 80036fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b00      	cmp	r3, #0
 8003706:	db0a      	blt.n	800371e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	490c      	ldr	r1, [pc, #48]	@ (8003740 <__NVIC_SetPriority+0x4c>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	0112      	lsls	r2, r2, #4
 8003714:	b2d2      	uxtb	r2, r2
 8003716:	440b      	add	r3, r1
 8003718:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800371c:	e00a      	b.n	8003734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4908      	ldr	r1, [pc, #32]	@ (8003744 <__NVIC_SetPriority+0x50>)
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	3b04      	subs	r3, #4
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	440b      	add	r3, r1
 8003732:	761a      	strb	r2, [r3, #24]
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	e000e100 	.word	0xe000e100
 8003744:	e000ed00 	.word	0xe000ed00

08003748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003748:	b480      	push	{r7}
 800374a:	b089      	sub	sp, #36	@ 0x24
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f1c3 0307 	rsb	r3, r3, #7
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf28      	it	cs
 8003766:	2304      	movcs	r3, #4
 8003768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	3304      	adds	r3, #4
 800376e:	2b06      	cmp	r3, #6
 8003770:	d902      	bls.n	8003778 <NVIC_EncodePriority+0x30>
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3b03      	subs	r3, #3
 8003776:	e000      	b.n	800377a <NVIC_EncodePriority+0x32>
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800377c:	f04f 32ff 	mov.w	r2, #4294967295
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43da      	mvns	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	401a      	ands	r2, r3
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003790:	f04f 31ff 	mov.w	r1, #4294967295
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa01 f303 	lsl.w	r3, r1, r3
 800379a:	43d9      	mvns	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037a0:	4313      	orrs	r3, r2
         );
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3724      	adds	r7, #36	@ 0x24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3b01      	subs	r3, #1
 80037bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037c0:	d301      	bcc.n	80037c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037c2:	2301      	movs	r3, #1
 80037c4:	e00f      	b.n	80037e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037c6:	4a0a      	ldr	r2, [pc, #40]	@ (80037f0 <SysTick_Config+0x40>)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ce:	210f      	movs	r1, #15
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	f7ff ff8e 	bl	80036f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <SysTick_Config+0x40>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037de:	4b04      	ldr	r3, [pc, #16]	@ (80037f0 <SysTick_Config+0x40>)
 80037e0:	2207      	movs	r2, #7
 80037e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	e000e010 	.word	0xe000e010

080037f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff ff29 	bl	8003654 <__NVIC_SetPriorityGrouping>
}
 8003802:	bf00      	nop
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	4603      	mov	r3, r0
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
 8003816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003818:	2300      	movs	r3, #0
 800381a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800381c:	f7ff ff3e 	bl	800369c <__NVIC_GetPriorityGrouping>
 8003820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	6978      	ldr	r0, [r7, #20]
 8003828:	f7ff ff8e 	bl	8003748 <NVIC_EncodePriority>
 800382c:	4602      	mov	r2, r0
 800382e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff5d 	bl	80036f4 <__NVIC_SetPriority>
}
 800383a:	bf00      	nop
 800383c:	3718      	adds	r7, #24
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	4603      	mov	r3, r0
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800384c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ff31 	bl	80036b8 <__NVIC_EnableIRQ>
}
 8003856:	bf00      	nop
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b082      	sub	sp, #8
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7ff ffa2 	bl	80037b0 <SysTick_Config>
 800386c:	4603      	mov	r3, r0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
	...

08003878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e17f      	b.n	8003b88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8171 	beq.w	8003b82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d005      	beq.n	80038b8 <HAL_GPIO_Init+0x40>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d130      	bne.n	800391a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ee:	2201      	movs	r2, #1
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0201 	and.w	r2, r3, #1
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b03      	cmp	r3, #3
 8003924:	d118      	bne.n	8003958 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800392c:	2201      	movs	r2, #1
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f003 0201 	and.w	r2, r3, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b03      	cmp	r3, #3
 8003962:	d017      	beq.n	8003994 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d123      	bne.n	80039e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	08da      	lsrs	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3208      	adds	r2, #8
 80039a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	220f      	movs	r2, #15
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	08da      	lsrs	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3208      	adds	r2, #8
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0203 	and.w	r2, r3, #3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80ac 	beq.w	8003b82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a42:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_GPIO_Init+0x334>)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x242>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb0 <HAL_GPIO_Init+0x338>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x23e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb4 <HAL_GPIO_Init+0x33c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x23a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb8 <HAL_GPIO_Init+0x340>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x236>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4c      	ldr	r2, [pc, #304]	@ (8003bbc <HAL_GPIO_Init+0x344>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x232>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <HAL_GPIO_Init+0x348>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x22e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc4 <HAL_GPIO_Init+0x34c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x22a>
 8003a9e:	2306      	movs	r3, #6
 8003aa0:	e00c      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e00a      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aa6:	2305      	movs	r3, #5
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aba:	2300      	movs	r3, #0
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	f002 0203 	and.w	r2, r2, #3
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003acc:	4937      	ldr	r1, [pc, #220]	@ (8003bac <HAL_GPIO_Init+0x334>)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003afe:	4a32      	ldr	r2, [pc, #200]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b04:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b28:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b2e:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b7c:	4a12      	ldr	r2, [pc, #72]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	3301      	adds	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f ae78 	bne.w	8003888 <HAL_GPIO_Init+0x10>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	48000400 	.word	0x48000400
 8003bb4:	48000800 	.word	0x48000800
 8003bb8:	48000c00 	.word	0x48000c00
 8003bbc:	48001000 	.word	0x48001000
 8003bc0:	48001400 	.word	0x48001400
 8003bc4:	48001800 	.word	0x48001800
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bd0:	4b04      	ldr	r3, [pc, #16]	@ (8003be4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40007000 	.word	0x40007000

08003be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf6:	d130      	bne.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bf8:	4b23      	ldr	r3, [pc, #140]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c04:	d038      	beq.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c0e:	4a1e      	ldr	r2, [pc, #120]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c16:	4b1d      	ldr	r3, [pc, #116]	@ (8003c8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2232      	movs	r2, #50	@ 0x32
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	4a1b      	ldr	r2, [pc, #108]	@ (8003c90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c22:	fba2 2303 	umull	r2, r3, r2, r3
 8003c26:	0c9b      	lsrs	r3, r3, #18
 8003c28:	3301      	adds	r3, #1
 8003c2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2c:	e002      	b.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c34:	4b14      	ldr	r3, [pc, #80]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c40:	d102      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1f2      	bne.n	8003c2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c48:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c54:	d110      	bne.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e00f      	b.n	8003c7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c66:	d007      	beq.n	8003c78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c68:	4b07      	ldr	r3, [pc, #28]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c70:	4a05      	ldr	r2, [pc, #20]	@ (8003c88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3714      	adds	r7, #20
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	20000060 	.word	0x20000060
 8003c90:	431bde83 	.word	0x431bde83

08003c94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e3ca      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca6:	4b97      	ldr	r3, [pc, #604]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cb0:	4b94      	ldr	r3, [pc, #592]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0310 	and.w	r3, r3, #16
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80e4 	beq.w	8003e90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_RCC_OscConfig+0x4a>
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	2b0c      	cmp	r3, #12
 8003cd2:	f040 808b 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	f040 8087 	bne.w	8003dec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cde:	4b89      	ldr	r3, [pc, #548]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x62>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e3a2      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1a      	ldr	r2, [r3, #32]
 8003cfa:	4b82      	ldr	r3, [pc, #520]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_RCC_OscConfig+0x7c>
 8003d06:	4b7f      	ldr	r3, [pc, #508]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_OscConfig+0x88>
 8003d10:	4b7c      	ldr	r3, [pc, #496]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d223      	bcs.n	8003d68 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fd55 	bl	80047d4 <RCC_SetFlashLatencyFromMSIRange>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e383      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d34:	4b73      	ldr	r3, [pc, #460]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a72      	ldr	r2, [pc, #456]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	f043 0308 	orr.w	r3, r3, #8
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b70      	ldr	r3, [pc, #448]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	496d      	ldr	r1, [pc, #436]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d52:	4b6c      	ldr	r3, [pc, #432]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	021b      	lsls	r3, r3, #8
 8003d60:	4968      	ldr	r1, [pc, #416]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	604b      	str	r3, [r1, #4]
 8003d66:	e025      	b.n	8003db4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d68:	4b66      	ldr	r3, [pc, #408]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	f043 0308 	orr.w	r3, r3, #8
 8003d72:	6013      	str	r3, [r2, #0]
 8003d74:	4b63      	ldr	r3, [pc, #396]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	4960      	ldr	r1, [pc, #384]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d86:	4b5f      	ldr	r3, [pc, #380]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	495b      	ldr	r1, [pc, #364]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 fd15 	bl	80047d4 <RCC_SetFlashLatencyFromMSIRange>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e343      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003db4:	f000 fc4a 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b52      	ldr	r3, [pc, #328]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	091b      	lsrs	r3, r3, #4
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	4950      	ldr	r1, [pc, #320]	@ (8003f08 <HAL_RCC_OscConfig+0x274>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	4a4e      	ldr	r2, [pc, #312]	@ (8003f0c <HAL_RCC_OscConfig+0x278>)
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dd4:	4b4e      	ldr	r3, [pc, #312]	@ (8003f10 <HAL_RCC_OscConfig+0x27c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7fe f81f 	bl	8001e1c <HAL_InitTick>
 8003dde:	4603      	mov	r3, r0
 8003de0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d052      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	e327      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d032      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003df4:	4b43      	ldr	r3, [pc, #268]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a42      	ldr	r2, [pc, #264]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e00:	f7fe f85c 	bl	8001ebc <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e08:	f7fe f858 	bl	8001ebc <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e310      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e26:	4b37      	ldr	r3, [pc, #220]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a36      	ldr	r2, [pc, #216]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	f043 0308 	orr.w	r3, r3, #8
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4931      	ldr	r1, [pc, #196]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e44:	4b2f      	ldr	r3, [pc, #188]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	021b      	lsls	r3, r3, #8
 8003e52:	492c      	ldr	r1, [pc, #176]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	e01a      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a29      	ldr	r2, [pc, #164]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f023 0301 	bic.w	r3, r3, #1
 8003e64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e66:	f7fe f829 	bl	8001ebc <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e6e:	f7fe f825 	bl	8001ebc <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e2dd      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e80:	4b20      	ldr	r3, [pc, #128]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1f0      	bne.n	8003e6e <HAL_RCC_OscConfig+0x1da>
 8003e8c:	e000      	b.n	8003e90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d074      	beq.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x21a>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b0c      	cmp	r3, #12
 8003ea6:	d10e      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d064      	beq.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d160      	bne.n	8003f84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e2ba      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x24a>
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ed6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	e026      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ee6:	d115      	bne.n	8003f14 <HAL_RCC_OscConfig+0x280>
 8003ee8:	4b06      	ldr	r3, [pc, #24]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a05      	ldr	r2, [pc, #20]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003eee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b03      	ldr	r3, [pc, #12]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a02      	ldr	r2, [pc, #8]	@ (8003f04 <HAL_RCC_OscConfig+0x270>)
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	08008400 	.word	0x08008400
 8003f0c:	20000060 	.word	0x20000060
 8003f10:	20000064 	.word	0x20000064
 8003f14:	4ba0      	ldr	r3, [pc, #640]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a9f      	ldr	r2, [pc, #636]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	4b9d      	ldr	r3, [pc, #628]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a9c      	ldr	r2, [pc, #624]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d013      	beq.n	8003f5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fd ffc2 	bl	8001ebc <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fd ffbe 	bl	8001ebc <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	@ 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e276      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4e:	4b92      	ldr	r3, [pc, #584]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x2a8>
 8003f5a:	e014      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd ffae 	bl	8001ebc <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f64:	f7fd ffaa 	bl	8001ebc <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	@ 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e262      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f76:	4b88      	ldr	r3, [pc, #544]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x2d0>
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d060      	beq.n	8004054 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	2b04      	cmp	r3, #4
 8003f96:	d005      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x310>
 8003f98:	69bb      	ldr	r3, [r7, #24]
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d119      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d116      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa4:	4b7c      	ldr	r3, [pc, #496]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <HAL_RCC_OscConfig+0x328>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e23f      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fbc:	4b76      	ldr	r3, [pc, #472]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	4973      	ldr	r1, [pc, #460]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd0:	e040      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d023      	beq.n	8004022 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fda:	4b6f      	ldr	r3, [pc, #444]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a6e      	ldr	r2, [pc, #440]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8003fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fe4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fd ff69 	bl	8001ebc <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fd ff65 	bl	8001ebc <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e21d      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004000:	4b65      	ldr	r3, [pc, #404]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b62      	ldr	r3, [pc, #392]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	061b      	lsls	r3, r3, #24
 800401a:	495f      	ldr	r1, [pc, #380]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800401c:	4313      	orrs	r3, r2
 800401e:	604b      	str	r3, [r1, #4]
 8004020:	e018      	b.n	8004054 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b5d      	ldr	r3, [pc, #372]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a5c      	ldr	r2, [pc, #368]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800402c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd ff45 	bl	8001ebc <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004036:	f7fd ff41 	bl	8001ebc <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1f9      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004048:	4b53      	ldr	r3, [pc, #332]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1f0      	bne.n	8004036 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d03c      	beq.n	80040da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d01c      	beq.n	80040a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004068:	4b4b      	ldr	r3, [pc, #300]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406e:	4a4a      	ldr	r2, [pc, #296]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004078:	f7fd ff20 	bl	8001ebc <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004080:	f7fd ff1c 	bl	8001ebc <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e1d4      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004092:	4b41      	ldr	r3, [pc, #260]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004094:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0ef      	beq.n	8004080 <HAL_RCC_OscConfig+0x3ec>
 80040a0:	e01b      	b.n	80040da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040aa:	f023 0301 	bic.w	r3, r3, #1
 80040ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b2:	f7fd ff03 	bl	8001ebc <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ba:	f7fd feff 	bl	8001ebc <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e1b7      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040cc:	4b32      	ldr	r3, [pc, #200]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0304 	and.w	r3, r3, #4
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80a6 	beq.w	8004234 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d10d      	bne.n	8004114 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f8:	4b27      	ldr	r3, [pc, #156]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040fc:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 80040fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004102:	6593      	str	r3, [r2, #88]	@ 0x58
 8004104:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004108:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410c:	60bb      	str	r3, [r7, #8]
 800410e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004110:	2301      	movs	r3, #1
 8004112:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004114:	4b21      	ldr	r3, [pc, #132]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d118      	bne.n	8004152 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b1e      	ldr	r3, [pc, #120]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800412a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412c:	f7fd fec6 	bl	8001ebc <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fd fec2 	bl	8001ebc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e17a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004146:	4b15      	ldr	r3, [pc, #84]	@ (800419c <HAL_RCC_OscConfig+0x508>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d108      	bne.n	800416c <HAL_RCC_OscConfig+0x4d8>
 800415a:	4b0f      	ldr	r3, [pc, #60]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	4a0d      	ldr	r2, [pc, #52]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416a:	e029      	b.n	80041c0 <HAL_RCC_OscConfig+0x52c>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b05      	cmp	r3, #5
 8004172:	d115      	bne.n	80041a0 <HAL_RCC_OscConfig+0x50c>
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417a:	4a07      	ldr	r2, [pc, #28]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800417c:	f043 0304 	orr.w	r3, r3, #4
 8004180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004184:	4b04      	ldr	r3, [pc, #16]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 8004186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418a:	4a03      	ldr	r2, [pc, #12]	@ (8004198 <HAL_RCC_OscConfig+0x504>)
 800418c:	f043 0301 	orr.w	r3, r3, #1
 8004190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004194:	e014      	b.n	80041c0 <HAL_RCC_OscConfig+0x52c>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	40007000 	.word	0x40007000
 80041a0:	4b9c      	ldr	r3, [pc, #624]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a6:	4a9b      	ldr	r2, [pc, #620]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041a8:	f023 0301 	bic.w	r3, r3, #1
 80041ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80041b0:	4b98      	ldr	r3, [pc, #608]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	4a97      	ldr	r2, [pc, #604]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041b8:	f023 0304 	bic.w	r3, r3, #4
 80041bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d016      	beq.n	80041f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fd fe78 	bl	8001ebc <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fd fe74 	bl	8001ebc <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e12a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e6:	4b8b      	ldr	r3, [pc, #556]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0ed      	beq.n	80041d0 <HAL_RCC_OscConfig+0x53c>
 80041f4:	e015      	b.n	8004222 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd fe61 	bl	8001ebc <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041fc:	e00a      	b.n	8004214 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fd fe5d 	bl	8001ebc <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e113      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004214:	4b7f      	ldr	r3, [pc, #508]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1ed      	bne.n	80041fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004222:	7ffb      	ldrb	r3, [r7, #31]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004228:	4b7a      	ldr	r3, [pc, #488]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800422c:	4a79      	ldr	r2, [pc, #484]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800422e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004232:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80fe 	beq.w	800443a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004242:	2b02      	cmp	r3, #2
 8004244:	f040 80d0 	bne.w	80043e8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004248:	4b72      	ldr	r3, [pc, #456]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d130      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d127      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004278:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11f      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004288:	2a07      	cmp	r2, #7
 800428a:	bf14      	ite	ne
 800428c:	2201      	movne	r2, #1
 800428e:	2200      	moveq	r2, #0
 8004290:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a0:	085b      	lsrs	r3, r3, #1
 80042a2:	3b01      	subs	r3, #1
 80042a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d109      	bne.n	80042be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	085b      	lsrs	r3, r3, #1
 80042b6:	3b01      	subs	r3, #1
 80042b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d06e      	beq.n	800439c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	d069      	beq.n	8004398 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042c4:	4b53      	ldr	r3, [pc, #332]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80042d0:	4b50      	ldr	r3, [pc, #320]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0ad      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042e0:	4b4c      	ldr	r3, [pc, #304]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80042e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042ec:	f7fd fde6 	bl	8001ebc <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fde2 	bl	8001ebc <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e09a      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004306:	4b43      	ldr	r3, [pc, #268]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004312:	4b40      	ldr	r3, [pc, #256]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	4b40      	ldr	r3, [pc, #256]	@ (8004418 <HAL_RCC_OscConfig+0x784>)
 8004318:	4013      	ands	r3, r2
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004322:	3a01      	subs	r2, #1
 8004324:	0112      	lsls	r2, r2, #4
 8004326:	4311      	orrs	r1, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800432c:	0212      	lsls	r2, r2, #8
 800432e:	4311      	orrs	r1, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004334:	0852      	lsrs	r2, r2, #1
 8004336:	3a01      	subs	r2, #1
 8004338:	0552      	lsls	r2, r2, #21
 800433a:	4311      	orrs	r1, r2
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004340:	0852      	lsrs	r2, r2, #1
 8004342:	3a01      	subs	r2, #1
 8004344:	0652      	lsls	r2, r2, #25
 8004346:	4311      	orrs	r1, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800434c:	0912      	lsrs	r2, r2, #4
 800434e:	0452      	lsls	r2, r2, #17
 8004350:	430a      	orrs	r2, r1
 8004352:	4930      	ldr	r1, [pc, #192]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004354:	4313      	orrs	r3, r2
 8004356:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004358:	4b2e      	ldr	r3, [pc, #184]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a2d      	ldr	r2, [pc, #180]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800435e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004364:	4b2b      	ldr	r3, [pc, #172]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a2a      	ldr	r2, [pc, #168]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800436e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004370:	f7fd fda4 	bl	8001ebc <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd fda0 	bl	8001ebc <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e058      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800438a:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004396:	e050      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e04f      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	4b1d      	ldr	r3, [pc, #116]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d148      	bne.n	800443a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a19      	ldr	r2, [pc, #100]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b4:	4b17      	ldr	r3, [pc, #92]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a16      	ldr	r2, [pc, #88]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043c0:	f7fd fd7c 	bl	8001ebc <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c8:	f7fd fd78 	bl	8001ebc <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e030      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	4b0e      	ldr	r3, [pc, #56]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0x734>
 80043e6:	e028      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d023      	beq.n	8004436 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b09      	ldr	r3, [pc, #36]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a08      	ldr	r2, [pc, #32]	@ (8004414 <HAL_RCC_OscConfig+0x780>)
 80043f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fd fd5f 	bl	8001ebc <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004400:	e00c      	b.n	800441c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fd fd5b 	bl	8001ebc <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d905      	bls.n	800441c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e013      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
 8004414:	40021000 	.word	0x40021000
 8004418:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800441c:	4b09      	ldr	r3, [pc, #36]	@ (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1ec      	bne.n	8004402 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004428:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	4905      	ldr	r1, [pc, #20]	@ (8004444 <HAL_RCC_OscConfig+0x7b0>)
 800442e:	4b06      	ldr	r3, [pc, #24]	@ (8004448 <HAL_RCC_OscConfig+0x7b4>)
 8004430:	4013      	ands	r3, r2
 8004432:	60cb      	str	r3, [r1, #12]
 8004434:	e001      	b.n	800443a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e000      	b.n	800443c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000
 8004448:	feeefffc 	.word	0xfeeefffc

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0e7      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b75      	ldr	r3, [pc, #468]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d910      	bls.n	8004490 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b72      	ldr	r3, [pc, #456]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 0207 	bic.w	r2, r3, #7
 8004476:	4970      	ldr	r1, [pc, #448]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800447e:	4b6e      	ldr	r3, [pc, #440]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e0cf      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d010      	beq.n	80044be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	4b66      	ldr	r3, [pc, #408]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d908      	bls.n	80044be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044ac:	4b63      	ldr	r3, [pc, #396]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	4960      	ldr	r1, [pc, #384]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d04c      	beq.n	8004564 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b03      	cmp	r3, #3
 80044d0:	d107      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044d2:	4b5a      	ldr	r3, [pc, #360]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d121      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e0a6      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ea:	4b54      	ldr	r3, [pc, #336]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d115      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e09a      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004502:	4b4e      	ldr	r3, [pc, #312]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e08e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004512:	4b4a      	ldr	r3, [pc, #296]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e086      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b46      	ldr	r3, [pc, #280]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4943      	ldr	r1, [pc, #268]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004534:	f7fd fcc2 	bl	8001ebc <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd fcbe 	bl	8001ebc <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	@ 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e06e      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b3a      	ldr	r3, [pc, #232]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d010      	beq.n	8004592 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	4b31      	ldr	r3, [pc, #196]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457c:	429a      	cmp	r2, r3
 800457e:	d208      	bcs.n	8004592 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004580:	4b2e      	ldr	r3, [pc, #184]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	492b      	ldr	r1, [pc, #172]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004592:	4b29      	ldr	r3, [pc, #164]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d210      	bcs.n	80045c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a0:	4b25      	ldr	r3, [pc, #148]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 0207 	bic.w	r2, r3, #7
 80045a8:	4923      	ldr	r1, [pc, #140]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b0:	4b21      	ldr	r3, [pc, #132]	@ (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e036      	b.n	8004630 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d008      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045ce:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	4918      	ldr	r1, [pc, #96]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0308 	and.w	r3, r3, #8
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ec:	4b13      	ldr	r3, [pc, #76]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	4910      	ldr	r1, [pc, #64]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004600:	f000 f824 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	490b      	ldr	r1, [pc, #44]	@ (8004640 <HAL_RCC_ClockConfig+0x1f4>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
 800461c:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <HAL_RCC_ClockConfig+0x1f8>)
 800461e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004620:	4b09      	ldr	r3, [pc, #36]	@ (8004648 <HAL_RCC_ClockConfig+0x1fc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f7fd fbf9 	bl	8001e1c <HAL_InitTick>
 800462a:	4603      	mov	r3, r0
 800462c:	72fb      	strb	r3, [r7, #11]

  return status;
 800462e:	7afb      	ldrb	r3, [r7, #11]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40022000 	.word	0x40022000
 800463c:	40021000 	.word	0x40021000
 8004640:	08008400 	.word	0x08008400
 8004644:	20000060 	.word	0x20000060
 8004648:	20000064 	.word	0x20000064

0800464c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	2300      	movs	r3, #0
 8004658:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800465a:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 030c 	and.w	r3, r3, #12
 8004662:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	2b0c      	cmp	r3, #12
 8004678:	d121      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d11e      	bne.n	80046be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004680:	4b34      	ldr	r3, [pc, #208]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d107      	bne.n	800469c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004692:	0a1b      	lsrs	r3, r3, #8
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	61fb      	str	r3, [r7, #28]
 800469a:	e005      	b.n	80046a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800469c:	4b2d      	ldr	r3, [pc, #180]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046a8:	4a2b      	ldr	r2, [pc, #172]	@ (8004758 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10d      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046bc:	e00a      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	d102      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c4:	4b25      	ldr	r3, [pc, #148]	@ (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e004      	b.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d101      	bne.n	80046d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046d0:	4b23      	ldr	r3, [pc, #140]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	2b0c      	cmp	r3, #12
 80046d8:	d134      	bne.n	8004744 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046da:	4b1e      	ldr	r3, [pc, #120]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d003      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0xac>
 80046f0:	e005      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046f2:	4b1a      	ldr	r3, [pc, #104]	@ (800475c <HAL_RCC_GetSysClockFreq+0x110>)
 80046f4:	617b      	str	r3, [r7, #20]
      break;
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80046f8:	4b19      	ldr	r3, [pc, #100]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x114>)
 80046fa:	617b      	str	r3, [r7, #20]
      break;
 80046fc:	e002      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	617b      	str	r3, [r7, #20]
      break;
 8004702:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004704:	4b13      	ldr	r3, [pc, #76]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	091b      	lsrs	r3, r3, #4
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	3301      	adds	r3, #1
 8004710:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004712:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	fb03 f202 	mul.w	r2, r3, r2
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800472a:	4b0a      	ldr	r3, [pc, #40]	@ (8004754 <HAL_RCC_GetSysClockFreq+0x108>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	0e5b      	lsrs	r3, r3, #25
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	3301      	adds	r3, #1
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004742:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004744:	69bb      	ldr	r3, [r7, #24]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	@ 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000
 8004758:	08008418 	.word	0x08008418
 800475c:	00f42400 	.word	0x00f42400
 8004760:	007a1200 	.word	0x007a1200

08004764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004768:	4b03      	ldr	r3, [pc, #12]	@ (8004778 <HAL_RCC_GetHCLKFreq+0x14>)
 800476a:	681b      	ldr	r3, [r3, #0]
}
 800476c:	4618      	mov	r0, r3
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	20000060 	.word	0x20000060

0800477c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004780:	f7ff fff0 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 8004784:	4602      	mov	r2, r0
 8004786:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	0a1b      	lsrs	r3, r3, #8
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	4904      	ldr	r1, [pc, #16]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004792:	5ccb      	ldrb	r3, [r1, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40021000 	.word	0x40021000
 80047a4:	08008410 	.word	0x08008410

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047ac:	f7ff ffda 	bl	8004764 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b06      	ldr	r3, [pc, #24]	@ (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0adb      	lsrs	r3, r3, #11
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	f003 031f 	and.w	r3, r3, #31
 80047c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40021000 	.word	0x40021000
 80047d0:	08008410 	.word	0x08008410

080047d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80047e0:	4b2a      	ldr	r3, [pc, #168]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80047ec:	f7ff f9ee 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 80047f0:	6178      	str	r0, [r7, #20]
 80047f2:	e014      	b.n	800481e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80047f4:	4b25      	ldr	r3, [pc, #148]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f8:	4a24      	ldr	r2, [pc, #144]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004800:	4b22      	ldr	r3, [pc, #136]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004804:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800480c:	f7ff f9de 	bl	8003bcc <HAL_PWREx_GetVoltageRange>
 8004810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004812:	4b1e      	ldr	r3, [pc, #120]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004816:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004824:	d10b      	bne.n	800483e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b80      	cmp	r3, #128	@ 0x80
 800482a:	d919      	bls.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004830:	d902      	bls.n	8004838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004832:	2302      	movs	r3, #2
 8004834:	613b      	str	r3, [r7, #16]
 8004836:	e013      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004838:	2301      	movs	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	e010      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b80      	cmp	r3, #128	@ 0x80
 8004842:	d902      	bls.n	800484a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004844:	2303      	movs	r3, #3
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	e00a      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b80      	cmp	r3, #128	@ 0x80
 800484e:	d102      	bne.n	8004856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004850:	2302      	movs	r3, #2
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	e004      	b.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b70      	cmp	r3, #112	@ 0x70
 800485a:	d101      	bne.n	8004860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800485c:	2301      	movs	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f023 0207 	bic.w	r2, r3, #7
 8004868:	4909      	ldr	r1, [pc, #36]	@ (8004890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004870:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	429a      	cmp	r2, r3
 800487c:	d001      	beq.n	8004882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	40022000 	.word	0x40022000

08004894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800489c:	2300      	movs	r3, #0
 800489e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048a0:	2300      	movs	r3, #0
 80048a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d041      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048b8:	d02a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80048ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80048be:	d824      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c4:	d008      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80048c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048ca:	d81e      	bhi.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80048d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d4:	d010      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80048d6:	e018      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048d8:	4b86      	ldr	r3, [pc, #536]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	4a85      	ldr	r2, [pc, #532]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048e4:	e015      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2100      	movs	r1, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fabb 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80048f6:	e00c      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3320      	adds	r3, #32
 80048fc:	2100      	movs	r1, #0
 80048fe:	4618      	mov	r0, r3
 8004900:	f000 fba6 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8004904:	4603      	mov	r3, r0
 8004906:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004908:	e003      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	74fb      	strb	r3, [r7, #19]
      break;
 800490e:	e000      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004918:	4b76      	ldr	r3, [pc, #472]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004926:	4973      	ldr	r1, [pc, #460]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004928:	4313      	orrs	r3, r2
 800492a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800492e:	e001      	b.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004930:	7cfb      	ldrb	r3, [r7, #19]
 8004932:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d041      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004944:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004948:	d02a      	beq.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800494a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800494e:	d824      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004950:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004954:	d008      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004956:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800495a:	d81e      	bhi.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004960:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004964:	d010      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004966:	e018      	b.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004968:	4b62      	ldr	r3, [pc, #392]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4a61      	ldr	r2, [pc, #388]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004972:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004974:	e015      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	3304      	adds	r3, #4
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fa73 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004986:	e00c      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3320      	adds	r3, #32
 800498c:	2100      	movs	r1, #0
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fb5e 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004998:	e003      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	74fb      	strb	r3, [r7, #19]
      break;
 800499e:	e000      	b.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80049a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049a2:	7cfb      	ldrb	r3, [r7, #19]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049a8:	4b52      	ldr	r3, [pc, #328]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049b6:	494f      	ldr	r1, [pc, #316]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80049be:	e001      	b.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c0:	7cfb      	ldrb	r3, [r7, #19]
 80049c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 80a0 	beq.w	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049d2:	2300      	movs	r3, #0
 80049d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049d6:	4b47      	ldr	r3, [pc, #284]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00d      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ec:	4b41      	ldr	r3, [pc, #260]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f0:	4a40      	ldr	r2, [pc, #256]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80049f8:	4b3e      	ldr	r3, [pc, #248]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a08:	4b3b      	ldr	r3, [pc, #236]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a14:	f7fd fa52 	bl	8001ebc <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a1a:	e009      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a1c:	f7fd fa4e 	bl	8001ebc <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d902      	bls.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8004a2e:	e005      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a30:	4b31      	ldr	r3, [pc, #196]	@ (8004af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0ef      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d15c      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a42:	4b2c      	ldr	r3, [pc, #176]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01f      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5a:	697a      	ldr	r2, [r7, #20]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d019      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a60:	4b24      	ldr	r3, [pc, #144]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a6c:	4b21      	ldr	r3, [pc, #132]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a72:	4a20      	ldr	r2, [pc, #128]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a82:	4a1c      	ldr	r2, [pc, #112]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a8c:	4a19      	ldr	r2, [pc, #100]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9e:	f7fd fa0d 	bl	8001ebc <HAL_GetTick>
 8004aa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aa4:	e00b      	b.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa6:	f7fd fa09 	bl	8001ebc <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d902      	bls.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	74fb      	strb	r3, [r7, #19]
            break;
 8004abc:	e006      	b.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004abe:	4b0d      	ldr	r3, [pc, #52]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ac4:	f003 0302 	and.w	r3, r3, #2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d0ec      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004acc:	7cfb      	ldrb	r3, [r7, #19]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10c      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ad2:	4b08      	ldr	r3, [pc, #32]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ae2:	4904      	ldr	r1, [pc, #16]	@ (8004af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004aea:	e009      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	74bb      	strb	r3, [r7, #18]
 8004af0:	e006      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b00:	7c7b      	ldrb	r3, [r7, #17]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d105      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b06:	4b9e      	ldr	r3, [pc, #632]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0a:	4a9d      	ldr	r2, [pc, #628]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b1e:	4b98      	ldr	r3, [pc, #608]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f023 0203 	bic.w	r2, r3, #3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	4994      	ldr	r1, [pc, #592]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b40:	4b8f      	ldr	r3, [pc, #572]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f023 020c 	bic.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4e:	498c      	ldr	r1, [pc, #560]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b62:	4b87      	ldr	r3, [pc, #540]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	4983      	ldr	r1, [pc, #524]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0308 	and.w	r3, r3, #8
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b84:	4b7e      	ldr	r3, [pc, #504]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b92:	497b      	ldr	r1, [pc, #492]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ba6:	4b76      	ldr	r3, [pc, #472]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bb4:	4972      	ldr	r1, [pc, #456]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc8:	4b6d      	ldr	r3, [pc, #436]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd6:	496a      	ldr	r1, [pc, #424]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bea:	4b65      	ldr	r3, [pc, #404]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bf8:	4961      	ldr	r1, [pc, #388]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1a:	4959      	ldr	r1, [pc, #356]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c2e:	4b54      	ldr	r3, [pc, #336]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c34:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c3c:	4950      	ldr	r1, [pc, #320]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004c50:	4b4b      	ldr	r3, [pc, #300]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c5e:	4948      	ldr	r1, [pc, #288]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c72:	4b43      	ldr	r3, [pc, #268]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c80:	493f      	ldr	r1, [pc, #252]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d028      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c94:	4b3a      	ldr	r3, [pc, #232]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca2:	4937      	ldr	r1, [pc, #220]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb4:	4b32      	ldr	r3, [pc, #200]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a31      	ldr	r2, [pc, #196]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cbe:	60d3      	str	r3, [r2, #12]
 8004cc0:	e011      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cca:	d10c      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f000 f8c8 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004cdc:	7cfb      	ldrb	r3, [r7, #19]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ce2:	7cfb      	ldrb	r3, [r7, #19]
 8004ce4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d028      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cf2:	4b23      	ldr	r3, [pc, #140]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	491f      	ldr	r1, [pc, #124]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d10:	d106      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d12:	4b1b      	ldr	r3, [pc, #108]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	4a1a      	ldr	r2, [pc, #104]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d1c:	60d3      	str	r3, [r2, #12]
 8004d1e:	e011      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f899 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d40:	7cfb      	ldrb	r3, [r7, #19]
 8004d42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d02b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d5e:	4908      	ldr	r1, [pc, #32]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d6e:	d109      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d70:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a02      	ldr	r2, [pc, #8]	@ (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d7a:	60d3      	str	r3, [r2, #12]
 8004d7c:	e014      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	2101      	movs	r1, #1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f000 f867 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d001      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004da4:	7cfb      	ldrb	r3, [r7, #19]
 8004da6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d02f      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dc2:	4928      	ldr	r1, [pc, #160]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dd2:	d10d      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 f844 	bl	8004e68 <RCCEx_PLLSAI1_Config>
 8004de0:	4603      	mov	r3, r0
 8004de2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d014      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004dea:	7cfb      	ldrb	r3, [r7, #19]
 8004dec:	74bb      	strb	r3, [r7, #18]
 8004dee:	e011      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3320      	adds	r3, #32
 8004dfe:	2102      	movs	r1, #2
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f925 	bl	8005050 <RCCEx_PLLSAI2_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e0a:	7cfb      	ldrb	r3, [r7, #19]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e20:	4b10      	ldr	r3, [pc, #64]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e2e:	490d      	ldr	r1, [pc, #52]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d00b      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e52:	4904      	ldr	r1, [pc, #16]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000

08004e68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e76:	4b75      	ldr	r3, [pc, #468]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d018      	beq.n	8004eb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e82:	4b72      	ldr	r3, [pc, #456]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0203 	and.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d10d      	bne.n	8004eae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
       ||
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	091b      	lsrs	r3, r3, #4
 8004ea0:	f003 0307 	and.w	r3, r3, #7
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d047      	beq.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	73fb      	strb	r3, [r7, #15]
 8004eb2:	e044      	b.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d018      	beq.n	8004eee <RCCEx_PLLSAI1_Config+0x86>
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d825      	bhi.n	8004f0c <RCCEx_PLLSAI1_Config+0xa4>
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d002      	beq.n	8004eca <RCCEx_PLLSAI1_Config+0x62>
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d009      	beq.n	8004edc <RCCEx_PLLSAI1_Config+0x74>
 8004ec8:	e020      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eca:	4b60      	ldr	r3, [pc, #384]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eda:	e01a      	b.n	8004f12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004edc:	4b5b      	ldr	r3, [pc, #364]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d116      	bne.n	8004f16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004eec:	e013      	b.n	8004f16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eee:	4b57      	ldr	r3, [pc, #348]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10f      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004efa:	4b54      	ldr	r3, [pc, #336]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e004      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f12:	bf00      	nop
 8004f14:	e002      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f22:	4b4a      	ldr	r3, [pc, #296]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	430b      	orrs	r3, r1
 8004f38:	4944      	ldr	r1, [pc, #272]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d17d      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f44:	4b41      	ldr	r3, [pc, #260]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a40      	ldr	r2, [pc, #256]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f50:	f7fc ffb4 	bl	8001ebc <HAL_GetTick>
 8004f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f56:	e009      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f58:	f7fc ffb0 	bl	8001ebc <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d902      	bls.n	8004f6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	73fb      	strb	r3, [r7, #15]
        break;
 8004f6a:	e005      	b.n	8004f78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f6c:	4b37      	ldr	r3, [pc, #220]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1ef      	bne.n	8004f58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d160      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d111      	bne.n	8004fa8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f84:	4b31      	ldr	r3, [pc, #196]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6892      	ldr	r2, [r2, #8]
 8004f94:	0211      	lsls	r1, r2, #8
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	68d2      	ldr	r2, [r2, #12]
 8004f9a:	0912      	lsrs	r2, r2, #4
 8004f9c:	0452      	lsls	r2, r2, #17
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	492a      	ldr	r1, [pc, #168]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	610b      	str	r3, [r1, #16]
 8004fa6:	e027      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d112      	bne.n	8004fd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fae:	4b27      	ldr	r3, [pc, #156]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004fb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	6892      	ldr	r2, [r2, #8]
 8004fbe:	0211      	lsls	r1, r2, #8
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6912      	ldr	r2, [r2, #16]
 8004fc4:	0852      	lsrs	r2, r2, #1
 8004fc6:	3a01      	subs	r2, #1
 8004fc8:	0552      	lsls	r2, r2, #21
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	491f      	ldr	r1, [pc, #124]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	610b      	str	r3, [r1, #16]
 8004fd2:	e011      	b.n	8004ff8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6892      	ldr	r2, [r2, #8]
 8004fe4:	0211      	lsls	r1, r2, #8
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6952      	ldr	r2, [r2, #20]
 8004fea:	0852      	lsrs	r2, r2, #1
 8004fec:	3a01      	subs	r2, #1
 8004fee:	0652      	lsls	r2, r2, #25
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	4916      	ldr	r1, [pc, #88]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ff8:	4b14      	ldr	r3, [pc, #80]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a13      	ldr	r2, [pc, #76]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ffe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005004:	f7fc ff5a 	bl	8001ebc <HAL_GetTick>
 8005008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800500a:	e009      	b.n	8005020 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800500c:	f7fc ff56 	bl	8001ebc <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	73fb      	strb	r3, [r7, #15]
          break;
 800501e:	e005      	b.n	800502c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d106      	bne.n	8005040 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	691a      	ldr	r2, [r3, #16]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	4904      	ldr	r1, [pc, #16]	@ (800504c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40021000 	.word	0x40021000

08005050 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800505e:	4b6a      	ldr	r3, [pc, #424]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d018      	beq.n	800509c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800506a:	4b67      	ldr	r3, [pc, #412]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d10d      	bne.n	8005096 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
       ||
 800507e:	2b00      	cmp	r3, #0
 8005080:	d009      	beq.n	8005096 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005082:	4b61      	ldr	r3, [pc, #388]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	091b      	lsrs	r3, r3, #4
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
       ||
 8005092:	429a      	cmp	r2, r3
 8005094:	d047      	beq.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	e044      	b.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d018      	beq.n	80050d6 <RCCEx_PLLSAI2_Config+0x86>
 80050a4:	2b03      	cmp	r3, #3
 80050a6:	d825      	bhi.n	80050f4 <RCCEx_PLLSAI2_Config+0xa4>
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d002      	beq.n	80050b2 <RCCEx_PLLSAI2_Config+0x62>
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d009      	beq.n	80050c4 <RCCEx_PLLSAI2_Config+0x74>
 80050b0:	e020      	b.n	80050f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050b2:	4b55      	ldr	r3, [pc, #340]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11d      	bne.n	80050fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c2:	e01a      	b.n	80050fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050c4:	4b50      	ldr	r3, [pc, #320]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d116      	bne.n	80050fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050d4:	e013      	b.n	80050fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10f      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050e2:	4b49      	ldr	r3, [pc, #292]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050f2:	e006      	b.n	8005102 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	73fb      	strb	r3, [r7, #15]
      break;
 80050f8:	e004      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005102:	bf00      	nop
    }

    if(status == HAL_OK)
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d10d      	bne.n	8005126 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800510a:	4b3f      	ldr	r3, [pc, #252]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6819      	ldr	r1, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	3b01      	subs	r3, #1
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	430b      	orrs	r3, r1
 8005120:	4939      	ldr	r1, [pc, #228]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d167      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a35      	ldr	r2, [pc, #212]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005138:	f7fc fec0 	bl	8001ebc <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005140:	f7fc febc 	bl	8001ebc <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
        break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005154:	4b2c      	ldr	r3, [pc, #176]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ef      	bne.n	8005140 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d14a      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d111      	bne.n	8005190 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800516c:	4b26      	ldr	r3, [pc, #152]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6892      	ldr	r2, [r2, #8]
 800517c:	0211      	lsls	r1, r2, #8
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68d2      	ldr	r2, [r2, #12]
 8005182:	0912      	lsrs	r2, r2, #4
 8005184:	0452      	lsls	r2, r2, #17
 8005186:	430a      	orrs	r2, r1
 8005188:	491f      	ldr	r1, [pc, #124]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800518a:	4313      	orrs	r3, r2
 800518c:	614b      	str	r3, [r1, #20]
 800518e:	e011      	b.n	80051b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005190:	4b1d      	ldr	r3, [pc, #116]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005198:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6892      	ldr	r2, [r2, #8]
 80051a0:	0211      	lsls	r1, r2, #8
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6912      	ldr	r2, [r2, #16]
 80051a6:	0852      	lsrs	r2, r2, #1
 80051a8:	3a01      	subs	r2, #1
 80051aa:	0652      	lsls	r2, r2, #25
 80051ac:	430a      	orrs	r2, r1
 80051ae:	4916      	ldr	r1, [pc, #88]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051b4:	4b14      	ldr	r3, [pc, #80]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a13      	ldr	r2, [pc, #76]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c0:	f7fc fe7c 	bl	8001ebc <HAL_GetTick>
 80051c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051c6:	e009      	b.n	80051dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051c8:	f7fc fe78 	bl	8001ebc <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d902      	bls.n	80051dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	73fb      	strb	r3, [r7, #15]
          break;
 80051da:	e005      	b.n	80051e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ef      	beq.n	80051c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051ee:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	4904      	ldr	r1, [pc, #16]	@ (8005208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40021000 	.word	0x40021000

0800520c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e049      	b.n	80052b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005224:	b2db      	uxtb	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d106      	bne.n	8005238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f7fc fbec 	bl	8001a10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2202      	movs	r2, #2
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	4619      	mov	r1, r3
 800524a:	4610      	mov	r0, r2
 800524c:	f001 f86e 	bl	800632c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start+0x24>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e03c      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d109      	bne.n	80052fa <HAL_TIM_PWM_Start+0x3e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	bf14      	ite	ne
 80052f2:	2301      	movne	r3, #1
 80052f4:	2300      	moveq	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	e02f      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d109      	bne.n	8005314 <HAL_TIM_PWM_Start+0x58>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	bf14      	ite	ne
 800530c:	2301      	movne	r3, #1
 800530e:	2300      	moveq	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	e022      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b0c      	cmp	r3, #12
 8005318:	d109      	bne.n	800532e <HAL_TIM_PWM_Start+0x72>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	bf14      	ite	ne
 8005326:	2301      	movne	r3, #1
 8005328:	2300      	moveq	r3, #0
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e015      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	2b10      	cmp	r3, #16
 8005332:	d109      	bne.n	8005348 <HAL_TIM_PWM_Start+0x8c>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b01      	cmp	r3, #1
 800533e:	bf14      	ite	ne
 8005340:	2301      	movne	r3, #1
 8005342:	2300      	moveq	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	e008      	b.n	800535a <HAL_TIM_PWM_Start+0x9e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	bf14      	ite	ne
 8005354:	2301      	movne	r3, #1
 8005356:	2300      	moveq	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e09c      	b.n	800549c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_TIM_PWM_Start+0xb6>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005370:	e023      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b04      	cmp	r3, #4
 8005376:	d104      	bne.n	8005382 <HAL_TIM_PWM_Start+0xc6>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005380:	e01b      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b08      	cmp	r3, #8
 8005386:	d104      	bne.n	8005392 <HAL_TIM_PWM_Start+0xd6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005390:	e013      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b0c      	cmp	r3, #12
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_PWM_Start+0xe6>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053a0:	e00b      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b10      	cmp	r3, #16
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_PWM_Start+0xf6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053b0:	e003      	b.n	80053ba <HAL_TIM_PWM_Start+0xfe>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 fc46 	bl	8006c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a35      	ldr	r2, [pc, #212]	@ (80054a4 <HAL_TIM_PWM_Start+0x1e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <HAL_TIM_PWM_Start+0x13e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a34      	ldr	r2, [pc, #208]	@ (80054a8 <HAL_TIM_PWM_Start+0x1ec>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_TIM_PWM_Start+0x13e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a32      	ldr	r2, [pc, #200]	@ (80054ac <HAL_TIM_PWM_Start+0x1f0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d009      	beq.n	80053fa <HAL_TIM_PWM_Start+0x13e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a31      	ldr	r2, [pc, #196]	@ (80054b0 <HAL_TIM_PWM_Start+0x1f4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d004      	beq.n	80053fa <HAL_TIM_PWM_Start+0x13e>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a2f      	ldr	r2, [pc, #188]	@ (80054b4 <HAL_TIM_PWM_Start+0x1f8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PWM_Start+0x142>
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <HAL_TIM_PWM_Start+0x144>
 80053fe:	2300      	movs	r3, #0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d007      	beq.n	8005414 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005412:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a22      	ldr	r2, [pc, #136]	@ (80054a4 <HAL_TIM_PWM_Start+0x1e8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d01d      	beq.n	800545a <HAL_TIM_PWM_Start+0x19e>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005426:	d018      	beq.n	800545a <HAL_TIM_PWM_Start+0x19e>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a22      	ldr	r2, [pc, #136]	@ (80054b8 <HAL_TIM_PWM_Start+0x1fc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d013      	beq.n	800545a <HAL_TIM_PWM_Start+0x19e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a21      	ldr	r2, [pc, #132]	@ (80054bc <HAL_TIM_PWM_Start+0x200>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00e      	beq.n	800545a <HAL_TIM_PWM_Start+0x19e>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1f      	ldr	r2, [pc, #124]	@ (80054c0 <HAL_TIM_PWM_Start+0x204>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d009      	beq.n	800545a <HAL_TIM_PWM_Start+0x19e>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a17      	ldr	r2, [pc, #92]	@ (80054a8 <HAL_TIM_PWM_Start+0x1ec>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d004      	beq.n	800545a <HAL_TIM_PWM_Start+0x19e>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a15      	ldr	r2, [pc, #84]	@ (80054ac <HAL_TIM_PWM_Start+0x1f0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d115      	bne.n	8005486 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	4b18      	ldr	r3, [pc, #96]	@ (80054c4 <HAL_TIM_PWM_Start+0x208>)
 8005462:	4013      	ands	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b06      	cmp	r3, #6
 800546a:	d015      	beq.n	8005498 <HAL_TIM_PWM_Start+0x1dc>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005472:	d011      	beq.n	8005498 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005484:	e008      	b.n	8005498 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f042 0201 	orr.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e000      	b.n	800549a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40013400 	.word	0x40013400
 80054ac:	40014000 	.word	0x40014000
 80054b0:	40014400 	.word	0x40014400
 80054b4:	40014800 	.word	0x40014800
 80054b8:	40000400 	.word	0x40000400
 80054bc:	40000800 	.word	0x40000800
 80054c0:	40000c00 	.word	0x40000c00
 80054c4:	00010007 	.word	0x00010007

080054c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	6839      	ldr	r1, [r7, #0]
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 fbba 	bl	8006c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a3e      	ldr	r2, [pc, #248]	@ (80055e0 <HAL_TIM_PWM_Stop+0x118>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIM_PWM_Stop+0x4a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a3d      	ldr	r2, [pc, #244]	@ (80055e4 <HAL_TIM_PWM_Stop+0x11c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIM_PWM_Stop+0x4a>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a3b      	ldr	r2, [pc, #236]	@ (80055e8 <HAL_TIM_PWM_Stop+0x120>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIM_PWM_Stop+0x4a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3a      	ldr	r2, [pc, #232]	@ (80055ec <HAL_TIM_PWM_Stop+0x124>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIM_PWM_Stop+0x4a>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a38      	ldr	r2, [pc, #224]	@ (80055f0 <HAL_TIM_PWM_Stop+0x128>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d101      	bne.n	8005516 <HAL_TIM_PWM_Stop+0x4e>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <HAL_TIM_PWM_Stop+0x50>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d017      	beq.n	800554c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10f      	bne.n	800554c <HAL_TIM_PWM_Stop+0x84>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	6a1a      	ldr	r2, [r3, #32]
 8005532:	f240 4344 	movw	r3, #1092	@ 0x444
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d107      	bne.n	800554c <HAL_TIM_PWM_Stop+0x84>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800554a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6a1a      	ldr	r2, [r3, #32]
 8005552:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005556:	4013      	ands	r3, r2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10f      	bne.n	800557c <HAL_TIM_PWM_Stop+0xb4>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	f240 4344 	movw	r3, #1092	@ 0x444
 8005566:	4013      	ands	r3, r2
 8005568:	2b00      	cmp	r3, #0
 800556a:	d107      	bne.n	800557c <HAL_TIM_PWM_Stop+0xb4>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f022 0201 	bic.w	r2, r2, #1
 800557a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d104      	bne.n	800558c <HAL_TIM_PWM_Stop+0xc4>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800558a:	e023      	b.n	80055d4 <HAL_TIM_PWM_Stop+0x10c>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b04      	cmp	r3, #4
 8005590:	d104      	bne.n	800559c <HAL_TIM_PWM_Stop+0xd4>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800559a:	e01b      	b.n	80055d4 <HAL_TIM_PWM_Stop+0x10c>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b08      	cmp	r3, #8
 80055a0:	d104      	bne.n	80055ac <HAL_TIM_PWM_Stop+0xe4>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2201      	movs	r2, #1
 80055a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055aa:	e013      	b.n	80055d4 <HAL_TIM_PWM_Stop+0x10c>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	2b0c      	cmp	r3, #12
 80055b0:	d104      	bne.n	80055bc <HAL_TIM_PWM_Stop+0xf4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055ba:	e00b      	b.n	80055d4 <HAL_TIM_PWM_Stop+0x10c>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b10      	cmp	r3, #16
 80055c0:	d104      	bne.n	80055cc <HAL_TIM_PWM_Stop+0x104>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055ca:	e003      	b.n	80055d4 <HAL_TIM_PWM_Stop+0x10c>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800

080055f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e049      	b.n	800569a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fc f9ac 	bl	8001978 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f000 fe7a 	bl	800632c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
	...

080056a4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_IC_Start_IT+0x1e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	e023      	b.n	800570a <HAL_TIM_IC_Start_IT+0x66>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d104      	bne.n	80056d2 <HAL_TIM_IC_Start_IT+0x2e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	e01b      	b.n	800570a <HAL_TIM_IC_Start_IT+0x66>
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b08      	cmp	r3, #8
 80056d6:	d104      	bne.n	80056e2 <HAL_TIM_IC_Start_IT+0x3e>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e013      	b.n	800570a <HAL_TIM_IC_Start_IT+0x66>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	d104      	bne.n	80056f2 <HAL_TIM_IC_Start_IT+0x4e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	e00b      	b.n	800570a <HAL_TIM_IC_Start_IT+0x66>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2b10      	cmp	r3, #16
 80056f6:	d104      	bne.n	8005702 <HAL_TIM_IC_Start_IT+0x5e>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e003      	b.n	800570a <HAL_TIM_IC_Start_IT+0x66>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005708:	b2db      	uxtb	r3, r3
 800570a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <HAL_TIM_IC_Start_IT+0x78>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e013      	b.n	8005744 <HAL_TIM_IC_Start_IT+0xa0>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b04      	cmp	r3, #4
 8005720:	d104      	bne.n	800572c <HAL_TIM_IC_Start_IT+0x88>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005728:	b2db      	uxtb	r3, r3
 800572a:	e00b      	b.n	8005744 <HAL_TIM_IC_Start_IT+0xa0>
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	2b08      	cmp	r3, #8
 8005730:	d104      	bne.n	800573c <HAL_TIM_IC_Start_IT+0x98>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e003      	b.n	8005744 <HAL_TIM_IC_Start_IT+0xa0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005742:	b2db      	uxtb	r3, r3
 8005744:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d102      	bne.n	8005752 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800574c:	7b7b      	ldrb	r3, [r7, #13]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d001      	beq.n	8005756 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e0dd      	b.n	8005912 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d104      	bne.n	8005766 <HAL_TIM_IC_Start_IT+0xc2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005764:	e023      	b.n	80057ae <HAL_TIM_IC_Start_IT+0x10a>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b04      	cmp	r3, #4
 800576a:	d104      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0xd2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005774:	e01b      	b.n	80057ae <HAL_TIM_IC_Start_IT+0x10a>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d104      	bne.n	8005786 <HAL_TIM_IC_Start_IT+0xe2>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005784:	e013      	b.n	80057ae <HAL_TIM_IC_Start_IT+0x10a>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b0c      	cmp	r3, #12
 800578a:	d104      	bne.n	8005796 <HAL_TIM_IC_Start_IT+0xf2>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005794:	e00b      	b.n	80057ae <HAL_TIM_IC_Start_IT+0x10a>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b10      	cmp	r3, #16
 800579a:	d104      	bne.n	80057a6 <HAL_TIM_IC_Start_IT+0x102>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057a4:	e003      	b.n	80057ae <HAL_TIM_IC_Start_IT+0x10a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <HAL_TIM_IC_Start_IT+0x11a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057bc:	e013      	b.n	80057e6 <HAL_TIM_IC_Start_IT+0x142>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b04      	cmp	r3, #4
 80057c2:	d104      	bne.n	80057ce <HAL_TIM_IC_Start_IT+0x12a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057cc:	e00b      	b.n	80057e6 <HAL_TIM_IC_Start_IT+0x142>
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d104      	bne.n	80057de <HAL_TIM_IC_Start_IT+0x13a>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2202      	movs	r2, #2
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80057dc:	e003      	b.n	80057e6 <HAL_TIM_IC_Start_IT+0x142>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d841      	bhi.n	8005870 <HAL_TIM_IC_Start_IT+0x1cc>
 80057ec:	a201      	add	r2, pc, #4	@ (adr r2, 80057f4 <HAL_TIM_IC_Start_IT+0x150>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	08005829 	.word	0x08005829
 80057f8:	08005871 	.word	0x08005871
 80057fc:	08005871 	.word	0x08005871
 8005800:	08005871 	.word	0x08005871
 8005804:	0800583b 	.word	0x0800583b
 8005808:	08005871 	.word	0x08005871
 800580c:	08005871 	.word	0x08005871
 8005810:	08005871 	.word	0x08005871
 8005814:	0800584d 	.word	0x0800584d
 8005818:	08005871 	.word	0x08005871
 800581c:	08005871 	.word	0x08005871
 8005820:	08005871 	.word	0x08005871
 8005824:	0800585f 	.word	0x0800585f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0202 	orr.w	r2, r2, #2
 8005836:	60da      	str	r2, [r3, #12]
      break;
 8005838:	e01d      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68da      	ldr	r2, [r3, #12]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0204 	orr.w	r2, r2, #4
 8005848:	60da      	str	r2, [r3, #12]
      break;
 800584a:	e014      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f042 0208 	orr.w	r2, r2, #8
 800585a:	60da      	str	r2, [r3, #12]
      break;
 800585c:	e00b      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68da      	ldr	r2, [r3, #12]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f042 0210 	orr.w	r2, r2, #16
 800586c:	60da      	str	r2, [r3, #12]
      break;
 800586e:	e002      	b.n	8005876 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	73fb      	strb	r3, [r7, #15]
      break;
 8005874:	bf00      	nop
  }

  if (status == HAL_OK)
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d149      	bne.n	8005910 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2201      	movs	r2, #1
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	4618      	mov	r0, r3
 8005886:	f001 f9e5 	bl	8006c54 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a23      	ldr	r2, [pc, #140]	@ (800591c <HAL_TIM_IC_Start_IT+0x278>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d01d      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x22c>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589c:	d018      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x22c>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005920 <HAL_TIM_IC_Start_IT+0x27c>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x22c>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005924 <HAL_TIM_IC_Start_IT+0x280>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00e      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x22c>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005928 <HAL_TIM_IC_Start_IT+0x284>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d009      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x22c>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1a      	ldr	r2, [pc, #104]	@ (800592c <HAL_TIM_IC_Start_IT+0x288>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_IC_Start_IT+0x22c>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a19      	ldr	r2, [pc, #100]	@ (8005930 <HAL_TIM_IC_Start_IT+0x28c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d115      	bne.n	80058fc <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	4b17      	ldr	r3, [pc, #92]	@ (8005934 <HAL_TIM_IC_Start_IT+0x290>)
 80058d8:	4013      	ands	r3, r2
 80058da:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b06      	cmp	r3, #6
 80058e0:	d015      	beq.n	800590e <HAL_TIM_IC_Start_IT+0x26a>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e8:	d011      	beq.n	800590e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0201 	orr.w	r2, r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058fa:	e008      	b.n	800590e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0201 	orr.w	r2, r2, #1
 800590a:	601a      	str	r2, [r3, #0]
 800590c:	e000      	b.n	8005910 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800590e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	40012c00 	.word	0x40012c00
 8005920:	40000400 	.word	0x40000400
 8005924:	40000800 	.word	0x40000800
 8005928:	40000c00 	.word	0x40000c00
 800592c:	40013400 	.word	0x40013400
 8005930:	40014000 	.word	0x40014000
 8005934:	00010007 	.word	0x00010007

08005938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e097      	b.n	8005a7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fc f873 	bl	8001a4c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2202      	movs	r2, #2
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	4619      	mov	r1, r3
 800598c:	4610      	mov	r0, r2
 800598e:	f000 fccd 	bl	800632c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699b      	ldr	r3, [r3, #24]
 80059a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	4313      	orrs	r3, r2
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80059d8:	f023 030c 	bic.w	r3, r3, #12
 80059dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80059e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	4313      	orrs	r3, r2
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	031b      	lsls	r3, r3, #12
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	695b      	ldr	r3, [r3, #20]
 8005a28:	011b      	lsls	r3, r3, #4
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b084      	sub	sp, #16
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005aa4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005aac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d110      	bne.n	8005ad6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d102      	bne.n	8005ac0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005aba:	7b7b      	ldrb	r3, [r7, #13]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d001      	beq.n	8005ac4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e069      	b.n	8005b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ad4:	e031      	b.n	8005b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d110      	bne.n	8005afe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d102      	bne.n	8005ae8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ae2:	7b3b      	ldrb	r3, [r7, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d001      	beq.n	8005aec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e055      	b.n	8005b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005afc:	e01d      	b.n	8005b3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005afe:	7bfb      	ldrb	r3, [r7, #15]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d108      	bne.n	8005b16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d105      	bne.n	8005b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b0a:	7b7b      	ldrb	r3, [r7, #13]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d102      	bne.n	8005b16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b10:	7b3b      	ldrb	r3, [r7, #12]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d001      	beq.n	8005b1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e03e      	b.n	8005b98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2202      	movs	r2, #2
 8005b36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d003      	beq.n	8005b48 <HAL_TIM_Encoder_Start+0xc4>
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d008      	beq.n	8005b58 <HAL_TIM_Encoder_Start+0xd4>
 8005b46:	e00f      	b.n	8005b68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f001 f87f 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8005b56:	e016      	b.n	8005b86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	2104      	movs	r1, #4
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 f877 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8005b66:	e00e      	b.n	8005b86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f001 f86f 	bl	8006c54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	2104      	movs	r1, #4
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 f868 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8005b84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <HAL_TIM_Encoder_Stop+0x18>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d008      	beq.n	8005bc8 <HAL_TIM_Encoder_Stop+0x28>
 8005bb6:	e00f      	b.n	8005bd8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 f847 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8005bc6:	e016      	b.n	8005bf6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	2104      	movs	r1, #4
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f001 f83f 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8005bd6:	e00e      	b.n	8005bf6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f001 f837 	bl	8006c54 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2200      	movs	r2, #0
 8005bec:	2104      	movs	r1, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 f830 	bl	8006c54 <TIM_CCxChannelCmd>
      break;
 8005bf4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6a1a      	ldr	r2, [r3, #32]
 8005bfc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005c00:	4013      	ands	r3, r2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d10f      	bne.n	8005c26 <HAL_TIM_Encoder_Stop+0x86>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005c10:	4013      	ands	r3, r2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d107      	bne.n	8005c26 <HAL_TIM_Encoder_Stop+0x86>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d002      	beq.n	8005c32 <HAL_TIM_Encoder_Stop+0x92>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b04      	cmp	r3, #4
 8005c30:	d148      	bne.n	8005cc4 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_Encoder_Stop+0xa2>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c40:	e023      	b.n	8005c8a <HAL_TIM_Encoder_Stop+0xea>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_Encoder_Stop+0xb2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c50:	e01b      	b.n	8005c8a <HAL_TIM_Encoder_Stop+0xea>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_Encoder_Stop+0xc2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c60:	e013      	b.n	8005c8a <HAL_TIM_Encoder_Stop+0xea>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b0c      	cmp	r3, #12
 8005c66:	d104      	bne.n	8005c72 <HAL_TIM_Encoder_Stop+0xd2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c70:	e00b      	b.n	8005c8a <HAL_TIM_Encoder_Stop+0xea>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b10      	cmp	r3, #16
 8005c76:	d104      	bne.n	8005c82 <HAL_TIM_Encoder_Stop+0xe2>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c80:	e003      	b.n	8005c8a <HAL_TIM_Encoder_Stop+0xea>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_Encoder_Stop+0xfa>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c98:	e024      	b.n	8005ce4 <HAL_TIM_Encoder_Stop+0x144>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_Encoder_Stop+0x10a>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ca8:	e01c      	b.n	8005ce4 <HAL_TIM_Encoder_Stop+0x144>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_Encoder_Stop+0x11a>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005cb8:	e014      	b.n	8005ce4 <HAL_TIM_Encoder_Stop+0x144>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005cc2:	e00f      	b.n	8005ce4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f003 0302 	and.w	r3, r3, #2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d020      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d01b      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f06f 0202 	mvn.w	r2, #2
 8005d22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	f003 0303 	and.w	r3, r3, #3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d003      	beq.n	8005d40 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fb fb55 	bl	80013e8 <HAL_TIM_IC_CaptureCallback>
 8005d3e:	e005      	b.n	8005d4c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fad5 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fadc 	bl	8006304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d020      	beq.n	8005d9e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 0304 	and.w	r3, r3, #4
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d01b      	beq.n	8005d9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f06f 0204 	mvn.w	r2, #4
 8005d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d003      	beq.n	8005d8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7fb fb2f 	bl	80013e8 <HAL_TIM_IC_CaptureCallback>
 8005d8a:	e005      	b.n	8005d98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 faaf 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f000 fab6 	bl	8006304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	f003 0308 	and.w	r3, r3, #8
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d020      	beq.n	8005dea <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01b      	beq.n	8005dea <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f06f 0208 	mvn.w	r2, #8
 8005dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2204      	movs	r2, #4
 8005dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f003 0303 	and.w	r3, r3, #3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fb fb09 	bl	80013e8 <HAL_TIM_IC_CaptureCallback>
 8005dd6:	e005      	b.n	8005de4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fa89 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa90 	bl	8006304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f003 0310 	and.w	r3, r3, #16
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d020      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d01b      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f06f 0210 	mvn.w	r2, #16
 8005e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fb fae3 	bl	80013e8 <HAL_TIM_IC_CaptureCallback>
 8005e22:	e005      	b.n	8005e30 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fa63 	bl	80062f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa6a 	bl	8006304 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00c      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d007      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0201 	mvn.w	r2, #1
 8005e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 fa41 	bl	80062dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00c      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d007      	beq.n	8005e7e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 ffa3 	bl	8006dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d007      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 ff9b 	bl	8006dd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d007      	beq.n	8005ec6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa29 	bl	8006318 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f003 0320 	and.w	r3, r3, #32
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00c      	beq.n	8005eea <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d007      	beq.n	8005eea <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f06f 0220 	mvn.w	r2, #32
 8005ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 ff63 	bl	8006db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eea:	bf00      	nop
 8005eec:	3710      	adds	r7, #16
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b086      	sub	sp, #24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	60f8      	str	r0, [r7, #12]
 8005efa:	60b9      	str	r1, [r7, #8]
 8005efc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e088      	b.n	8006022 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11b      	bne.n	8005f56 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005f2e:	f000 fd6d 	bl	8006a0c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699a      	ldr	r2, [r3, #24]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 020c 	bic.w	r2, r2, #12
 8005f40:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6999      	ldr	r1, [r3, #24]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	430a      	orrs	r2, r1
 8005f52:	619a      	str	r2, [r3, #24]
 8005f54:	e060      	b.n	8006018 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d11c      	bne.n	8005f96 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005f6c:	f000 fdbc 	bl	8006ae8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005f7e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6999      	ldr	r1, [r3, #24]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	021a      	lsls	r2, r3, #8
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	430a      	orrs	r2, r1
 8005f92:	619a      	str	r2, [r3, #24]
 8005f94:	e040      	b.n	8006018 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d11b      	bne.n	8005fd4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005fac:	f000 fdd9 	bl	8006b62 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	69da      	ldr	r2, [r3, #28]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 020c 	bic.w	r2, r2, #12
 8005fbe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	69d9      	ldr	r1, [r3, #28]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	61da      	str	r2, [r3, #28]
 8005fd2:	e021      	b.n	8006018 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2b0c      	cmp	r3, #12
 8005fd8:	d11c      	bne.n	8006014 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005fea:	f000 fdf6 	bl	8006bda <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69da      	ldr	r2, [r3, #28]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005ffc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69d9      	ldr	r1, [r3, #28]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	021a      	lsls	r2, r3, #8
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	61da      	str	r2, [r3, #28]
 8006012:	e001      	b.n	8006018 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006020:	7dfb      	ldrb	r3, [r7, #23]
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006046:	2302      	movs	r3, #2
 8006048:	e0ff      	b.n	800624a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b14      	cmp	r3, #20
 8006056:	f200 80f0 	bhi.w	800623a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800605a:	a201      	add	r2, pc, #4	@ (adr r2, 8006060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800605c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006060:	080060b5 	.word	0x080060b5
 8006064:	0800623b 	.word	0x0800623b
 8006068:	0800623b 	.word	0x0800623b
 800606c:	0800623b 	.word	0x0800623b
 8006070:	080060f5 	.word	0x080060f5
 8006074:	0800623b 	.word	0x0800623b
 8006078:	0800623b 	.word	0x0800623b
 800607c:	0800623b 	.word	0x0800623b
 8006080:	08006137 	.word	0x08006137
 8006084:	0800623b 	.word	0x0800623b
 8006088:	0800623b 	.word	0x0800623b
 800608c:	0800623b 	.word	0x0800623b
 8006090:	08006177 	.word	0x08006177
 8006094:	0800623b 	.word	0x0800623b
 8006098:	0800623b 	.word	0x0800623b
 800609c:	0800623b 	.word	0x0800623b
 80060a0:	080061b9 	.word	0x080061b9
 80060a4:	0800623b 	.word	0x0800623b
 80060a8:	0800623b 	.word	0x0800623b
 80060ac:	0800623b 	.word	0x0800623b
 80060b0:	080061f9 	.word	0x080061f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 f9d0 	bl	8006460 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0208 	orr.w	r2, r2, #8
 80060ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0204 	bic.w	r2, r2, #4
 80060de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
      break;
 80060f2:	e0a5      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fa40 	bl	8006580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	021a      	lsls	r2, r3, #8
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	619a      	str	r2, [r3, #24]
      break;
 8006134:	e084      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 faa9 	bl	8006694 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0208 	orr.w	r2, r2, #8
 8006150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0204 	bic.w	r2, r2, #4
 8006160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69d9      	ldr	r1, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	61da      	str	r2, [r3, #28]
      break;
 8006174:	e064      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fb11 	bl	80067a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	021a      	lsls	r2, r3, #8
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	61da      	str	r2, [r3, #28]
      break;
 80061b6:	e043      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 fb5a 	bl	8006878 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0208 	orr.w	r2, r2, #8
 80061d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0204 	bic.w	r2, r2, #4
 80061e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061f6:	e023      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb9e 	bl	8006940 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006212:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006222:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006238:	e002      	b.n	8006240 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
      break;
 800623e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop

08006254 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d831      	bhi.n	80062cc <HAL_TIM_ReadCapturedValue+0x78>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <HAL_TIM_ReadCapturedValue+0x1c>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062cd 	.word	0x080062cd
 8006278:	080062cd 	.word	0x080062cd
 800627c:	080062cd 	.word	0x080062cd
 8006280:	080062af 	.word	0x080062af
 8006284:	080062cd 	.word	0x080062cd
 8006288:	080062cd 	.word	0x080062cd
 800628c:	080062cd 	.word	0x080062cd
 8006290:	080062b9 	.word	0x080062b9
 8006294:	080062cd 	.word	0x080062cd
 8006298:	080062cd 	.word	0x080062cd
 800629c:	080062cd 	.word	0x080062cd
 80062a0:	080062c3 	.word	0x080062c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062aa:	60fb      	str	r3, [r7, #12]

      break;
 80062ac:	e00f      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	60fb      	str	r3, [r7, #12]

      break;
 80062b6:	e00a      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062be:	60fb      	str	r3, [r7, #12]

      break;
 80062c0:	e005      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	60fb      	str	r3, [r7, #12]

      break;
 80062ca:	e000      	b.n	80062ce <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80062cc:	bf00      	nop
  }

  return tmpreg;
 80062ce:	68fb      	ldr	r3, [r7, #12]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800630c:	bf00      	nop
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a40      	ldr	r2, [pc, #256]	@ (8006440 <TIM_Base_SetConfig+0x114>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d013      	beq.n	800636c <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800634a:	d00f      	beq.n	800636c <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a3d      	ldr	r2, [pc, #244]	@ (8006444 <TIM_Base_SetConfig+0x118>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00b      	beq.n	800636c <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a3c      	ldr	r2, [pc, #240]	@ (8006448 <TIM_Base_SetConfig+0x11c>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a3b      	ldr	r2, [pc, #236]	@ (800644c <TIM_Base_SetConfig+0x120>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0x40>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a3a      	ldr	r2, [pc, #232]	@ (8006450 <TIM_Base_SetConfig+0x124>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d108      	bne.n	800637e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a2f      	ldr	r2, [pc, #188]	@ (8006440 <TIM_Base_SetConfig+0x114>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01f      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638c:	d01b      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2c      	ldr	r2, [pc, #176]	@ (8006444 <TIM_Base_SetConfig+0x118>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d017      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2b      	ldr	r2, [pc, #172]	@ (8006448 <TIM_Base_SetConfig+0x11c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a2a      	ldr	r2, [pc, #168]	@ (800644c <TIM_Base_SetConfig+0x120>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d00f      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a29      	ldr	r2, [pc, #164]	@ (8006450 <TIM_Base_SetConfig+0x124>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00b      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a28      	ldr	r2, [pc, #160]	@ (8006454 <TIM_Base_SetConfig+0x128>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d007      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a27      	ldr	r2, [pc, #156]	@ (8006458 <TIM_Base_SetConfig+0x12c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d003      	beq.n	80063c6 <TIM_Base_SetConfig+0x9a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a26      	ldr	r2, [pc, #152]	@ (800645c <TIM_Base_SetConfig+0x130>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d108      	bne.n	80063d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689a      	ldr	r2, [r3, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a10      	ldr	r2, [pc, #64]	@ (8006440 <TIM_Base_SetConfig+0x114>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00f      	beq.n	8006424 <TIM_Base_SetConfig+0xf8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a12      	ldr	r2, [pc, #72]	@ (8006450 <TIM_Base_SetConfig+0x124>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00b      	beq.n	8006424 <TIM_Base_SetConfig+0xf8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a11      	ldr	r2, [pc, #68]	@ (8006454 <TIM_Base_SetConfig+0x128>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d007      	beq.n	8006424 <TIM_Base_SetConfig+0xf8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a10      	ldr	r2, [pc, #64]	@ (8006458 <TIM_Base_SetConfig+0x12c>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_Base_SetConfig+0xf8>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a0f      	ldr	r2, [pc, #60]	@ (800645c <TIM_Base_SetConfig+0x130>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d103      	bne.n	800642c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	691a      	ldr	r2, [r3, #16]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	615a      	str	r2, [r3, #20]
}
 8006432:	bf00      	nop
 8006434:	3714      	adds	r7, #20
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	40012c00 	.word	0x40012c00
 8006444:	40000400 	.word	0x40000400
 8006448:	40000800 	.word	0x40000800
 800644c:	40000c00 	.word	0x40000c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f023 0201 	bic.w	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800648e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0302 	bic.w	r3, r3, #2
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a2c      	ldr	r2, [pc, #176]	@ (800656c <TIM_OC1_SetConfig+0x10c>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00f      	beq.n	80064e0 <TIM_OC1_SetConfig+0x80>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a2b      	ldr	r2, [pc, #172]	@ (8006570 <TIM_OC1_SetConfig+0x110>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d00b      	beq.n	80064e0 <TIM_OC1_SetConfig+0x80>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006574 <TIM_OC1_SetConfig+0x114>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d007      	beq.n	80064e0 <TIM_OC1_SetConfig+0x80>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a29      	ldr	r2, [pc, #164]	@ (8006578 <TIM_OC1_SetConfig+0x118>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d003      	beq.n	80064e0 <TIM_OC1_SetConfig+0x80>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	4a28      	ldr	r2, [pc, #160]	@ (800657c <TIM_OC1_SetConfig+0x11c>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10c      	bne.n	80064fa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0308 	bic.w	r3, r3, #8
 80064e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f023 0304 	bic.w	r3, r3, #4
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1b      	ldr	r2, [pc, #108]	@ (800656c <TIM_OC1_SetConfig+0x10c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00f      	beq.n	8006522 <TIM_OC1_SetConfig+0xc2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a1a      	ldr	r2, [pc, #104]	@ (8006570 <TIM_OC1_SetConfig+0x110>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00b      	beq.n	8006522 <TIM_OC1_SetConfig+0xc2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a19      	ldr	r2, [pc, #100]	@ (8006574 <TIM_OC1_SetConfig+0x114>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d007      	beq.n	8006522 <TIM_OC1_SetConfig+0xc2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a18      	ldr	r2, [pc, #96]	@ (8006578 <TIM_OC1_SetConfig+0x118>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d003      	beq.n	8006522 <TIM_OC1_SetConfig+0xc2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a17      	ldr	r2, [pc, #92]	@ (800657c <TIM_OC1_SetConfig+0x11c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d111      	bne.n	8006546 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	693a      	ldr	r2, [r7, #16]
 8006538:	4313      	orrs	r3, r2
 800653a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	4313      	orrs	r3, r2
 8006544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	621a      	str	r2, [r3, #32]
}
 8006560:	bf00      	nop
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40013400 	.word	0x40013400
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800

08006580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f023 0210 	bic.w	r2, r3, #16
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	021b      	lsls	r3, r3, #8
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f023 0320 	bic.w	r3, r3, #32
 80065ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	697a      	ldr	r2, [r7, #20]
 80065d8:	4313      	orrs	r3, r2
 80065da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a28      	ldr	r2, [pc, #160]	@ (8006680 <TIM_OC2_SetConfig+0x100>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC2_SetConfig+0x6c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a27      	ldr	r2, [pc, #156]	@ (8006684 <TIM_OC2_SetConfig+0x104>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d10d      	bne.n	8006608 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006606:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4a1d      	ldr	r2, [pc, #116]	@ (8006680 <TIM_OC2_SetConfig+0x100>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d00f      	beq.n	8006630 <TIM_OC2_SetConfig+0xb0>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a1c      	ldr	r2, [pc, #112]	@ (8006684 <TIM_OC2_SetConfig+0x104>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d00b      	beq.n	8006630 <TIM_OC2_SetConfig+0xb0>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <TIM_OC2_SetConfig+0x108>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d007      	beq.n	8006630 <TIM_OC2_SetConfig+0xb0>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a1a      	ldr	r2, [pc, #104]	@ (800668c <TIM_OC2_SetConfig+0x10c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d003      	beq.n	8006630 <TIM_OC2_SetConfig+0xb0>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a19      	ldr	r2, [pc, #100]	@ (8006690 <TIM_OC2_SetConfig+0x110>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d113      	bne.n	8006658 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006636:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800663e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	695b      	ldr	r3, [r3, #20]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	621a      	str	r2, [r3, #32]
}
 8006672:	bf00      	nop
 8006674:	371c      	adds	r7, #28
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	40012c00 	.word	0x40012c00
 8006684:	40013400 	.word	0x40013400
 8006688:	40014000 	.word	0x40014000
 800668c:	40014400 	.word	0x40014400
 8006690:	40014800 	.word	0x40014800

08006694 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 0303 	bic.w	r3, r3, #3
 80066ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	021b      	lsls	r3, r3, #8
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a27      	ldr	r2, [pc, #156]	@ (8006790 <TIM_OC3_SetConfig+0xfc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_OC3_SetConfig+0x6a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a26      	ldr	r2, [pc, #152]	@ (8006794 <TIM_OC3_SetConfig+0x100>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d10d      	bne.n	800671a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006704:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	021b      	lsls	r3, r3, #8
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	4313      	orrs	r3, r2
 8006710:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006718:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a1c      	ldr	r2, [pc, #112]	@ (8006790 <TIM_OC3_SetConfig+0xfc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00f      	beq.n	8006742 <TIM_OC3_SetConfig+0xae>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a1b      	ldr	r2, [pc, #108]	@ (8006794 <TIM_OC3_SetConfig+0x100>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00b      	beq.n	8006742 <TIM_OC3_SetConfig+0xae>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1a      	ldr	r2, [pc, #104]	@ (8006798 <TIM_OC3_SetConfig+0x104>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d007      	beq.n	8006742 <TIM_OC3_SetConfig+0xae>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a19      	ldr	r2, [pc, #100]	@ (800679c <TIM_OC3_SetConfig+0x108>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_OC3_SetConfig+0xae>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a18      	ldr	r2, [pc, #96]	@ (80067a0 <TIM_OC3_SetConfig+0x10c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d113      	bne.n	800676a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	4313      	orrs	r3, r2
 800675c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	68fa      	ldr	r2, [r7, #12]
 8006774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	621a      	str	r2, [r3, #32]
}
 8006784:	bf00      	nop
 8006786:	371c      	adds	r7, #28
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr
 8006790:	40012c00 	.word	0x40012c00
 8006794:	40013400 	.word	0x40013400
 8006798:	40014000 	.word	0x40014000
 800679c:	40014400 	.word	0x40014400
 80067a0:	40014800 	.word	0x40014800

080067a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a18      	ldr	r2, [pc, #96]	@ (8006864 <TIM_OC4_SetConfig+0xc0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00f      	beq.n	8006828 <TIM_OC4_SetConfig+0x84>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a17      	ldr	r2, [pc, #92]	@ (8006868 <TIM_OC4_SetConfig+0xc4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00b      	beq.n	8006828 <TIM_OC4_SetConfig+0x84>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a16      	ldr	r2, [pc, #88]	@ (800686c <TIM_OC4_SetConfig+0xc8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC4_SetConfig+0x84>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a15      	ldr	r2, [pc, #84]	@ (8006870 <TIM_OC4_SetConfig+0xcc>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC4_SetConfig+0x84>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a14      	ldr	r2, [pc, #80]	@ (8006874 <TIM_OC4_SetConfig+0xd0>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d109      	bne.n	800683c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800682e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	019b      	lsls	r3, r3, #6
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	4313      	orrs	r3, r2
 800683a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685a      	ldr	r2, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	621a      	str	r2, [r3, #32]
}
 8006856:	bf00      	nop
 8006858:	371c      	adds	r7, #28
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40013400 	.word	0x40013400
 800686c:	40014000 	.word	0x40014000
 8006870:	40014400 	.word	0x40014400
 8006874:	40014800 	.word	0x40014800

08006878 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006878:	b480      	push	{r7}
 800687a:	b087      	sub	sp, #28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a1b      	ldr	r3, [r3, #32]
 8006886:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a1b      	ldr	r3, [r3, #32]
 800688c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80068bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	041b      	lsls	r3, r3, #16
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a17      	ldr	r2, [pc, #92]	@ (800692c <TIM_OC5_SetConfig+0xb4>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00f      	beq.n	80068f2 <TIM_OC5_SetConfig+0x7a>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a16      	ldr	r2, [pc, #88]	@ (8006930 <TIM_OC5_SetConfig+0xb8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00b      	beq.n	80068f2 <TIM_OC5_SetConfig+0x7a>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a15      	ldr	r2, [pc, #84]	@ (8006934 <TIM_OC5_SetConfig+0xbc>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d007      	beq.n	80068f2 <TIM_OC5_SetConfig+0x7a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a14      	ldr	r2, [pc, #80]	@ (8006938 <TIM_OC5_SetConfig+0xc0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d003      	beq.n	80068f2 <TIM_OC5_SetConfig+0x7a>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a13      	ldr	r2, [pc, #76]	@ (800693c <TIM_OC5_SetConfig+0xc4>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d109      	bne.n	8006906 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40012c00 	.word	0x40012c00
 8006930:	40013400 	.word	0x40013400
 8006934:	40014000 	.word	0x40014000
 8006938:	40014400 	.word	0x40014400
 800693c:	40014800 	.word	0x40014800

08006940 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a1b      	ldr	r3, [r3, #32]
 8006954:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800696e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	4313      	orrs	r3, r2
 800697e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	051b      	lsls	r3, r3, #20
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a18      	ldr	r2, [pc, #96]	@ (80069f8 <TIM_OC6_SetConfig+0xb8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d00f      	beq.n	80069bc <TIM_OC6_SetConfig+0x7c>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a17      	ldr	r2, [pc, #92]	@ (80069fc <TIM_OC6_SetConfig+0xbc>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00b      	beq.n	80069bc <TIM_OC6_SetConfig+0x7c>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a16      	ldr	r2, [pc, #88]	@ (8006a00 <TIM_OC6_SetConfig+0xc0>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d007      	beq.n	80069bc <TIM_OC6_SetConfig+0x7c>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a15      	ldr	r2, [pc, #84]	@ (8006a04 <TIM_OC6_SetConfig+0xc4>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d003      	beq.n	80069bc <TIM_OC6_SetConfig+0x7c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a14      	ldr	r2, [pc, #80]	@ (8006a08 <TIM_OC6_SetConfig+0xc8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d109      	bne.n	80069d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	029b      	lsls	r3, r3, #10
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	621a      	str	r2, [r3, #32]
}
 80069ea:	bf00      	nop
 80069ec:	371c      	adds	r7, #28
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	40012c00 	.word	0x40012c00
 80069fc:	40013400 	.word	0x40013400
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6a1b      	ldr	r3, [r3, #32]
 8006a24:	f023 0201 	bic.w	r2, r3, #1
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4a26      	ldr	r2, [pc, #152]	@ (8006ad0 <TIM_TI1_SetConfig+0xc4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d017      	beq.n	8006a6a <TIM_TI1_SetConfig+0x5e>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a40:	d013      	beq.n	8006a6a <TIM_TI1_SetConfig+0x5e>
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	4a23      	ldr	r2, [pc, #140]	@ (8006ad4 <TIM_TI1_SetConfig+0xc8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00f      	beq.n	8006a6a <TIM_TI1_SetConfig+0x5e>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4a22      	ldr	r2, [pc, #136]	@ (8006ad8 <TIM_TI1_SetConfig+0xcc>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d00b      	beq.n	8006a6a <TIM_TI1_SetConfig+0x5e>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a21      	ldr	r2, [pc, #132]	@ (8006adc <TIM_TI1_SetConfig+0xd0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d007      	beq.n	8006a6a <TIM_TI1_SetConfig+0x5e>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	4a20      	ldr	r2, [pc, #128]	@ (8006ae0 <TIM_TI1_SetConfig+0xd4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d003      	beq.n	8006a6a <TIM_TI1_SetConfig+0x5e>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a1f      	ldr	r2, [pc, #124]	@ (8006ae4 <TIM_TI1_SetConfig+0xd8>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d101      	bne.n	8006a6e <TIM_TI1_SetConfig+0x62>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e000      	b.n	8006a70 <TIM_TI1_SetConfig+0x64>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
 8006a84:	e003      	b.n	8006a8e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	011b      	lsls	r3, r3, #4
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f023 030a 	bic.w	r3, r3, #10
 8006aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	f003 030a 	and.w	r3, r3, #10
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	693a      	ldr	r2, [r7, #16]
 8006ac0:	621a      	str	r2, [r3, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40013400 	.word	0x40013400
 8006ae4:	40014000 	.word	0x40014000

08006ae8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	f023 0210 	bic.w	r2, r3, #16
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	021b      	lsls	r3, r3, #8
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	031b      	lsls	r3, r3, #12
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b3a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	621a      	str	r2, [r3, #32]
}
 8006b56:	bf00      	nop
 8006b58:	371c      	adds	r7, #28
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b087      	sub	sp, #28
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	60f8      	str	r0, [r7, #12]
 8006b6a:	60b9      	str	r1, [r7, #8]
 8006b6c:	607a      	str	r2, [r7, #4]
 8006b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a1b      	ldr	r3, [r3, #32]
 8006b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f023 0303 	bic.w	r3, r3, #3
 8006b8e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	011b      	lsls	r3, r3, #4
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006bb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c18:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	031b      	lsls	r3, r3, #12
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006c2c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	031b      	lsls	r3, r3, #12
 8006c32:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	621a      	str	r2, [r3, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	f003 031f 	and.w	r3, r3, #31
 8006c66:	2201      	movs	r2, #1
 8006c68:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	6a1a      	ldr	r2, [r3, #32]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	43db      	mvns	r3, r3
 8006c76:	401a      	ands	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1a      	ldr	r2, [r3, #32]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	6879      	ldr	r1, [r7, #4]
 8006c88:	fa01 f303 	lsl.w	r3, r1, r3
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
	...

08006ca0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d101      	bne.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006cb4:	2302      	movs	r3, #2
 8006cb6:	e068      	b.n	8006d8a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d004      	beq.n	8006cec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2d      	ldr	r2, [pc, #180]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d108      	bne.n	8006cfe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006cf2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d04:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8006d98 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d01d      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d2a:	d018      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1b      	ldr	r2, [pc, #108]	@ (8006da0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d013      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	@ (8006da4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a18      	ldr	r2, [pc, #96]	@ (8006da8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d009      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a13      	ldr	r2, [pc, #76]	@ (8006d9c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d004      	beq.n	8006d5e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a14      	ldr	r2, [pc, #80]	@ (8006dac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d10c      	bne.n	8006d78 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40012c00 	.word	0x40012c00
 8006d9c:	40013400 	.word	0x40013400
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40014000 	.word	0x40014000

08006db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006dcc:	bf00      	nop
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e040      	b.n	8006e80 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d106      	bne.n	8006e14 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f7fa fee4 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2224      	movs	r2, #36	@ 0x24
 8006e18:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f022 0201 	bic.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fb6a 	bl	800750c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f8af 	bl	8006f9c <UART_SetConfig>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e01b      	b.n	8006e80 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689a      	ldr	r2, [r3, #8]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fbe9 	bl	8007650 <UART_CheckIdleState>
 8006e7e:	4603      	mov	r3, r0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3708      	adds	r7, #8
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08a      	sub	sp, #40	@ 0x28
 8006e8c:	af02      	add	r7, sp, #8
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	4613      	mov	r3, r2
 8006e96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d177      	bne.n	8006f90 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_UART_Transmit+0x24>
 8006ea6:	88fb      	ldrh	r3, [r7, #6]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d101      	bne.n	8006eb0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e070      	b.n	8006f92 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2221      	movs	r2, #33	@ 0x21
 8006ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ebe:	f7fa fffd 	bl	8001ebc <HAL_GetTick>
 8006ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	88fa      	ldrh	r2, [r7, #6]
 8006ec8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	88fa      	ldrh	r2, [r7, #6]
 8006ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006edc:	d108      	bne.n	8006ef0 <HAL_UART_Transmit+0x68>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	691b      	ldr	r3, [r3, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e003      	b.n	8006ef8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ef8:	e02f      	b.n	8006f5a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2200      	movs	r2, #0
 8006f02:	2180      	movs	r1, #128	@ 0x80
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 fc4b 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d004      	beq.n	8006f1a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e03b      	b.n	8006f92 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10b      	bne.n	8006f38 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f20:	69bb      	ldr	r3, [r7, #24]
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f2c:	b292      	uxth	r2, r2
 8006f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	3302      	adds	r3, #2
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	e007      	b.n	8006f48 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	3301      	adds	r3, #1
 8006f46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1c9      	bne.n	8006efa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	9300      	str	r3, [sp, #0]
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	2140      	movs	r1, #64	@ 0x40
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fc15 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 8006f76:	4603      	mov	r3, r0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e005      	b.n	8006f92 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2220      	movs	r2, #32
 8006f8a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3720      	adds	r7, #32
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
	...

08006f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fa0:	b08a      	sub	sp, #40	@ 0x28
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	691b      	ldr	r3, [r3, #16]
 8006fb4:	431a      	orrs	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4ba4      	ldr	r3, [pc, #656]	@ (800725c <UART_SetConfig+0x2c0>)
 8006fcc:	4013      	ands	r3, r2
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68da      	ldr	r2, [r3, #12]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	699b      	ldr	r3, [r3, #24]
 8006ff2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a99      	ldr	r2, [pc, #612]	@ (8007260 <UART_SetConfig+0x2c4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007004:	4313      	orrs	r3, r2
 8007006:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007018:	430a      	orrs	r2, r1
 800701a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a90      	ldr	r2, [pc, #576]	@ (8007264 <UART_SetConfig+0x2c8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d126      	bne.n	8007074 <UART_SetConfig+0xd8>
 8007026:	4b90      	ldr	r3, [pc, #576]	@ (8007268 <UART_SetConfig+0x2cc>)
 8007028:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b03      	cmp	r3, #3
 8007032:	d81b      	bhi.n	800706c <UART_SetConfig+0xd0>
 8007034:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <UART_SetConfig+0xa0>)
 8007036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703a:	bf00      	nop
 800703c:	0800704d 	.word	0x0800704d
 8007040:	0800705d 	.word	0x0800705d
 8007044:	08007055 	.word	0x08007055
 8007048:	08007065 	.word	0x08007065
 800704c:	2301      	movs	r3, #1
 800704e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007052:	e116      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007054:	2302      	movs	r3, #2
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705a:	e112      	b.n	8007282 <UART_SetConfig+0x2e6>
 800705c:	2304      	movs	r3, #4
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e10e      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007064:	2308      	movs	r3, #8
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e10a      	b.n	8007282 <UART_SetConfig+0x2e6>
 800706c:	2310      	movs	r3, #16
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e106      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a7c      	ldr	r2, [pc, #496]	@ (800726c <UART_SetConfig+0x2d0>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d138      	bne.n	80070f0 <UART_SetConfig+0x154>
 800707e:	4b7a      	ldr	r3, [pc, #488]	@ (8007268 <UART_SetConfig+0x2cc>)
 8007080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007084:	f003 030c 	and.w	r3, r3, #12
 8007088:	2b0c      	cmp	r3, #12
 800708a:	d82d      	bhi.n	80070e8 <UART_SetConfig+0x14c>
 800708c:	a201      	add	r2, pc, #4	@ (adr r2, 8007094 <UART_SetConfig+0xf8>)
 800708e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007092:	bf00      	nop
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070e9 	.word	0x080070e9
 800709c:	080070e9 	.word	0x080070e9
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	080070d9 	.word	0x080070d9
 80070a8:	080070e9 	.word	0x080070e9
 80070ac:	080070e9 	.word	0x080070e9
 80070b0:	080070e9 	.word	0x080070e9
 80070b4:	080070d1 	.word	0x080070d1
 80070b8:	080070e9 	.word	0x080070e9
 80070bc:	080070e9 	.word	0x080070e9
 80070c0:	080070e9 	.word	0x080070e9
 80070c4:	080070e1 	.word	0x080070e1
 80070c8:	2300      	movs	r3, #0
 80070ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ce:	e0d8      	b.n	8007282 <UART_SetConfig+0x2e6>
 80070d0:	2302      	movs	r3, #2
 80070d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d6:	e0d4      	b.n	8007282 <UART_SetConfig+0x2e6>
 80070d8:	2304      	movs	r3, #4
 80070da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070de:	e0d0      	b.n	8007282 <UART_SetConfig+0x2e6>
 80070e0:	2308      	movs	r3, #8
 80070e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070e6:	e0cc      	b.n	8007282 <UART_SetConfig+0x2e6>
 80070e8:	2310      	movs	r3, #16
 80070ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ee:	e0c8      	b.n	8007282 <UART_SetConfig+0x2e6>
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a5e      	ldr	r2, [pc, #376]	@ (8007270 <UART_SetConfig+0x2d4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d125      	bne.n	8007146 <UART_SetConfig+0x1aa>
 80070fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007268 <UART_SetConfig+0x2cc>)
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007100:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007104:	2b30      	cmp	r3, #48	@ 0x30
 8007106:	d016      	beq.n	8007136 <UART_SetConfig+0x19a>
 8007108:	2b30      	cmp	r3, #48	@ 0x30
 800710a:	d818      	bhi.n	800713e <UART_SetConfig+0x1a2>
 800710c:	2b20      	cmp	r3, #32
 800710e:	d00a      	beq.n	8007126 <UART_SetConfig+0x18a>
 8007110:	2b20      	cmp	r3, #32
 8007112:	d814      	bhi.n	800713e <UART_SetConfig+0x1a2>
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <UART_SetConfig+0x182>
 8007118:	2b10      	cmp	r3, #16
 800711a:	d008      	beq.n	800712e <UART_SetConfig+0x192>
 800711c:	e00f      	b.n	800713e <UART_SetConfig+0x1a2>
 800711e:	2300      	movs	r3, #0
 8007120:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007124:	e0ad      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007126:	2302      	movs	r3, #2
 8007128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712c:	e0a9      	b.n	8007282 <UART_SetConfig+0x2e6>
 800712e:	2304      	movs	r3, #4
 8007130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007134:	e0a5      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007136:	2308      	movs	r3, #8
 8007138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713c:	e0a1      	b.n	8007282 <UART_SetConfig+0x2e6>
 800713e:	2310      	movs	r3, #16
 8007140:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007144:	e09d      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a4a      	ldr	r2, [pc, #296]	@ (8007274 <UART_SetConfig+0x2d8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d125      	bne.n	800719c <UART_SetConfig+0x200>
 8007150:	4b45      	ldr	r3, [pc, #276]	@ (8007268 <UART_SetConfig+0x2cc>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800715a:	2bc0      	cmp	r3, #192	@ 0xc0
 800715c:	d016      	beq.n	800718c <UART_SetConfig+0x1f0>
 800715e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007160:	d818      	bhi.n	8007194 <UART_SetConfig+0x1f8>
 8007162:	2b80      	cmp	r3, #128	@ 0x80
 8007164:	d00a      	beq.n	800717c <UART_SetConfig+0x1e0>
 8007166:	2b80      	cmp	r3, #128	@ 0x80
 8007168:	d814      	bhi.n	8007194 <UART_SetConfig+0x1f8>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <UART_SetConfig+0x1d8>
 800716e:	2b40      	cmp	r3, #64	@ 0x40
 8007170:	d008      	beq.n	8007184 <UART_SetConfig+0x1e8>
 8007172:	e00f      	b.n	8007194 <UART_SetConfig+0x1f8>
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800717a:	e082      	b.n	8007282 <UART_SetConfig+0x2e6>
 800717c:	2302      	movs	r3, #2
 800717e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007182:	e07e      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007184:	2304      	movs	r3, #4
 8007186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800718a:	e07a      	b.n	8007282 <UART_SetConfig+0x2e6>
 800718c:	2308      	movs	r3, #8
 800718e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007192:	e076      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007194:	2310      	movs	r3, #16
 8007196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800719a:	e072      	b.n	8007282 <UART_SetConfig+0x2e6>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a35      	ldr	r2, [pc, #212]	@ (8007278 <UART_SetConfig+0x2dc>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d12a      	bne.n	80071fc <UART_SetConfig+0x260>
 80071a6:	4b30      	ldr	r3, [pc, #192]	@ (8007268 <UART_SetConfig+0x2cc>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071b4:	d01a      	beq.n	80071ec <UART_SetConfig+0x250>
 80071b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ba:	d81b      	bhi.n	80071f4 <UART_SetConfig+0x258>
 80071bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c0:	d00c      	beq.n	80071dc <UART_SetConfig+0x240>
 80071c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071c6:	d815      	bhi.n	80071f4 <UART_SetConfig+0x258>
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <UART_SetConfig+0x238>
 80071cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071d0:	d008      	beq.n	80071e4 <UART_SetConfig+0x248>
 80071d2:	e00f      	b.n	80071f4 <UART_SetConfig+0x258>
 80071d4:	2300      	movs	r3, #0
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071da:	e052      	b.n	8007282 <UART_SetConfig+0x2e6>
 80071dc:	2302      	movs	r3, #2
 80071de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e2:	e04e      	b.n	8007282 <UART_SetConfig+0x2e6>
 80071e4:	2304      	movs	r3, #4
 80071e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ea:	e04a      	b.n	8007282 <UART_SetConfig+0x2e6>
 80071ec:	2308      	movs	r3, #8
 80071ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071f2:	e046      	b.n	8007282 <UART_SetConfig+0x2e6>
 80071f4:	2310      	movs	r3, #16
 80071f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071fa:	e042      	b.n	8007282 <UART_SetConfig+0x2e6>
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a17      	ldr	r2, [pc, #92]	@ (8007260 <UART_SetConfig+0x2c4>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d13a      	bne.n	800727c <UART_SetConfig+0x2e0>
 8007206:	4b18      	ldr	r3, [pc, #96]	@ (8007268 <UART_SetConfig+0x2cc>)
 8007208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007214:	d01a      	beq.n	800724c <UART_SetConfig+0x2b0>
 8007216:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800721a:	d81b      	bhi.n	8007254 <UART_SetConfig+0x2b8>
 800721c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007220:	d00c      	beq.n	800723c <UART_SetConfig+0x2a0>
 8007222:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007226:	d815      	bhi.n	8007254 <UART_SetConfig+0x2b8>
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <UART_SetConfig+0x298>
 800722c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007230:	d008      	beq.n	8007244 <UART_SetConfig+0x2a8>
 8007232:	e00f      	b.n	8007254 <UART_SetConfig+0x2b8>
 8007234:	2300      	movs	r3, #0
 8007236:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800723a:	e022      	b.n	8007282 <UART_SetConfig+0x2e6>
 800723c:	2302      	movs	r3, #2
 800723e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007242:	e01e      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007244:	2304      	movs	r3, #4
 8007246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800724a:	e01a      	b.n	8007282 <UART_SetConfig+0x2e6>
 800724c:	2308      	movs	r3, #8
 800724e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007252:	e016      	b.n	8007282 <UART_SetConfig+0x2e6>
 8007254:	2310      	movs	r3, #16
 8007256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800725a:	e012      	b.n	8007282 <UART_SetConfig+0x2e6>
 800725c:	efff69f3 	.word	0xefff69f3
 8007260:	40008000 	.word	0x40008000
 8007264:	40013800 	.word	0x40013800
 8007268:	40021000 	.word	0x40021000
 800726c:	40004400 	.word	0x40004400
 8007270:	40004800 	.word	0x40004800
 8007274:	40004c00 	.word	0x40004c00
 8007278:	40005000 	.word	0x40005000
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a9f      	ldr	r2, [pc, #636]	@ (8007504 <UART_SetConfig+0x568>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d17a      	bne.n	8007382 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800728c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007290:	2b08      	cmp	r3, #8
 8007292:	d824      	bhi.n	80072de <UART_SetConfig+0x342>
 8007294:	a201      	add	r2, pc, #4	@ (adr r2, 800729c <UART_SetConfig+0x300>)
 8007296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800729a:	bf00      	nop
 800729c:	080072c1 	.word	0x080072c1
 80072a0:	080072df 	.word	0x080072df
 80072a4:	080072c9 	.word	0x080072c9
 80072a8:	080072df 	.word	0x080072df
 80072ac:	080072cf 	.word	0x080072cf
 80072b0:	080072df 	.word	0x080072df
 80072b4:	080072df 	.word	0x080072df
 80072b8:	080072df 	.word	0x080072df
 80072bc:	080072d7 	.word	0x080072d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072c0:	f7fd fa5c 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 80072c4:	61f8      	str	r0, [r7, #28]
        break;
 80072c6:	e010      	b.n	80072ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072c8:	4b8f      	ldr	r3, [pc, #572]	@ (8007508 <UART_SetConfig+0x56c>)
 80072ca:	61fb      	str	r3, [r7, #28]
        break;
 80072cc:	e00d      	b.n	80072ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072ce:	f7fd f9bd 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80072d2:	61f8      	str	r0, [r7, #28]
        break;
 80072d4:	e009      	b.n	80072ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072da:	61fb      	str	r3, [r7, #28]
        break;
 80072dc:	e005      	b.n	80072ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80072de:	2300      	movs	r3, #0
 80072e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 80fb 	beq.w	80074e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	4413      	add	r3, r2
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d305      	bcc.n	800730e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	429a      	cmp	r2, r3
 800730c:	d903      	bls.n	8007316 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007314:	e0e8      	b.n	80074e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2200      	movs	r2, #0
 800731a:	461c      	mov	r4, r3
 800731c:	4615      	mov	r5, r2
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	f04f 0300 	mov.w	r3, #0
 8007326:	022b      	lsls	r3, r5, #8
 8007328:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800732c:	0222      	lsls	r2, r4, #8
 800732e:	68f9      	ldr	r1, [r7, #12]
 8007330:	6849      	ldr	r1, [r1, #4]
 8007332:	0849      	lsrs	r1, r1, #1
 8007334:	2000      	movs	r0, #0
 8007336:	4688      	mov	r8, r1
 8007338:	4681      	mov	r9, r0
 800733a:	eb12 0a08 	adds.w	sl, r2, r8
 800733e:	eb43 0b09 	adc.w	fp, r3, r9
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	603b      	str	r3, [r7, #0]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	f7f8 ff8c 	bl	8000270 <__aeabi_uldivmod>
 8007358:	4602      	mov	r2, r0
 800735a:	460b      	mov	r3, r1
 800735c:	4613      	mov	r3, r2
 800735e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007360:	69bb      	ldr	r3, [r7, #24]
 8007362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007366:	d308      	bcc.n	800737a <UART_SetConfig+0x3de>
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800736e:	d204      	bcs.n	800737a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	60da      	str	r2, [r3, #12]
 8007378:	e0b6      	b.n	80074e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007380:	e0b2      	b.n	80074e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	69db      	ldr	r3, [r3, #28]
 8007386:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800738a:	d15e      	bne.n	800744a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800738c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007390:	2b08      	cmp	r3, #8
 8007392:	d828      	bhi.n	80073e6 <UART_SetConfig+0x44a>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <UART_SetConfig+0x400>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073c9 	.word	0x080073c9
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073e7 	.word	0x080073e7
 80073ac:	080073d7 	.word	0x080073d7
 80073b0:	080073e7 	.word	0x080073e7
 80073b4:	080073e7 	.word	0x080073e7
 80073b8:	080073e7 	.word	0x080073e7
 80073bc:	080073df 	.word	0x080073df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fd f9dc 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 80073c4:	61f8      	str	r0, [r7, #28]
        break;
 80073c6:	e014      	b.n	80073f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073c8:	f7fd f9ee 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 80073cc:	61f8      	str	r0, [r7, #28]
        break;
 80073ce:	e010      	b.n	80073f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007508 <UART_SetConfig+0x56c>)
 80073d2:	61fb      	str	r3, [r7, #28]
        break;
 80073d4:	e00d      	b.n	80073f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073d6:	f7fd f939 	bl	800464c <HAL_RCC_GetSysClockFreq>
 80073da:	61f8      	str	r0, [r7, #28]
        break;
 80073dc:	e009      	b.n	80073f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073e2:	61fb      	str	r3, [r7, #28]
        break;
 80073e4:	e005      	b.n	80073f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d077      	beq.n	80074e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	005a      	lsls	r2, r3, #1
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	085b      	lsrs	r3, r3, #1
 8007402:	441a      	add	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	fbb2 f3f3 	udiv	r3, r2, r3
 800740c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	2b0f      	cmp	r3, #15
 8007412:	d916      	bls.n	8007442 <UART_SetConfig+0x4a6>
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800741a:	d212      	bcs.n	8007442 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	b29b      	uxth	r3, r3
 8007420:	f023 030f 	bic.w	r3, r3, #15
 8007424:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	085b      	lsrs	r3, r3, #1
 800742a:	b29b      	uxth	r3, r3
 800742c:	f003 0307 	and.w	r3, r3, #7
 8007430:	b29a      	uxth	r2, r3
 8007432:	8afb      	ldrh	r3, [r7, #22]
 8007434:	4313      	orrs	r3, r2
 8007436:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	8afa      	ldrh	r2, [r7, #22]
 800743e:	60da      	str	r2, [r3, #12]
 8007440:	e052      	b.n	80074e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007448:	e04e      	b.n	80074e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800744a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800744e:	2b08      	cmp	r3, #8
 8007450:	d827      	bhi.n	80074a2 <UART_SetConfig+0x506>
 8007452:	a201      	add	r2, pc, #4	@ (adr r2, 8007458 <UART_SetConfig+0x4bc>)
 8007454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007458:	0800747d 	.word	0x0800747d
 800745c:	08007485 	.word	0x08007485
 8007460:	0800748d 	.word	0x0800748d
 8007464:	080074a3 	.word	0x080074a3
 8007468:	08007493 	.word	0x08007493
 800746c:	080074a3 	.word	0x080074a3
 8007470:	080074a3 	.word	0x080074a3
 8007474:	080074a3 	.word	0x080074a3
 8007478:	0800749b 	.word	0x0800749b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800747c:	f7fd f97e 	bl	800477c <HAL_RCC_GetPCLK1Freq>
 8007480:	61f8      	str	r0, [r7, #28]
        break;
 8007482:	e014      	b.n	80074ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007484:	f7fd f990 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8007488:	61f8      	str	r0, [r7, #28]
        break;
 800748a:	e010      	b.n	80074ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800748c:	4b1e      	ldr	r3, [pc, #120]	@ (8007508 <UART_SetConfig+0x56c>)
 800748e:	61fb      	str	r3, [r7, #28]
        break;
 8007490:	e00d      	b.n	80074ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007492:	f7fd f8db 	bl	800464c <HAL_RCC_GetSysClockFreq>
 8007496:	61f8      	str	r0, [r7, #28]
        break;
 8007498:	e009      	b.n	80074ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800749a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800749e:	61fb      	str	r3, [r7, #28]
        break;
 80074a0:	e005      	b.n	80074ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074ac:	bf00      	nop
    }

    if (pclk != 0U)
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d019      	beq.n	80074e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	085a      	lsrs	r2, r3, #1
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	441a      	add	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b0f      	cmp	r3, #15
 80074cc:	d909      	bls.n	80074e2 <UART_SetConfig+0x546>
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074d4:	d205      	bcs.n	80074e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	60da      	str	r2, [r3, #12]
 80074e0:	e002      	b.n	80074e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2200      	movs	r2, #0
 80074ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80074f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3728      	adds	r7, #40	@ 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007502:	bf00      	nop
 8007504:	40008000 	.word	0x40008000
 8007508:	00f42400 	.word	0x00f42400

0800750c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007518:	f003 0308 	and.w	r3, r3, #8
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00a      	beq.n	8007536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	430a      	orrs	r2, r1
 8007534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00a      	beq.n	8007558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	430a      	orrs	r2, r1
 8007556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00a      	beq.n	800757a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800757e:	f003 0304 	and.w	r3, r3, #4
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075a0:	f003 0310 	and.w	r3, r3, #16
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00a      	beq.n	80075be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00a      	beq.n	80075e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d01a      	beq.n	8007622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800760a:	d10a      	bne.n	8007622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00a      	beq.n	8007644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	605a      	str	r2, [r3, #4]
  }
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b098      	sub	sp, #96	@ 0x60
 8007654:	af02      	add	r7, sp, #8
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007660:	f7fa fc2c 	bl	8001ebc <HAL_GetTick>
 8007664:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b08      	cmp	r3, #8
 8007672:	d12e      	bne.n	80076d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767c:	2200      	movs	r2, #0
 800767e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f88c 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d021      	beq.n	80076d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800769c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800769e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	461a      	mov	r2, r3
 80076aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80076ae:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e6      	bne.n	800768e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2220      	movs	r2, #32
 80076c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	e062      	b.n	8007798 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0304 	and.w	r3, r3, #4
 80076dc:	2b04      	cmp	r3, #4
 80076de:	d149      	bne.n	8007774 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	2200      	movs	r2, #0
 80076ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f856 	bl	80077a0 <UART_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d03c      	beq.n	8007774 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	623b      	str	r3, [r7, #32]
   return(result);
 8007708:	6a3b      	ldr	r3, [r7, #32]
 800770a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800770e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	461a      	mov	r2, r3
 8007716:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007718:	633b      	str	r3, [r7, #48]	@ 0x30
 800771a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800771e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e6      	bne.n	80076fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	e853 3f00 	ldrex	r3, [r3]
 800773a:	60fb      	str	r3, [r7, #12]
   return(result);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f023 0301 	bic.w	r3, r3, #1
 8007742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800774c:	61fa      	str	r2, [r7, #28]
 800774e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007750:	69b9      	ldr	r1, [r7, #24]
 8007752:	69fa      	ldr	r2, [r7, #28]
 8007754:	e841 2300 	strex	r3, r2, [r1]
 8007758:	617b      	str	r3, [r7, #20]
   return(result);
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1e5      	bne.n	800772c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e011      	b.n	8007798 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2220      	movs	r2, #32
 8007778:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2220      	movs	r2, #32
 800777e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2200      	movs	r2, #0
 800778c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3758      	adds	r7, #88	@ 0x58
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	603b      	str	r3, [r7, #0]
 80077ac:	4613      	mov	r3, r2
 80077ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b0:	e049      	b.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d045      	beq.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ba:	f7fa fb7f 	bl	8001ebc <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d101      	bne.n	80077d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e048      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d031      	beq.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69db      	ldr	r3, [r3, #28]
 80077e8:	f003 0308 	and.w	r3, r3, #8
 80077ec:	2b08      	cmp	r3, #8
 80077ee:	d110      	bne.n	8007812 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2208      	movs	r2, #8
 80077f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 f838 	bl	800786e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2208      	movs	r2, #8
 8007802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e029      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800781c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007820:	d111      	bne.n	8007846 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800782a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f000 f81e 	bl	800786e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e00f      	b.n	8007866 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	4013      	ands	r3, r2
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	429a      	cmp	r2, r3
 8007854:	bf0c      	ite	eq
 8007856:	2301      	moveq	r3, #1
 8007858:	2300      	movne	r3, #0
 800785a:	b2db      	uxtb	r3, r3
 800785c:	461a      	mov	r2, r3
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	429a      	cmp	r2, r3
 8007862:	d0a6      	beq.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3710      	adds	r7, #16
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800786e:	b480      	push	{r7}
 8007870:	b095      	sub	sp, #84	@ 0x54
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007886:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800788a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007894:	643b      	str	r3, [r7, #64]	@ 0x40
 8007896:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800789a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e6      	bne.n	8007876 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3308      	adds	r3, #8
 80078ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f023 0301 	bic.w	r3, r3, #1
 80078be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	3308      	adds	r3, #8
 80078c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e5      	bne.n	80078a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d118      	bne.n	8007916 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f023 0310 	bic.w	r3, r3, #16
 80078f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6979      	ldr	r1, [r7, #20]
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	613b      	str	r3, [r7, #16]
   return(result);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e6      	bne.n	80078e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800792a:	bf00      	nop
 800792c:	3754      	adds	r7, #84	@ 0x54
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
	...

08007938 <siprintf>:
 8007938:	b40e      	push	{r1, r2, r3}
 800793a:	b500      	push	{lr}
 800793c:	b09c      	sub	sp, #112	@ 0x70
 800793e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007940:	9002      	str	r0, [sp, #8]
 8007942:	9006      	str	r0, [sp, #24]
 8007944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007948:	4809      	ldr	r0, [pc, #36]	@ (8007970 <siprintf+0x38>)
 800794a:	9107      	str	r1, [sp, #28]
 800794c:	9104      	str	r1, [sp, #16]
 800794e:	4909      	ldr	r1, [pc, #36]	@ (8007974 <siprintf+0x3c>)
 8007950:	f853 2b04 	ldr.w	r2, [r3], #4
 8007954:	9105      	str	r1, [sp, #20]
 8007956:	6800      	ldr	r0, [r0, #0]
 8007958:	9301      	str	r3, [sp, #4]
 800795a:	a902      	add	r1, sp, #8
 800795c:	f000 f994 	bl	8007c88 <_svfiprintf_r>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	2200      	movs	r2, #0
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	b01c      	add	sp, #112	@ 0x70
 8007968:	f85d eb04 	ldr.w	lr, [sp], #4
 800796c:	b003      	add	sp, #12
 800796e:	4770      	bx	lr
 8007970:	2000006c 	.word	0x2000006c
 8007974:	ffff0208 	.word	0xffff0208

08007978 <memset>:
 8007978:	4402      	add	r2, r0
 800797a:	4603      	mov	r3, r0
 800797c:	4293      	cmp	r3, r2
 800797e:	d100      	bne.n	8007982 <memset+0xa>
 8007980:	4770      	bx	lr
 8007982:	f803 1b01 	strb.w	r1, [r3], #1
 8007986:	e7f9      	b.n	800797c <memset+0x4>

08007988 <__errno>:
 8007988:	4b01      	ldr	r3, [pc, #4]	@ (8007990 <__errno+0x8>)
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	2000006c 	.word	0x2000006c

08007994 <__libc_init_array>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	4d0d      	ldr	r5, [pc, #52]	@ (80079cc <__libc_init_array+0x38>)
 8007998:	4c0d      	ldr	r4, [pc, #52]	@ (80079d0 <__libc_init_array+0x3c>)
 800799a:	1b64      	subs	r4, r4, r5
 800799c:	10a4      	asrs	r4, r4, #2
 800799e:	2600      	movs	r6, #0
 80079a0:	42a6      	cmp	r6, r4
 80079a2:	d109      	bne.n	80079b8 <__libc_init_array+0x24>
 80079a4:	4d0b      	ldr	r5, [pc, #44]	@ (80079d4 <__libc_init_array+0x40>)
 80079a6:	4c0c      	ldr	r4, [pc, #48]	@ (80079d8 <__libc_init_array+0x44>)
 80079a8:	f000 fc66 	bl	8008278 <_init>
 80079ac:	1b64      	subs	r4, r4, r5
 80079ae:	10a4      	asrs	r4, r4, #2
 80079b0:	2600      	movs	r6, #0
 80079b2:	42a6      	cmp	r6, r4
 80079b4:	d105      	bne.n	80079c2 <__libc_init_array+0x2e>
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079bc:	4798      	blx	r3
 80079be:	3601      	adds	r6, #1
 80079c0:	e7ee      	b.n	80079a0 <__libc_init_array+0xc>
 80079c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c6:	4798      	blx	r3
 80079c8:	3601      	adds	r6, #1
 80079ca:	e7f2      	b.n	80079b2 <__libc_init_array+0x1e>
 80079cc:	08008484 	.word	0x08008484
 80079d0:	08008484 	.word	0x08008484
 80079d4:	08008484 	.word	0x08008484
 80079d8:	08008488 	.word	0x08008488

080079dc <__retarget_lock_acquire_recursive>:
 80079dc:	4770      	bx	lr

080079de <__retarget_lock_release_recursive>:
 80079de:	4770      	bx	lr

080079e0 <_free_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	4605      	mov	r5, r0
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d041      	beq.n	8007a6c <_free_r+0x8c>
 80079e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ec:	1f0c      	subs	r4, r1, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bfb8      	it	lt
 80079f2:	18e4      	addlt	r4, r4, r3
 80079f4:	f000 f8e0 	bl	8007bb8 <__malloc_lock>
 80079f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007a70 <_free_r+0x90>)
 80079fa:	6813      	ldr	r3, [r2, #0]
 80079fc:	b933      	cbnz	r3, 8007a0c <_free_r+0x2c>
 80079fe:	6063      	str	r3, [r4, #4]
 8007a00:	6014      	str	r4, [r2, #0]
 8007a02:	4628      	mov	r0, r5
 8007a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a08:	f000 b8dc 	b.w	8007bc4 <__malloc_unlock>
 8007a0c:	42a3      	cmp	r3, r4
 8007a0e:	d908      	bls.n	8007a22 <_free_r+0x42>
 8007a10:	6820      	ldr	r0, [r4, #0]
 8007a12:	1821      	adds	r1, r4, r0
 8007a14:	428b      	cmp	r3, r1
 8007a16:	bf01      	itttt	eq
 8007a18:	6819      	ldreq	r1, [r3, #0]
 8007a1a:	685b      	ldreq	r3, [r3, #4]
 8007a1c:	1809      	addeq	r1, r1, r0
 8007a1e:	6021      	streq	r1, [r4, #0]
 8007a20:	e7ed      	b.n	80079fe <_free_r+0x1e>
 8007a22:	461a      	mov	r2, r3
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	b10b      	cbz	r3, 8007a2c <_free_r+0x4c>
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	d9fa      	bls.n	8007a22 <_free_r+0x42>
 8007a2c:	6811      	ldr	r1, [r2, #0]
 8007a2e:	1850      	adds	r0, r2, r1
 8007a30:	42a0      	cmp	r0, r4
 8007a32:	d10b      	bne.n	8007a4c <_free_r+0x6c>
 8007a34:	6820      	ldr	r0, [r4, #0]
 8007a36:	4401      	add	r1, r0
 8007a38:	1850      	adds	r0, r2, r1
 8007a3a:	4283      	cmp	r3, r0
 8007a3c:	6011      	str	r1, [r2, #0]
 8007a3e:	d1e0      	bne.n	8007a02 <_free_r+0x22>
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	6053      	str	r3, [r2, #4]
 8007a46:	4408      	add	r0, r1
 8007a48:	6010      	str	r0, [r2, #0]
 8007a4a:	e7da      	b.n	8007a02 <_free_r+0x22>
 8007a4c:	d902      	bls.n	8007a54 <_free_r+0x74>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	e7d6      	b.n	8007a02 <_free_r+0x22>
 8007a54:	6820      	ldr	r0, [r4, #0]
 8007a56:	1821      	adds	r1, r4, r0
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	bf04      	itt	eq
 8007a5c:	6819      	ldreq	r1, [r3, #0]
 8007a5e:	685b      	ldreq	r3, [r3, #4]
 8007a60:	6063      	str	r3, [r4, #4]
 8007a62:	bf04      	itt	eq
 8007a64:	1809      	addeq	r1, r1, r0
 8007a66:	6021      	streq	r1, [r4, #0]
 8007a68:	6054      	str	r4, [r2, #4]
 8007a6a:	e7ca      	b.n	8007a02 <_free_r+0x22>
 8007a6c:	bd38      	pop	{r3, r4, r5, pc}
 8007a6e:	bf00      	nop
 8007a70:	200006b0 	.word	0x200006b0

08007a74 <sbrk_aligned>:
 8007a74:	b570      	push	{r4, r5, r6, lr}
 8007a76:	4e0f      	ldr	r6, [pc, #60]	@ (8007ab4 <sbrk_aligned+0x40>)
 8007a78:	460c      	mov	r4, r1
 8007a7a:	6831      	ldr	r1, [r6, #0]
 8007a7c:	4605      	mov	r5, r0
 8007a7e:	b911      	cbnz	r1, 8007a86 <sbrk_aligned+0x12>
 8007a80:	f000 fba6 	bl	80081d0 <_sbrk_r>
 8007a84:	6030      	str	r0, [r6, #0]
 8007a86:	4621      	mov	r1, r4
 8007a88:	4628      	mov	r0, r5
 8007a8a:	f000 fba1 	bl	80081d0 <_sbrk_r>
 8007a8e:	1c43      	adds	r3, r0, #1
 8007a90:	d103      	bne.n	8007a9a <sbrk_aligned+0x26>
 8007a92:	f04f 34ff 	mov.w	r4, #4294967295
 8007a96:	4620      	mov	r0, r4
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
 8007a9a:	1cc4      	adds	r4, r0, #3
 8007a9c:	f024 0403 	bic.w	r4, r4, #3
 8007aa0:	42a0      	cmp	r0, r4
 8007aa2:	d0f8      	beq.n	8007a96 <sbrk_aligned+0x22>
 8007aa4:	1a21      	subs	r1, r4, r0
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	f000 fb92 	bl	80081d0 <_sbrk_r>
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1f2      	bne.n	8007a96 <sbrk_aligned+0x22>
 8007ab0:	e7ef      	b.n	8007a92 <sbrk_aligned+0x1e>
 8007ab2:	bf00      	nop
 8007ab4:	200006ac 	.word	0x200006ac

08007ab8 <_malloc_r>:
 8007ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007abc:	1ccd      	adds	r5, r1, #3
 8007abe:	f025 0503 	bic.w	r5, r5, #3
 8007ac2:	3508      	adds	r5, #8
 8007ac4:	2d0c      	cmp	r5, #12
 8007ac6:	bf38      	it	cc
 8007ac8:	250c      	movcc	r5, #12
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	4606      	mov	r6, r0
 8007ace:	db01      	blt.n	8007ad4 <_malloc_r+0x1c>
 8007ad0:	42a9      	cmp	r1, r5
 8007ad2:	d904      	bls.n	8007ade <_malloc_r+0x26>
 8007ad4:	230c      	movs	r3, #12
 8007ad6:	6033      	str	r3, [r6, #0]
 8007ad8:	2000      	movs	r0, #0
 8007ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ade:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bb4 <_malloc_r+0xfc>
 8007ae2:	f000 f869 	bl	8007bb8 <__malloc_lock>
 8007ae6:	f8d8 3000 	ldr.w	r3, [r8]
 8007aea:	461c      	mov	r4, r3
 8007aec:	bb44      	cbnz	r4, 8007b40 <_malloc_r+0x88>
 8007aee:	4629      	mov	r1, r5
 8007af0:	4630      	mov	r0, r6
 8007af2:	f7ff ffbf 	bl	8007a74 <sbrk_aligned>
 8007af6:	1c43      	adds	r3, r0, #1
 8007af8:	4604      	mov	r4, r0
 8007afa:	d158      	bne.n	8007bae <_malloc_r+0xf6>
 8007afc:	f8d8 4000 	ldr.w	r4, [r8]
 8007b00:	4627      	mov	r7, r4
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	d143      	bne.n	8007b8e <_malloc_r+0xd6>
 8007b06:	2c00      	cmp	r4, #0
 8007b08:	d04b      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b0a:	6823      	ldr	r3, [r4, #0]
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	eb04 0903 	add.w	r9, r4, r3
 8007b14:	f000 fb5c 	bl	80081d0 <_sbrk_r>
 8007b18:	4581      	cmp	r9, r0
 8007b1a:	d142      	bne.n	8007ba2 <_malloc_r+0xea>
 8007b1c:	6821      	ldr	r1, [r4, #0]
 8007b1e:	1a6d      	subs	r5, r5, r1
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ffa6 	bl	8007a74 <sbrk_aligned>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d03a      	beq.n	8007ba2 <_malloc_r+0xea>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	442b      	add	r3, r5
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	f8d8 3000 	ldr.w	r3, [r8]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	bb62      	cbnz	r2, 8007b94 <_malloc_r+0xdc>
 8007b3a:	f8c8 7000 	str.w	r7, [r8]
 8007b3e:	e00f      	b.n	8007b60 <_malloc_r+0xa8>
 8007b40:	6822      	ldr	r2, [r4, #0]
 8007b42:	1b52      	subs	r2, r2, r5
 8007b44:	d420      	bmi.n	8007b88 <_malloc_r+0xd0>
 8007b46:	2a0b      	cmp	r2, #11
 8007b48:	d917      	bls.n	8007b7a <_malloc_r+0xc2>
 8007b4a:	1961      	adds	r1, r4, r5
 8007b4c:	42a3      	cmp	r3, r4
 8007b4e:	6025      	str	r5, [r4, #0]
 8007b50:	bf18      	it	ne
 8007b52:	6059      	strne	r1, [r3, #4]
 8007b54:	6863      	ldr	r3, [r4, #4]
 8007b56:	bf08      	it	eq
 8007b58:	f8c8 1000 	streq.w	r1, [r8]
 8007b5c:	5162      	str	r2, [r4, r5]
 8007b5e:	604b      	str	r3, [r1, #4]
 8007b60:	4630      	mov	r0, r6
 8007b62:	f000 f82f 	bl	8007bc4 <__malloc_unlock>
 8007b66:	f104 000b 	add.w	r0, r4, #11
 8007b6a:	1d23      	adds	r3, r4, #4
 8007b6c:	f020 0007 	bic.w	r0, r0, #7
 8007b70:	1ac2      	subs	r2, r0, r3
 8007b72:	bf1c      	itt	ne
 8007b74:	1a1b      	subne	r3, r3, r0
 8007b76:	50a3      	strne	r3, [r4, r2]
 8007b78:	e7af      	b.n	8007ada <_malloc_r+0x22>
 8007b7a:	6862      	ldr	r2, [r4, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	bf0c      	ite	eq
 8007b80:	f8c8 2000 	streq.w	r2, [r8]
 8007b84:	605a      	strne	r2, [r3, #4]
 8007b86:	e7eb      	b.n	8007b60 <_malloc_r+0xa8>
 8007b88:	4623      	mov	r3, r4
 8007b8a:	6864      	ldr	r4, [r4, #4]
 8007b8c:	e7ae      	b.n	8007aec <_malloc_r+0x34>
 8007b8e:	463c      	mov	r4, r7
 8007b90:	687f      	ldr	r7, [r7, #4]
 8007b92:	e7b6      	b.n	8007b02 <_malloc_r+0x4a>
 8007b94:	461a      	mov	r2, r3
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d1fb      	bne.n	8007b94 <_malloc_r+0xdc>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	6053      	str	r3, [r2, #4]
 8007ba0:	e7de      	b.n	8007b60 <_malloc_r+0xa8>
 8007ba2:	230c      	movs	r3, #12
 8007ba4:	6033      	str	r3, [r6, #0]
 8007ba6:	4630      	mov	r0, r6
 8007ba8:	f000 f80c 	bl	8007bc4 <__malloc_unlock>
 8007bac:	e794      	b.n	8007ad8 <_malloc_r+0x20>
 8007bae:	6005      	str	r5, [r0, #0]
 8007bb0:	e7d6      	b.n	8007b60 <_malloc_r+0xa8>
 8007bb2:	bf00      	nop
 8007bb4:	200006b0 	.word	0x200006b0

08007bb8 <__malloc_lock>:
 8007bb8:	4801      	ldr	r0, [pc, #4]	@ (8007bc0 <__malloc_lock+0x8>)
 8007bba:	f7ff bf0f 	b.w	80079dc <__retarget_lock_acquire_recursive>
 8007bbe:	bf00      	nop
 8007bc0:	200006a8 	.word	0x200006a8

08007bc4 <__malloc_unlock>:
 8007bc4:	4801      	ldr	r0, [pc, #4]	@ (8007bcc <__malloc_unlock+0x8>)
 8007bc6:	f7ff bf0a 	b.w	80079de <__retarget_lock_release_recursive>
 8007bca:	bf00      	nop
 8007bcc:	200006a8 	.word	0x200006a8

08007bd0 <__ssputs_r>:
 8007bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bd4:	688e      	ldr	r6, [r1, #8]
 8007bd6:	461f      	mov	r7, r3
 8007bd8:	42be      	cmp	r6, r7
 8007bda:	680b      	ldr	r3, [r1, #0]
 8007bdc:	4682      	mov	sl, r0
 8007bde:	460c      	mov	r4, r1
 8007be0:	4690      	mov	r8, r2
 8007be2:	d82d      	bhi.n	8007c40 <__ssputs_r+0x70>
 8007be4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007be8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007bec:	d026      	beq.n	8007c3c <__ssputs_r+0x6c>
 8007bee:	6965      	ldr	r5, [r4, #20]
 8007bf0:	6909      	ldr	r1, [r1, #16]
 8007bf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bf6:	eba3 0901 	sub.w	r9, r3, r1
 8007bfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bfe:	1c7b      	adds	r3, r7, #1
 8007c00:	444b      	add	r3, r9
 8007c02:	106d      	asrs	r5, r5, #1
 8007c04:	429d      	cmp	r5, r3
 8007c06:	bf38      	it	cc
 8007c08:	461d      	movcc	r5, r3
 8007c0a:	0553      	lsls	r3, r2, #21
 8007c0c:	d527      	bpl.n	8007c5e <__ssputs_r+0x8e>
 8007c0e:	4629      	mov	r1, r5
 8007c10:	f7ff ff52 	bl	8007ab8 <_malloc_r>
 8007c14:	4606      	mov	r6, r0
 8007c16:	b360      	cbz	r0, 8007c72 <__ssputs_r+0xa2>
 8007c18:	6921      	ldr	r1, [r4, #16]
 8007c1a:	464a      	mov	r2, r9
 8007c1c:	f000 fae8 	bl	80081f0 <memcpy>
 8007c20:	89a3      	ldrh	r3, [r4, #12]
 8007c22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c2a:	81a3      	strh	r3, [r4, #12]
 8007c2c:	6126      	str	r6, [r4, #16]
 8007c2e:	6165      	str	r5, [r4, #20]
 8007c30:	444e      	add	r6, r9
 8007c32:	eba5 0509 	sub.w	r5, r5, r9
 8007c36:	6026      	str	r6, [r4, #0]
 8007c38:	60a5      	str	r5, [r4, #8]
 8007c3a:	463e      	mov	r6, r7
 8007c3c:	42be      	cmp	r6, r7
 8007c3e:	d900      	bls.n	8007c42 <__ssputs_r+0x72>
 8007c40:	463e      	mov	r6, r7
 8007c42:	6820      	ldr	r0, [r4, #0]
 8007c44:	4632      	mov	r2, r6
 8007c46:	4641      	mov	r1, r8
 8007c48:	f000 faa8 	bl	800819c <memmove>
 8007c4c:	68a3      	ldr	r3, [r4, #8]
 8007c4e:	1b9b      	subs	r3, r3, r6
 8007c50:	60a3      	str	r3, [r4, #8]
 8007c52:	6823      	ldr	r3, [r4, #0]
 8007c54:	4433      	add	r3, r6
 8007c56:	6023      	str	r3, [r4, #0]
 8007c58:	2000      	movs	r0, #0
 8007c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c5e:	462a      	mov	r2, r5
 8007c60:	f000 fad4 	bl	800820c <_realloc_r>
 8007c64:	4606      	mov	r6, r0
 8007c66:	2800      	cmp	r0, #0
 8007c68:	d1e0      	bne.n	8007c2c <__ssputs_r+0x5c>
 8007c6a:	6921      	ldr	r1, [r4, #16]
 8007c6c:	4650      	mov	r0, sl
 8007c6e:	f7ff feb7 	bl	80079e0 <_free_r>
 8007c72:	230c      	movs	r3, #12
 8007c74:	f8ca 3000 	str.w	r3, [sl]
 8007c78:	89a3      	ldrh	r3, [r4, #12]
 8007c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c7e:	81a3      	strh	r3, [r4, #12]
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	e7e9      	b.n	8007c5a <__ssputs_r+0x8a>
	...

08007c88 <_svfiprintf_r>:
 8007c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8c:	4698      	mov	r8, r3
 8007c8e:	898b      	ldrh	r3, [r1, #12]
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	b09d      	sub	sp, #116	@ 0x74
 8007c94:	4607      	mov	r7, r0
 8007c96:	460d      	mov	r5, r1
 8007c98:	4614      	mov	r4, r2
 8007c9a:	d510      	bpl.n	8007cbe <_svfiprintf_r+0x36>
 8007c9c:	690b      	ldr	r3, [r1, #16]
 8007c9e:	b973      	cbnz	r3, 8007cbe <_svfiprintf_r+0x36>
 8007ca0:	2140      	movs	r1, #64	@ 0x40
 8007ca2:	f7ff ff09 	bl	8007ab8 <_malloc_r>
 8007ca6:	6028      	str	r0, [r5, #0]
 8007ca8:	6128      	str	r0, [r5, #16]
 8007caa:	b930      	cbnz	r0, 8007cba <_svfiprintf_r+0x32>
 8007cac:	230c      	movs	r3, #12
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb4:	b01d      	add	sp, #116	@ 0x74
 8007cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cba:	2340      	movs	r3, #64	@ 0x40
 8007cbc:	616b      	str	r3, [r5, #20]
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cc2:	2320      	movs	r3, #32
 8007cc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ccc:	2330      	movs	r3, #48	@ 0x30
 8007cce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007e6c <_svfiprintf_r+0x1e4>
 8007cd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cd6:	f04f 0901 	mov.w	r9, #1
 8007cda:	4623      	mov	r3, r4
 8007cdc:	469a      	mov	sl, r3
 8007cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ce2:	b10a      	cbz	r2, 8007ce8 <_svfiprintf_r+0x60>
 8007ce4:	2a25      	cmp	r2, #37	@ 0x25
 8007ce6:	d1f9      	bne.n	8007cdc <_svfiprintf_r+0x54>
 8007ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8007cec:	d00b      	beq.n	8007d06 <_svfiprintf_r+0x7e>
 8007cee:	465b      	mov	r3, fp
 8007cf0:	4622      	mov	r2, r4
 8007cf2:	4629      	mov	r1, r5
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7ff ff6b 	bl	8007bd0 <__ssputs_r>
 8007cfa:	3001      	adds	r0, #1
 8007cfc:	f000 80a7 	beq.w	8007e4e <_svfiprintf_r+0x1c6>
 8007d00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d02:	445a      	add	r2, fp
 8007d04:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d06:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 809f 	beq.w	8007e4e <_svfiprintf_r+0x1c6>
 8007d10:	2300      	movs	r3, #0
 8007d12:	f04f 32ff 	mov.w	r2, #4294967295
 8007d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d1a:	f10a 0a01 	add.w	sl, sl, #1
 8007d1e:	9304      	str	r3, [sp, #16]
 8007d20:	9307      	str	r3, [sp, #28]
 8007d22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d26:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d28:	4654      	mov	r4, sl
 8007d2a:	2205      	movs	r2, #5
 8007d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d30:	484e      	ldr	r0, [pc, #312]	@ (8007e6c <_svfiprintf_r+0x1e4>)
 8007d32:	f7f8 fa4d 	bl	80001d0 <memchr>
 8007d36:	9a04      	ldr	r2, [sp, #16]
 8007d38:	b9d8      	cbnz	r0, 8007d72 <_svfiprintf_r+0xea>
 8007d3a:	06d0      	lsls	r0, r2, #27
 8007d3c:	bf44      	itt	mi
 8007d3e:	2320      	movmi	r3, #32
 8007d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d44:	0711      	lsls	r1, r2, #28
 8007d46:	bf44      	itt	mi
 8007d48:	232b      	movmi	r3, #43	@ 0x2b
 8007d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d52:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d54:	d015      	beq.n	8007d82 <_svfiprintf_r+0xfa>
 8007d56:	9a07      	ldr	r2, [sp, #28]
 8007d58:	4654      	mov	r4, sl
 8007d5a:	2000      	movs	r0, #0
 8007d5c:	f04f 0c0a 	mov.w	ip, #10
 8007d60:	4621      	mov	r1, r4
 8007d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d66:	3b30      	subs	r3, #48	@ 0x30
 8007d68:	2b09      	cmp	r3, #9
 8007d6a:	d94b      	bls.n	8007e04 <_svfiprintf_r+0x17c>
 8007d6c:	b1b0      	cbz	r0, 8007d9c <_svfiprintf_r+0x114>
 8007d6e:	9207      	str	r2, [sp, #28]
 8007d70:	e014      	b.n	8007d9c <_svfiprintf_r+0x114>
 8007d72:	eba0 0308 	sub.w	r3, r0, r8
 8007d76:	fa09 f303 	lsl.w	r3, r9, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	9304      	str	r3, [sp, #16]
 8007d7e:	46a2      	mov	sl, r4
 8007d80:	e7d2      	b.n	8007d28 <_svfiprintf_r+0xa0>
 8007d82:	9b03      	ldr	r3, [sp, #12]
 8007d84:	1d19      	adds	r1, r3, #4
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	9103      	str	r1, [sp, #12]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	bfbb      	ittet	lt
 8007d8e:	425b      	neglt	r3, r3
 8007d90:	f042 0202 	orrlt.w	r2, r2, #2
 8007d94:	9307      	strge	r3, [sp, #28]
 8007d96:	9307      	strlt	r3, [sp, #28]
 8007d98:	bfb8      	it	lt
 8007d9a:	9204      	strlt	r2, [sp, #16]
 8007d9c:	7823      	ldrb	r3, [r4, #0]
 8007d9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007da0:	d10a      	bne.n	8007db8 <_svfiprintf_r+0x130>
 8007da2:	7863      	ldrb	r3, [r4, #1]
 8007da4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007da6:	d132      	bne.n	8007e0e <_svfiprintf_r+0x186>
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	1d1a      	adds	r2, r3, #4
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	9203      	str	r2, [sp, #12]
 8007db0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007db4:	3402      	adds	r4, #2
 8007db6:	9305      	str	r3, [sp, #20]
 8007db8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007e7c <_svfiprintf_r+0x1f4>
 8007dbc:	7821      	ldrb	r1, [r4, #0]
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	4650      	mov	r0, sl
 8007dc2:	f7f8 fa05 	bl	80001d0 <memchr>
 8007dc6:	b138      	cbz	r0, 8007dd8 <_svfiprintf_r+0x150>
 8007dc8:	9b04      	ldr	r3, [sp, #16]
 8007dca:	eba0 000a 	sub.w	r0, r0, sl
 8007dce:	2240      	movs	r2, #64	@ 0x40
 8007dd0:	4082      	lsls	r2, r0
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	3401      	adds	r4, #1
 8007dd6:	9304      	str	r3, [sp, #16]
 8007dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ddc:	4824      	ldr	r0, [pc, #144]	@ (8007e70 <_svfiprintf_r+0x1e8>)
 8007dde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007de2:	2206      	movs	r2, #6
 8007de4:	f7f8 f9f4 	bl	80001d0 <memchr>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d036      	beq.n	8007e5a <_svfiprintf_r+0x1d2>
 8007dec:	4b21      	ldr	r3, [pc, #132]	@ (8007e74 <_svfiprintf_r+0x1ec>)
 8007dee:	bb1b      	cbnz	r3, 8007e38 <_svfiprintf_r+0x1b0>
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	3307      	adds	r3, #7
 8007df4:	f023 0307 	bic.w	r3, r3, #7
 8007df8:	3308      	adds	r3, #8
 8007dfa:	9303      	str	r3, [sp, #12]
 8007dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dfe:	4433      	add	r3, r6
 8007e00:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e02:	e76a      	b.n	8007cda <_svfiprintf_r+0x52>
 8007e04:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e08:	460c      	mov	r4, r1
 8007e0a:	2001      	movs	r0, #1
 8007e0c:	e7a8      	b.n	8007d60 <_svfiprintf_r+0xd8>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	3401      	adds	r4, #1
 8007e12:	9305      	str	r3, [sp, #20]
 8007e14:	4619      	mov	r1, r3
 8007e16:	f04f 0c0a 	mov.w	ip, #10
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e20:	3a30      	subs	r2, #48	@ 0x30
 8007e22:	2a09      	cmp	r2, #9
 8007e24:	d903      	bls.n	8007e2e <_svfiprintf_r+0x1a6>
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d0c6      	beq.n	8007db8 <_svfiprintf_r+0x130>
 8007e2a:	9105      	str	r1, [sp, #20]
 8007e2c:	e7c4      	b.n	8007db8 <_svfiprintf_r+0x130>
 8007e2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e32:	4604      	mov	r4, r0
 8007e34:	2301      	movs	r3, #1
 8007e36:	e7f0      	b.n	8007e1a <_svfiprintf_r+0x192>
 8007e38:	ab03      	add	r3, sp, #12
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	462a      	mov	r2, r5
 8007e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e78 <_svfiprintf_r+0x1f0>)
 8007e40:	a904      	add	r1, sp, #16
 8007e42:	4638      	mov	r0, r7
 8007e44:	f3af 8000 	nop.w
 8007e48:	1c42      	adds	r2, r0, #1
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	d1d6      	bne.n	8007dfc <_svfiprintf_r+0x174>
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	065b      	lsls	r3, r3, #25
 8007e52:	f53f af2d 	bmi.w	8007cb0 <_svfiprintf_r+0x28>
 8007e56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e58:	e72c      	b.n	8007cb4 <_svfiprintf_r+0x2c>
 8007e5a:	ab03      	add	r3, sp, #12
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	462a      	mov	r2, r5
 8007e60:	4b05      	ldr	r3, [pc, #20]	@ (8007e78 <_svfiprintf_r+0x1f0>)
 8007e62:	a904      	add	r1, sp, #16
 8007e64:	4638      	mov	r0, r7
 8007e66:	f000 f879 	bl	8007f5c <_printf_i>
 8007e6a:	e7ed      	b.n	8007e48 <_svfiprintf_r+0x1c0>
 8007e6c:	08008448 	.word	0x08008448
 8007e70:	08008452 	.word	0x08008452
 8007e74:	00000000 	.word	0x00000000
 8007e78:	08007bd1 	.word	0x08007bd1
 8007e7c:	0800844e 	.word	0x0800844e

08007e80 <_printf_common>:
 8007e80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e84:	4616      	mov	r6, r2
 8007e86:	4698      	mov	r8, r3
 8007e88:	688a      	ldr	r2, [r1, #8]
 8007e8a:	690b      	ldr	r3, [r1, #16]
 8007e8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e90:	4293      	cmp	r3, r2
 8007e92:	bfb8      	it	lt
 8007e94:	4613      	movlt	r3, r2
 8007e96:	6033      	str	r3, [r6, #0]
 8007e98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e9c:	4607      	mov	r7, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	b10a      	cbz	r2, 8007ea6 <_printf_common+0x26>
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	6033      	str	r3, [r6, #0]
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	0699      	lsls	r1, r3, #26
 8007eaa:	bf42      	ittt	mi
 8007eac:	6833      	ldrmi	r3, [r6, #0]
 8007eae:	3302      	addmi	r3, #2
 8007eb0:	6033      	strmi	r3, [r6, #0]
 8007eb2:	6825      	ldr	r5, [r4, #0]
 8007eb4:	f015 0506 	ands.w	r5, r5, #6
 8007eb8:	d106      	bne.n	8007ec8 <_printf_common+0x48>
 8007eba:	f104 0a19 	add.w	sl, r4, #25
 8007ebe:	68e3      	ldr	r3, [r4, #12]
 8007ec0:	6832      	ldr	r2, [r6, #0]
 8007ec2:	1a9b      	subs	r3, r3, r2
 8007ec4:	42ab      	cmp	r3, r5
 8007ec6:	dc26      	bgt.n	8007f16 <_printf_common+0x96>
 8007ec8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	3b00      	subs	r3, #0
 8007ed0:	bf18      	it	ne
 8007ed2:	2301      	movne	r3, #1
 8007ed4:	0692      	lsls	r2, r2, #26
 8007ed6:	d42b      	bmi.n	8007f30 <_printf_common+0xb0>
 8007ed8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007edc:	4641      	mov	r1, r8
 8007ede:	4638      	mov	r0, r7
 8007ee0:	47c8      	blx	r9
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	d01e      	beq.n	8007f24 <_printf_common+0xa4>
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	6922      	ldr	r2, [r4, #16]
 8007eea:	f003 0306 	and.w	r3, r3, #6
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	bf02      	ittt	eq
 8007ef2:	68e5      	ldreq	r5, [r4, #12]
 8007ef4:	6833      	ldreq	r3, [r6, #0]
 8007ef6:	1aed      	subeq	r5, r5, r3
 8007ef8:	68a3      	ldr	r3, [r4, #8]
 8007efa:	bf0c      	ite	eq
 8007efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f00:	2500      	movne	r5, #0
 8007f02:	4293      	cmp	r3, r2
 8007f04:	bfc4      	itt	gt
 8007f06:	1a9b      	subgt	r3, r3, r2
 8007f08:	18ed      	addgt	r5, r5, r3
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	341a      	adds	r4, #26
 8007f0e:	42b5      	cmp	r5, r6
 8007f10:	d11a      	bne.n	8007f48 <_printf_common+0xc8>
 8007f12:	2000      	movs	r0, #0
 8007f14:	e008      	b.n	8007f28 <_printf_common+0xa8>
 8007f16:	2301      	movs	r3, #1
 8007f18:	4652      	mov	r2, sl
 8007f1a:	4641      	mov	r1, r8
 8007f1c:	4638      	mov	r0, r7
 8007f1e:	47c8      	blx	r9
 8007f20:	3001      	adds	r0, #1
 8007f22:	d103      	bne.n	8007f2c <_printf_common+0xac>
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2c:	3501      	adds	r5, #1
 8007f2e:	e7c6      	b.n	8007ebe <_printf_common+0x3e>
 8007f30:	18e1      	adds	r1, r4, r3
 8007f32:	1c5a      	adds	r2, r3, #1
 8007f34:	2030      	movs	r0, #48	@ 0x30
 8007f36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f3a:	4422      	add	r2, r4
 8007f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f44:	3302      	adds	r3, #2
 8007f46:	e7c7      	b.n	8007ed8 <_printf_common+0x58>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4641      	mov	r1, r8
 8007f4e:	4638      	mov	r0, r7
 8007f50:	47c8      	blx	r9
 8007f52:	3001      	adds	r0, #1
 8007f54:	d0e6      	beq.n	8007f24 <_printf_common+0xa4>
 8007f56:	3601      	adds	r6, #1
 8007f58:	e7d9      	b.n	8007f0e <_printf_common+0x8e>
	...

08007f5c <_printf_i>:
 8007f5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	7e0f      	ldrb	r7, [r1, #24]
 8007f62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f64:	2f78      	cmp	r7, #120	@ 0x78
 8007f66:	4691      	mov	r9, r2
 8007f68:	4680      	mov	r8, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	469a      	mov	sl, r3
 8007f6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f72:	d807      	bhi.n	8007f84 <_printf_i+0x28>
 8007f74:	2f62      	cmp	r7, #98	@ 0x62
 8007f76:	d80a      	bhi.n	8007f8e <_printf_i+0x32>
 8007f78:	2f00      	cmp	r7, #0
 8007f7a:	f000 80d2 	beq.w	8008122 <_printf_i+0x1c6>
 8007f7e:	2f58      	cmp	r7, #88	@ 0x58
 8007f80:	f000 80b9 	beq.w	80080f6 <_printf_i+0x19a>
 8007f84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f8c:	e03a      	b.n	8008004 <_printf_i+0xa8>
 8007f8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f92:	2b15      	cmp	r3, #21
 8007f94:	d8f6      	bhi.n	8007f84 <_printf_i+0x28>
 8007f96:	a101      	add	r1, pc, #4	@ (adr r1, 8007f9c <_printf_i+0x40>)
 8007f98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f9c:	08007ff5 	.word	0x08007ff5
 8007fa0:	08008009 	.word	0x08008009
 8007fa4:	08007f85 	.word	0x08007f85
 8007fa8:	08007f85 	.word	0x08007f85
 8007fac:	08007f85 	.word	0x08007f85
 8007fb0:	08007f85 	.word	0x08007f85
 8007fb4:	08008009 	.word	0x08008009
 8007fb8:	08007f85 	.word	0x08007f85
 8007fbc:	08007f85 	.word	0x08007f85
 8007fc0:	08007f85 	.word	0x08007f85
 8007fc4:	08007f85 	.word	0x08007f85
 8007fc8:	08008109 	.word	0x08008109
 8007fcc:	08008033 	.word	0x08008033
 8007fd0:	080080c3 	.word	0x080080c3
 8007fd4:	08007f85 	.word	0x08007f85
 8007fd8:	08007f85 	.word	0x08007f85
 8007fdc:	0800812b 	.word	0x0800812b
 8007fe0:	08007f85 	.word	0x08007f85
 8007fe4:	08008033 	.word	0x08008033
 8007fe8:	08007f85 	.word	0x08007f85
 8007fec:	08007f85 	.word	0x08007f85
 8007ff0:	080080cb 	.word	0x080080cb
 8007ff4:	6833      	ldr	r3, [r6, #0]
 8007ff6:	1d1a      	adds	r2, r3, #4
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6032      	str	r2, [r6, #0]
 8007ffc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008000:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008004:	2301      	movs	r3, #1
 8008006:	e09d      	b.n	8008144 <_printf_i+0x1e8>
 8008008:	6833      	ldr	r3, [r6, #0]
 800800a:	6820      	ldr	r0, [r4, #0]
 800800c:	1d19      	adds	r1, r3, #4
 800800e:	6031      	str	r1, [r6, #0]
 8008010:	0606      	lsls	r6, r0, #24
 8008012:	d501      	bpl.n	8008018 <_printf_i+0xbc>
 8008014:	681d      	ldr	r5, [r3, #0]
 8008016:	e003      	b.n	8008020 <_printf_i+0xc4>
 8008018:	0645      	lsls	r5, r0, #25
 800801a:	d5fb      	bpl.n	8008014 <_printf_i+0xb8>
 800801c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008020:	2d00      	cmp	r5, #0
 8008022:	da03      	bge.n	800802c <_printf_i+0xd0>
 8008024:	232d      	movs	r3, #45	@ 0x2d
 8008026:	426d      	negs	r5, r5
 8008028:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800802c:	4859      	ldr	r0, [pc, #356]	@ (8008194 <_printf_i+0x238>)
 800802e:	230a      	movs	r3, #10
 8008030:	e011      	b.n	8008056 <_printf_i+0xfa>
 8008032:	6821      	ldr	r1, [r4, #0]
 8008034:	6833      	ldr	r3, [r6, #0]
 8008036:	0608      	lsls	r0, r1, #24
 8008038:	f853 5b04 	ldr.w	r5, [r3], #4
 800803c:	d402      	bmi.n	8008044 <_printf_i+0xe8>
 800803e:	0649      	lsls	r1, r1, #25
 8008040:	bf48      	it	mi
 8008042:	b2ad      	uxthmi	r5, r5
 8008044:	2f6f      	cmp	r7, #111	@ 0x6f
 8008046:	4853      	ldr	r0, [pc, #332]	@ (8008194 <_printf_i+0x238>)
 8008048:	6033      	str	r3, [r6, #0]
 800804a:	bf14      	ite	ne
 800804c:	230a      	movne	r3, #10
 800804e:	2308      	moveq	r3, #8
 8008050:	2100      	movs	r1, #0
 8008052:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008056:	6866      	ldr	r6, [r4, #4]
 8008058:	60a6      	str	r6, [r4, #8]
 800805a:	2e00      	cmp	r6, #0
 800805c:	bfa2      	ittt	ge
 800805e:	6821      	ldrge	r1, [r4, #0]
 8008060:	f021 0104 	bicge.w	r1, r1, #4
 8008064:	6021      	strge	r1, [r4, #0]
 8008066:	b90d      	cbnz	r5, 800806c <_printf_i+0x110>
 8008068:	2e00      	cmp	r6, #0
 800806a:	d04b      	beq.n	8008104 <_printf_i+0x1a8>
 800806c:	4616      	mov	r6, r2
 800806e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008072:	fb03 5711 	mls	r7, r3, r1, r5
 8008076:	5dc7      	ldrb	r7, [r0, r7]
 8008078:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800807c:	462f      	mov	r7, r5
 800807e:	42bb      	cmp	r3, r7
 8008080:	460d      	mov	r5, r1
 8008082:	d9f4      	bls.n	800806e <_printf_i+0x112>
 8008084:	2b08      	cmp	r3, #8
 8008086:	d10b      	bne.n	80080a0 <_printf_i+0x144>
 8008088:	6823      	ldr	r3, [r4, #0]
 800808a:	07df      	lsls	r7, r3, #31
 800808c:	d508      	bpl.n	80080a0 <_printf_i+0x144>
 800808e:	6923      	ldr	r3, [r4, #16]
 8008090:	6861      	ldr	r1, [r4, #4]
 8008092:	4299      	cmp	r1, r3
 8008094:	bfde      	ittt	le
 8008096:	2330      	movle	r3, #48	@ 0x30
 8008098:	f806 3c01 	strble.w	r3, [r6, #-1]
 800809c:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080a0:	1b92      	subs	r2, r2, r6
 80080a2:	6122      	str	r2, [r4, #16]
 80080a4:	f8cd a000 	str.w	sl, [sp]
 80080a8:	464b      	mov	r3, r9
 80080aa:	aa03      	add	r2, sp, #12
 80080ac:	4621      	mov	r1, r4
 80080ae:	4640      	mov	r0, r8
 80080b0:	f7ff fee6 	bl	8007e80 <_printf_common>
 80080b4:	3001      	adds	r0, #1
 80080b6:	d14a      	bne.n	800814e <_printf_i+0x1f2>
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	b004      	add	sp, #16
 80080be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c2:	6823      	ldr	r3, [r4, #0]
 80080c4:	f043 0320 	orr.w	r3, r3, #32
 80080c8:	6023      	str	r3, [r4, #0]
 80080ca:	4833      	ldr	r0, [pc, #204]	@ (8008198 <_printf_i+0x23c>)
 80080cc:	2778      	movs	r7, #120	@ 0x78
 80080ce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	6831      	ldr	r1, [r6, #0]
 80080d6:	061f      	lsls	r7, r3, #24
 80080d8:	f851 5b04 	ldr.w	r5, [r1], #4
 80080dc:	d402      	bmi.n	80080e4 <_printf_i+0x188>
 80080de:	065f      	lsls	r7, r3, #25
 80080e0:	bf48      	it	mi
 80080e2:	b2ad      	uxthmi	r5, r5
 80080e4:	6031      	str	r1, [r6, #0]
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	bf44      	itt	mi
 80080ea:	f043 0320 	orrmi.w	r3, r3, #32
 80080ee:	6023      	strmi	r3, [r4, #0]
 80080f0:	b11d      	cbz	r5, 80080fa <_printf_i+0x19e>
 80080f2:	2310      	movs	r3, #16
 80080f4:	e7ac      	b.n	8008050 <_printf_i+0xf4>
 80080f6:	4827      	ldr	r0, [pc, #156]	@ (8008194 <_printf_i+0x238>)
 80080f8:	e7e9      	b.n	80080ce <_printf_i+0x172>
 80080fa:	6823      	ldr	r3, [r4, #0]
 80080fc:	f023 0320 	bic.w	r3, r3, #32
 8008100:	6023      	str	r3, [r4, #0]
 8008102:	e7f6      	b.n	80080f2 <_printf_i+0x196>
 8008104:	4616      	mov	r6, r2
 8008106:	e7bd      	b.n	8008084 <_printf_i+0x128>
 8008108:	6833      	ldr	r3, [r6, #0]
 800810a:	6825      	ldr	r5, [r4, #0]
 800810c:	6961      	ldr	r1, [r4, #20]
 800810e:	1d18      	adds	r0, r3, #4
 8008110:	6030      	str	r0, [r6, #0]
 8008112:	062e      	lsls	r6, r5, #24
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	d501      	bpl.n	800811c <_printf_i+0x1c0>
 8008118:	6019      	str	r1, [r3, #0]
 800811a:	e002      	b.n	8008122 <_printf_i+0x1c6>
 800811c:	0668      	lsls	r0, r5, #25
 800811e:	d5fb      	bpl.n	8008118 <_printf_i+0x1bc>
 8008120:	8019      	strh	r1, [r3, #0]
 8008122:	2300      	movs	r3, #0
 8008124:	6123      	str	r3, [r4, #16]
 8008126:	4616      	mov	r6, r2
 8008128:	e7bc      	b.n	80080a4 <_printf_i+0x148>
 800812a:	6833      	ldr	r3, [r6, #0]
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	6032      	str	r2, [r6, #0]
 8008130:	681e      	ldr	r6, [r3, #0]
 8008132:	6862      	ldr	r2, [r4, #4]
 8008134:	2100      	movs	r1, #0
 8008136:	4630      	mov	r0, r6
 8008138:	f7f8 f84a 	bl	80001d0 <memchr>
 800813c:	b108      	cbz	r0, 8008142 <_printf_i+0x1e6>
 800813e:	1b80      	subs	r0, r0, r6
 8008140:	6060      	str	r0, [r4, #4]
 8008142:	6863      	ldr	r3, [r4, #4]
 8008144:	6123      	str	r3, [r4, #16]
 8008146:	2300      	movs	r3, #0
 8008148:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800814c:	e7aa      	b.n	80080a4 <_printf_i+0x148>
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	4632      	mov	r2, r6
 8008152:	4649      	mov	r1, r9
 8008154:	4640      	mov	r0, r8
 8008156:	47d0      	blx	sl
 8008158:	3001      	adds	r0, #1
 800815a:	d0ad      	beq.n	80080b8 <_printf_i+0x15c>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	079b      	lsls	r3, r3, #30
 8008160:	d413      	bmi.n	800818a <_printf_i+0x22e>
 8008162:	68e0      	ldr	r0, [r4, #12]
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	4298      	cmp	r0, r3
 8008168:	bfb8      	it	lt
 800816a:	4618      	movlt	r0, r3
 800816c:	e7a6      	b.n	80080bc <_printf_i+0x160>
 800816e:	2301      	movs	r3, #1
 8008170:	4632      	mov	r2, r6
 8008172:	4649      	mov	r1, r9
 8008174:	4640      	mov	r0, r8
 8008176:	47d0      	blx	sl
 8008178:	3001      	adds	r0, #1
 800817a:	d09d      	beq.n	80080b8 <_printf_i+0x15c>
 800817c:	3501      	adds	r5, #1
 800817e:	68e3      	ldr	r3, [r4, #12]
 8008180:	9903      	ldr	r1, [sp, #12]
 8008182:	1a5b      	subs	r3, r3, r1
 8008184:	42ab      	cmp	r3, r5
 8008186:	dcf2      	bgt.n	800816e <_printf_i+0x212>
 8008188:	e7eb      	b.n	8008162 <_printf_i+0x206>
 800818a:	2500      	movs	r5, #0
 800818c:	f104 0619 	add.w	r6, r4, #25
 8008190:	e7f5      	b.n	800817e <_printf_i+0x222>
 8008192:	bf00      	nop
 8008194:	08008459 	.word	0x08008459
 8008198:	0800846a 	.word	0x0800846a

0800819c <memmove>:
 800819c:	4288      	cmp	r0, r1
 800819e:	b510      	push	{r4, lr}
 80081a0:	eb01 0402 	add.w	r4, r1, r2
 80081a4:	d902      	bls.n	80081ac <memmove+0x10>
 80081a6:	4284      	cmp	r4, r0
 80081a8:	4623      	mov	r3, r4
 80081aa:	d807      	bhi.n	80081bc <memmove+0x20>
 80081ac:	1e43      	subs	r3, r0, #1
 80081ae:	42a1      	cmp	r1, r4
 80081b0:	d008      	beq.n	80081c4 <memmove+0x28>
 80081b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ba:	e7f8      	b.n	80081ae <memmove+0x12>
 80081bc:	4402      	add	r2, r0
 80081be:	4601      	mov	r1, r0
 80081c0:	428a      	cmp	r2, r1
 80081c2:	d100      	bne.n	80081c6 <memmove+0x2a>
 80081c4:	bd10      	pop	{r4, pc}
 80081c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081ce:	e7f7      	b.n	80081c0 <memmove+0x24>

080081d0 <_sbrk_r>:
 80081d0:	b538      	push	{r3, r4, r5, lr}
 80081d2:	4d06      	ldr	r5, [pc, #24]	@ (80081ec <_sbrk_r+0x1c>)
 80081d4:	2300      	movs	r3, #0
 80081d6:	4604      	mov	r4, r0
 80081d8:	4608      	mov	r0, r1
 80081da:	602b      	str	r3, [r5, #0]
 80081dc:	f7f9 fd94 	bl	8001d08 <_sbrk>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_sbrk_r+0x1a>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_sbrk_r+0x1a>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	200006a4 	.word	0x200006a4

080081f0 <memcpy>:
 80081f0:	440a      	add	r2, r1
 80081f2:	4291      	cmp	r1, r2
 80081f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80081f8:	d100      	bne.n	80081fc <memcpy+0xc>
 80081fa:	4770      	bx	lr
 80081fc:	b510      	push	{r4, lr}
 80081fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008202:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008206:	4291      	cmp	r1, r2
 8008208:	d1f9      	bne.n	80081fe <memcpy+0xe>
 800820a:	bd10      	pop	{r4, pc}

0800820c <_realloc_r>:
 800820c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008210:	4680      	mov	r8, r0
 8008212:	4615      	mov	r5, r2
 8008214:	460c      	mov	r4, r1
 8008216:	b921      	cbnz	r1, 8008222 <_realloc_r+0x16>
 8008218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800821c:	4611      	mov	r1, r2
 800821e:	f7ff bc4b 	b.w	8007ab8 <_malloc_r>
 8008222:	b92a      	cbnz	r2, 8008230 <_realloc_r+0x24>
 8008224:	f7ff fbdc 	bl	80079e0 <_free_r>
 8008228:	2400      	movs	r4, #0
 800822a:	4620      	mov	r0, r4
 800822c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008230:	f000 f81a 	bl	8008268 <_malloc_usable_size_r>
 8008234:	4285      	cmp	r5, r0
 8008236:	4606      	mov	r6, r0
 8008238:	d802      	bhi.n	8008240 <_realloc_r+0x34>
 800823a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800823e:	d8f4      	bhi.n	800822a <_realloc_r+0x1e>
 8008240:	4629      	mov	r1, r5
 8008242:	4640      	mov	r0, r8
 8008244:	f7ff fc38 	bl	8007ab8 <_malloc_r>
 8008248:	4607      	mov	r7, r0
 800824a:	2800      	cmp	r0, #0
 800824c:	d0ec      	beq.n	8008228 <_realloc_r+0x1c>
 800824e:	42b5      	cmp	r5, r6
 8008250:	462a      	mov	r2, r5
 8008252:	4621      	mov	r1, r4
 8008254:	bf28      	it	cs
 8008256:	4632      	movcs	r2, r6
 8008258:	f7ff ffca 	bl	80081f0 <memcpy>
 800825c:	4621      	mov	r1, r4
 800825e:	4640      	mov	r0, r8
 8008260:	f7ff fbbe 	bl	80079e0 <_free_r>
 8008264:	463c      	mov	r4, r7
 8008266:	e7e0      	b.n	800822a <_realloc_r+0x1e>

08008268 <_malloc_usable_size_r>:
 8008268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800826c:	1f18      	subs	r0, r3, #4
 800826e:	2b00      	cmp	r3, #0
 8008270:	bfbc      	itt	lt
 8008272:	580b      	ldrlt	r3, [r1, r0]
 8008274:	18c0      	addlt	r0, r0, r3
 8008276:	4770      	bx	lr

08008278 <_init>:
 8008278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827a:	bf00      	nop
 800827c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800827e:	bc08      	pop	{r3}
 8008280:	469e      	mov	lr, r3
 8008282:	4770      	bx	lr

08008284 <_fini>:
 8008284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008286:	bf00      	nop
 8008288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800828a:	bc08      	pop	{r3}
 800828c:	469e      	mov	lr, r3
 800828e:	4770      	bx	lr
