
Starting_Over.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000799c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007b2c  08007b2c  00008b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd0  08007cd0  000090a0  2**0
                  CONTENTS
  4 .ARM          00000008  08007cd0  08007cd0  00008cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cd8  08007cd8  000090a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd8  08007cd8  00008cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007cdc  08007cdc  00008cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08007ce0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  200000a0  08007d80  000090a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  08007d80  000094d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000090a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e77  00000000  00000000  000090d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c77  00000000  00000000  0001ef47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00021bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f75  00000000  00000000  00022fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003af1  00000000  00000000  00023f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017962  00000000  00000000  00027a06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010802b  00000000  00000000  0003f368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00147393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  001473d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0014d144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b14 	.word	0x08007b14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08007b14 	.word	0x08007b14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_deinit>:
/**
 * @brief A function to de-initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_deinit(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//de-initialize the motor driver channels
	stop_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fbdd 	bl	8000d2c <stop_PWM>

	//de-initialize the encoder reader channels
	deinit_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f804 	bl	8000584 <deinit_channels>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <deinit_channels>:
/**
 * @brief A function to stop the channels from reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void deinit_channels(encoder_t* p_enc){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Stop(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	689b      	ldr	r3, [r3, #8]
 8000590:	213c      	movs	r1, #60	@ 0x3c
 8000592:	4618      	mov	r0, r3
 8000594:	f004 faec 	bl	8004b70 <HAL_TIM_Encoder_Stop>
	//HAL_TIM_Encoder_Stop(p_enc->hal_tim,  p_enc->channel2);
}
 8000598:	bf00      	nop
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <task3>:
	//_____________________________________________________________________________________________________________
}


// Task 3 - WIRELESS E STOP TASK___________________________________________________________________________________
void task3(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT__________________________________________________________________
	if (currentState == 0) {
 80005a4:	4b3d      	ldr	r3, [pc, #244]	@ (800069c <task3+0xfc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d11b      	bne.n	80005e4 <task3+0x44>

		n = sprintf(print_buff,"\n\rTask 3, State 0\n");
 80005ac:	493c      	ldr	r1, [pc, #240]	@ (80006a0 <task3+0x100>)
 80005ae:	483d      	ldr	r0, [pc, #244]	@ (80006a4 <task3+0x104>)
 80005b0:	f006 fa7e 	bl	8006ab0 <siprintf>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a3c      	ldr	r2, [pc, #240]	@ (80006a8 <task3+0x108>)
 80005b8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 80005ba:	4b3b      	ldr	r3, [pc, #236]	@ (80006a8 <task3+0x108>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	b29a      	uxth	r2, r3
 80005c0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80005c4:	4937      	ldr	r1, [pc, #220]	@ (80006a4 <task3+0x104>)
 80005c6:	4839      	ldr	r0, [pc, #228]	@ (80006ac <task3+0x10c>)
 80005c8:	f005 fc46 	bl	8005e58 <HAL_UART_Transmit>

		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_1);
 80005cc:	2100      	movs	r1, #0
 80005ce:	4838      	ldr	r0, [pc, #224]	@ (80006b0 <task3+0x110>)
 80005d0:	f004 f8de 	bl	8004790 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_2);
 80005d4:	2104      	movs	r1, #4
 80005d6:	4836      	ldr	r0, [pc, #216]	@ (80006b0 <task3+0x110>)
 80005d8:	f004 f8da 	bl	8004790 <HAL_TIM_IC_Start_IT>


		currentState = 1;}
 80005dc:	4b2f      	ldr	r3, [pc, #188]	@ (800069c <task3+0xfc>)
 80005de:	2201      	movs	r2, #1
 80005e0:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;
	}
}
 80005e2:	e059      	b.n	8000698 <task3+0xf8>
	else if (currentState == 1) {
 80005e4:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <task3+0xfc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d12f      	bne.n	800064c <task3+0xac>
		n = sprintf(print_buff,"\n\rTask 3, State 1\n");
 80005ec:	4931      	ldr	r1, [pc, #196]	@ (80006b4 <task3+0x114>)
 80005ee:	482d      	ldr	r0, [pc, #180]	@ (80006a4 <task3+0x104>)
 80005f0:	f006 fa5e 	bl	8006ab0 <siprintf>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a2c      	ldr	r2, [pc, #176]	@ (80006a8 <task3+0x108>)
 80005f8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 80005fa:	4b2b      	ldr	r3, [pc, #172]	@ (80006a8 <task3+0x108>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	b29a      	uxth	r2, r3
 8000600:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000604:	4927      	ldr	r1, [pc, #156]	@ (80006a4 <task3+0x104>)
 8000606:	4829      	ldr	r0, [pc, #164]	@ (80006ac <task3+0x10c>)
 8000608:	f005 fc26 	bl	8005e58 <HAL_UART_Transmit>
		n = sprintf(print_buff,"\n\rThe radio pulse is: %d\n",radio_pulse);
 800060c:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <task3+0x118>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	492a      	ldr	r1, [pc, #168]	@ (80006bc <task3+0x11c>)
 8000614:	4823      	ldr	r0, [pc, #140]	@ (80006a4 <task3+0x104>)
 8000616:	f006 fa4b 	bl	8006ab0 <siprintf>
 800061a:	4603      	mov	r3, r0
 800061c:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <task3+0x108>)
 800061e:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <task3+0x108>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	b29a      	uxth	r2, r3
 8000626:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800062a:	491e      	ldr	r1, [pc, #120]	@ (80006a4 <task3+0x104>)
 800062c:	481f      	ldr	r0, [pc, #124]	@ (80006ac <task3+0x10c>)
 800062e:	f005 fc13 	bl	8005e58 <HAL_UART_Transmit>
		if(check_delta(radio_pulse) == 1)
 8000632:	4b21      	ldr	r3, [pc, #132]	@ (80006b8 <task3+0x118>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b21b      	sxth	r3, r3
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fd0b 	bl	8001054 <check_delta>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d129      	bne.n	8000698 <task3+0xf8>
				currentState = 2;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <task3+0xfc>)
 8000646:	2202      	movs	r2, #2
 8000648:	601a      	str	r2, [r3, #0]
}
 800064a:	e025      	b.n	8000698 <task3+0xf8>
	else if (currentState == 2) {
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <task3+0xfc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d117      	bne.n	8000684 <task3+0xe4>
		n = sprintf(print_buff,"\n\rTask 3, State 2 EMERGENCY STOP\n");
 8000654:	491a      	ldr	r1, [pc, #104]	@ (80006c0 <task3+0x120>)
 8000656:	4813      	ldr	r0, [pc, #76]	@ (80006a4 <task3+0x104>)
 8000658:	f006 fa2a 	bl	8006ab0 <siprintf>
 800065c:	4603      	mov	r3, r0
 800065e:	4a12      	ldr	r2, [pc, #72]	@ (80006a8 <task3+0x108>)
 8000660:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000662:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <task3+0x108>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	b29a      	uxth	r2, r3
 8000668:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800066c:	490d      	ldr	r1, [pc, #52]	@ (80006a4 <task3+0x104>)
 800066e:	480f      	ldr	r0, [pc, #60]	@ (80006ac <task3+0x10c>)
 8000670:	f005 fbf2 	bl	8005e58 <HAL_UART_Transmit>
		set_duty(&spin_mot,0);
 8000674:	2100      	movs	r1, #0
 8000676:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <task3+0x124>)
 8000678:	f000 fb70 	bl	8000d5c <set_duty>
		controller_deinit(&spin_cont);
 800067c:	4812      	ldr	r0, [pc, #72]	@ (80006c8 <task3+0x128>)
 800067e:	f7ff ff6f 	bl	8000560 <controller_deinit>
}
 8000682:	e009      	b.n	8000698 <task3+0xf8>
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
 8000684:	4911      	ldr	r1, [pc, #68]	@ (80006cc <task3+0x12c>)
 8000686:	4807      	ldr	r0, [pc, #28]	@ (80006a4 <task3+0x104>)
 8000688:	f006 fa12 	bl	8006ab0 <siprintf>
 800068c:	4603      	mov	r3, r0
 800068e:	4a06      	ldr	r2, [pc, #24]	@ (80006a8 <task3+0x108>)
 8000690:	6013      	str	r3, [r2, #0]
		currentState = 1;
 8000692:	4b02      	ldr	r3, [pc, #8]	@ (800069c <task3+0xfc>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200002dc 	.word	0x200002dc
 80006a0:	08007ba0 	.word	0x08007ba0
 80006a4:	200002e0 	.word	0x200002e0
 80006a8:	20000378 	.word	0x20000378
 80006ac:	20000250 	.word	0x20000250
 80006b0:	20000120 	.word	0x20000120
 80006b4:	08007bb4 	.word	0x08007bb4
 80006b8:	20000034 	.word	0x20000034
 80006bc:	08007bc8 	.word	0x08007bc8
 80006c0:	08007be4 	.word	0x08007be4
 80006c4:	20000014 	.word	0x20000014
 80006c8:	20000024 	.word	0x20000024
 80006cc:	08007c08 	.word	0x08007c08

080006d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d4:	f001 f81b 	bl	800170e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d8:	f000 f81c 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006dc:	f000 faa2 	bl	8000c24 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006e0:	f000 f8e0 	bl	80008a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006e4:	f000 f946 	bl	8000974 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006e8:	f000 fa6c 	bl	8000bc4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006ec:	f000 f864 	bl	80007b8 <MX_ADC1_Init>
  MX_TIM3_Init();
 80006f0:	f000 f9bc 	bl	8000a6c <MX_TIM3_Init>
  MX_TIM4_Init();
 80006f4:	f000 fa10 	bl	8000b18 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  start_PWM(&spin_mot);
 80006f8:	4804      	ldr	r0, [pc, #16]	@ (800070c <main+0x3c>)
 80006fa:	f000 faff 	bl	8000cfc <start_PWM>

  set_duty(&spin_mot,799999);
 80006fe:	4904      	ldr	r1, [pc, #16]	@ (8000710 <main+0x40>)
 8000700:	4802      	ldr	r0, [pc, #8]	@ (800070c <main+0x3c>)
 8000702:	f000 fb2b 	bl	8000d5c <set_duty>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 //task1();
	  task3();
 8000706:	f7ff ff4b 	bl	80005a0 <task3>
 800070a:	e7fc      	b.n	8000706 <main+0x36>
 800070c:	20000014 	.word	0x20000014
 8000710:	000c34ff 	.word	0x000c34ff

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b096      	sub	sp, #88	@ 0x58
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	2244      	movs	r2, #68	@ 0x44
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f006 fa27 	bl	8006b76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	463b      	mov	r3, r7
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000736:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800073a:	f002 facb 	bl	8002cd4 <HAL_PWREx_ControlVoltageScaling>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000744:	f000 fad4 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800074c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000750:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000752:	2310      	movs	r3, #16
 8000754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000756:	2302      	movs	r3, #2
 8000758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800075a:	2302      	movs	r3, #2
 800075c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075e:	2301      	movs	r3, #1
 8000760:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000762:	230a      	movs	r3, #10
 8000764:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000766:	2307      	movs	r3, #7
 8000768:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4618      	mov	r0, r3
 8000778:	f002 fb02 	bl	8002d80 <HAL_RCC_OscConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000782:	f000 fab5 	bl	8000cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000786:	230f      	movs	r3, #15
 8000788:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800078a:	2303      	movs	r3, #3
 800078c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	2104      	movs	r1, #4
 800079e:	4618      	mov	r0, r3
 80007a0:	f002 feca 	bl	8003538 <HAL_RCC_ClockConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007aa:	f000 faa1 	bl	8000cf0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	3758      	adds	r7, #88	@ 0x58
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
	...

080007b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	@ 0x28
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007da:	4b2f      	ldr	r3, [pc, #188]	@ (8000898 <MX_ADC1_Init+0xe0>)
 80007dc:	4a2f      	ldr	r2, [pc, #188]	@ (800089c <MX_ADC1_Init+0xe4>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000898 <MX_ADC1_Init+0xe0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <MX_ADC1_Init+0xe0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <MX_ADC1_Init+0xe0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f8:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_ADC1_Init+0xe0>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000800:	2200      	movs	r2, #0
 8000802:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000804:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000806:	2200      	movs	r2, #0
 8000808:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800080a:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_ADC1_Init+0xe0>)
 800080c:	2201      	movs	r2, #1
 800080e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_ADC1_Init+0xe0>)
 800081a:	2200      	movs	r2, #0
 800081c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000820:	2200      	movs	r2, #0
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082c:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_ADC1_Init+0xe0>)
 800082e:	2200      	movs	r2, #0
 8000830:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000832:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000834:	2200      	movs	r2, #0
 8000836:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800083a:	4817      	ldr	r0, [pc, #92]	@ (8000898 <MX_ADC1_Init+0xe0>)
 800083c:	f001 f968 	bl	8001b10 <HAL_ADC_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000846:	f000 fa53 	bl	8000cf0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4810      	ldr	r0, [pc, #64]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000856:	f001 fec3 	bl	80025e0 <HAL_ADCEx_MultiModeConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000860:	f000 fa46 	bl	8000cf0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000864:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_ADC1_Init+0xe8>)
 8000866:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000868:	2306      	movs	r3, #6
 800086a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000870:	237f      	movs	r3, #127	@ 0x7f
 8000872:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000874:	2304      	movs	r3, #4
 8000876:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_ADC1_Init+0xe0>)
 8000882:	f001 fa95 	bl	8001db0 <HAL_ADC_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800088c:	f000 fa30 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	@ 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000bc 	.word	0x200000bc
 800089c:	50040000 	.word	0x50040000
 80008a0:	04300002 	.word	0x04300002

080008a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c2:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000970 <MX_TIM1_Init+0xcc>)
 80008c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80008c8:	4b28      	ldr	r3, [pc, #160]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008ca:	224f      	movs	r2, #79	@ 0x4f
 80008cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b27      	ldr	r3, [pc, #156]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008d4:	4b25      	ldr	r3, [pc, #148]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008dc:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e2:	4b22      	ldr	r3, [pc, #136]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e8:	4b20      	ldr	r3, [pc, #128]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80008ee:	481f      	ldr	r0, [pc, #124]	@ (800096c <MX_TIM1_Init+0xc8>)
 80008f0:	f003 fef6 	bl	80046e0 <HAL_TIM_IC_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008fa:	f000 f9f9 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4816      	ldr	r0, [pc, #88]	@ (800096c <MX_TIM1_Init+0xc8>)
 8000912:	f005 f9ad 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800091c:	f000 f9e8 	bl	8000cf0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000920:	2300      	movs	r3, #0
 8000922:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	480d      	ldr	r0, [pc, #52]	@ (800096c <MX_TIM1_Init+0xc8>)
 8000938:	f004 fac3 	bl	8004ec2 <HAL_TIM_IC_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000942:	f000 f9d5 	bl	8000cf0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000946:	2302      	movs	r3, #2
 8000948:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800094a:	2302      	movs	r3, #2
 800094c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2204      	movs	r2, #4
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_TIM1_Init+0xc8>)
 8000956:	f004 fab4 	bl	8004ec2 <HAL_TIM_IC_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000960:	f000 f9c6 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000120 	.word	0x20000120
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	@ 0x28
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
 8000994:	615a      	str	r2, [r3, #20]
 8000996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000998:	4b32      	ldr	r3, [pc, #200]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 800099a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800099e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009a0:	4b30      	ldr	r3, [pc, #192]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 80009ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009ae:	4a2e      	ldr	r2, [pc, #184]	@ (8000a68 <MX_TIM2_Init+0xf4>)
 80009b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009b2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009be:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009c0:	f003 fc9a 	bl	80042f8 <HAL_TIM_PWM_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80009ca:	f000 f991 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4821      	ldr	r0, [pc, #132]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 80009de:	f005 f947 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009e8:	f000 f982 	bl	8000cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ec:	2360      	movs	r3, #96	@ 0x60
 80009ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2200      	movs	r2, #0
 8000a00:	4619      	mov	r1, r3
 8000a02:	4818      	ldr	r0, [pc, #96]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 8000a04:	f004 fafa 	bl	8004ffc <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a0e:	f000 f96f 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a12:	463b      	mov	r3, r7
 8000a14:	2204      	movs	r2, #4
 8000a16:	4619      	mov	r1, r3
 8000a18:	4812      	ldr	r0, [pc, #72]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 8000a1a:	f004 faef 	bl	8004ffc <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a24:	f000 f964 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 8000a30:	f004 fae4 	bl	8004ffc <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8000a3a:	f000 f959 	bl	8000cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a3e:	463b      	mov	r3, r7
 8000a40:	220c      	movs	r2, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4807      	ldr	r0, [pc, #28]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 8000a46:	f004 fad9 	bl	8004ffc <HAL_TIM_PWM_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8000a50:	f000 f94e 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a54:	4803      	ldr	r0, [pc, #12]	@ (8000a64 <MX_TIM2_Init+0xf0>)
 8000a56:	f000 fc91 	bl	800137c <HAL_TIM_MspPostInit>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	@ 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000016c 	.word	0x2000016c
 8000a68:	000c34ff 	.word	0x000c34ff

08000a6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2224      	movs	r2, #36	@ 0x24
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f006 f87b 	bl	8006b76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000a8c:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <MX_TIM3_Init+0xa8>)
 8000a8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a96:	4b1e      	ldr	r3, [pc, #120]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000a9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000adc:	f003 ffa2 	bl	8004a24 <HAL_TIM_Encoder_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000ae6:	f000 f903 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000af2:	463b      	mov	r3, r7
 8000af4:	4619      	mov	r1, r3
 8000af6:	4806      	ldr	r0, [pc, #24]	@ (8000b10 <MX_TIM3_Init+0xa4>)
 8000af8:	f005 f8ba 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000b02:	f000 f8f5 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	3730      	adds	r7, #48	@ 0x30
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	200001b8 	.word	0x200001b8
 8000b14:	40000400 	.word	0x40000400

08000b18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	@ 0x30
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2224      	movs	r2, #36	@ 0x24
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f006 f825 	bl	8006b76 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b38:	4a21      	ldr	r2, [pc, #132]	@ (8000bc0 <MX_TIM4_Init+0xa8>)
 8000b3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b56:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b64:	2301      	movs	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b74:	2301      	movs	r3, #1
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	4619      	mov	r1, r3
 8000b86:	480d      	ldr	r0, [pc, #52]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000b88:	f003 ff4c 	bl	8004a24 <HAL_TIM_Encoder_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b92:	f000 f8ad 	bl	8000cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4806      	ldr	r0, [pc, #24]	@ (8000bbc <MX_TIM4_Init+0xa4>)
 8000ba4:	f005 f864 	bl	8005c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000bae:	f000 f89f 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	3730      	adds	r7, #48	@ 0x30
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000204 	.word	0x20000204
 8000bc0:	40000800 	.word	0x40000800

08000bc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bc8:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bca:	4a15      	ldr	r2, [pc, #84]	@ (8000c20 <MX_USART2_UART_Init+0x5c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bea:	220c      	movs	r2, #12
 8000bec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART2_UART_Init+0x58>)
 8000c08:	f005 f8d8 	bl	8005dbc <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c12:	f000 f86d 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000250 	.word	0x20000250
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c36:	4b18      	ldr	r3, [pc, #96]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c46:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_GPIO_Init+0x74>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	603b      	str	r3, [r7, #0]
 8000c88:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
   *
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	7f1b      	ldrb	r3, [r3, #28]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d117      	bne.n	8000cdc <HAL_TIM_IC_CaptureCallback+0x40>
          //store the previous value and read the captured value from the input capture register
	  	  ch1_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000cac:	2100      	movs	r1, #0
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f004 fab8 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000cba:	801a      	strh	r2, [r3, #0]
	      ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000cbc:	2104      	movs	r1, #4
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f004 fab0 	bl	8005224 <HAL_TIM_ReadCapturedValue>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000cca:	801a      	strh	r2, [r3, #0]


	      //calculate the width of the pwm pulse generated by the radio transmitter
	      radio_pulse = ch1_val - ch1_p;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8000cce:	881a      	ldrh	r2, [r3, #0]
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <HAL_TIM_IC_CaptureCallback+0x48>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b04      	ldr	r3, [pc, #16]	@ (8000cec <HAL_TIM_IC_CaptureCallback+0x50>)
 8000cda:	801a      	strh	r2, [r3, #0]
  }

}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	200002da 	.word	0x200002da
 8000ce8:	200002d8 	.word	0x200002d8
 8000cec:	20000034 	.word	0x20000034

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf4:	b672      	cpsid	i
}
 8000cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf8:	bf00      	nop
 8000cfa:	e7fd      	b.n	8000cf8 <Error_Handler+0x8>

08000cfc <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel1);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4610      	mov	r0, r2
 8000d10:	f003 fb4a 	bl	80043a8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(p_mot->hal_tim, p_mot->channel2);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68da      	ldr	r2, [r3, #12]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f003 fb42 	bl	80043a8 <HAL_TIM_PWM_Start>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <stop_PWM>:


void stop_PWM(motor_t* p_mot)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 */

			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->channel1);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68da      	ldr	r2, [r3, #12]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4610      	mov	r0, r2
 8000d40:	f003 fc38 	bl	80045b4 <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->channel2);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4610      	mov	r0, r2
 8000d50:	f003 fc30 	bl	80045b4 <HAL_TIM_PWM_Stop>

}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <set_duty>:

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

	// Print to the console so we can see what's happening
	    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4884      	ldr	r0, [pc, #528]	@ (8000f7c <set_duty+0x220>)
 8000d6a:	f005 fe8f 	bl	8006a8c <iprintf>

	    // Assign the duty cycle to a field in the structure
	    p_mot->pwm_val = pwm_sig;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	601a      	str	r2, [r3, #0]
	    // dereferencing and accessing struct fields
	    // p_mot->duty = duty;
	    // is shorthand for
	    // (*p_mot).duty = duty;

	    if (pwm_sig > 0) {
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	dd6e      	ble.n	8000e58 <set_duty+0xfc>

	    	//forwards
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,pwm_sig);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d105      	bne.n	8000d8e <set_duty+0x32>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8c:	e02c      	b.n	8000de8 <set_duty+0x8c>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d105      	bne.n	8000da2 <set_duty+0x46>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000da0:	e022      	b.n	8000de8 <set_duty+0x8c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d105      	bne.n	8000db6 <set_duty+0x5a>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000db4:	e018      	b.n	8000de8 <set_duty+0x8c>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b0c      	cmp	r3, #12
 8000dbc:	d105      	bne.n	8000dca <set_duty+0x6e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc8:	e00e      	b.n	8000de8 <set_duty+0x8c>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d105      	bne.n	8000dde <set_duty+0x82>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ddc:	e004      	b.n	8000de8 <set_duty+0x8c>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <set_duty+0xa0>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	635a      	str	r2, [r3, #52]	@ 0x34
	      }




}
 8000dfa:	e127      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d105      	bne.n	8000e10 <set_duty+0xb4>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e0e:	e11d      	b.n	800104c <set_duty+0x2f0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	2b08      	cmp	r3, #8
 8000e16:	d105      	bne.n	8000e24 <set_duty+0xc8>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e22:	e113      	b.n	800104c <set_duty+0x2f0>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b0c      	cmp	r3, #12
 8000e2a:	d105      	bne.n	8000e38 <set_duty+0xdc>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e36:	e109      	b.n	800104c <set_duty+0x2f0>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	2b10      	cmp	r3, #16
 8000e3e:	d105      	bne.n	8000e4c <set_duty+0xf0>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	2300      	movs	r3, #0
 8000e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e4a:	e0ff      	b.n	800104c <set_duty+0x2f0>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000e56:	e0f9      	b.n	800104c <set_duty+0x2f0>
	    else if(pwm_sig == 0){
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d17a      	bne.n	8000f54 <set_duty+0x1f8>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,640);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d106      	bne.n	8000e74 <set_duty+0x118>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	e031      	b.n	8000ed8 <set_duty+0x17c>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b04      	cmp	r3, #4
 8000e7a:	d106      	bne.n	8000e8a <set_duty+0x12e>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e86:	6393      	str	r3, [r2, #56]	@ 0x38
 8000e88:	e026      	b.n	8000ed8 <set_duty+0x17c>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	2b08      	cmp	r3, #8
 8000e90:	d106      	bne.n	8000ea0 <set_duty+0x144>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000e9e:	e01b      	b.n	8000ed8 <set_duty+0x17c>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b0c      	cmp	r3, #12
 8000ea6:	d106      	bne.n	8000eb6 <set_duty+0x15a>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb4:	e010      	b.n	8000ed8 <set_duty+0x17c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d106      	bne.n	8000ecc <set_duty+0x170>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eca:	e005      	b.n	8000ed8 <set_duty+0x17c>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000ed6:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d106      	bne.n	8000eee <set_duty+0x192>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000eec:	e0ae      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	d106      	bne.n	8000f04 <set_duty+0x1a8>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f00:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f02:	e0a3      	b.n	800104c <set_duty+0x2f0>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	689b      	ldr	r3, [r3, #8]
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	d106      	bne.n	8000f1a <set_duty+0x1be>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f16:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f18:	e098      	b.n	800104c <set_duty+0x2f0>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	689b      	ldr	r3, [r3, #8]
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d106      	bne.n	8000f30 <set_duty+0x1d4>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	e08d      	b.n	800104c <set_duty+0x2f0>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2b10      	cmp	r3, #16
 8000f36:	d106      	bne.n	8000f46 <set_duty+0x1ea>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f44:	e082      	b.n	800104c <set_duty+0x2f0>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000f50:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000f52:	e07b      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,0);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d105      	bne.n	8000f68 <set_duty+0x20c>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2200      	movs	r2, #0
 8000f64:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f66:	e02e      	b.n	8000fc6 <set_duty+0x26a>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	d107      	bne.n	8000f80 <set_duty+0x224>
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	6393      	str	r3, [r2, #56]	@ 0x38
 8000f7a:	e024      	b.n	8000fc6 <set_duty+0x26a>
 8000f7c:	08007c34 	.word	0x08007c34
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d105      	bne.n	8000f94 <set_duty+0x238>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000f92:	e018      	b.n	8000fc6 <set_duty+0x26a>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b0c      	cmp	r3, #12
 8000f9a:	d105      	bne.n	8000fa8 <set_duty+0x24c>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa6:	e00e      	b.n	8000fc6 <set_duty+0x26a>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d105      	bne.n	8000fbc <set_duty+0x260>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fba:	e004      	b.n	8000fc6 <set_duty+0x26a>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d106      	bne.n	8000fdc <set_duty+0x280>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	425a      	negs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000fda:	e037      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	2b04      	cmp	r3, #4
 8000fe2:	d107      	bne.n	8000ff4 <set_duty+0x298>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	4259      	negs	r1, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	460b      	mov	r3, r1
 8000ff0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000ff2:	e02b      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d107      	bne.n	800100c <set_duty+0x2b0>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	4259      	negs	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	460b      	mov	r3, r1
 8001008:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800100a:	e01f      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b0c      	cmp	r3, #12
 8001012:	d107      	bne.n	8001024 <set_duty+0x2c8>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	4259      	negs	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	460b      	mov	r3, r1
 8001020:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001022:	e013      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	2b10      	cmp	r3, #16
 800102a:	d107      	bne.n	800103c <set_duty+0x2e0>
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4259      	negs	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	460b      	mov	r3, r1
 8001038:	6593      	str	r3, [r2, #88]	@ 0x58
}
 800103a:	e007      	b.n	800104c <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	4259      	negs	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	460b      	mov	r3, r1
 8001048:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 800104a:	e7ff      	b.n	800104c <set_duty+0x2f0>
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <check_delta>:
 */

#include "radio.h"

int check_delta(int16_t pulse_width)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
	//if the delta value is invalid, or is at the 1.5 ms base width return 0. If it is not at the
	//base value return a 1.
	if (900 < pulse_width && pulse_width < 1450)
 800105e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001062:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001066:	dd07      	ble.n	8001078 <check_delta+0x24>
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8001070:	4293      	cmp	r3, r2
 8001072:	dc01      	bgt.n	8001078 <check_delta+0x24>
	{
	    return 1;
 8001074:	2301      	movs	r3, #1
 8001076:	e00e      	b.n	8001096 <check_delta+0x42>
	}
	else if (1550 < pulse_width && pulse_width < 2500)
 8001078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107c:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001080:	4293      	cmp	r3, r2
 8001082:	dd07      	ble.n	8001094 <check_delta+0x40>
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 800108c:	4293      	cmp	r3, r2
 800108e:	dc01      	bgt.n	8001094 <check_delta+0x40>
	{
	    return 1;
 8001090:	2301      	movs	r3, #1
 8001092:	e000      	b.n	8001096 <check_delta+0x42>
	}
	else
	{
			return 0;
 8001094:	2300      	movs	r3, #0
	}
}
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
	...

080010a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_MspInit+0x44>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ae:	4a0e      	ldr	r2, [pc, #56]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80010b6:	4b0c      	ldr	r3, [pc, #48]	@ (80010e8 <HAL_MspInit+0x44>)
 80010b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c2:	4b09      	ldr	r3, [pc, #36]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010c6:	4a08      	ldr	r2, [pc, #32]	@ (80010e8 <HAL_MspInit+0x44>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80010ce:	4b06      	ldr	r3, [pc, #24]	@ (80010e8 <HAL_MspInit+0x44>)
 80010d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0ac      	sub	sp, #176	@ 0xb0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2288      	movs	r2, #136	@ 0x88
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f005 fd32 	bl	8006b76 <memset>
  if(hadc->Instance==ADC1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_ADC_MspInit+0xc8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d146      	bne.n	80011aa <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800111c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001120:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001122:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001126:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800112e:	2301      	movs	r3, #1
 8001130:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001132:	2308      	movs	r3, #8
 8001134:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001136:	2307      	movs	r3, #7
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800113a:	2302      	movs	r3, #2
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800113e:	2302      	movs	r3, #2
 8001140:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001142:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001146:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fc17 	bl	8003980 <HAL_RCCEx_PeriphCLKConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001158:	f7ff fdca 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800115c:	4b16      	ldr	r3, [pc, #88]	@ (80011b8 <HAL_ADC_MspInit+0xcc>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a15      	ldr	r2, [pc, #84]	@ (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001162:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b13      	ldr	r3, [pc, #76]	@ (80011b8 <HAL_ADC_MspInit+0xcc>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001178:	4a0f      	ldr	r2, [pc, #60]	@ (80011b8 <HAL_ADC_MspInit+0xcc>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001180:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <HAL_ADC_MspInit+0xcc>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = HMYO_Pin;
 800118c:	2301      	movs	r3, #1
 800118e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001192:	230b      	movs	r3, #11
 8001194:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(HMYO_GPIO_Port, &GPIO_InitStruct);
 800119e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	@ (80011bc <HAL_ADC_MspInit+0xd0>)
 80011a6:	f001 fbdd 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	37b0      	adds	r7, #176	@ 0xb0
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	50040000 	.word	0x50040000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800

080011c0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08a      	sub	sp, #40	@ 0x28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <HAL_TIM_IC_MspInit+0x90>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d131      	bne.n	8001246 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001254 <HAL_TIM_IC_MspInit+0x94>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001254 <HAL_TIM_IC_MspInit+0x94>)
 80011e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80011ee:	4b19      	ldr	r3, [pc, #100]	@ (8001254 <HAL_TIM_IC_MspInit+0x94>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <HAL_TIM_IC_MspInit+0x94>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	4a15      	ldr	r2, [pc, #84]	@ (8001254 <HAL_TIM_IC_MspInit+0x94>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <HAL_TIM_IC_MspInit+0x94>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = RADIO_Pin;
 8001212:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001224:	2301      	movs	r3, #1
 8001226:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RADIO_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001232:	f001 fb97 	bl	8002964 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	201b      	movs	r0, #27
 800123c:	f001 fb5b 	bl	80028f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001240:	201b      	movs	r0, #27
 8001242:	f001 fb74 	bl	800292e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	@ 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012c00 	.word	0x40012c00
 8001254:	40021000 	.word	0x40021000

08001258 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001268:	d10b      	bne.n	8001282 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <HAL_TIM_PWM_MspInit+0x38>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <HAL_TIM_PWM_MspInit+0x38>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6593      	str	r3, [r2, #88]	@ 0x58
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_TIM_PWM_MspInit+0x38>)
 8001278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b08c      	sub	sp, #48	@ 0x30
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a2e      	ldr	r2, [pc, #184]	@ (800136c <HAL_TIM_Encoder_MspInit+0xd8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d129      	bne.n	800130a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	61bb      	str	r3, [r7, #24]
 80012cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	4a27      	ldr	r2, [pc, #156]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = SPIN_ENCA_Pin|SPIN_ENCB_Pin;
 80012e6:	23c0      	movs	r3, #192	@ 0xc0
 80012e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2300      	movs	r3, #0
 80012f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001304:	f001 fb2e 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001308:	e02c      	b.n	8001364 <HAL_TIM_Encoder_MspInit+0xd0>
  else if(htim_encoder->Instance==TIM4)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a19      	ldr	r2, [pc, #100]	@ (8001374 <HAL_TIM_Encoder_MspInit+0xe0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d127      	bne.n	8001364 <HAL_TIM_Encoder_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001314:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001318:	4a15      	ldr	r2, [pc, #84]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 800131a:	f043 0304 	orr.w	r3, r3, #4
 800131e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001320:	4b13      	ldr	r3, [pc, #76]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b10      	ldr	r3, [pc, #64]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001330:	4a0f      	ldr	r2, [pc, #60]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001338:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <HAL_TIM_Encoder_MspInit+0xdc>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HAND_ENCA_Pin|HAND_ENCB_Pin;
 8001344:	23c0      	movs	r3, #192	@ 0xc0
 8001346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001354:	2302      	movs	r3, #2
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	@ (8001378 <HAL_TIM_Encoder_MspInit+0xe4>)
 8001360:	f001 fb00 	bl	8002964 <HAL_GPIO_Init>
}
 8001364:	bf00      	nop
 8001366:	3730      	adds	r7, #48	@ 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40000400 	.word	0x40000400
 8001370:	40021000 	.word	0x40021000
 8001374:	40000800 	.word	0x40000800
 8001378:	48000400 	.word	0x48000400

0800137c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	@ 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800139c:	d139      	bne.n	8001412 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	4b1f      	ldr	r3, [pc, #124]	@ (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a2:	4a1e      	ldr	r2, [pc, #120]	@ (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a18      	ldr	r2, [pc, #96]	@ (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013bc:	f043 0302 	orr.w	r3, r3, #2
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <HAL_TIM_MspPostInit+0xa0>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = SPIN_PWMA_Pin|SPIN_PWMB_Pin;
 80013ce:	2303      	movs	r3, #3
 80013d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013de:	2301      	movs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013ec:	f001 faba 	bl	8002964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HAND_PWMA_Pin|HAND_PWMB_Pin;
 80013f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001402:	2301      	movs	r3, #1
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <HAL_TIM_MspPostInit+0xa4>)
 800140e:	f001 faa9 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400

08001424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b0ac      	sub	sp, #176	@ 0xb0
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	2288      	movs	r2, #136	@ 0x88
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f005 fb96 	bl	8006b76 <memset>
  if(huart->Instance==USART2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <HAL_UART_MspInit+0xb0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d13b      	bne.n	80014cc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001454:	2302      	movs	r3, #2
 8001456:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001458:	2300      	movs	r3, #0
 800145a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	4618      	mov	r0, r3
 8001462:	f002 fa8d 	bl	8003980 <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800146c:	f7ff fc40 	bl	8000cf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_UART_MspInit+0xb4>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001474:	4a18      	ldr	r2, [pc, #96]	@ (80014d8 <HAL_UART_MspInit+0xb4>)
 8001476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147a:	6593      	str	r3, [r2, #88]	@ 0x58
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <HAL_UART_MspInit+0xb4>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b13      	ldr	r3, [pc, #76]	@ (80014d8 <HAL_UART_MspInit+0xb4>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <HAL_UART_MspInit+0xb4>)
 800148e:	f043 0301 	orr.w	r3, r3, #1
 8001492:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001494:	4b10      	ldr	r3, [pc, #64]	@ (80014d8 <HAL_UART_MspInit+0xb4>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014a0:	230c      	movs	r3, #12
 80014a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f001 fa4c 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	37b0      	adds	r7, #176	@ 0xb0
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40004400 	.word	0x40004400
 80014d8:	40021000 	.word	0x40021000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <NMI_Handler+0x4>

080014e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <HardFault_Handler+0x4>

080014ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <MemManage_Handler+0x4>

080014f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <UsageFault_Handler+0x4>

08001504 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001532:	f000 f941 	bl	80017b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <TIM1_CC_IRQHandler+0x10>)
 8001542:	f003 fbbc 	bl	8004cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000120 	.word	0x20000120

08001550 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
 8001560:	e00a      	b.n	8001578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001562:	f3af 8000 	nop.w
 8001566:	4601      	mov	r1, r0
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	60ba      	str	r2, [r7, #8]
 800156e:	b2ca      	uxtb	r2, r1
 8001570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	3301      	adds	r3, #1
 8001576:	617b      	str	r3, [r7, #20]
 8001578:	697a      	ldr	r2, [r7, #20]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	429a      	cmp	r2, r3
 800157e:	dbf0      	blt.n	8001562 <_read+0x12>
  }

  return len;
 8001580:	687b      	ldr	r3, [r7, #4]
}
 8001582:	4618      	mov	r0, r3
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	60f8      	str	r0, [r7, #12]
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
 800159a:	e009      	b.n	80015b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	1c5a      	adds	r2, r3, #1
 80015a0:	60ba      	str	r2, [r7, #8]
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	3301      	adds	r3, #1
 80015ae:	617b      	str	r3, [r7, #20]
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dbf1      	blt.n	800159c <_write+0x12>
  }
  return len;
 80015b8:	687b      	ldr	r3, [r7, #4]
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3718      	adds	r7, #24
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_close>:

int _close(int file)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b083      	sub	sp, #12
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
 80015e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015ea:	605a      	str	r2, [r3, #4]
  return 0;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <_isatty>:

int _isatty(int file)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b083      	sub	sp, #12
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f005 fada 	bl	8006c14 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20018000 	.word	0x20018000
 800168c:	00000400 	.word	0x00000400
 8001690:	2000037c 	.word	0x2000037c
 8001694:	200004d0 	.word	0x200004d0

08001698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <SystemInit+0x20>)
 800169e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016a2:	4a05      	ldr	r2, [pc, #20]	@ (80016b8 <SystemInit+0x20>)
 80016a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016c0:	f7ff ffea 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	@ (80016f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	@ (80016fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <LoopForever+0xe>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001708 <LoopForever+0x16>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f005 fa99 	bl	8006c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016ee:	f7fe ffef 	bl	80006d0 <main>

080016f2 <LoopForever>:

LoopForever:
    b LoopForever
 80016f2:	e7fe      	b.n	80016f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001700:	08007ce0 	.word	0x08007ce0
  ldr r2, =_sbss
 8001704:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001708:	200004d0 	.word	0x200004d0

0800170c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC1_2_IRQHandler>

0800170e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f001 f8e1 	bl	80028e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800171e:	200f      	movs	r0, #15
 8001720:	f000 f80e 	bl	8001740 <HAL_InitTick>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d002      	beq.n	8001730 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e001      	b.n	8001734 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001730:	f7ff fcb8 	bl	80010a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001734:	79fb      	ldrb	r3, [r7, #7]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800174c:	4b17      	ldr	r3, [pc, #92]	@ (80017ac <HAL_InitTick+0x6c>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d023      	beq.n	800179c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001754:	4b16      	ldr	r3, [pc, #88]	@ (80017b0 <HAL_InitTick+0x70>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b14      	ldr	r3, [pc, #80]	@ (80017ac <HAL_InitTick+0x6c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4619      	mov	r1, r3
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	fbb3 f3f1 	udiv	r3, r3, r1
 8001766:	fbb2 f3f3 	udiv	r3, r2, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f001 f8ed 	bl	800294a <HAL_SYSTICK_Config>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d809      	bhi.n	8001790 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f001 f8b7 	bl	80028f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_InitTick+0x74>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e007      	b.n	80017a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	73fb      	strb	r3, [r7, #15]
 8001794:	e004      	b.n	80017a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	73fb      	strb	r3, [r7, #15]
 800179a:	e001      	b.n	80017a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000040 	.word	0x20000040
 80017b0:	20000038 	.word	0x20000038
 80017b4:	2000003c 	.word	0x2000003c

080017b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_IncTick+0x20>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x24>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <HAL_IncTick+0x24>)
 80017ca:	6013      	str	r3, [r2, #0]
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000040 	.word	0x20000040
 80017dc:	20000380 	.word	0x20000380

080017e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return uwTick;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <HAL_GetTick+0x14>)
 80017e6:	681b      	ldr	r3, [r3, #0]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000380 	.word	0x20000380

080017f8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	609a      	str	r2, [r3, #8]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	609a      	str	r2, [r3, #8]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001854:	4618      	mov	r0, r3
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001860:	b480      	push	{r7}
 8001862:	b087      	sub	sp, #28
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	3360      	adds	r3, #96	@ 0x60
 8001872:	461a      	mov	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4413      	add	r3, r2
 800187a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <LL_ADC_SetOffset+0x44>)
 8001882:	4013      	ands	r3, r2
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	4313      	orrs	r3, r2
 8001890:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001898:	bf00      	nop
 800189a:	371c      	adds	r7, #28
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	03fff000 	.word	0x03fff000

080018a8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	@ 0x60
 80018b6:	461a      	mov	r2, r3
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	4413      	add	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3360      	adds	r3, #96	@ 0x60
 80018e4:	461a      	mov	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	431a      	orrs	r2, r3
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018fe:	bf00      	nop
 8001900:	371c      	adds	r7, #28
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	60f8      	str	r0, [r7, #12]
 8001912:	60b9      	str	r1, [r7, #8]
 8001914:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	3330      	adds	r3, #48	@ 0x30
 800191a:	461a      	mov	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	0a1b      	lsrs	r3, r3, #8
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	4413      	add	r3, r2
 8001928:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	211f      	movs	r1, #31
 8001936:	fa01 f303 	lsl.w	r3, r1, r3
 800193a:	43db      	mvns	r3, r3
 800193c:	401a      	ands	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	0e9b      	lsrs	r3, r3, #26
 8001942:	f003 011f 	and.w	r1, r3, #31
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001962:	b480      	push	{r7}
 8001964:	b087      	sub	sp, #28
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	3314      	adds	r3, #20
 8001972:	461a      	mov	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	0e5b      	lsrs	r3, r3, #25
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	f003 0304 	and.w	r3, r3, #4
 800197e:	4413      	add	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	0d1b      	lsrs	r3, r3, #20
 800198a:	f003 031f 	and.w	r3, r3, #31
 800198e:	2107      	movs	r1, #7
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	401a      	ands	r2, r3
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	0d1b      	lsrs	r3, r3, #20
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	6879      	ldr	r1, [r7, #4]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	431a      	orrs	r2, r3
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80019ac:	bf00      	nop
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d0:	43db      	mvns	r3, r3
 80019d2:	401a      	ands	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0318 	and.w	r3, r3, #24
 80019da:	4908      	ldr	r1, [pc, #32]	@ (80019fc <LL_ADC_SetChannelSingleDiff+0x44>)
 80019dc:	40d9      	lsrs	r1, r3
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	400b      	ands	r3, r1
 80019e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e6:	431a      	orrs	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019ee:	bf00      	nop
 80019f0:	3714      	adds	r7, #20
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	0007ffff 	.word	0x0007ffff

08001a00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001a10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	6093      	str	r3, [r2, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a38:	d101      	bne.n	8001a3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e000      	b.n	8001a40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001a5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001a88:	d101      	bne.n	8001a8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <LL_ADC_IsEnabled+0x18>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <LL_ADC_IsEnabled+0x1a>
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d101      	bne.n	8001ada <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0308 	and.w	r3, r3, #8
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d101      	bne.n	8001b00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	@ 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e130      	b.n	8001d8c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d109      	bne.n	8001b4c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff fad7 	bl	80010ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff67 	bl	8001a24 <LL_ADC_IsDeepPowerDownEnabled>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d004      	beq.n	8001b66 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff4d 	bl	8001a00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff82 	bl	8001a74 <LL_ADC_IsInternalRegulatorEnabled>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff66 	bl	8001a4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b80:	4b84      	ldr	r3, [pc, #528]	@ (8001d94 <HAL_ADC_Init+0x284>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	4a84      	ldr	r2, [pc, #528]	@ (8001d98 <HAL_ADC_Init+0x288>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	3301      	adds	r3, #1
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b94:	e002      	b.n	8001b9c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f9      	bne.n	8001b96 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff ff64 	bl	8001a74 <LL_ADC_IsInternalRegulatorEnabled>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10d      	bne.n	8001bce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb6:	f043 0210 	orr.w	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc2:	f043 0201 	orr.w	r2, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff75 	bl	8001ac2 <LL_ADC_REG_IsConversionOngoing>
 8001bd8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f040 80c9 	bne.w	8001d7a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	f040 80c5 	bne.w	8001d7a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bf4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001bf8:	f043 0202 	orr.w	r2, r3, #2
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff49 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d115      	bne.n	8001c3c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c10:	4862      	ldr	r0, [pc, #392]	@ (8001d9c <HAL_ADC_Init+0x28c>)
 8001c12:	f7ff ff43 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c16:	4604      	mov	r4, r0
 8001c18:	4861      	ldr	r0, [pc, #388]	@ (8001da0 <HAL_ADC_Init+0x290>)
 8001c1a:	f7ff ff3f 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	431c      	orrs	r4, r3
 8001c22:	4860      	ldr	r0, [pc, #384]	@ (8001da4 <HAL_ADC_Init+0x294>)
 8001c24:	f7ff ff3a 	bl	8001a9c <LL_ADC_IsEnabled>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4323      	orrs	r3, r4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	4619      	mov	r1, r3
 8001c36:	485c      	ldr	r0, [pc, #368]	@ (8001da8 <HAL_ADC_Init+0x298>)
 8001c38:	f7ff fdde 	bl	80017f8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	7e5b      	ldrb	r3, [r3, #25]
 8001c40:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c46:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c4c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c52:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c5a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d106      	bne.n	8001c78 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	045b      	lsls	r3, r3, #17
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c8c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	4b44      	ldr	r3, [pc, #272]	@ (8001dac <HAL_ADC_Init+0x29c>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff1b 	bl	8001ae8 <LL_ADC_INJ_IsConversionOngoing>
 8001cb2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d13d      	bne.n	8001d36 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d13a      	bne.n	8001d36 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cc4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ccc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001cdc:	f023 0302 	bic.w	r3, r3, #2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6812      	ldr	r2, [r2, #0]
 8001ce4:	69b9      	ldr	r1, [r7, #24]
 8001ce6:	430b      	orrs	r3, r1
 8001ce8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d118      	bne.n	8001d26 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001d10:	4311      	orrs	r1, r2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d16:	430a      	orrs	r2, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	e007      	b.n	8001d36 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	691a      	ldr	r2, [r3, #16]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0201 	bic.w	r2, r2, #1
 8001d34:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d10c      	bne.n	8001d58 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	f023 010f 	bic.w	r1, r3, #15
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d56:	e007      	b.n	8001d68 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 020f 	bic.w	r2, r2, #15
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	f043 0201 	orr.w	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	@ 0x54
 8001d78:	e007      	b.n	8001d8a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3724      	adds	r7, #36	@ 0x24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd90      	pop	{r4, r7, pc}
 8001d94:	20000038 	.word	0x20000038
 8001d98:	053e2d63 	.word	0x053e2d63
 8001d9c:	50040000 	.word	0x50040000
 8001da0:	50040100 	.word	0x50040100
 8001da4:	50040200 	.word	0x50040200
 8001da8:	50040300 	.word	0x50040300
 8001dac:	fff0c007 	.word	0xfff0c007

08001db0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0b6      	sub	sp, #216	@ 0xd8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d101      	bne.n	8001dd2 <HAL_ADC_ConfigChannel+0x22>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e3c9      	b.n	8002566 <HAL_ADC_ConfigChannel+0x7b6>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fe6f 	bl	8001ac2 <LL_ADC_REG_IsConversionOngoing>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 83aa 	bne.w	8002540 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d824      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	3b02      	subs	r3, #2
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d81b      	bhi.n	8001e3e <HAL_ADC_ConfigChannel+0x8e>
 8001e06:	a201      	add	r2, pc, #4	@ (adr r2, 8001e0c <HAL_ADC_ConfigChannel+0x5c>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e25 	.word	0x08001e25
 8001e14:	08001e2d 	.word	0x08001e2d
 8001e18:	08001e35 	.word	0x08001e35
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e1c:	230c      	movs	r3, #12
 8001e1e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e22:	e010      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e24:	2312      	movs	r3, #18
 8001e26:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e2a:	e00c      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e2c:	2318      	movs	r3, #24
 8001e2e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e32:	e008      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e38:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e3c:	e003      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e3e:	2306      	movs	r3, #6
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8001e44:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6818      	ldr	r0, [r3, #0]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001e54:	f7ff fd59 	bl	800190a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fe30 	bl	8001ac2 <LL_ADC_REG_IsConversionOngoing>
 8001e62:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fe3c 	bl	8001ae8 <LL_ADC_INJ_IsConversionOngoing>
 8001e70:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f040 81a4 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 819f 	bne.w	80021c6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6818      	ldr	r0, [r3, #0]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	6819      	ldr	r1, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	f7ff fd64 	bl	8001962 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d00a      	beq.n	8001ed2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6919      	ldr	r1, [r3, #16]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ecc:	f7ff fcc8 	bl	8001860 <LL_ADC_SetOffset>
 8001ed0:	e179      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff fce5 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10a      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x14e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fcda 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	e01e      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x18c>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fccf 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001f20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f2c:	2320      	movs	r3, #32
 8001f2e:	e004      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x1a4>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	0e9b      	lsrs	r3, r3, #26
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	e018      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1d6>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001f68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001f70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f78:	2320      	movs	r3, #32
 8001f7a:	e004      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001f80:	fab3 f383 	clz	r3, r3
 8001f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d106      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fc9e 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fc82 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x214>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff fc77 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	0e9b      	lsrs	r3, r3, #26
 8001fbe:	f003 021f 	and.w	r2, r3, #31
 8001fc2:	e01e      	b.n	8002002 <HAL_ADC_ConfigChannel+0x252>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2101      	movs	r1, #1
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fc6c 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fe6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001fea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	e004      	b.n	8002000 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001ff6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ffa:	fab3 f383 	clz	r3, r3
 8001ffe:	b2db      	uxtb	r3, r3
 8002000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <HAL_ADC_ConfigChannel+0x26a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0e9b      	lsrs	r3, r3, #26
 8002014:	f003 031f 	and.w	r3, r3, #31
 8002018:	e018      	b.n	800204c <HAL_ADC_ConfigChannel+0x29c>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002022:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002026:	fa93 f3a3 	rbit	r3, r3
 800202a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800202e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002032:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002036:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800203e:	2320      	movs	r3, #32
 8002040:	e004      	b.n	800204c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002042:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	2101      	movs	r1, #1
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fc3b 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2102      	movs	r1, #2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fc1f 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10a      	bne.n	800208a <HAL_ADC_ConfigChannel+0x2da>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2102      	movs	r1, #2
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fc14 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	0e9b      	lsrs	r3, r3, #26
 8002084:	f003 021f 	and.w	r2, r3, #31
 8002088:	e01e      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x318>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2102      	movs	r1, #2
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fc09 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80020a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80020ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80020b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80020b8:	2320      	movs	r3, #32
 80020ba:	e004      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020c0:	fab3 f383 	clz	r3, r3
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x330>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0e9b      	lsrs	r3, r3, #26
 80020da:	f003 031f 	and.w	r3, r3, #31
 80020de:	e014      	b.n	800210a <HAL_ADC_ConfigChannel+0x35a>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80020ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80020f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80020fc:	2320      	movs	r3, #32
 80020fe:	e004      	b.n	800210a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002100:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800210a:	429a      	cmp	r2, r3
 800210c:	d106      	bne.n	800211c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	2102      	movs	r1, #2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fbdc 	bl	80018d4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2103      	movs	r1, #3
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fbc0 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002128:	4603      	mov	r3, r0
 800212a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10a      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x398>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2103      	movs	r1, #3
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fbb5 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	0e9b      	lsrs	r3, r3, #26
 8002142:	f003 021f 	and.w	r2, r3, #31
 8002146:	e017      	b.n	8002178 <HAL_ADC_ConfigChannel+0x3c8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2103      	movs	r1, #3
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fbaa 	bl	80018a8 <LL_ADC_GetOffsetChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002162:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002164:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800216e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
 8002176:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x3e0>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	0e9b      	lsrs	r3, r3, #26
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	e011      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x404>
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800219e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80021a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80021a8:	2320      	movs	r3, #32
 80021aa:	e003      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80021ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d106      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2200      	movs	r2, #0
 80021be:	2103      	movs	r1, #3
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fb87 	bl	80018d4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fc66 	bl	8001a9c <LL_ADC_IsEnabled>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8140 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6818      	ldr	r0, [r3, #0]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	6819      	ldr	r1, [r3, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	461a      	mov	r2, r3
 80021e6:	f7ff fbe7 	bl	80019b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a8f      	ldr	r2, [pc, #572]	@ (800242c <HAL_ADC_ConfigChannel+0x67c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	f040 8131 	bne.w	8002458 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10b      	bne.n	800221e <HAL_ADC_ConfigChannel+0x46e>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0e9b      	lsrs	r3, r3, #26
 800220c:	3301      	adds	r3, #1
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2b09      	cmp	r3, #9
 8002214:	bf94      	ite	ls
 8002216:	2301      	movls	r3, #1
 8002218:	2300      	movhi	r3, #0
 800221a:	b2db      	uxtb	r3, r3
 800221c:	e019      	b.n	8002252 <HAL_ADC_ConfigChannel+0x4a2>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800222c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800222e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002230:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002236:	2320      	movs	r3, #32
 8002238:	e003      	b.n	8002242 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800223a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b2db      	uxtb	r3, r3
 8002242:	3301      	adds	r3, #1
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	2b09      	cmp	r3, #9
 800224a:	bf94      	ite	ls
 800224c:	2301      	movls	r3, #1
 800224e:	2300      	movhi	r3, #0
 8002250:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002252:	2b00      	cmp	r3, #0
 8002254:	d079      	beq.n	800234a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800225e:	2b00      	cmp	r3, #0
 8002260:	d107      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x4c2>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	0e9b      	lsrs	r3, r3, #26
 8002268:	3301      	adds	r3, #1
 800226a:	069b      	lsls	r3, r3, #26
 800226c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002270:	e015      	b.n	800229e <HAL_ADC_ConfigChannel+0x4ee>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002280:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002282:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002284:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800228a:	2320      	movs	r3, #32
 800228c:	e003      	b.n	8002296 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800228e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	069b      	lsls	r3, r3, #26
 800229a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d109      	bne.n	80022be <HAL_ADC_ConfigChannel+0x50e>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0e9b      	lsrs	r3, r3, #26
 80022b0:	3301      	adds	r3, #1
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f303 	lsl.w	r3, r1, r3
 80022bc:	e017      	b.n	80022ee <HAL_ADC_ConfigChannel+0x53e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80022cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80022d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022d6:	2320      	movs	r3, #32
 80022d8:	e003      	b.n	80022e2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80022da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f303 	lsl.w	r3, r1, r3
 80022ee:	ea42 0103 	orr.w	r1, r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x564>
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	0e9b      	lsrs	r3, r3, #26
 8002304:	3301      	adds	r3, #1
 8002306:	f003 021f 	and.w	r2, r3, #31
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	051b      	lsls	r3, r3, #20
 8002312:	e018      	b.n	8002346 <HAL_ADC_ConfigChannel+0x596>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002324:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800232c:	2320      	movs	r3, #32
 800232e:	e003      	b.n	8002338 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	f003 021f 	and.w	r2, r3, #31
 800233e:	4613      	mov	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4413      	add	r3, r2
 8002344:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002346:	430b      	orrs	r3, r1
 8002348:	e081      	b.n	800244e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d107      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x5b6>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	0e9b      	lsrs	r3, r3, #26
 800235c:	3301      	adds	r3, #1
 800235e:	069b      	lsls	r3, r3, #26
 8002360:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002364:	e015      	b.n	8002392 <HAL_ADC_ConfigChannel+0x5e2>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800237e:	2320      	movs	r3, #32
 8002380:	e003      	b.n	800238a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	fab3 f383 	clz	r3, r3
 8002388:	b2db      	uxtb	r3, r3
 800238a:	3301      	adds	r3, #1
 800238c:	069b      	lsls	r3, r3, #26
 800238e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x602>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	0e9b      	lsrs	r3, r3, #26
 80023a4:	3301      	adds	r3, #1
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	2101      	movs	r1, #1
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	e017      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x632>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	61bb      	str	r3, [r7, #24]
  return result;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023c4:	6a3b      	ldr	r3, [r7, #32]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023ca:	2320      	movs	r3, #32
 80023cc:	e003      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 031f 	and.w	r3, r3, #31
 80023dc:	2101      	movs	r1, #1
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	ea42 0103 	orr.w	r1, r2, r3
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10d      	bne.n	800240e <HAL_ADC_ConfigChannel+0x65e>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e9b      	lsrs	r3, r3, #26
 80023f8:	3301      	adds	r3, #1
 80023fa:	f003 021f 	and.w	r2, r3, #31
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	3b1e      	subs	r3, #30
 8002406:	051b      	lsls	r3, r3, #20
 8002408:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800240c:	e01e      	b.n	800244c <HAL_ADC_ConfigChannel+0x69c>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	fa93 f3a3 	rbit	r3, r3
 800241a:	60fb      	str	r3, [r7, #12]
  return result;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d104      	bne.n	8002430 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002426:	2320      	movs	r3, #32
 8002428:	e006      	b.n	8002438 <HAL_ADC_ConfigChannel+0x688>
 800242a:	bf00      	nop
 800242c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	3301      	adds	r3, #1
 800243a:	f003 021f 	and.w	r2, r3, #31
 800243e:	4613      	mov	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4413      	add	r3, r2
 8002444:	3b1e      	subs	r3, #30
 8002446:	051b      	lsls	r3, r3, #20
 8002448:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800244c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002452:	4619      	mov	r1, r3
 8002454:	f7ff fa85 	bl	8001962 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b44      	ldr	r3, [pc, #272]	@ (8002570 <HAL_ADC_ConfigChannel+0x7c0>)
 800245e:	4013      	ands	r3, r2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d07a      	beq.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002464:	4843      	ldr	r0, [pc, #268]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 8002466:	f7ff f9ed 	bl	8001844 <LL_ADC_GetCommonPathInternalCh>
 800246a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a41      	ldr	r2, [pc, #260]	@ (8002578 <HAL_ADC_ConfigChannel+0x7c8>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d12c      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800247c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d126      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a3c      	ldr	r2, [pc, #240]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d004      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x6e8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a3b      	ldr	r2, [pc, #236]	@ (8002580 <HAL_ADC_ConfigChannel+0x7d0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d15d      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002498:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800249c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80024a0:	4619      	mov	r1, r3
 80024a2:	4834      	ldr	r0, [pc, #208]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 80024a4:	f7ff f9bb 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024a8:	4b36      	ldr	r3, [pc, #216]	@ (8002584 <HAL_ADC_ConfigChannel+0x7d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	099b      	lsrs	r3, r3, #6
 80024ae:	4a36      	ldr	r2, [pc, #216]	@ (8002588 <HAL_ADC_ConfigChannel+0x7d8>)
 80024b0:	fba2 2303 	umull	r2, r3, r2, r3
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024c2:	e002      	b.n	80024ca <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f9      	bne.n	80024c4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024d0:	e040      	b.n	8002554 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a2d      	ldr	r2, [pc, #180]	@ (800258c <HAL_ADC_ConfigChannel+0x7dc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d118      	bne.n	800250e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d112      	bne.n	800250e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a23      	ldr	r2, [pc, #140]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d004      	beq.n	80024fc <HAL_ADC_ConfigChannel+0x74c>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a22      	ldr	r2, [pc, #136]	@ (8002580 <HAL_ADC_ConfigChannel+0x7d0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d12d      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002500:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002504:	4619      	mov	r1, r3
 8002506:	481b      	ldr	r0, [pc, #108]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 8002508:	f7ff f989 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800250c:	e024      	b.n	8002558 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_ADC_ConfigChannel+0x7e0>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d120      	bne.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002518:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800251c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d11a      	bne.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <HAL_ADC_ConfigChannel+0x7cc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d115      	bne.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800252e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002532:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002536:	4619      	mov	r1, r3
 8002538:	480e      	ldr	r0, [pc, #56]	@ (8002574 <HAL_ADC_ConfigChannel+0x7c4>)
 800253a:	f7ff f970 	bl	800181e <LL_ADC_SetCommonPathInternalCh>
 800253e:	e00c      	b.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002544:	f043 0220 	orr.w	r2, r3, #32
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002552:	e002      	b.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002554:	bf00      	nop
 8002556:	e000      	b.n	800255a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002558:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002562:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002566:	4618      	mov	r0, r3
 8002568:	37d8      	adds	r7, #216	@ 0xd8
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	80080000 	.word	0x80080000
 8002574:	50040300 	.word	0x50040300
 8002578:	c7520000 	.word	0xc7520000
 800257c:	50040000 	.word	0x50040000
 8002580:	50040200 	.word	0x50040200
 8002584:	20000038 	.word	0x20000038
 8002588:	053e2d63 	.word	0x053e2d63
 800258c:	cb840000 	.word	0xcb840000
 8002590:	80000001 	.word	0x80000001

08002594 <LL_ADC_IsEnabled>:
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <LL_ADC_IsEnabled+0x18>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <LL_ADC_IsEnabled+0x1a>
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <LL_ADC_REG_IsConversionOngoing>:
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d101      	bne.n	80025d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b09f      	sub	sp, #124	@ 0x7c
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e093      	b.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800260a:	2300      	movs	r3, #0
 800260c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a47      	ldr	r2, [pc, #284]	@ (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d102      	bne.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002618:	4b46      	ldr	r3, [pc, #280]	@ (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	e001      	b.n	8002622 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800261e:	2300      	movs	r3, #0
 8002620:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10b      	bne.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e072      	b.n	8002726 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ffb9 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 8002648:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ffb3 	bl	80025ba <LL_ADC_REG_IsConversionOngoing>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d154      	bne.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800265a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800265c:	2b00      	cmp	r3, #0
 800265e:	d151      	bne.n	8002704 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002660:	4b35      	ldr	r3, [pc, #212]	@ (8002738 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002662:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d02c      	beq.n	80026c6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800266c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	6859      	ldr	r1, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800267e:	035b      	lsls	r3, r3, #13
 8002680:	430b      	orrs	r3, r1
 8002682:	431a      	orrs	r2, r3
 8002684:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002686:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002688:	4829      	ldr	r0, [pc, #164]	@ (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800268a:	f7ff ff83 	bl	8002594 <LL_ADC_IsEnabled>
 800268e:	4604      	mov	r4, r0
 8002690:	4828      	ldr	r0, [pc, #160]	@ (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002692:	f7ff ff7f 	bl	8002594 <LL_ADC_IsEnabled>
 8002696:	4603      	mov	r3, r0
 8002698:	431c      	orrs	r4, r3
 800269a:	4828      	ldr	r0, [pc, #160]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800269c:	f7ff ff7a 	bl	8002594 <LL_ADC_IsEnabled>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4323      	orrs	r3, r4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d137      	bne.n	8002718 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80026a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026b0:	f023 030f 	bic.w	r3, r3, #15
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	6811      	ldr	r1, [r2, #0]
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	430a      	orrs	r2, r1
 80026be:	431a      	orrs	r2, r3
 80026c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80026c4:	e028      	b.n	8002718 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80026ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026d0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d2:	4817      	ldr	r0, [pc, #92]	@ (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026d4:	f7ff ff5e 	bl	8002594 <LL_ADC_IsEnabled>
 80026d8:	4604      	mov	r4, r0
 80026da:	4816      	ldr	r0, [pc, #88]	@ (8002734 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80026dc:	f7ff ff5a 	bl	8002594 <LL_ADC_IsEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	431c      	orrs	r4, r3
 80026e4:	4815      	ldr	r0, [pc, #84]	@ (800273c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80026e6:	f7ff ff55 	bl	8002594 <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4323      	orrs	r3, r4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d112      	bne.n	8002718 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80026fa:	f023 030f 	bic.w	r3, r3, #15
 80026fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002700:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002702:	e009      	b.n	8002718 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002716:	e000      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002718:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002722:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002726:	4618      	mov	r0, r3
 8002728:	377c      	adds	r7, #124	@ 0x7c
 800272a:	46bd      	mov	sp, r7
 800272c:	bd90      	pop	{r4, r7, pc}
 800272e:	bf00      	nop
 8002730:	50040000 	.word	0x50040000
 8002734:	50040100 	.word	0x50040100
 8002738:	50040300 	.word	0x50040300
 800273c:	50040200 	.word	0x50040200

08002740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002750:	4b0c      	ldr	r3, [pc, #48]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800275c:	4013      	ands	r3, r2
 800275e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800276c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002772:	4a04      	ldr	r2, [pc, #16]	@ (8002784 <__NVIC_SetPriorityGrouping+0x44>)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	60d3      	str	r3, [r2, #12]
}
 8002778:	bf00      	nop
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800278c:	4b04      	ldr	r3, [pc, #16]	@ (80027a0 <__NVIC_GetPriorityGrouping+0x18>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	f003 0307 	and.w	r3, r3, #7
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	db0b      	blt.n	80027ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	4907      	ldr	r1, [pc, #28]	@ (80027dc <__NVIC_EnableIRQ+0x38>)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2001      	movs	r0, #1
 80027c6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027ce:	bf00      	nop
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000e100 	.word	0xe000e100

080027e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	db0a      	blt.n	800280a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	490c      	ldr	r1, [pc, #48]	@ (800282c <__NVIC_SetPriority+0x4c>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	0112      	lsls	r2, r2, #4
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	440b      	add	r3, r1
 8002804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002808:	e00a      	b.n	8002820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	b2da      	uxtb	r2, r3
 800280e:	4908      	ldr	r1, [pc, #32]	@ (8002830 <__NVIC_SetPriority+0x50>)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3b04      	subs	r3, #4
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	440b      	add	r3, r1
 800281e:	761a      	strb	r2, [r3, #24]
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002834:	b480      	push	{r7}
 8002836:	b089      	sub	sp, #36	@ 0x24
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f1c3 0307 	rsb	r3, r3, #7
 800284e:	2b04      	cmp	r3, #4
 8002850:	bf28      	it	cs
 8002852:	2304      	movcs	r3, #4
 8002854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	3304      	adds	r3, #4
 800285a:	2b06      	cmp	r3, #6
 800285c:	d902      	bls.n	8002864 <NVIC_EncodePriority+0x30>
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3b03      	subs	r3, #3
 8002862:	e000      	b.n	8002866 <NVIC_EncodePriority+0x32>
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	fa02 f303 	lsl.w	r3, r2, r3
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	401a      	ands	r2, r3
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800287c:	f04f 31ff 	mov.w	r1, #4294967295
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa01 f303 	lsl.w	r3, r1, r3
 8002886:	43d9      	mvns	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	4313      	orrs	r3, r2
         );
}
 800288e:	4618      	mov	r0, r3
 8002890:	3724      	adds	r7, #36	@ 0x24
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
	...

0800289c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3b01      	subs	r3, #1
 80028a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ac:	d301      	bcc.n	80028b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <SysTick_Config+0x40>)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ba:	210f      	movs	r1, #15
 80028bc:	f04f 30ff 	mov.w	r0, #4294967295
 80028c0:	f7ff ff8e 	bl	80027e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c4:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <SysTick_Config+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ca:	4b04      	ldr	r3, [pc, #16]	@ (80028dc <SysTick_Config+0x40>)
 80028cc:	2207      	movs	r2, #7
 80028ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	e000e010 	.word	0xe000e010

080028e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff ff29 	bl	8002740 <__NVIC_SetPriorityGrouping>
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}

080028f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b086      	sub	sp, #24
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	4603      	mov	r3, r0
 80028fe:	60b9      	str	r1, [r7, #8]
 8002900:	607a      	str	r2, [r7, #4]
 8002902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002904:	2300      	movs	r3, #0
 8002906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002908:	f7ff ff3e 	bl	8002788 <__NVIC_GetPriorityGrouping>
 800290c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6978      	ldr	r0, [r7, #20]
 8002914:	f7ff ff8e 	bl	8002834 <NVIC_EncodePriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff ff5d 	bl	80027e0 <__NVIC_SetPriority>
}
 8002926:	bf00      	nop
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff31 	bl	80027a4 <__NVIC_EnableIRQ>
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ffa2 	bl	800289c <SysTick_Config>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
	...

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e17f      	b.n	8002c74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8171 	beq.w	8002c6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d005      	beq.n	80029a4 <HAL_GPIO_Init+0x40>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d130      	bne.n	8002a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029da:	2201      	movs	r2, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0201 	and.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d118      	bne.n	8002a44 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a18:	2201      	movs	r2, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4013      	ands	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	08db      	lsrs	r3, r3, #3
 8002a2e:	f003 0201 	and.w	r2, r3, #1
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d017      	beq.n	8002a80 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d123      	bne.n	8002ad4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4013      	ands	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	691a      	ldr	r2, [r3, #16]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	6939      	ldr	r1, [r7, #16]
 8002ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0203 	and.w	r2, r3, #3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80ac 	beq.w	8002c6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b16:	4b5f      	ldr	r3, [pc, #380]	@ (8002c94 <HAL_GPIO_Init+0x330>)
 8002b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1a:	4a5e      	ldr	r2, [pc, #376]	@ (8002c94 <HAL_GPIO_Init+0x330>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b22:	4b5c      	ldr	r3, [pc, #368]	@ (8002c94 <HAL_GPIO_Init+0x330>)
 8002b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60bb      	str	r3, [r7, #8]
 8002b2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b2e:	4a5a      	ldr	r2, [pc, #360]	@ (8002c98 <HAL_GPIO_Init+0x334>)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	089b      	lsrs	r3, r3, #2
 8002b34:	3302      	adds	r3, #2
 8002b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	220f      	movs	r2, #15
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43db      	mvns	r3, r3
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x242>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c9c <HAL_GPIO_Init+0x338>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x23e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca0 <HAL_GPIO_Init+0x33c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x23a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ca4 <HAL_GPIO_Init+0x340>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x236>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	@ (8002ca8 <HAL_GPIO_Init+0x344>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x232>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	@ (8002cac <HAL_GPIO_Init+0x348>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x22e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	@ (8002cb0 <HAL_GPIO_Init+0x34c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x22a>
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	e00c      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b8e:	2307      	movs	r3, #7
 8002b90:	e00a      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b92:	2305      	movs	r3, #5
 8002b94:	e008      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b96:	2304      	movs	r3, #4
 8002b98:	e006      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e004      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e002      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_GPIO_Init+0x244>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	697a      	ldr	r2, [r7, #20]
 8002baa:	f002 0203 	and.w	r2, r2, #3
 8002bae:	0092      	lsls	r2, r2, #2
 8002bb0:	4093      	lsls	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bb8:	4937      	ldr	r1, [pc, #220]	@ (8002c98 <HAL_GPIO_Init+0x334>)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	089b      	lsrs	r3, r3, #2
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	43db      	mvns	r3, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bea:	4a32      	ldr	r2, [pc, #200]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bf0:	4b30      	ldr	r3, [pc, #192]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	43db      	mvns	r3, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c14:	4a27      	ldr	r2, [pc, #156]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c1a:	4b26      	ldr	r3, [pc, #152]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c44:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4013      	ands	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c68:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <HAL_GPIO_Init+0x350>)
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	f47f ae78 	bne.w	8002974 <HAL_GPIO_Init+0x10>
  }
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	371c      	adds	r7, #28
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	48000400 	.word	0x48000400
 8002ca0:	48000800 	.word	0x48000800
 8002ca4:	48000c00 	.word	0x48000c00
 8002ca8:	48001000 	.word	0x48001000
 8002cac:	48001400 	.word	0x48001400
 8002cb0:	48001800 	.word	0x48001800
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002cbc:	4b04      	ldr	r3, [pc, #16]	@ (8002cd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40007000 	.word	0x40007000

08002cd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ce2:	d130      	bne.n	8002d46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ce4:	4b23      	ldr	r3, [pc, #140]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf0:	d038      	beq.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cf2:	4b20      	ldr	r3, [pc, #128]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cfc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d02:	4b1d      	ldr	r3, [pc, #116]	@ (8002d78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2232      	movs	r2, #50	@ 0x32
 8002d08:	fb02 f303 	mul.w	r3, r2, r3
 8002d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8002d7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0c9b      	lsrs	r3, r3, #18
 8002d14:	3301      	adds	r3, #1
 8002d16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d18:	e002      	b.n	8002d20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d20:	4b14      	ldr	r3, [pc, #80]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d22:	695b      	ldr	r3, [r3, #20]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d2c:	d102      	bne.n	8002d34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f2      	bne.n	8002d1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d34:	4b0f      	ldr	r3, [pc, #60]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d40:	d110      	bne.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e00f      	b.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d52:	d007      	beq.n	8002d64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d54:	4b07      	ldr	r3, [pc, #28]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d5c:	4a05      	ldr	r2, [pc, #20]	@ (8002d74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40007000 	.word	0x40007000
 8002d78:	20000038 	.word	0x20000038
 8002d7c:	431bde83 	.word	0x431bde83

08002d80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e3ca      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d92:	4b97      	ldr	r3, [pc, #604]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d9c:	4b94      	ldr	r3, [pc, #592]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0303 	and.w	r3, r3, #3
 8002da4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0310 	and.w	r3, r3, #16
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f000 80e4 	beq.w	8002f7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_RCC_OscConfig+0x4a>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	f040 808b 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	f040 8087 	bne.w	8002ed8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dca:	4b89      	ldr	r3, [pc, #548]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d005      	beq.n	8002de2 <HAL_RCC_OscConfig+0x62>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e3a2      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	4b82      	ldr	r3, [pc, #520]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_RCC_OscConfig+0x7c>
 8002df2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dfa:	e005      	b.n	8002e08 <HAL_RCC_OscConfig+0x88>
 8002dfc:	4b7c      	ldr	r3, [pc, #496]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d223      	bcs.n	8002e54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a1b      	ldr	r3, [r3, #32]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f000 fd55 	bl	80038c0 <RCC_SetFlashLatencyFromMSIRange>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e383      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e20:	4b73      	ldr	r3, [pc, #460]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a72      	ldr	r2, [pc, #456]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e26:	f043 0308 	orr.w	r3, r3, #8
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	4b70      	ldr	r3, [pc, #448]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	496d      	ldr	r1, [pc, #436]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	4968      	ldr	r1, [pc, #416]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
 8002e52:	e025      	b.n	8002ea0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e54:	4b66      	ldr	r3, [pc, #408]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a65      	ldr	r2, [pc, #404]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	f043 0308 	orr.w	r3, r3, #8
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	4b63      	ldr	r3, [pc, #396]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	4960      	ldr	r1, [pc, #384]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e72:	4b5f      	ldr	r3, [pc, #380]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	495b      	ldr	r1, [pc, #364]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	4618      	mov	r0, r3
 8002e92:	f000 fd15 	bl	80038c0 <RCC_SetFlashLatencyFromMSIRange>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e343      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ea0:	f000 fc4a 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	4b52      	ldr	r3, [pc, #328]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	4950      	ldr	r1, [pc, #320]	@ (8002ff4 <HAL_RCC_OscConfig+0x274>)
 8002eb2:	5ccb      	ldrb	r3, [r1, r3]
 8002eb4:	f003 031f 	and.w	r3, r3, #31
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	4a4e      	ldr	r2, [pc, #312]	@ (8002ff8 <HAL_RCC_OscConfig+0x278>)
 8002ebe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ec0:	4b4e      	ldr	r3, [pc, #312]	@ (8002ffc <HAL_RCC_OscConfig+0x27c>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7fe fc3b 	bl	8001740 <HAL_InitTick>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d052      	beq.n	8002f7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002ed4:	7bfb      	ldrb	r3, [r7, #15]
 8002ed6:	e327      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d032      	beq.n	8002f46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ee0:	4b43      	ldr	r3, [pc, #268]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a42      	ldr	r2, [pc, #264]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002eec:	f7fe fc78 	bl	80017e0 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fc74 	bl	80017e0 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e310      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f06:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f12:	4b37      	ldr	r3, [pc, #220]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a36      	ldr	r2, [pc, #216]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f18:	f043 0308 	orr.w	r3, r3, #8
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4931      	ldr	r1, [pc, #196]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f30:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	492c      	ldr	r1, [pc, #176]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
 8002f44:	e01a      	b.n	8002f7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f46:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a29      	ldr	r2, [pc, #164]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f4c:	f023 0301 	bic.w	r3, r3, #1
 8002f50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f52:	f7fe fc45 	bl	80017e0 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f5a:	f7fe fc41 	bl	80017e0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e2dd      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002f6c:	4b20      	ldr	r3, [pc, #128]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f0      	bne.n	8002f5a <HAL_RCC_OscConfig+0x1da>
 8002f78:	e000      	b.n	8002f7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d074      	beq.n	8003072 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d005      	beq.n	8002f9a <HAL_RCC_OscConfig+0x21a>
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b0c      	cmp	r3, #12
 8002f92:	d10e      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d10b      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d064      	beq.n	8003070 <HAL_RCC_OscConfig+0x2f0>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d160      	bne.n	8003070 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e2ba      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fba:	d106      	bne.n	8002fca <HAL_RCC_OscConfig+0x24a>
 8002fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	e026      	b.n	8003018 <HAL_RCC_OscConfig+0x298>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002fd2:	d115      	bne.n	8003000 <HAL_RCC_OscConfig+0x280>
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a05      	ldr	r2, [pc, #20]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002fda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fde:	6013      	str	r3, [r2, #0]
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a02      	ldr	r2, [pc, #8]	@ (8002ff0 <HAL_RCC_OscConfig+0x270>)
 8002fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	e014      	b.n	8003018 <HAL_RCC_OscConfig+0x298>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08007c54 	.word	0x08007c54
 8002ff8:	20000038 	.word	0x20000038
 8002ffc:	2000003c 	.word	0x2000003c
 8003000:	4ba0      	ldr	r3, [pc, #640]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a9f      	ldr	r2, [pc, #636]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b9d      	ldr	r3, [pc, #628]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a9c      	ldr	r2, [pc, #624]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe fbde 	bl	80017e0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fbda 	bl	80017e0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	@ 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e276      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800303a:	4b92      	ldr	r3, [pc, #584]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x2a8>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe fbca 	bl	80017e0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fbc6 	bl	80017e0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	@ 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e262      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003062:	4b88      	ldr	r3, [pc, #544]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0x2d0>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d060      	beq.n	8003140 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	2b04      	cmp	r3, #4
 8003082:	d005      	beq.n	8003090 <HAL_RCC_OscConfig+0x310>
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	2b0c      	cmp	r3, #12
 8003088:	d119      	bne.n	80030be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b02      	cmp	r3, #2
 800308e:	d116      	bne.n	80030be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003090:	4b7c      	ldr	r3, [pc, #496]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d005      	beq.n	80030a8 <HAL_RCC_OscConfig+0x328>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e23f      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b76      	ldr	r3, [pc, #472]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	061b      	lsls	r3, r3, #24
 80030b6:	4973      	ldr	r1, [pc, #460]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030bc:	e040      	b.n	8003140 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d023      	beq.n	800310e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fb85 	bl	80017e0 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030da:	f7fe fb81 	bl	80017e0 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e21d      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ec:	4b65      	ldr	r3, [pc, #404]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f8:	4b62      	ldr	r3, [pc, #392]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	061b      	lsls	r3, r3, #24
 8003106:	495f      	ldr	r1, [pc, #380]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
 800310c:	e018      	b.n	8003140 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800310e:	4b5d      	ldr	r3, [pc, #372]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a5c      	ldr	r2, [pc, #368]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003118:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fb61 	bl	80017e0 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fb5d 	bl	80017e0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1f9      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003134:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313c:	2b00      	cmp	r3, #0
 800313e:	d1f0      	bne.n	8003122 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	2b00      	cmp	r3, #0
 800314a:	d03c      	beq.n	80031c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01c      	beq.n	800318e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003154:	4b4b      	ldr	r3, [pc, #300]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003156:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800315a:	4a4a      	ldr	r2, [pc, #296]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe fb3c 	bl	80017e0 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fe fb38 	bl	80017e0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1d4      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800317e:	4b41      	ldr	r3, [pc, #260]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003180:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ef      	beq.n	800316c <HAL_RCC_OscConfig+0x3ec>
 800318c:	e01b      	b.n	80031c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800318e:	4b3d      	ldr	r3, [pc, #244]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003190:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003194:	4a3b      	ldr	r2, [pc, #236]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319e:	f7fe fb1f 	bl	80017e0 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031a4:	e008      	b.n	80031b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031a6:	f7fe fb1b 	bl	80017e0 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e1b7      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031b8:	4b32      	ldr	r3, [pc, #200]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80031ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d1ef      	bne.n	80031a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0304 	and.w	r3, r3, #4
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a6 	beq.w	8003320 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80031d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80031da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e4:	4b27      	ldr	r3, [pc, #156]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80031e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e8:	4a26      	ldr	r2, [pc, #152]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80031ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f0:	4b24      	ldr	r3, [pc, #144]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003200:	4b21      	ldr	r3, [pc, #132]	@ (8003288 <HAL_RCC_OscConfig+0x508>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003208:	2b00      	cmp	r3, #0
 800320a:	d118      	bne.n	800323e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800320c:	4b1e      	ldr	r3, [pc, #120]	@ (8003288 <HAL_RCC_OscConfig+0x508>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1d      	ldr	r2, [pc, #116]	@ (8003288 <HAL_RCC_OscConfig+0x508>)
 8003212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003216:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003218:	f7fe fae2 	bl	80017e0 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003220:	f7fe fade 	bl	80017e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e17a      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003232:	4b15      	ldr	r3, [pc, #84]	@ (8003288 <HAL_RCC_OscConfig+0x508>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d108      	bne.n	8003258 <HAL_RCC_OscConfig+0x4d8>
 8003246:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800324c:	4a0d      	ldr	r2, [pc, #52]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003256:	e029      	b.n	80032ac <HAL_RCC_OscConfig+0x52c>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b05      	cmp	r3, #5
 800325e:	d115      	bne.n	800328c <HAL_RCC_OscConfig+0x50c>
 8003260:	4b08      	ldr	r3, [pc, #32]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003266:	4a07      	ldr	r2, [pc, #28]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003268:	f043 0304 	orr.w	r3, r3, #4
 800326c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003270:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003276:	4a03      	ldr	r2, [pc, #12]	@ (8003284 <HAL_RCC_OscConfig+0x504>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003280:	e014      	b.n	80032ac <HAL_RCC_OscConfig+0x52c>
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
 800328c:	4b9c      	ldr	r3, [pc, #624]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	4a9b      	ldr	r2, [pc, #620]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800329c:	4b98      	ldr	r3, [pc, #608]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032a2:	4a97      	ldr	r2, [pc, #604]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80032a4:	f023 0304 	bic.w	r3, r3, #4
 80032a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d016      	beq.n	80032e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b4:	f7fe fa94 	bl	80017e0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ba:	e00a      	b.n	80032d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032bc:	f7fe fa90 	bl	80017e0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e12a      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0ed      	beq.n	80032bc <HAL_RCC_OscConfig+0x53c>
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e2:	f7fe fa7d 	bl	80017e0 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032e8:	e00a      	b.n	8003300 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ea:	f7fe fa79 	bl	80017e0 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e113      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003300:	4b7f      	ldr	r3, [pc, #508]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ed      	bne.n	80032ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800330e:	7ffb      	ldrb	r3, [r7, #31]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d105      	bne.n	8003320 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003314:	4b7a      	ldr	r3, [pc, #488]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003318:	4a79      	ldr	r2, [pc, #484]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 800331a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800331e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80fe 	beq.w	8003526 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332e:	2b02      	cmp	r3, #2
 8003330:	f040 80d0 	bne.w	80034d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003334:	4b72      	ldr	r3, [pc, #456]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0203 	and.w	r2, r3, #3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003344:	429a      	cmp	r2, r3
 8003346:	d130      	bne.n	80033aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003352:	3b01      	subs	r3, #1
 8003354:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003356:	429a      	cmp	r2, r3
 8003358:	d127      	bne.n	80033aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003364:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d11f      	bne.n	80033aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003374:	2a07      	cmp	r2, #7
 8003376:	bf14      	ite	ne
 8003378:	2201      	movne	r2, #1
 800337a:	2200      	moveq	r2, #0
 800337c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800337e:	4293      	cmp	r3, r2
 8003380:	d113      	bne.n	80033aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338c:	085b      	lsrs	r3, r3, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d109      	bne.n	80033aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	3b01      	subs	r3, #1
 80033a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d06e      	beq.n	8003488 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	2b0c      	cmp	r3, #12
 80033ae:	d069      	beq.n	8003484 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80033b0:	4b53      	ldr	r3, [pc, #332]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80033bc:	4b50      	ldr	r3, [pc, #320]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0ad      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80033cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a4b      	ldr	r2, [pc, #300]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80033d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d8:	f7fe fa02 	bl	80017e0 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fe f9fe 	bl	80017e0 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e09a      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f2:	4b43      	ldr	r3, [pc, #268]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1f0      	bne.n	80033e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033fe:	4b40      	ldr	r3, [pc, #256]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	4b40      	ldr	r3, [pc, #256]	@ (8003504 <HAL_RCC_OscConfig+0x784>)
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800340e:	3a01      	subs	r2, #1
 8003410:	0112      	lsls	r2, r2, #4
 8003412:	4311      	orrs	r1, r2
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003418:	0212      	lsls	r2, r2, #8
 800341a:	4311      	orrs	r1, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003420:	0852      	lsrs	r2, r2, #1
 8003422:	3a01      	subs	r2, #1
 8003424:	0552      	lsls	r2, r2, #21
 8003426:	4311      	orrs	r1, r2
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800342c:	0852      	lsrs	r2, r2, #1
 800342e:	3a01      	subs	r2, #1
 8003430:	0652      	lsls	r2, r2, #25
 8003432:	4311      	orrs	r1, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003438:	0912      	lsrs	r2, r2, #4
 800343a:	0452      	lsls	r2, r2, #17
 800343c:	430a      	orrs	r2, r1
 800343e:	4930      	ldr	r1, [pc, #192]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003440:	4313      	orrs	r3, r2
 8003442:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003444:	4b2e      	ldr	r3, [pc, #184]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2d      	ldr	r2, [pc, #180]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 800344a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800344e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003450:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	4a2a      	ldr	r2, [pc, #168]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003456:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800345a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800345c:	f7fe f9c0 	bl	80017e0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe f9bc 	bl	80017e0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e058      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003476:	4b22      	ldr	r3, [pc, #136]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003482:	e050      	b.n	8003526 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04f      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003488:	4b1d      	ldr	r3, [pc, #116]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d148      	bne.n	8003526 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003494:	4b1a      	ldr	r3, [pc, #104]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a19      	ldr	r2, [pc, #100]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 800349a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800349e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a0:	4b17      	ldr	r3, [pc, #92]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4a16      	ldr	r2, [pc, #88]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80034a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80034ac:	f7fe f998 	bl	80017e0 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b4:	f7fe f994 	bl	80017e0 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e030      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0x734>
 80034d2:	e028      	b.n	8003526 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	2b0c      	cmp	r3, #12
 80034d8:	d023      	beq.n	8003522 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b09      	ldr	r3, [pc, #36]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a08      	ldr	r2, [pc, #32]	@ (8003500 <HAL_RCC_OscConfig+0x780>)
 80034e0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7fe f97b 	bl	80017e0 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034ec:	e00c      	b.n	8003508 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ee:	f7fe f977 	bl	80017e0 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d905      	bls.n	8003508 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e013      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
 8003500:	40021000 	.word	0x40021000
 8003504:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003508:	4b09      	ldr	r3, [pc, #36]	@ (8003530 <HAL_RCC_OscConfig+0x7b0>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1ec      	bne.n	80034ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003514:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <HAL_RCC_OscConfig+0x7b0>)
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	4905      	ldr	r1, [pc, #20]	@ (8003530 <HAL_RCC_OscConfig+0x7b0>)
 800351a:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_OscConfig+0x7b4>)
 800351c:	4013      	ands	r3, r2
 800351e:	60cb      	str	r3, [r1, #12]
 8003520:	e001      	b.n	8003526 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40021000 	.word	0x40021000
 8003534:	feeefffc 	.word	0xfeeefffc

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0e7      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b75      	ldr	r3, [pc, #468]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b72      	ldr	r3, [pc, #456]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0207 	bic.w	r2, r3, #7
 8003562:	4970      	ldr	r1, [pc, #448]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b6e      	ldr	r3, [pc, #440]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0cf      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d010      	beq.n	80035aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	4b66      	ldr	r3, [pc, #408]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003594:	429a      	cmp	r2, r3
 8003596:	d908      	bls.n	80035aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003598:	4b63      	ldr	r3, [pc, #396]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4960      	ldr	r1, [pc, #384]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80035a6:	4313      	orrs	r3, r2
 80035a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d04c      	beq.n	8003650 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b03      	cmp	r3, #3
 80035bc:	d107      	bne.n	80035ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035be:	4b5a      	ldr	r3, [pc, #360]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d121      	bne.n	800360e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0a6      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035d6:	4b54      	ldr	r3, [pc, #336]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d115      	bne.n	800360e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e09a      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e08e      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e086      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b46      	ldr	r3, [pc, #280]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4943      	ldr	r1, [pc, #268]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003620:	f7fe f8de 	bl	80017e0 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fe f8da 	bl	80017e0 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e06e      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b3a      	ldr	r3, [pc, #232]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d010      	beq.n	800367e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003668:	429a      	cmp	r2, r3
 800366a:	d208      	bcs.n	800367e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b2e      	ldr	r3, [pc, #184]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	492b      	ldr	r1, [pc, #172]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800367e:	4b29      	ldr	r3, [pc, #164]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	683a      	ldr	r2, [r7, #0]
 8003688:	429a      	cmp	r2, r3
 800368a:	d210      	bcs.n	80036ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368c:	4b25      	ldr	r3, [pc, #148]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 0207 	bic.w	r2, r3, #7
 8003694:	4923      	ldr	r1, [pc, #140]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369c:	4b21      	ldr	r3, [pc, #132]	@ (8003724 <HAL_RCC_ClockConfig+0x1ec>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d001      	beq.n	80036ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e036      	b.n	800371c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d008      	beq.n	80036cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	4918      	ldr	r1, [pc, #96]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80036c8:	4313      	orrs	r3, r2
 80036ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0308 	and.w	r3, r3, #8
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036d8:	4b13      	ldr	r3, [pc, #76]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	00db      	lsls	r3, r3, #3
 80036e6:	4910      	ldr	r1, [pc, #64]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ec:	f000 f824 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036f0:	4602      	mov	r2, r0
 80036f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003728 <HAL_RCC_ClockConfig+0x1f0>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	490b      	ldr	r1, [pc, #44]	@ (800372c <HAL_RCC_ClockConfig+0x1f4>)
 80036fe:	5ccb      	ldrb	r3, [r1, r3]
 8003700:	f003 031f 	and.w	r3, r3, #31
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	4a09      	ldr	r2, [pc, #36]	@ (8003730 <HAL_RCC_ClockConfig+0x1f8>)
 800370a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_ClockConfig+0x1fc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7fe f815 	bl	8001740 <HAL_InitTick>
 8003716:	4603      	mov	r3, r0
 8003718:	72fb      	strb	r3, [r7, #11]

  return status;
 800371a:	7afb      	ldrb	r3, [r7, #11]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40022000 	.word	0x40022000
 8003728:	40021000 	.word	0x40021000
 800372c:	08007c54 	.word	0x08007c54
 8003730:	20000038 	.word	0x20000038
 8003734:	2000003c 	.word	0x2000003c

08003738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	@ 0x24
 800373c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61fb      	str	r3, [r7, #28]
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003746:	4b3e      	ldr	r3, [pc, #248]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 030c 	and.w	r3, r3, #12
 800374e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003750:	4b3b      	ldr	r3, [pc, #236]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x34>
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0c      	cmp	r3, #12
 8003764:	d121      	bne.n	80037aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d11e      	bne.n	80037aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800376c:	4b34      	ldr	r3, [pc, #208]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003778:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 800377a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 030f 	and.w	r3, r3, #15
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e005      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003788:	4b2d      	ldr	r3, [pc, #180]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003794:	4a2b      	ldr	r2, [pc, #172]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800379c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10d      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037a8:	e00a      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d102      	bne.n	80037b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037b0:	4b25      	ldr	r3, [pc, #148]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x110>)
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e004      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b08      	cmp	r3, #8
 80037ba:	d101      	bne.n	80037c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037bc:	4b23      	ldr	r3, [pc, #140]	@ (800384c <HAL_RCC_GetSysClockFreq+0x114>)
 80037be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0c      	cmp	r3, #12
 80037c4:	d134      	bne.n	8003830 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d003      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0xa6>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d003      	beq.n	80037e4 <HAL_RCC_GetSysClockFreq+0xac>
 80037dc:	e005      	b.n	80037ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80037de:	4b1a      	ldr	r3, [pc, #104]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x110>)
 80037e0:	617b      	str	r3, [r7, #20]
      break;
 80037e2:	e005      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <HAL_RCC_GetSysClockFreq+0x114>)
 80037e6:	617b      	str	r3, [r7, #20]
      break;
 80037e8:	e002      	b.n	80037f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	617b      	str	r3, [r7, #20]
      break;
 80037ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037f0:	4b13      	ldr	r3, [pc, #76]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	091b      	lsrs	r3, r3, #4
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	3301      	adds	r3, #1
 80037fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037fe:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	fb03 f202 	mul.w	r2, r3, r2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003816:	4b0a      	ldr	r3, [pc, #40]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x108>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	0e5b      	lsrs	r3, r3, #25
 800381c:	f003 0303 	and.w	r3, r3, #3
 8003820:	3301      	adds	r3, #1
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	fbb2 f3f3 	udiv	r3, r2, r3
 800382e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003830:	69bb      	ldr	r3, [r7, #24]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3724      	adds	r7, #36	@ 0x24
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000
 8003844:	08007c6c 	.word	0x08007c6c
 8003848:	00f42400 	.word	0x00f42400
 800384c:	007a1200 	.word	0x007a1200

08003850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000038 	.word	0x20000038

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b06      	ldr	r3, [pc, #24]	@ (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a1b      	lsrs	r3, r3, #8
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4904      	ldr	r1, [pc, #16]	@ (8003890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	08007c64 	.word	0x08007c64

08003894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003898:	f7ff ffda 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 800389c:	4602      	mov	r2, r0
 800389e:	4b06      	ldr	r3, [pc, #24]	@ (80038b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	0adb      	lsrs	r3, r3, #11
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	4904      	ldr	r1, [pc, #16]	@ (80038bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038aa:	5ccb      	ldrb	r3, [r1, r3]
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	40021000 	.word	0x40021000
 80038bc:	08007c64 	.word	0x08007c64

080038c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b086      	sub	sp, #24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038d8:	f7ff f9ee 	bl	8002cb8 <HAL_PWREx_GetVoltageRange>
 80038dc:	6178      	str	r0, [r7, #20]
 80038de:	e014      	b.n	800390a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038e0:	4b25      	ldr	r3, [pc, #148]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	4a24      	ldr	r2, [pc, #144]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80038ec:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038f8:	f7ff f9de 	bl	8002cb8 <HAL_PWREx_GetVoltageRange>
 80038fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003902:	4a1d      	ldr	r2, [pc, #116]	@ (8003978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003904:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003908:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003910:	d10b      	bne.n	800392a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b80      	cmp	r3, #128	@ 0x80
 8003916:	d919      	bls.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2ba0      	cmp	r3, #160	@ 0xa0
 800391c:	d902      	bls.n	8003924 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800391e:	2302      	movs	r3, #2
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	e013      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003924:	2301      	movs	r3, #1
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e010      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b80      	cmp	r3, #128	@ 0x80
 800392e:	d902      	bls.n	8003936 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003930:	2303      	movs	r3, #3
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e00a      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b80      	cmp	r3, #128	@ 0x80
 800393a:	d102      	bne.n	8003942 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800393c:	2302      	movs	r3, #2
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	e004      	b.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b70      	cmp	r3, #112	@ 0x70
 8003946:	d101      	bne.n	800394c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003948:	2301      	movs	r3, #1
 800394a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800394c:	4b0b      	ldr	r3, [pc, #44]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 0207 	bic.w	r2, r3, #7
 8003954:	4909      	ldr	r1, [pc, #36]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800395c:	4b07      	ldr	r3, [pc, #28]	@ (800397c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	429a      	cmp	r2, r3
 8003968:	d001      	beq.n	800396e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	40021000 	.word	0x40021000
 800397c:	40022000 	.word	0x40022000

08003980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003988:	2300      	movs	r3, #0
 800398a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800398c:	2300      	movs	r3, #0
 800398e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003998:	2b00      	cmp	r3, #0
 800399a:	d041      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039a4:	d02a      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80039a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80039aa:	d824      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b0:	d008      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80039b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80039b6:	d81e      	bhi.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00a      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80039bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80039c0:	d010      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039c2:	e018      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039c4:	4b86      	ldr	r3, [pc, #536]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a85      	ldr	r2, [pc, #532]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ce:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039d0:	e015      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2100      	movs	r1, #0
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fabb 	bl	8003f54 <RCCEx_PLLSAI1_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039e2:	e00c      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3320      	adds	r3, #32
 80039e8:	2100      	movs	r1, #0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 fba6 	bl	800413c <RCCEx_PLLSAI2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039f4:	e003      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	74fb      	strb	r3, [r7, #19]
      break;
 80039fa:	e000      	b.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80039fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039fe:	7cfb      	ldrb	r3, [r7, #19]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a04:	4b76      	ldr	r3, [pc, #472]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a12:	4973      	ldr	r1, [pc, #460]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003a1a:	e001      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1c:	7cfb      	ldrb	r3, [r7, #19]
 8003a1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d041      	beq.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a30:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a34:	d02a      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003a36:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003a3a:	d824      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a3c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a40:	d008      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003a46:	d81e      	bhi.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00a      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a50:	d010      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003a52:	e018      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003a54:	4b62      	ldr	r3, [pc, #392]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	4a61      	ldr	r2, [pc, #388]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a60:	e015      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	3304      	adds	r3, #4
 8003a66:	2100      	movs	r1, #0
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fa73 	bl	8003f54 <RCCEx_PLLSAI1_Config>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a72:	e00c      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3320      	adds	r3, #32
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb5e 	bl	800413c <RCCEx_PLLSAI2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a84:	e003      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	74fb      	strb	r3, [r7, #19]
      break;
 8003a8a:	e000      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a8e:	7cfb      	ldrb	r3, [r7, #19]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a94:	4b52      	ldr	r3, [pc, #328]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003aa2:	494f      	ldr	r1, [pc, #316]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003aaa:	e001      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80a0 	beq.w	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ac2:	4b47      	ldr	r3, [pc, #284]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00d      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad8:	4b41      	ldr	r3, [pc, #260]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003adc:	4a40      	ldr	r2, [pc, #256]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aec:	60bb      	str	r3, [r7, #8]
 8003aee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003af0:	2301      	movs	r3, #1
 8003af2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af4:	4b3b      	ldr	r3, [pc, #236]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a3a      	ldr	r2, [pc, #232]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003afa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b00:	f7fd fe6e 	bl	80017e0 <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b06:	e009      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fd fe6a 	bl	80017e0 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d902      	bls.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	74fb      	strb	r3, [r7, #19]
        break;
 8003b1a:	e005      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003b1c:	4b31      	ldr	r3, [pc, #196]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d0ef      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d15c      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b2e:	4b2c      	ldr	r3, [pc, #176]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d01f      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d019      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b4c:	4b24      	ldr	r3, [pc, #144]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b58:	4b21      	ldr	r3, [pc, #132]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b5e:	4a20      	ldr	r2, [pc, #128]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b68:	4b1d      	ldr	r3, [pc, #116]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b78:	4a19      	ldr	r2, [pc, #100]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8a:	f7fd fe29 	bl	80017e0 <HAL_GetTick>
 8003b8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b90:	e00b      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b92:	f7fd fe25 	bl	80017e0 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d902      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ba8:	e006      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003baa:	4b0d      	ldr	r3, [pc, #52]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ec      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003bb8:	7cfb      	ldrb	r3, [r7, #19]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbe:	4b08      	ldr	r3, [pc, #32]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bce:	4904      	ldr	r1, [pc, #16]	@ (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bd6:	e009      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bd8:	7cfb      	ldrb	r3, [r7, #19]
 8003bda:	74bb      	strb	r3, [r7, #18]
 8003bdc:	e006      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	7cfb      	ldrb	r3, [r7, #19]
 8003bea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bec:	7c7b      	ldrb	r3, [r7, #17]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf2:	4b9e      	ldr	r3, [pc, #632]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bf6:	4a9d      	ldr	r2, [pc, #628]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bfc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c0a:	4b98      	ldr	r3, [pc, #608]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c10:	f023 0203 	bic.w	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	4994      	ldr	r1, [pc, #592]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00a      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c32:	f023 020c 	bic.w	r2, r3, #12
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3a:	498c      	ldr	r1, [pc, #560]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c4e:	4b87      	ldr	r3, [pc, #540]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	4983      	ldr	r1, [pc, #524]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c70:	4b7e      	ldr	r3, [pc, #504]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c76:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	497b      	ldr	r1, [pc, #492]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0310 	and.w	r3, r3, #16
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c92:	4b76      	ldr	r3, [pc, #472]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ca0:	4972      	ldr	r1, [pc, #456]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00a      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cb4:	4b6d      	ldr	r3, [pc, #436]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cc2:	496a      	ldr	r1, [pc, #424]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cd6:	4b65      	ldr	r3, [pc, #404]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce4:	4961      	ldr	r1, [pc, #388]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00a      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf8:	4b5c      	ldr	r3, [pc, #368]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d06:	4959      	ldr	r1, [pc, #356]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00a      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d1a:	4b54      	ldr	r3, [pc, #336]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d20:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d28:	4950      	ldr	r1, [pc, #320]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	4948      	ldr	r1, [pc, #288]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00a      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5e:	4b43      	ldr	r3, [pc, #268]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d64:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6c:	493f      	ldr	r1, [pc, #252]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d028      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d80:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d86:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8e:	4937      	ldr	r1, [pc, #220]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d9e:	d106      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003da0:	4b32      	ldr	r3, [pc, #200]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	4a31      	ldr	r2, [pc, #196]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003daa:	60d3      	str	r3, [r2, #12]
 8003dac:	e011      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003db2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003db6:	d10c      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f8c8 	bl	8003f54 <RCCEx_PLLSAI1_Config>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003dc8:	7cfb      	ldrb	r3, [r7, #19]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003dce:	7cfb      	ldrb	r3, [r7, #19]
 8003dd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d028      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dde:	4b23      	ldr	r3, [pc, #140]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003de4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	491f      	ldr	r1, [pc, #124]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003df8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	4a1a      	ldr	r2, [pc, #104]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e08:	60d3      	str	r3, [r2, #12]
 8003e0a:	e011      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 f899 	bl	8003f54 <RCCEx_PLLSAI1_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d02b      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e4a:	4908      	ldr	r1, [pc, #32]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a02      	ldr	r2, [pc, #8]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
 8003e68:	e014      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f867 	bl	8003f54 <RCCEx_PLLSAI1_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e8a:	7cfb      	ldrb	r3, [r7, #19]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e90:	7cfb      	ldrb	r3, [r7, #19]
 8003e92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d02f      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eae:	4928      	ldr	r1, [pc, #160]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ebe:	d10d      	bne.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 f844 	bl	8003f54 <RCCEx_PLLSAI1_Config>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ed0:	7cfb      	ldrb	r3, [r7, #19]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d014      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ed6:	7cfb      	ldrb	r3, [r7, #19]
 8003ed8:	74bb      	strb	r3, [r7, #18]
 8003eda:	e011      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ee4:	d10c      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3320      	adds	r3, #32
 8003eea:	2102      	movs	r1, #2
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 f925 	bl	800413c <RCCEx_PLLSAI2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ef6:	7cfb      	ldrb	r3, [r7, #19]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003f0c:	4b10      	ldr	r3, [pc, #64]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f1a:	490d      	ldr	r1, [pc, #52]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f34:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f3e:	4904      	ldr	r1, [pc, #16]	@ (8003f50 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f46:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	40021000 	.word	0x40021000

08003f54 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f62:	4b75      	ldr	r3, [pc, #468]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d018      	beq.n	8003fa0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f6e:	4b72      	ldr	r3, [pc, #456]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 0203 	and.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d10d      	bne.n	8003f9a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
       ||
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d009      	beq.n	8003f9a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f86:	4b6c      	ldr	r3, [pc, #432]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	091b      	lsrs	r3, r3, #4
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
       ||
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d047      	beq.n	800402a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	73fb      	strb	r3, [r7, #15]
 8003f9e:	e044      	b.n	800402a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d018      	beq.n	8003fda <RCCEx_PLLSAI1_Config+0x86>
 8003fa8:	2b03      	cmp	r3, #3
 8003faa:	d825      	bhi.n	8003ff8 <RCCEx_PLLSAI1_Config+0xa4>
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d002      	beq.n	8003fb6 <RCCEx_PLLSAI1_Config+0x62>
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d009      	beq.n	8003fc8 <RCCEx_PLLSAI1_Config+0x74>
 8003fb4:	e020      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fb6:	4b60      	ldr	r3, [pc, #384]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d11d      	bne.n	8003ffe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc6:	e01a      	b.n	8003ffe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fc8:	4b5b      	ldr	r3, [pc, #364]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d116      	bne.n	8004002 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd8:	e013      	b.n	8004002 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fda:	4b57      	ldr	r3, [pc, #348]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10f      	bne.n	8004006 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fe6:	4b54      	ldr	r3, [pc, #336]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ff6:	e006      	b.n	8004006 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8003ffc:	e004      	b.n	8004008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ffe:	bf00      	nop
 8004000:	e002      	b.n	8004008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004006:	bf00      	nop
    }

    if(status == HAL_OK)
 8004008:	7bfb      	ldrb	r3, [r7, #15]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10d      	bne.n	800402a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800400e:	4b4a      	ldr	r3, [pc, #296]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6819      	ldr	r1, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	430b      	orrs	r3, r1
 8004024:	4944      	ldr	r1, [pc, #272]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004026:	4313      	orrs	r3, r2
 8004028:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d17d      	bne.n	800412c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004030:	4b41      	ldr	r3, [pc, #260]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a40      	ldr	r2, [pc, #256]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800403a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fd fbd0 	bl	80017e0 <HAL_GetTick>
 8004040:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004042:	e009      	b.n	8004058 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004044:	f7fd fbcc 	bl	80017e0 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d902      	bls.n	8004058 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	73fb      	strb	r3, [r7, #15]
        break;
 8004056:	e005      	b.n	8004064 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004058:	4b37      	ldr	r3, [pc, #220]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ef      	bne.n	8004044 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d160      	bne.n	800412c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004070:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6892      	ldr	r2, [r2, #8]
 8004080:	0211      	lsls	r1, r2, #8
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68d2      	ldr	r2, [r2, #12]
 8004086:	0912      	lsrs	r2, r2, #4
 8004088:	0452      	lsls	r2, r2, #17
 800408a:	430a      	orrs	r2, r1
 800408c:	492a      	ldr	r1, [pc, #168]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408e:	4313      	orrs	r3, r2
 8004090:	610b      	str	r3, [r1, #16]
 8004092:	e027      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d112      	bne.n	80040c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800409a:	4b27      	ldr	r3, [pc, #156]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80040a2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6892      	ldr	r2, [r2, #8]
 80040aa:	0211      	lsls	r1, r2, #8
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6912      	ldr	r2, [r2, #16]
 80040b0:	0852      	lsrs	r2, r2, #1
 80040b2:	3a01      	subs	r2, #1
 80040b4:	0552      	lsls	r2, r2, #21
 80040b6:	430a      	orrs	r2, r1
 80040b8:	491f      	ldr	r1, [pc, #124]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	610b      	str	r3, [r1, #16]
 80040be:	e011      	b.n	80040e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040c0:	4b1d      	ldr	r3, [pc, #116]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80040c8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6892      	ldr	r2, [r2, #8]
 80040d0:	0211      	lsls	r1, r2, #8
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6952      	ldr	r2, [r2, #20]
 80040d6:	0852      	lsrs	r2, r2, #1
 80040d8:	3a01      	subs	r2, #1
 80040da:	0652      	lsls	r2, r2, #25
 80040dc:	430a      	orrs	r2, r1
 80040de:	4916      	ldr	r1, [pc, #88]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040e4:	4b14      	ldr	r3, [pc, #80]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a13      	ldr	r2, [pc, #76]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f0:	f7fd fb76 	bl	80017e0 <HAL_GetTick>
 80040f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040f6:	e009      	b.n	800410c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040f8:	f7fd fb72 	bl	80017e0 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d902      	bls.n	800410c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	73fb      	strb	r3, [r7, #15]
          break;
 800410a:	e005      	b.n	8004118 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800410c:	4b0a      	ldr	r3, [pc, #40]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0ef      	beq.n	80040f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d106      	bne.n	800412c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800411e:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004120:	691a      	ldr	r2, [r3, #16]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	4904      	ldr	r1, [pc, #16]	@ (8004138 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800412c:	7bfb      	ldrb	r3, [r7, #15]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000

0800413c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800414a:	4b6a      	ldr	r3, [pc, #424]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004156:	4b67      	ldr	r3, [pc, #412]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	f003 0203 	and.w	r2, r3, #3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d10d      	bne.n	8004182 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
       ||
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800416e:	4b61      	ldr	r3, [pc, #388]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	091b      	lsrs	r3, r3, #4
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
       ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d047      	beq.n	8004212 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	73fb      	strb	r3, [r7, #15]
 8004186:	e044      	b.n	8004212 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d018      	beq.n	80041c2 <RCCEx_PLLSAI2_Config+0x86>
 8004190:	2b03      	cmp	r3, #3
 8004192:	d825      	bhi.n	80041e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d002      	beq.n	800419e <RCCEx_PLLSAI2_Config+0x62>
 8004198:	2b02      	cmp	r3, #2
 800419a:	d009      	beq.n	80041b0 <RCCEx_PLLSAI2_Config+0x74>
 800419c:	e020      	b.n	80041e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800419e:	4b55      	ldr	r3, [pc, #340]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11d      	bne.n	80041e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ae:	e01a      	b.n	80041e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80041b0:	4b50      	ldr	r3, [pc, #320]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d116      	bne.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041c0:	e013      	b.n	80041ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80041c2:	4b4c      	ldr	r3, [pc, #304]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10f      	bne.n	80041ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80041ce:	4b49      	ldr	r3, [pc, #292]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d109      	bne.n	80041ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80041de:	e006      	b.n	80041ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e004      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041e6:	bf00      	nop
 80041e8:	e002      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ea:	bf00      	nop
 80041ec:	e000      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80041ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80041f0:	7bfb      	ldrb	r3, [r7, #15]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10d      	bne.n	8004212 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041f6:	4b3f      	ldr	r3, [pc, #252]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6819      	ldr	r1, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	430b      	orrs	r3, r1
 800420c:	4939      	ldr	r1, [pc, #228]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800420e:	4313      	orrs	r3, r2
 8004210:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d167      	bne.n	80042e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004218:	4b36      	ldr	r3, [pc, #216]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a35      	ldr	r2, [pc, #212]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004222:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004224:	f7fd fadc 	bl	80017e0 <HAL_GetTick>
 8004228:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800422a:	e009      	b.n	8004240 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800422c:	f7fd fad8 	bl	80017e0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d902      	bls.n	8004240 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	73fb      	strb	r3, [r7, #15]
        break;
 800423e:	e005      	b.n	800424c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004240:	4b2c      	ldr	r3, [pc, #176]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ef      	bne.n	800422c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800424c:	7bfb      	ldrb	r3, [r7, #15]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d14a      	bne.n	80042e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d111      	bne.n	800427c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004258:	4b26      	ldr	r3, [pc, #152]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6892      	ldr	r2, [r2, #8]
 8004268:	0211      	lsls	r1, r2, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	0912      	lsrs	r2, r2, #4
 8004270:	0452      	lsls	r2, r2, #17
 8004272:	430a      	orrs	r2, r1
 8004274:	491f      	ldr	r1, [pc, #124]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	614b      	str	r3, [r1, #20]
 800427a:	e011      	b.n	80042a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004284:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6892      	ldr	r2, [r2, #8]
 800428c:	0211      	lsls	r1, r2, #8
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6912      	ldr	r2, [r2, #16]
 8004292:	0852      	lsrs	r2, r2, #1
 8004294:	3a01      	subs	r2, #1
 8004296:	0652      	lsls	r2, r2, #25
 8004298:	430a      	orrs	r2, r1
 800429a:	4916      	ldr	r1, [pc, #88]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80042a0:	4b14      	ldr	r3, [pc, #80]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a13      	ldr	r2, [pc, #76]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fd fa98 	bl	80017e0 <HAL_GetTick>
 80042b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042b2:	e009      	b.n	80042c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80042b4:	f7fd fa94 	bl	80017e0 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d902      	bls.n	80042c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	73fb      	strb	r3, [r7, #15]
          break;
 80042c6:	e005      	b.n	80042d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80042c8:	4b0a      	ldr	r3, [pc, #40]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ef      	beq.n	80042b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80042da:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	4904      	ldr	r1, [pc, #16]	@ (80042f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40021000 	.word	0x40021000

080042f8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e049      	b.n	800439e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d106      	bne.n	8004324 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7fc ff9a 	bl	8001258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3304      	adds	r3, #4
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f000 ffe0 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d109      	bne.n	80043cc <HAL_TIM_PWM_Start+0x24>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	e03c      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d109      	bne.n	80043e6 <HAL_TIM_PWM_Start+0x3e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b01      	cmp	r3, #1
 80043dc:	bf14      	ite	ne
 80043de:	2301      	movne	r3, #1
 80043e0:	2300      	moveq	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	e02f      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	2b08      	cmp	r3, #8
 80043ea:	d109      	bne.n	8004400 <HAL_TIM_PWM_Start+0x58>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	e022      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d109      	bne.n	800441a <HAL_TIM_PWM_Start+0x72>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440c:	b2db      	uxtb	r3, r3
 800440e:	2b01      	cmp	r3, #1
 8004410:	bf14      	ite	ne
 8004412:	2301      	movne	r3, #1
 8004414:	2300      	moveq	r3, #0
 8004416:	b2db      	uxtb	r3, r3
 8004418:	e015      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	2b10      	cmp	r3, #16
 800441e:	d109      	bne.n	8004434 <HAL_TIM_PWM_Start+0x8c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b01      	cmp	r3, #1
 800442a:	bf14      	ite	ne
 800442c:	2301      	movne	r3, #1
 800442e:	2300      	moveq	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	e008      	b.n	8004446 <HAL_TIM_PWM_Start+0x9e>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b01      	cmp	r3, #1
 800443e:	bf14      	ite	ne
 8004440:	2301      	movne	r3, #1
 8004442:	2300      	moveq	r3, #0
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e09c      	b.n	8004588 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <HAL_TIM_PWM_Start+0xb6>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800445c:	e023      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	2b04      	cmp	r3, #4
 8004462:	d104      	bne.n	800446e <HAL_TIM_PWM_Start+0xc6>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800446c:	e01b      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d104      	bne.n	800447e <HAL_TIM_PWM_Start+0xd6>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800447c:	e013      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b0c      	cmp	r3, #12
 8004482:	d104      	bne.n	800448e <HAL_TIM_PWM_Start+0xe6>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b10      	cmp	r3, #16
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Start+0xf6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800449c:	e003      	b.n	80044a6 <HAL_TIM_PWM_Start+0xfe>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	6839      	ldr	r1, [r7, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 fbb8 	bl	8005c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a35      	ldr	r2, [pc, #212]	@ (8004590 <HAL_TIM_PWM_Start+0x1e8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x13e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a34      	ldr	r2, [pc, #208]	@ (8004594 <HAL_TIM_PWM_Start+0x1ec>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x13e>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a32      	ldr	r2, [pc, #200]	@ (8004598 <HAL_TIM_PWM_Start+0x1f0>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x13e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a31      	ldr	r2, [pc, #196]	@ (800459c <HAL_TIM_PWM_Start+0x1f4>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIM_PWM_Start+0x13e>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2f      	ldr	r2, [pc, #188]	@ (80045a0 <HAL_TIM_PWM_Start+0x1f8>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d101      	bne.n	80044ea <HAL_TIM_PWM_Start+0x142>
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_TIM_PWM_Start+0x144>
 80044ea:	2300      	movs	r3, #0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a22      	ldr	r2, [pc, #136]	@ (8004590 <HAL_TIM_PWM_Start+0x1e8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d01d      	beq.n	8004546 <HAL_TIM_PWM_Start+0x19e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004512:	d018      	beq.n	8004546 <HAL_TIM_PWM_Start+0x19e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a22      	ldr	r2, [pc, #136]	@ (80045a4 <HAL_TIM_PWM_Start+0x1fc>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d013      	beq.n	8004546 <HAL_TIM_PWM_Start+0x19e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a21      	ldr	r2, [pc, #132]	@ (80045a8 <HAL_TIM_PWM_Start+0x200>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIM_PWM_Start+0x19e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1f      	ldr	r2, [pc, #124]	@ (80045ac <HAL_TIM_PWM_Start+0x204>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIM_PWM_Start+0x19e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a17      	ldr	r2, [pc, #92]	@ (8004594 <HAL_TIM_PWM_Start+0x1ec>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIM_PWM_Start+0x19e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a15      	ldr	r2, [pc, #84]	@ (8004598 <HAL_TIM_PWM_Start+0x1f0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d115      	bne.n	8004572 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b18      	ldr	r3, [pc, #96]	@ (80045b0 <HAL_TIM_PWM_Start+0x208>)
 800454e:	4013      	ands	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b06      	cmp	r3, #6
 8004556:	d015      	beq.n	8004584 <HAL_TIM_PWM_Start+0x1dc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800455e:	d011      	beq.n	8004584 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004570:	e008      	b.n	8004584 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f042 0201 	orr.w	r2, r2, #1
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e000      	b.n	8004586 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004584:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40012c00 	.word	0x40012c00
 8004594:	40013400 	.word	0x40013400
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	00010007 	.word	0x00010007

080045b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f001 fb2c 	bl	8005c24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a3e      	ldr	r2, [pc, #248]	@ (80046cc <HAL_TIM_PWM_Stop+0x118>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_TIM_PWM_Stop+0x4a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a3d      	ldr	r2, [pc, #244]	@ (80046d0 <HAL_TIM_PWM_Stop+0x11c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_TIM_PWM_Stop+0x4a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a3b      	ldr	r2, [pc, #236]	@ (80046d4 <HAL_TIM_PWM_Stop+0x120>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_TIM_PWM_Stop+0x4a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a3a      	ldr	r2, [pc, #232]	@ (80046d8 <HAL_TIM_PWM_Stop+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_TIM_PWM_Stop+0x4a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a38      	ldr	r2, [pc, #224]	@ (80046dc <HAL_TIM_PWM_Stop+0x128>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_Stop+0x4e>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_TIM_PWM_Stop+0x50>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d017      	beq.n	8004638 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10f      	bne.n	8004638 <HAL_TIM_PWM_Stop+0x84>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <HAL_TIM_PWM_Stop+0x84>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004636:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6a1a      	ldr	r2, [r3, #32]
 800463e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004642:	4013      	ands	r3, r2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10f      	bne.n	8004668 <HAL_TIM_PWM_Stop+0xb4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6a1a      	ldr	r2, [r3, #32]
 800464e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004652:	4013      	ands	r3, r2
 8004654:	2b00      	cmp	r3, #0
 8004656:	d107      	bne.n	8004668 <HAL_TIM_PWM_Stop+0xb4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 0201 	bic.w	r2, r2, #1
 8004666:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_TIM_PWM_Stop+0xc4>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004676:	e023      	b.n	80046c0 <HAL_TIM_PWM_Stop+0x10c>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b04      	cmp	r3, #4
 800467c:	d104      	bne.n	8004688 <HAL_TIM_PWM_Stop+0xd4>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004686:	e01b      	b.n	80046c0 <HAL_TIM_PWM_Stop+0x10c>
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b08      	cmp	r3, #8
 800468c:	d104      	bne.n	8004698 <HAL_TIM_PWM_Stop+0xe4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004696:	e013      	b.n	80046c0 <HAL_TIM_PWM_Stop+0x10c>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b0c      	cmp	r3, #12
 800469c:	d104      	bne.n	80046a8 <HAL_TIM_PWM_Stop+0xf4>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046a6:	e00b      	b.n	80046c0 <HAL_TIM_PWM_Stop+0x10c>
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d104      	bne.n	80046b8 <HAL_TIM_PWM_Stop+0x104>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046b6:	e003      	b.n	80046c0 <HAL_TIM_PWM_Stop+0x10c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40013400 	.word	0x40013400
 80046d4:	40014000 	.word	0x40014000
 80046d8:	40014400 	.word	0x40014400
 80046dc:	40014800 	.word	0x40014800

080046e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e049      	b.n	8004786 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d106      	bne.n	800470c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fd5a 	bl	80011c0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	3304      	adds	r3, #4
 800471c:	4619      	mov	r1, r3
 800471e:	4610      	mov	r0, r2
 8004720:	f000 fdec 	bl	80052fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_IC_Start_IT+0x1e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e023      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0x66>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d104      	bne.n	80047be <HAL_TIM_IC_Start_IT+0x2e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	e01b      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0x66>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b08      	cmp	r3, #8
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_IC_Start_IT+0x3e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	e013      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0x66>
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b0c      	cmp	r3, #12
 80047d2:	d104      	bne.n	80047de <HAL_TIM_IC_Start_IT+0x4e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	e00b      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0x66>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b10      	cmp	r3, #16
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_IC_Start_IT+0x5e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	e003      	b.n	80047f6 <HAL_TIM_IC_Start_IT+0x66>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d104      	bne.n	8004808 <HAL_TIM_IC_Start_IT+0x78>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004804:	b2db      	uxtb	r3, r3
 8004806:	e013      	b.n	8004830 <HAL_TIM_IC_Start_IT+0xa0>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b04      	cmp	r3, #4
 800480c:	d104      	bne.n	8004818 <HAL_TIM_IC_Start_IT+0x88>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e00b      	b.n	8004830 <HAL_TIM_IC_Start_IT+0xa0>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b08      	cmp	r3, #8
 800481c:	d104      	bne.n	8004828 <HAL_TIM_IC_Start_IT+0x98>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004824:	b2db      	uxtb	r3, r3
 8004826:	e003      	b.n	8004830 <HAL_TIM_IC_Start_IT+0xa0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800482e:	b2db      	uxtb	r3, r3
 8004830:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004832:	7bbb      	ldrb	r3, [r7, #14]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d102      	bne.n	800483e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004838:	7b7b      	ldrb	r3, [r7, #13]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d001      	beq.n	8004842 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e0dd      	b.n	80049fe <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d104      	bne.n	8004852 <HAL_TIM_IC_Start_IT+0xc2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004850:	e023      	b.n	800489a <HAL_TIM_IC_Start_IT+0x10a>
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2b04      	cmp	r3, #4
 8004856:	d104      	bne.n	8004862 <HAL_TIM_IC_Start_IT+0xd2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004860:	e01b      	b.n	800489a <HAL_TIM_IC_Start_IT+0x10a>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d104      	bne.n	8004872 <HAL_TIM_IC_Start_IT+0xe2>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2202      	movs	r2, #2
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004870:	e013      	b.n	800489a <HAL_TIM_IC_Start_IT+0x10a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b0c      	cmp	r3, #12
 8004876:	d104      	bne.n	8004882 <HAL_TIM_IC_Start_IT+0xf2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004880:	e00b      	b.n	800489a <HAL_TIM_IC_Start_IT+0x10a>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2b10      	cmp	r3, #16
 8004886:	d104      	bne.n	8004892 <HAL_TIM_IC_Start_IT+0x102>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004890:	e003      	b.n	800489a <HAL_TIM_IC_Start_IT+0x10a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_TIM_IC_Start_IT+0x11a>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048a8:	e013      	b.n	80048d2 <HAL_TIM_IC_Start_IT+0x142>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_IC_Start_IT+0x12a>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048b8:	e00b      	b.n	80048d2 <HAL_TIM_IC_Start_IT+0x142>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d104      	bne.n	80048ca <HAL_TIM_IC_Start_IT+0x13a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048c8:	e003      	b.n	80048d2 <HAL_TIM_IC_Start_IT+0x142>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b0c      	cmp	r3, #12
 80048d6:	d841      	bhi.n	800495c <HAL_TIM_IC_Start_IT+0x1cc>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <HAL_TIM_IC_Start_IT+0x150>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004915 	.word	0x08004915
 80048e4:	0800495d 	.word	0x0800495d
 80048e8:	0800495d 	.word	0x0800495d
 80048ec:	0800495d 	.word	0x0800495d
 80048f0:	08004927 	.word	0x08004927
 80048f4:	0800495d 	.word	0x0800495d
 80048f8:	0800495d 	.word	0x0800495d
 80048fc:	0800495d 	.word	0x0800495d
 8004900:	08004939 	.word	0x08004939
 8004904:	0800495d 	.word	0x0800495d
 8004908:	0800495d 	.word	0x0800495d
 800490c:	0800495d 	.word	0x0800495d
 8004910:	0800494b 	.word	0x0800494b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0202 	orr.w	r2, r2, #2
 8004922:	60da      	str	r2, [r3, #12]
      break;
 8004924:	e01d      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68da      	ldr	r2, [r3, #12]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0204 	orr.w	r2, r2, #4
 8004934:	60da      	str	r2, [r3, #12]
      break;
 8004936:	e014      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0208 	orr.w	r2, r2, #8
 8004946:	60da      	str	r2, [r3, #12]
      break;
 8004948:	e00b      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0210 	orr.w	r2, r2, #16
 8004958:	60da      	str	r2, [r3, #12]
      break;
 800495a:	e002      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
      break;
 8004960:	bf00      	nop
  }

  if (status == HAL_OK)
 8004962:	7bfb      	ldrb	r3, [r7, #15]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d149      	bne.n	80049fc <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2201      	movs	r2, #1
 800496e:	6839      	ldr	r1, [r7, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f001 f957 	bl	8005c24 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a23      	ldr	r2, [pc, #140]	@ (8004a08 <HAL_TIM_IC_Start_IT+0x278>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d01d      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0x22c>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004988:	d018      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0x22c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a1f      	ldr	r2, [pc, #124]	@ (8004a0c <HAL_TIM_IC_Start_IT+0x27c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d013      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0x22c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1d      	ldr	r2, [pc, #116]	@ (8004a10 <HAL_TIM_IC_Start_IT+0x280>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00e      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0x22c>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a14 <HAL_TIM_IC_Start_IT+0x284>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d009      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0x22c>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <HAL_TIM_IC_Start_IT+0x288>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d004      	beq.n	80049bc <HAL_TIM_IC_Start_IT+0x22c>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a19      	ldr	r2, [pc, #100]	@ (8004a1c <HAL_TIM_IC_Start_IT+0x28c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d115      	bne.n	80049e8 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	4b17      	ldr	r3, [pc, #92]	@ (8004a20 <HAL_TIM_IC_Start_IT+0x290>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b06      	cmp	r3, #6
 80049cc:	d015      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x26a>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d011      	beq.n	80049fa <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f042 0201 	orr.w	r2, r2, #1
 80049e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e6:	e008      	b.n	80049fa <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f042 0201 	orr.w	r2, r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	e000      	b.n	80049fc <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40000400 	.word	0x40000400
 8004a10:	40000800 	.word	0x40000800
 8004a14:	40000c00 	.word	0x40000c00
 8004a18:	40013400 	.word	0x40013400
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	00010007 	.word	0x00010007

08004a24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e097      	b.n	8004b68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d106      	bne.n	8004a52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7fc fc21 	bl	8001294 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004a68:	f023 0307 	bic.w	r3, r3, #7
 8004a6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f000 fc3f 	bl	80052fc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6a1b      	ldr	r3, [r3, #32]
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	021b      	lsls	r3, r3, #8
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004ac4:	f023 030c 	bic.w	r3, r3, #12
 8004ac8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ad0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ad4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	011a      	lsls	r2, r3, #4
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	031b      	lsls	r3, r3, #12
 8004af4:	4313      	orrs	r3, r2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	011b      	lsls	r3, r3, #4
 8004b16:	4313      	orrs	r3, r2
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2201      	movs	r2, #1
 8004b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d003      	beq.n	8004b88 <HAL_TIM_Encoder_Stop+0x18>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d008      	beq.n	8004b98 <HAL_TIM_Encoder_Stop+0x28>
 8004b86:	e00f      	b.n	8004ba8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 f847 	bl	8005c24 <TIM_CCxChannelCmd>
      break;
 8004b96:	e016      	b.n	8004bc6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	2104      	movs	r1, #4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 f83f 	bl	8005c24 <TIM_CCxChannelCmd>
      break;
 8004ba6:	e00e      	b.n	8004bc6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2200      	movs	r2, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f001 f837 	bl	8005c24 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f001 f830 	bl	8005c24 <TIM_CCxChannelCmd>
      break;
 8004bc4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6a1a      	ldr	r2, [r3, #32]
 8004bcc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10f      	bne.n	8004bf6 <HAL_TIM_Encoder_Stop+0x86>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004be0:	4013      	ands	r3, r2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d107      	bne.n	8004bf6 <HAL_TIM_Encoder_Stop+0x86>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0201 	bic.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d002      	beq.n	8004c02 <HAL_TIM_Encoder_Stop+0x92>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	d148      	bne.n	8004c94 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_Encoder_Stop+0xa2>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c10:	e023      	b.n	8004c5a <HAL_TIM_Encoder_Stop+0xea>
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d104      	bne.n	8004c22 <HAL_TIM_Encoder_Stop+0xb2>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c20:	e01b      	b.n	8004c5a <HAL_TIM_Encoder_Stop+0xea>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d104      	bne.n	8004c32 <HAL_TIM_Encoder_Stop+0xc2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c30:	e013      	b.n	8004c5a <HAL_TIM_Encoder_Stop+0xea>
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d104      	bne.n	8004c42 <HAL_TIM_Encoder_Stop+0xd2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c40:	e00b      	b.n	8004c5a <HAL_TIM_Encoder_Stop+0xea>
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b10      	cmp	r3, #16
 8004c46:	d104      	bne.n	8004c52 <HAL_TIM_Encoder_Stop+0xe2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c50:	e003      	b.n	8004c5a <HAL_TIM_Encoder_Stop+0xea>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_TIM_Encoder_Stop+0xfa>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c68:	e024      	b.n	8004cb4 <HAL_TIM_Encoder_Stop+0x144>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	d104      	bne.n	8004c7a <HAL_TIM_Encoder_Stop+0x10a>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c78:	e01c      	b.n	8004cb4 <HAL_TIM_Encoder_Stop+0x144>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b08      	cmp	r3, #8
 8004c7e:	d104      	bne.n	8004c8a <HAL_TIM_Encoder_Stop+0x11a>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c88:	e014      	b.n	8004cb4 <HAL_TIM_Encoder_Stop+0x144>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004c92:	e00f      	b.n	8004cb4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d01b      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f06f 0202 	mvn.w	r2, #2
 8004cf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	f003 0303 	and.w	r3, r3, #3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fb ffc7 	bl	8000c9c <HAL_TIM_IC_CaptureCallback>
 8004d0e:	e005      	b.n	8004d1c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 fad5 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fadc 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0304 	and.w	r3, r3, #4
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d01b      	beq.n	8004d6e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0204 	mvn.w	r2, #4
 8004d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fb ffa1 	bl	8000c9c <HAL_TIM_IC_CaptureCallback>
 8004d5a:	e005      	b.n	8004d68 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 faaf 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fab6 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f003 0308 	and.w	r3, r3, #8
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d020      	beq.n	8004dba <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01b      	beq.n	8004dba <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f06f 0208 	mvn.w	r2, #8
 8004d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f7fb ff7b 	bl	8000c9c <HAL_TIM_IC_CaptureCallback>
 8004da6:	e005      	b.n	8004db4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa89 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa90 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f003 0310 	and.w	r3, r3, #16
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d020      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f003 0310 	and.w	r3, r3, #16
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01b      	beq.n	8004e06 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f06f 0210 	mvn.w	r2, #16
 8004dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2208      	movs	r2, #8
 8004ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f7fb ff55 	bl	8000c9c <HAL_TIM_IC_CaptureCallback>
 8004df2:	e005      	b.n	8004e00 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fa63 	bl	80052c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fa6a 	bl	80052d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d007      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0201 	mvn.w	r2, #1
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fa41 	bl	80052ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00c      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 ffa3 	bl	8005d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00c      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 ff9b 	bl	8005da8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d007      	beq.n	8004e96 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 fa29 	bl	80052e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00c      	beq.n	8004eba <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f06f 0220 	mvn.w	r2, #32
 8004eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 ff63 	bl	8005d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eba:	bf00      	nop
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e088      	b.n	8004ff2 <HAL_TIM_IC_ConfigChannel+0x130>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d11b      	bne.n	8004f26 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004efe:	f000 fd6d 	bl	80059dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 020c 	bic.w	r2, r2, #12
 8004f10:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6999      	ldr	r1, [r3, #24]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	619a      	str	r2, [r3, #24]
 8004f24:	e060      	b.n	8004fe8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d11c      	bne.n	8004f66 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004f3c:	f000 fdbc 	bl	8005ab8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004f4e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	021a      	lsls	r2, r3, #8
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	619a      	str	r2, [r3, #24]
 8004f64:	e040      	b.n	8004fe8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d11b      	bne.n	8004fa4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004f7c:	f000 fdd9 	bl	8005b32 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 020c 	bic.w	r2, r2, #12
 8004f8e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	69d9      	ldr	r1, [r3, #28]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	430a      	orrs	r2, r1
 8004fa0:	61da      	str	r2, [r3, #28]
 8004fa2:	e021      	b.n	8004fe8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b0c      	cmp	r3, #12
 8004fa8:	d11c      	bne.n	8004fe4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004fba:	f000 fdf6 	bl	8005baa <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004fcc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69d9      	ldr	r1, [r3, #28]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	021a      	lsls	r2, r3, #8
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	61da      	str	r2, [r3, #28]
 8004fe2:	e001      	b.n	8004fe8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2300      	movs	r3, #0
 800500a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005016:	2302      	movs	r3, #2
 8005018:	e0ff      	b.n	800521a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b14      	cmp	r3, #20
 8005026:	f200 80f0 	bhi.w	800520a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800502a:	a201      	add	r2, pc, #4	@ (adr r2, 8005030 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800502c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005030:	08005085 	.word	0x08005085
 8005034:	0800520b 	.word	0x0800520b
 8005038:	0800520b 	.word	0x0800520b
 800503c:	0800520b 	.word	0x0800520b
 8005040:	080050c5 	.word	0x080050c5
 8005044:	0800520b 	.word	0x0800520b
 8005048:	0800520b 	.word	0x0800520b
 800504c:	0800520b 	.word	0x0800520b
 8005050:	08005107 	.word	0x08005107
 8005054:	0800520b 	.word	0x0800520b
 8005058:	0800520b 	.word	0x0800520b
 800505c:	0800520b 	.word	0x0800520b
 8005060:	08005147 	.word	0x08005147
 8005064:	0800520b 	.word	0x0800520b
 8005068:	0800520b 	.word	0x0800520b
 800506c:	0800520b 	.word	0x0800520b
 8005070:	08005189 	.word	0x08005189
 8005074:	0800520b 	.word	0x0800520b
 8005078:	0800520b 	.word	0x0800520b
 800507c:	0800520b 	.word	0x0800520b
 8005080:	080051c9 	.word	0x080051c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 f9d0 	bl	8005430 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0208 	orr.w	r2, r2, #8
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691a      	ldr	r2, [r3, #16]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	619a      	str	r2, [r3, #24]
      break;
 80050c2:	e0a5      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68b9      	ldr	r1, [r7, #8]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 fa40 	bl	8005550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6999      	ldr	r1, [r3, #24]
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	021a      	lsls	r2, r3, #8
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	619a      	str	r2, [r3, #24]
      break;
 8005104:	e084      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 faa9 	bl	8005664 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f042 0208 	orr.w	r2, r2, #8
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0204 	bic.w	r2, r2, #4
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	61da      	str	r2, [r3, #28]
      break;
 8005144:	e064      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fb11 	bl	8005774 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69da      	ldr	r2, [r3, #28]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69d9      	ldr	r1, [r3, #28]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	021a      	lsls	r2, r3, #8
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	61da      	str	r2, [r3, #28]
      break;
 8005186:	e043      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fb5a 	bl	8005848 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0208 	orr.w	r2, r2, #8
 80051a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0204 	bic.w	r2, r2, #4
 80051b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80051c6:	e023      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fb9e 	bl	8005910 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051e2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005208:	e002      	b.n	8005210 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	75fb      	strb	r3, [r7, #23]
      break;
 800520e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005218:	7dfb      	ldrb	r3, [r7, #23]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop

08005224 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b0c      	cmp	r3, #12
 8005236:	d831      	bhi.n	800529c <HAL_TIM_ReadCapturedValue+0x78>
 8005238:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <HAL_TIM_ReadCapturedValue+0x1c>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005275 	.word	0x08005275
 8005244:	0800529d 	.word	0x0800529d
 8005248:	0800529d 	.word	0x0800529d
 800524c:	0800529d 	.word	0x0800529d
 8005250:	0800527f 	.word	0x0800527f
 8005254:	0800529d 	.word	0x0800529d
 8005258:	0800529d 	.word	0x0800529d
 800525c:	0800529d 	.word	0x0800529d
 8005260:	08005289 	.word	0x08005289
 8005264:	0800529d 	.word	0x0800529d
 8005268:	0800529d 	.word	0x0800529d
 800526c:	0800529d 	.word	0x0800529d
 8005270:	08005293 	.word	0x08005293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800527a:	60fb      	str	r3, [r7, #12]

      break;
 800527c:	e00f      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	60fb      	str	r3, [r7, #12]

      break;
 8005286:	e00a      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528e:	60fb      	str	r3, [r7, #12]

      break;
 8005290:	e005      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005298:	60fb      	str	r3, [r7, #12]

      break;
 800529a:	e000      	b.n	800529e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800529c:	bf00      	nop
  }

  return tmpreg;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3714      	adds	r7, #20
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a40      	ldr	r2, [pc, #256]	@ (8005410 <TIM_Base_SetConfig+0x114>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800531a:	d00f      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a3d      	ldr	r2, [pc, #244]	@ (8005414 <TIM_Base_SetConfig+0x118>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00b      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a3c      	ldr	r2, [pc, #240]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d007      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a3b      	ldr	r2, [pc, #236]	@ (800541c <TIM_Base_SetConfig+0x120>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a3a      	ldr	r2, [pc, #232]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d108      	bne.n	800534e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005342:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2f      	ldr	r2, [pc, #188]	@ (8005410 <TIM_Base_SetConfig+0x114>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d01f      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535c:	d01b      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a2c      	ldr	r2, [pc, #176]	@ (8005414 <TIM_Base_SetConfig+0x118>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d017      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a2b      	ldr	r2, [pc, #172]	@ (8005418 <TIM_Base_SetConfig+0x11c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d013      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	4a2a      	ldr	r2, [pc, #168]	@ (800541c <TIM_Base_SetConfig+0x120>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d00f      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a29      	ldr	r2, [pc, #164]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d00b      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a28      	ldr	r2, [pc, #160]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d007      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a27      	ldr	r2, [pc, #156]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d003      	beq.n	8005396 <TIM_Base_SetConfig+0x9a>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a26      	ldr	r2, [pc, #152]	@ (800542c <TIM_Base_SetConfig+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d108      	bne.n	80053a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800539c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	695b      	ldr	r3, [r3, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a10      	ldr	r2, [pc, #64]	@ (8005410 <TIM_Base_SetConfig+0x114>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00f      	beq.n	80053f4 <TIM_Base_SetConfig+0xf8>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a12      	ldr	r2, [pc, #72]	@ (8005420 <TIM_Base_SetConfig+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_Base_SetConfig+0xf8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <TIM_Base_SetConfig+0x128>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d007      	beq.n	80053f4 <TIM_Base_SetConfig+0xf8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a10      	ldr	r2, [pc, #64]	@ (8005428 <TIM_Base_SetConfig+0x12c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0xf8>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a0f      	ldr	r2, [pc, #60]	@ (800542c <TIM_Base_SetConfig+0x130>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d103      	bne.n	80053fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	615a      	str	r2, [r3, #20]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40000400 	.word	0x40000400
 8005418:	40000800 	.word	0x40000800
 800541c:	40000c00 	.word	0x40000c00
 8005420:	40013400 	.word	0x40013400
 8005424:	40014000 	.word	0x40014000
 8005428:	40014400 	.word	0x40014400
 800542c:	40014800 	.word	0x40014800

08005430 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005430:	b480      	push	{r7}
 8005432:	b087      	sub	sp, #28
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f023 0201 	bic.w	r2, r3, #1
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f023 0303 	bic.w	r3, r3, #3
 800546a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	4313      	orrs	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f023 0302 	bic.w	r3, r3, #2
 800547c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	4313      	orrs	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a2c      	ldr	r2, [pc, #176]	@ (800553c <TIM_OC1_SetConfig+0x10c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00f      	beq.n	80054b0 <TIM_OC1_SetConfig+0x80>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2b      	ldr	r2, [pc, #172]	@ (8005540 <TIM_OC1_SetConfig+0x110>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_OC1_SetConfig+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a2a      	ldr	r2, [pc, #168]	@ (8005544 <TIM_OC1_SetConfig+0x114>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_OC1_SetConfig+0x80>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <TIM_OC1_SetConfig+0x118>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC1_SetConfig+0x80>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a28      	ldr	r2, [pc, #160]	@ (800554c <TIM_OC1_SetConfig+0x11c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10c      	bne.n	80054ca <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0308 	bic.w	r3, r3, #8
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	4313      	orrs	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f023 0304 	bic.w	r3, r3, #4
 80054c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1b      	ldr	r2, [pc, #108]	@ (800553c <TIM_OC1_SetConfig+0x10c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00f      	beq.n	80054f2 <TIM_OC1_SetConfig+0xc2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a1a      	ldr	r2, [pc, #104]	@ (8005540 <TIM_OC1_SetConfig+0x110>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00b      	beq.n	80054f2 <TIM_OC1_SetConfig+0xc2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a19      	ldr	r2, [pc, #100]	@ (8005544 <TIM_OC1_SetConfig+0x114>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_OC1_SetConfig+0xc2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a18      	ldr	r2, [pc, #96]	@ (8005548 <TIM_OC1_SetConfig+0x118>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_OC1_SetConfig+0xc2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a17      	ldr	r2, [pc, #92]	@ (800554c <TIM_OC1_SetConfig+0x11c>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d111      	bne.n	8005516 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	4313      	orrs	r3, r2
 800550a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	621a      	str	r2, [r3, #32]
}
 8005530:	bf00      	nop
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40013400 	.word	0x40013400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800

08005550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a1b      	ldr	r3, [r3, #32]
 8005564:	f023 0210 	bic.w	r2, r3, #16
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800557e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800558a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f023 0320 	bic.w	r3, r3, #32
 800559e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a28      	ldr	r2, [pc, #160]	@ (8005650 <TIM_OC2_SetConfig+0x100>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC2_SetConfig+0x6c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a27      	ldr	r2, [pc, #156]	@ (8005654 <TIM_OC2_SetConfig+0x104>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10d      	bne.n	80055d8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a1d      	ldr	r2, [pc, #116]	@ (8005650 <TIM_OC2_SetConfig+0x100>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00f      	beq.n	8005600 <TIM_OC2_SetConfig+0xb0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <TIM_OC2_SetConfig+0x104>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_OC2_SetConfig+0xb0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <TIM_OC2_SetConfig+0x108>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_OC2_SetConfig+0xb0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1a      	ldr	r2, [pc, #104]	@ (800565c <TIM_OC2_SetConfig+0x10c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0xb0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a19      	ldr	r2, [pc, #100]	@ (8005660 <TIM_OC2_SetConfig+0x110>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d113      	bne.n	8005628 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40013400 	.word	0x40013400
 8005658:	40014000 	.word	0x40014000
 800565c:	40014400 	.word	0x40014400
 8005660:	40014800 	.word	0x40014800

08005664 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0303 	bic.w	r3, r3, #3
 800569e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a27      	ldr	r2, [pc, #156]	@ (8005760 <TIM_OC3_SetConfig+0xfc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d003      	beq.n	80056ce <TIM_OC3_SetConfig+0x6a>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a26      	ldr	r2, [pc, #152]	@ (8005764 <TIM_OC3_SetConfig+0x100>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d10d      	bne.n	80056ea <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	021b      	lsls	r3, r3, #8
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a1c      	ldr	r2, [pc, #112]	@ (8005760 <TIM_OC3_SetConfig+0xfc>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_OC3_SetConfig+0xae>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005764 <TIM_OC3_SetConfig+0x100>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_OC3_SetConfig+0xae>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005768 <TIM_OC3_SetConfig+0x104>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_OC3_SetConfig+0xae>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a19      	ldr	r2, [pc, #100]	@ (800576c <TIM_OC3_SetConfig+0x108>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_OC3_SetConfig+0xae>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a18      	ldr	r2, [pc, #96]	@ (8005770 <TIM_OC3_SetConfig+0x10c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d113      	bne.n	800573a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	621a      	str	r2, [r3, #32]
}
 8005754:	bf00      	nop
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800

08005774 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005774:	b480      	push	{r7}
 8005776:	b087      	sub	sp, #28
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a1b      	ldr	r3, [r3, #32]
 8005788:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69db      	ldr	r3, [r3, #28]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	021b      	lsls	r3, r3, #8
 80057b6:	68fa      	ldr	r2, [r7, #12]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	031b      	lsls	r3, r3, #12
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <TIM_OC4_SetConfig+0xc0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00f      	beq.n	80057f8 <TIM_OC4_SetConfig+0x84>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <TIM_OC4_SetConfig+0xc4>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00b      	beq.n	80057f8 <TIM_OC4_SetConfig+0x84>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a16      	ldr	r2, [pc, #88]	@ (800583c <TIM_OC4_SetConfig+0xc8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC4_SetConfig+0x84>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a15      	ldr	r2, [pc, #84]	@ (8005840 <TIM_OC4_SetConfig+0xcc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC4_SetConfig+0x84>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a14      	ldr	r2, [pc, #80]	@ (8005844 <TIM_OC4_SetConfig+0xd0>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d109      	bne.n	800580c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	019b      	lsls	r3, r3, #6
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	621a      	str	r2, [r3, #32]
}
 8005826:	bf00      	nop
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	40012c00 	.word	0x40012c00
 8005838:	40013400 	.word	0x40013400
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400
 8005844:	40014800 	.word	0x40014800

08005848 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800586e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800588c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	041b      	lsls	r3, r3, #16
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a17      	ldr	r2, [pc, #92]	@ (80058fc <TIM_OC5_SetConfig+0xb4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00f      	beq.n	80058c2 <TIM_OC5_SetConfig+0x7a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <TIM_OC5_SetConfig+0xb8>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d00b      	beq.n	80058c2 <TIM_OC5_SetConfig+0x7a>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <TIM_OC5_SetConfig+0xbc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d007      	beq.n	80058c2 <TIM_OC5_SetConfig+0x7a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a14      	ldr	r2, [pc, #80]	@ (8005908 <TIM_OC5_SetConfig+0xc0>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d003      	beq.n	80058c2 <TIM_OC5_SetConfig+0x7a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <TIM_OC5_SetConfig+0xc4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d109      	bne.n	80058d6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685a      	ldr	r2, [r3, #4]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	621a      	str	r2, [r3, #32]
}
 80058f0:	bf00      	nop
 80058f2:	371c      	adds	r7, #28
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40013400 	.word	0x40013400
 8005904:	40014000 	.word	0x40014000
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800

08005910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	051b      	lsls	r3, r3, #20
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <TIM_OC6_SetConfig+0xb8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00f      	beq.n	800598c <TIM_OC6_SetConfig+0x7c>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <TIM_OC6_SetConfig+0xbc>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d00b      	beq.n	800598c <TIM_OC6_SetConfig+0x7c>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a16      	ldr	r2, [pc, #88]	@ (80059d0 <TIM_OC6_SetConfig+0xc0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d007      	beq.n	800598c <TIM_OC6_SetConfig+0x7c>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a15      	ldr	r2, [pc, #84]	@ (80059d4 <TIM_OC6_SetConfig+0xc4>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d003      	beq.n	800598c <TIM_OC6_SetConfig+0x7c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a14      	ldr	r2, [pc, #80]	@ (80059d8 <TIM_OC6_SetConfig+0xc8>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d109      	bne.n	80059a0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005992:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	029b      	lsls	r3, r3, #10
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	685a      	ldr	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	621a      	str	r2, [r3, #32]
}
 80059ba:	bf00      	nop
 80059bc:	371c      	adds	r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	40012c00 	.word	0x40012c00
 80059cc:	40013400 	.word	0x40013400
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40014400 	.word	0x40014400
 80059d8:	40014800 	.word	0x40014800

080059dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80059dc:	b480      	push	{r7}
 80059de:	b087      	sub	sp, #28
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	60f8      	str	r0, [r7, #12]
 80059e4:	60b9      	str	r1, [r7, #8]
 80059e6:	607a      	str	r2, [r7, #4]
 80059e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	f023 0201 	bic.w	r2, r3, #1
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	4a26      	ldr	r2, [pc, #152]	@ (8005aa0 <TIM_TI1_SetConfig+0xc4>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d017      	beq.n	8005a3a <TIM_TI1_SetConfig+0x5e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a10:	d013      	beq.n	8005a3a <TIM_TI1_SetConfig+0x5e>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4a23      	ldr	r2, [pc, #140]	@ (8005aa4 <TIM_TI1_SetConfig+0xc8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00f      	beq.n	8005a3a <TIM_TI1_SetConfig+0x5e>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4a22      	ldr	r2, [pc, #136]	@ (8005aa8 <TIM_TI1_SetConfig+0xcc>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d00b      	beq.n	8005a3a <TIM_TI1_SetConfig+0x5e>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4a21      	ldr	r2, [pc, #132]	@ (8005aac <TIM_TI1_SetConfig+0xd0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d007      	beq.n	8005a3a <TIM_TI1_SetConfig+0x5e>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4a20      	ldr	r2, [pc, #128]	@ (8005ab0 <TIM_TI1_SetConfig+0xd4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d003      	beq.n	8005a3a <TIM_TI1_SetConfig+0x5e>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab4 <TIM_TI1_SetConfig+0xd8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d101      	bne.n	8005a3e <TIM_TI1_SetConfig+0x62>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <TIM_TI1_SetConfig+0x64>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0303 	bic.w	r3, r3, #3
 8005a4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
 8005a54:	e003      	b.n	8005a5e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f043 0301 	orr.w	r3, r3, #1
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	f023 030a 	bic.w	r3, r3, #10
 8005a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f003 030a 	and.w	r3, r3, #10
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	693a      	ldr	r2, [r7, #16]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40012c00 	.word	0x40012c00
 8005aa4:	40000400 	.word	0x40000400
 8005aa8:	40000800 	.word	0x40000800
 8005aac:	40000c00 	.word	0x40000c00
 8005ab0:	40013400 	.word	0x40013400
 8005ab4:	40014000 	.word	0x40014000

08005ab8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
 8005ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6a1b      	ldr	r3, [r3, #32]
 8005ad0:	f023 0210 	bic.w	r2, r3, #16
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	031b      	lsls	r3, r3, #12
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b0a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	621a      	str	r2, [r3, #32]
}
 8005b26:	bf00      	nop
 8005b28:	371c      	adds	r7, #28
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b087      	sub	sp, #28
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a1b      	ldr	r3, [r3, #32]
 8005b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	011b      	lsls	r3, r3, #4
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005b82:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	021b      	lsls	r3, r3, #8
 8005b88:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b087      	sub	sp, #28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
 8005bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	69db      	ldr	r3, [r3, #28]
 8005bce:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005be8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	031b      	lsls	r3, r3, #12
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005bfc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	031b      	lsls	r3, r3, #12
 8005c02:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005c06:	697a      	ldr	r2, [r7, #20]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	621a      	str	r2, [r3, #32]
}
 8005c18:	bf00      	nop
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr

08005c24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b087      	sub	sp, #28
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2201      	movs	r2, #1
 8005c38:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6a1a      	ldr	r2, [r3, #32]
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	43db      	mvns	r3, r3
 8005c46:	401a      	ands	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6a1a      	ldr	r2, [r3, #32]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	bf00      	nop
 8005c64:	371c      	adds	r7, #28
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e068      	b.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a2e      	ldr	r2, [pc, #184]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d108      	bne.n	8005cce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cc2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cd4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1e      	ldr	r2, [pc, #120]	@ (8005d68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d01d      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cfa:	d018      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	@ (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a18      	ldr	r2, [pc, #96]	@ (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a13      	ldr	r2, [pc, #76]	@ (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a14      	ldr	r2, [pc, #80]	@ (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d10c      	bne.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68ba      	ldr	r2, [r7, #8]
 8005d46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40000c00 	.word	0x40000c00
 8005d7c:	40014000 	.word	0x40014000

08005d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e040      	b.n	8005e50 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fb fb20 	bl	8001424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2224      	movs	r2, #36	@ 0x24
 8005de8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fb6a 	bl	80064dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f8af 	bl	8005f6c <UART_SetConfig>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e01b      	b.n	8005e50 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f042 0201 	orr.w	r2, r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fbe9 	bl	8006620 <UART_CheckIdleState>
 8005e4e:	4603      	mov	r3, r0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b08a      	sub	sp, #40	@ 0x28
 8005e5c:	af02      	add	r7, sp, #8
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	603b      	str	r3, [r7, #0]
 8005e64:	4613      	mov	r3, r2
 8005e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d177      	bne.n	8005f60 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_UART_Transmit+0x24>
 8005e76:	88fb      	ldrh	r3, [r7, #6]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e070      	b.n	8005f62 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2221      	movs	r2, #33	@ 0x21
 8005e8c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e8e:	f7fb fca7 	bl	80017e0 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	88fa      	ldrh	r2, [r7, #6]
 8005e98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	88fa      	ldrh	r2, [r7, #6]
 8005ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eac:	d108      	bne.n	8005ec0 <HAL_UART_Transmit+0x68>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d104      	bne.n	8005ec0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	e003      	b.n	8005ec8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ec8:	e02f      	b.n	8005f2a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	9300      	str	r3, [sp, #0]
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	2180      	movs	r1, #128	@ 0x80
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f000 fc4b 	bl	8006770 <UART_WaitOnFlagUntilTimeout>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d004      	beq.n	8005eea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e03b      	b.n	8005f62 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	881a      	ldrh	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005efc:	b292      	uxth	r2, r2
 8005efe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	3302      	adds	r3, #2
 8005f04:	61bb      	str	r3, [r7, #24]
 8005f06:	e007      	b.n	8005f18 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	781a      	ldrb	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	3301      	adds	r3, #1
 8005f16:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1c9      	bne.n	8005eca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	9300      	str	r3, [sp, #0]
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2140      	movs	r1, #64	@ 0x40
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f000 fc15 	bl	8006770 <UART_WaitOnFlagUntilTimeout>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d004      	beq.n	8005f56 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e005      	b.n	8005f62 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	e000      	b.n	8005f62 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005f60:	2302      	movs	r3, #2
  }
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3720      	adds	r7, #32
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f70:	b08a      	sub	sp, #40	@ 0x28
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	431a      	orrs	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	431a      	orrs	r2, r3
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	69db      	ldr	r3, [r3, #28]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	4ba4      	ldr	r3, [pc, #656]	@ (800622c <UART_SetConfig+0x2c0>)
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	6812      	ldr	r2, [r2, #0]
 8005fa2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fa4:	430b      	orrs	r3, r1
 8005fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a99      	ldr	r2, [pc, #612]	@ (8006230 <UART_SetConfig+0x2c4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d004      	beq.n	8005fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a90      	ldr	r2, [pc, #576]	@ (8006234 <UART_SetConfig+0x2c8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d126      	bne.n	8006044 <UART_SetConfig+0xd8>
 8005ff6:	4b90      	ldr	r3, [pc, #576]	@ (8006238 <UART_SetConfig+0x2cc>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffc:	f003 0303 	and.w	r3, r3, #3
 8006000:	2b03      	cmp	r3, #3
 8006002:	d81b      	bhi.n	800603c <UART_SetConfig+0xd0>
 8006004:	a201      	add	r2, pc, #4	@ (adr r2, 800600c <UART_SetConfig+0xa0>)
 8006006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600a:	bf00      	nop
 800600c:	0800601d 	.word	0x0800601d
 8006010:	0800602d 	.word	0x0800602d
 8006014:	08006025 	.word	0x08006025
 8006018:	08006035 	.word	0x08006035
 800601c:	2301      	movs	r3, #1
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006022:	e116      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006024:	2302      	movs	r3, #2
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800602a:	e112      	b.n	8006252 <UART_SetConfig+0x2e6>
 800602c:	2304      	movs	r3, #4
 800602e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006032:	e10e      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006034:	2308      	movs	r3, #8
 8006036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800603a:	e10a      	b.n	8006252 <UART_SetConfig+0x2e6>
 800603c:	2310      	movs	r3, #16
 800603e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006042:	e106      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a7c      	ldr	r2, [pc, #496]	@ (800623c <UART_SetConfig+0x2d0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d138      	bne.n	80060c0 <UART_SetConfig+0x154>
 800604e:	4b7a      	ldr	r3, [pc, #488]	@ (8006238 <UART_SetConfig+0x2cc>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006054:	f003 030c 	and.w	r3, r3, #12
 8006058:	2b0c      	cmp	r3, #12
 800605a:	d82d      	bhi.n	80060b8 <UART_SetConfig+0x14c>
 800605c:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <UART_SetConfig+0xf8>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	08006099 	.word	0x08006099
 8006068:	080060b9 	.word	0x080060b9
 800606c:	080060b9 	.word	0x080060b9
 8006070:	080060b9 	.word	0x080060b9
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060b9 	.word	0x080060b9
 800607c:	080060b9 	.word	0x080060b9
 8006080:	080060b9 	.word	0x080060b9
 8006084:	080060a1 	.word	0x080060a1
 8006088:	080060b9 	.word	0x080060b9
 800608c:	080060b9 	.word	0x080060b9
 8006090:	080060b9 	.word	0x080060b9
 8006094:	080060b1 	.word	0x080060b1
 8006098:	2300      	movs	r3, #0
 800609a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800609e:	e0d8      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060a0:	2302      	movs	r3, #2
 80060a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060a6:	e0d4      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060ae:	e0d0      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060b6:	e0cc      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060be:	e0c8      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a5e      	ldr	r2, [pc, #376]	@ (8006240 <UART_SetConfig+0x2d4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d125      	bne.n	8006116 <UART_SetConfig+0x1aa>
 80060ca:	4b5b      	ldr	r3, [pc, #364]	@ (8006238 <UART_SetConfig+0x2cc>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80060d4:	2b30      	cmp	r3, #48	@ 0x30
 80060d6:	d016      	beq.n	8006106 <UART_SetConfig+0x19a>
 80060d8:	2b30      	cmp	r3, #48	@ 0x30
 80060da:	d818      	bhi.n	800610e <UART_SetConfig+0x1a2>
 80060dc:	2b20      	cmp	r3, #32
 80060de:	d00a      	beq.n	80060f6 <UART_SetConfig+0x18a>
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	d814      	bhi.n	800610e <UART_SetConfig+0x1a2>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <UART_SetConfig+0x182>
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d008      	beq.n	80060fe <UART_SetConfig+0x192>
 80060ec:	e00f      	b.n	800610e <UART_SetConfig+0x1a2>
 80060ee:	2300      	movs	r3, #0
 80060f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060f4:	e0ad      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060f6:	2302      	movs	r3, #2
 80060f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80060fc:	e0a9      	b.n	8006252 <UART_SetConfig+0x2e6>
 80060fe:	2304      	movs	r3, #4
 8006100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006104:	e0a5      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006106:	2308      	movs	r3, #8
 8006108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800610c:	e0a1      	b.n	8006252 <UART_SetConfig+0x2e6>
 800610e:	2310      	movs	r3, #16
 8006110:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006114:	e09d      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a4a      	ldr	r2, [pc, #296]	@ (8006244 <UART_SetConfig+0x2d8>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d125      	bne.n	800616c <UART_SetConfig+0x200>
 8006120:	4b45      	ldr	r3, [pc, #276]	@ (8006238 <UART_SetConfig+0x2cc>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006126:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800612a:	2bc0      	cmp	r3, #192	@ 0xc0
 800612c:	d016      	beq.n	800615c <UART_SetConfig+0x1f0>
 800612e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006130:	d818      	bhi.n	8006164 <UART_SetConfig+0x1f8>
 8006132:	2b80      	cmp	r3, #128	@ 0x80
 8006134:	d00a      	beq.n	800614c <UART_SetConfig+0x1e0>
 8006136:	2b80      	cmp	r3, #128	@ 0x80
 8006138:	d814      	bhi.n	8006164 <UART_SetConfig+0x1f8>
 800613a:	2b00      	cmp	r3, #0
 800613c:	d002      	beq.n	8006144 <UART_SetConfig+0x1d8>
 800613e:	2b40      	cmp	r3, #64	@ 0x40
 8006140:	d008      	beq.n	8006154 <UART_SetConfig+0x1e8>
 8006142:	e00f      	b.n	8006164 <UART_SetConfig+0x1f8>
 8006144:	2300      	movs	r3, #0
 8006146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800614a:	e082      	b.n	8006252 <UART_SetConfig+0x2e6>
 800614c:	2302      	movs	r3, #2
 800614e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006152:	e07e      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006154:	2304      	movs	r3, #4
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800615a:	e07a      	b.n	8006252 <UART_SetConfig+0x2e6>
 800615c:	2308      	movs	r3, #8
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006162:	e076      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800616a:	e072      	b.n	8006252 <UART_SetConfig+0x2e6>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a35      	ldr	r2, [pc, #212]	@ (8006248 <UART_SetConfig+0x2dc>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d12a      	bne.n	80061cc <UART_SetConfig+0x260>
 8006176:	4b30      	ldr	r3, [pc, #192]	@ (8006238 <UART_SetConfig+0x2cc>)
 8006178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006180:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006184:	d01a      	beq.n	80061bc <UART_SetConfig+0x250>
 8006186:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800618a:	d81b      	bhi.n	80061c4 <UART_SetConfig+0x258>
 800618c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006190:	d00c      	beq.n	80061ac <UART_SetConfig+0x240>
 8006192:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006196:	d815      	bhi.n	80061c4 <UART_SetConfig+0x258>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <UART_SetConfig+0x238>
 800619c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a0:	d008      	beq.n	80061b4 <UART_SetConfig+0x248>
 80061a2:	e00f      	b.n	80061c4 <UART_SetConfig+0x258>
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061aa:	e052      	b.n	8006252 <UART_SetConfig+0x2e6>
 80061ac:	2302      	movs	r3, #2
 80061ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061b2:	e04e      	b.n	8006252 <UART_SetConfig+0x2e6>
 80061b4:	2304      	movs	r3, #4
 80061b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ba:	e04a      	b.n	8006252 <UART_SetConfig+0x2e6>
 80061bc:	2308      	movs	r3, #8
 80061be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061c2:	e046      	b.n	8006252 <UART_SetConfig+0x2e6>
 80061c4:	2310      	movs	r3, #16
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e042      	b.n	8006252 <UART_SetConfig+0x2e6>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a17      	ldr	r2, [pc, #92]	@ (8006230 <UART_SetConfig+0x2c4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d13a      	bne.n	800624c <UART_SetConfig+0x2e0>
 80061d6:	4b18      	ldr	r3, [pc, #96]	@ (8006238 <UART_SetConfig+0x2cc>)
 80061d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80061e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061e4:	d01a      	beq.n	800621c <UART_SetConfig+0x2b0>
 80061e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ea:	d81b      	bhi.n	8006224 <UART_SetConfig+0x2b8>
 80061ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f0:	d00c      	beq.n	800620c <UART_SetConfig+0x2a0>
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f6:	d815      	bhi.n	8006224 <UART_SetConfig+0x2b8>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <UART_SetConfig+0x298>
 80061fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006200:	d008      	beq.n	8006214 <UART_SetConfig+0x2a8>
 8006202:	e00f      	b.n	8006224 <UART_SetConfig+0x2b8>
 8006204:	2300      	movs	r3, #0
 8006206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800620a:	e022      	b.n	8006252 <UART_SetConfig+0x2e6>
 800620c:	2302      	movs	r3, #2
 800620e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006212:	e01e      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006214:	2304      	movs	r3, #4
 8006216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800621a:	e01a      	b.n	8006252 <UART_SetConfig+0x2e6>
 800621c:	2308      	movs	r3, #8
 800621e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006222:	e016      	b.n	8006252 <UART_SetConfig+0x2e6>
 8006224:	2310      	movs	r3, #16
 8006226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800622a:	e012      	b.n	8006252 <UART_SetConfig+0x2e6>
 800622c:	efff69f3 	.word	0xefff69f3
 8006230:	40008000 	.word	0x40008000
 8006234:	40013800 	.word	0x40013800
 8006238:	40021000 	.word	0x40021000
 800623c:	40004400 	.word	0x40004400
 8006240:	40004800 	.word	0x40004800
 8006244:	40004c00 	.word	0x40004c00
 8006248:	40005000 	.word	0x40005000
 800624c:	2310      	movs	r3, #16
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a9f      	ldr	r2, [pc, #636]	@ (80064d4 <UART_SetConfig+0x568>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d17a      	bne.n	8006352 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800625c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006260:	2b08      	cmp	r3, #8
 8006262:	d824      	bhi.n	80062ae <UART_SetConfig+0x342>
 8006264:	a201      	add	r2, pc, #4	@ (adr r2, 800626c <UART_SetConfig+0x300>)
 8006266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626a:	bf00      	nop
 800626c:	08006291 	.word	0x08006291
 8006270:	080062af 	.word	0x080062af
 8006274:	08006299 	.word	0x08006299
 8006278:	080062af 	.word	0x080062af
 800627c:	0800629f 	.word	0x0800629f
 8006280:	080062af 	.word	0x080062af
 8006284:	080062af 	.word	0x080062af
 8006288:	080062af 	.word	0x080062af
 800628c:	080062a7 	.word	0x080062a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006290:	f7fd faea 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8006294:	61f8      	str	r0, [r7, #28]
        break;
 8006296:	e010      	b.n	80062ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006298:	4b8f      	ldr	r3, [pc, #572]	@ (80064d8 <UART_SetConfig+0x56c>)
 800629a:	61fb      	str	r3, [r7, #28]
        break;
 800629c:	e00d      	b.n	80062ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800629e:	f7fd fa4b 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80062a2:	61f8      	str	r0, [r7, #28]
        break;
 80062a4:	e009      	b.n	80062ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062aa:	61fb      	str	r3, [r7, #28]
        break;
 80062ac:	e005      	b.n	80062ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80062b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	f000 80fb 	beq.w	80064b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	4413      	add	r3, r2
 80062cc:	69fa      	ldr	r2, [r7, #28]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d305      	bcc.n	80062de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d903      	bls.n	80062e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80062e4:	e0e8      	b.n	80064b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	2200      	movs	r2, #0
 80062ea:	461c      	mov	r4, r3
 80062ec:	4615      	mov	r5, r2
 80062ee:	f04f 0200 	mov.w	r2, #0
 80062f2:	f04f 0300 	mov.w	r3, #0
 80062f6:	022b      	lsls	r3, r5, #8
 80062f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80062fc:	0222      	lsls	r2, r4, #8
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	6849      	ldr	r1, [r1, #4]
 8006302:	0849      	lsrs	r1, r1, #1
 8006304:	2000      	movs	r0, #0
 8006306:	4688      	mov	r8, r1
 8006308:	4681      	mov	r9, r0
 800630a:	eb12 0a08 	adds.w	sl, r2, r8
 800630e:	eb43 0b09 	adc.w	fp, r3, r9
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006320:	4650      	mov	r0, sl
 8006322:	4659      	mov	r1, fp
 8006324:	f7f9 ffa4 	bl	8000270 <__aeabi_uldivmod>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4613      	mov	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006336:	d308      	bcc.n	800634a <UART_SetConfig+0x3de>
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800633e:	d204      	bcs.n	800634a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	60da      	str	r2, [r3, #12]
 8006348:	e0b6      	b.n	80064b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006350:	e0b2      	b.n	80064b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800635a:	d15e      	bne.n	800641a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800635c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006360:	2b08      	cmp	r3, #8
 8006362:	d828      	bhi.n	80063b6 <UART_SetConfig+0x44a>
 8006364:	a201      	add	r2, pc, #4	@ (adr r2, 800636c <UART_SetConfig+0x400>)
 8006366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636a:	bf00      	nop
 800636c:	08006391 	.word	0x08006391
 8006370:	08006399 	.word	0x08006399
 8006374:	080063a1 	.word	0x080063a1
 8006378:	080063b7 	.word	0x080063b7
 800637c:	080063a7 	.word	0x080063a7
 8006380:	080063b7 	.word	0x080063b7
 8006384:	080063b7 	.word	0x080063b7
 8006388:	080063b7 	.word	0x080063b7
 800638c:	080063af 	.word	0x080063af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006390:	f7fd fa6a 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8006394:	61f8      	str	r0, [r7, #28]
        break;
 8006396:	e014      	b.n	80063c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006398:	f7fd fa7c 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 800639c:	61f8      	str	r0, [r7, #28]
        break;
 800639e:	e010      	b.n	80063c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063a0:	4b4d      	ldr	r3, [pc, #308]	@ (80064d8 <UART_SetConfig+0x56c>)
 80063a2:	61fb      	str	r3, [r7, #28]
        break;
 80063a4:	e00d      	b.n	80063c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a6:	f7fd f9c7 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80063aa:	61f8      	str	r0, [r7, #28]
        break;
 80063ac:	e009      	b.n	80063c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063b2:	61fb      	str	r3, [r7, #28]
        break;
 80063b4:	e005      	b.n	80063c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80063b6:	2300      	movs	r3, #0
 80063b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80063c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d077      	beq.n	80064b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	005a      	lsls	r2, r3, #1
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	085b      	lsrs	r3, r3, #1
 80063d2:	441a      	add	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	2b0f      	cmp	r3, #15
 80063e2:	d916      	bls.n	8006412 <UART_SetConfig+0x4a6>
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063ea:	d212      	bcs.n	8006412 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f023 030f 	bic.w	r3, r3, #15
 80063f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	085b      	lsrs	r3, r3, #1
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	b29a      	uxth	r2, r3
 8006402:	8afb      	ldrh	r3, [r7, #22]
 8006404:	4313      	orrs	r3, r2
 8006406:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	8afa      	ldrh	r2, [r7, #22]
 800640e:	60da      	str	r2, [r3, #12]
 8006410:	e052      	b.n	80064b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006418:	e04e      	b.n	80064b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800641a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800641e:	2b08      	cmp	r3, #8
 8006420:	d827      	bhi.n	8006472 <UART_SetConfig+0x506>
 8006422:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <UART_SetConfig+0x4bc>)
 8006424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	08006473 	.word	0x08006473
 8006438:	08006463 	.word	0x08006463
 800643c:	08006473 	.word	0x08006473
 8006440:	08006473 	.word	0x08006473
 8006444:	08006473 	.word	0x08006473
 8006448:	0800646b 	.word	0x0800646b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800644c:	f7fd fa0c 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8006450:	61f8      	str	r0, [r7, #28]
        break;
 8006452:	e014      	b.n	800647e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006454:	f7fd fa1e 	bl	8003894 <HAL_RCC_GetPCLK2Freq>
 8006458:	61f8      	str	r0, [r7, #28]
        break;
 800645a:	e010      	b.n	800647e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800645c:	4b1e      	ldr	r3, [pc, #120]	@ (80064d8 <UART_SetConfig+0x56c>)
 800645e:	61fb      	str	r3, [r7, #28]
        break;
 8006460:	e00d      	b.n	800647e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006462:	f7fd f969 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 8006466:	61f8      	str	r0, [r7, #28]
        break;
 8006468:	e009      	b.n	800647e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800646e:	61fb      	str	r3, [r7, #28]
        break;
 8006470:	e005      	b.n	800647e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800647c:	bf00      	nop
    }

    if (pclk != 0U)
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d019      	beq.n	80064b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	085a      	lsrs	r2, r3, #1
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	fbb2 f3f3 	udiv	r3, r2, r3
 8006496:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	2b0f      	cmp	r3, #15
 800649c:	d909      	bls.n	80064b2 <UART_SetConfig+0x546>
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a4:	d205      	bcs.n	80064b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	60da      	str	r2, [r3, #12]
 80064b0:	e002      	b.n	80064b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80064c4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	@ 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064d2:	bf00      	nop
 80064d4:	40008000 	.word	0x40008000
 80064d8:	00f42400 	.word	0x00f42400

080064dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e8:	f003 0308 	and.w	r3, r3, #8
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00a      	beq.n	8006506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00a      	beq.n	8006528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b00      	cmp	r3, #0
 8006532:	d00a      	beq.n	800654a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654e:	f003 0304 	and.w	r3, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00a      	beq.n	800656c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	f003 0310 	and.w	r3, r3, #16
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00a      	beq.n	800658e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	430a      	orrs	r2, r1
 80065d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065da:	d10a      	bne.n	80065f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b098      	sub	sp, #96	@ 0x60
 8006624:	af02      	add	r7, sp, #8
 8006626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006630:	f7fb f8d6 	bl	80017e0 <HAL_GetTick>
 8006634:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b08      	cmp	r3, #8
 8006642:	d12e      	bne.n	80066a2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006644:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006648:	9300      	str	r3, [sp, #0]
 800664a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664c:	2200      	movs	r2, #0
 800664e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f88c 	bl	8006770 <UART_WaitOnFlagUntilTimeout>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d021      	beq.n	80066a2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	e853 3f00 	ldrex	r3, [r3]
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800666c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006672:	653b      	str	r3, [r7, #80]	@ 0x50
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800667c:	647b      	str	r3, [r7, #68]	@ 0x44
 800667e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006682:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800668a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e6      	bne.n	800665e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2220      	movs	r2, #32
 8006694:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e062      	b.n	8006768 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d149      	bne.n	8006744 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b8:	2200      	movs	r2, #0
 80066ba:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f856 	bl	8006770 <UART_WaitOnFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d03c      	beq.n	8006744 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	623b      	str	r3, [r7, #32]
   return(result);
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e6      	bne.n	80066ca <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3308      	adds	r3, #8
 8006702:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	e853 3f00 	ldrex	r3, [r3]
 800670a:	60fb      	str	r3, [r7, #12]
   return(result);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0301 	bic.w	r3, r3, #1
 8006712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3308      	adds	r3, #8
 800671a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800671c:	61fa      	str	r2, [r7, #28]
 800671e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006720:	69b9      	ldr	r1, [r7, #24]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	e841 2300 	strex	r3, r2, [r1]
 8006728:	617b      	str	r3, [r7, #20]
   return(result);
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e5      	bne.n	80066fc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2220      	movs	r2, #32
 8006734:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e011      	b.n	8006768 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3758      	adds	r7, #88	@ 0x58
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006780:	e049      	b.n	8006816 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006788:	d045      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fb f829 	bl	80017e0 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e048      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0304 	and.w	r3, r3, #4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d031      	beq.n	8006816 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d110      	bne.n	80067e2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2208      	movs	r2, #8
 80067c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 f838 	bl	800683e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2208      	movs	r2, #8
 80067d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e029      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69db      	ldr	r3, [r3, #28]
 80067e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f0:	d111      	bne.n	8006816 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	f000 f81e 	bl	800683e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2220      	movs	r2, #32
 8006806:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e00f      	b.n	8006836 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	69da      	ldr	r2, [r3, #28]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	4013      	ands	r3, r2
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	429a      	cmp	r2, r3
 8006824:	bf0c      	ite	eq
 8006826:	2301      	moveq	r3, #1
 8006828:	2300      	movne	r3, #0
 800682a:	b2db      	uxtb	r3, r3
 800682c:	461a      	mov	r2, r3
 800682e:	79fb      	ldrb	r3, [r7, #7]
 8006830:	429a      	cmp	r2, r3
 8006832:	d0a6      	beq.n	8006782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}

0800683e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800683e:	b480      	push	{r7}
 8006840:	b095      	sub	sp, #84	@ 0x54
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800684e:	e853 3f00 	ldrex	r3, [r3]
 8006852:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800685a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006864:	643b      	str	r3, [r7, #64]	@ 0x40
 8006866:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800686a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e6      	bne.n	8006846 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3308      	adds	r3, #8
 800687e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	e853 3f00 	ldrex	r3, [r3]
 8006886:	61fb      	str	r3, [r7, #28]
   return(result);
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	f023 0301 	bic.w	r3, r3, #1
 800688e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006898:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800689a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800689e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068a0:	e841 2300 	strex	r3, r2, [r1]
 80068a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d1e5      	bne.n	8006878 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d118      	bne.n	80068e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	f023 0310 	bic.w	r3, r3, #16
 80068c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6979      	ldr	r1, [r7, #20]
 80068d8:	69ba      	ldr	r2, [r7, #24]
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	613b      	str	r3, [r7, #16]
   return(result);
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e6      	bne.n	80068b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2220      	movs	r2, #32
 80068ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80068fa:	bf00      	nop
 80068fc:	3754      	adds	r7, #84	@ 0x54
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
	...

08006908 <std>:
 8006908:	2300      	movs	r3, #0
 800690a:	b510      	push	{r4, lr}
 800690c:	4604      	mov	r4, r0
 800690e:	e9c0 3300 	strd	r3, r3, [r0]
 8006912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006916:	6083      	str	r3, [r0, #8]
 8006918:	8181      	strh	r1, [r0, #12]
 800691a:	6643      	str	r3, [r0, #100]	@ 0x64
 800691c:	81c2      	strh	r2, [r0, #14]
 800691e:	6183      	str	r3, [r0, #24]
 8006920:	4619      	mov	r1, r3
 8006922:	2208      	movs	r2, #8
 8006924:	305c      	adds	r0, #92	@ 0x5c
 8006926:	f000 f926 	bl	8006b76 <memset>
 800692a:	4b0d      	ldr	r3, [pc, #52]	@ (8006960 <std+0x58>)
 800692c:	6263      	str	r3, [r4, #36]	@ 0x24
 800692e:	4b0d      	ldr	r3, [pc, #52]	@ (8006964 <std+0x5c>)
 8006930:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006932:	4b0d      	ldr	r3, [pc, #52]	@ (8006968 <std+0x60>)
 8006934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006936:	4b0d      	ldr	r3, [pc, #52]	@ (800696c <std+0x64>)
 8006938:	6323      	str	r3, [r4, #48]	@ 0x30
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <std+0x68>)
 800693c:	6224      	str	r4, [r4, #32]
 800693e:	429c      	cmp	r4, r3
 8006940:	d006      	beq.n	8006950 <std+0x48>
 8006942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006946:	4294      	cmp	r4, r2
 8006948:	d002      	beq.n	8006950 <std+0x48>
 800694a:	33d0      	adds	r3, #208	@ 0xd0
 800694c:	429c      	cmp	r4, r3
 800694e:	d105      	bne.n	800695c <std+0x54>
 8006950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006958:	f000 b986 	b.w	8006c68 <__retarget_lock_init_recursive>
 800695c:	bd10      	pop	{r4, pc}
 800695e:	bf00      	nop
 8006960:	08006af1 	.word	0x08006af1
 8006964:	08006b13 	.word	0x08006b13
 8006968:	08006b4b 	.word	0x08006b4b
 800696c:	08006b6f 	.word	0x08006b6f
 8006970:	20000384 	.word	0x20000384

08006974 <stdio_exit_handler>:
 8006974:	4a02      	ldr	r2, [pc, #8]	@ (8006980 <stdio_exit_handler+0xc>)
 8006976:	4903      	ldr	r1, [pc, #12]	@ (8006984 <stdio_exit_handler+0x10>)
 8006978:	4803      	ldr	r0, [pc, #12]	@ (8006988 <stdio_exit_handler+0x14>)
 800697a:	f000 b869 	b.w	8006a50 <_fwalk_sglue>
 800697e:	bf00      	nop
 8006980:	20000044 	.word	0x20000044
 8006984:	080077b9 	.word	0x080077b9
 8006988:	20000054 	.word	0x20000054

0800698c <cleanup_stdio>:
 800698c:	6841      	ldr	r1, [r0, #4]
 800698e:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <cleanup_stdio+0x34>)
 8006990:	4299      	cmp	r1, r3
 8006992:	b510      	push	{r4, lr}
 8006994:	4604      	mov	r4, r0
 8006996:	d001      	beq.n	800699c <cleanup_stdio+0x10>
 8006998:	f000 ff0e 	bl	80077b8 <_fflush_r>
 800699c:	68a1      	ldr	r1, [r4, #8]
 800699e:	4b09      	ldr	r3, [pc, #36]	@ (80069c4 <cleanup_stdio+0x38>)
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <cleanup_stdio+0x1e>
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 ff07 	bl	80077b8 <_fflush_r>
 80069aa:	68e1      	ldr	r1, [r4, #12]
 80069ac:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <cleanup_stdio+0x3c>)
 80069ae:	4299      	cmp	r1, r3
 80069b0:	d004      	beq.n	80069bc <cleanup_stdio+0x30>
 80069b2:	4620      	mov	r0, r4
 80069b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069b8:	f000 befe 	b.w	80077b8 <_fflush_r>
 80069bc:	bd10      	pop	{r4, pc}
 80069be:	bf00      	nop
 80069c0:	20000384 	.word	0x20000384
 80069c4:	200003ec 	.word	0x200003ec
 80069c8:	20000454 	.word	0x20000454

080069cc <global_stdio_init.part.0>:
 80069cc:	b510      	push	{r4, lr}
 80069ce:	4b0b      	ldr	r3, [pc, #44]	@ (80069fc <global_stdio_init.part.0+0x30>)
 80069d0:	4c0b      	ldr	r4, [pc, #44]	@ (8006a00 <global_stdio_init.part.0+0x34>)
 80069d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a04 <global_stdio_init.part.0+0x38>)
 80069d4:	601a      	str	r2, [r3, #0]
 80069d6:	4620      	mov	r0, r4
 80069d8:	2200      	movs	r2, #0
 80069da:	2104      	movs	r1, #4
 80069dc:	f7ff ff94 	bl	8006908 <std>
 80069e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069e4:	2201      	movs	r2, #1
 80069e6:	2109      	movs	r1, #9
 80069e8:	f7ff ff8e 	bl	8006908 <std>
 80069ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80069f0:	2202      	movs	r2, #2
 80069f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f6:	2112      	movs	r1, #18
 80069f8:	f7ff bf86 	b.w	8006908 <std>
 80069fc:	200004bc 	.word	0x200004bc
 8006a00:	20000384 	.word	0x20000384
 8006a04:	08006975 	.word	0x08006975

08006a08 <__sfp_lock_acquire>:
 8006a08:	4801      	ldr	r0, [pc, #4]	@ (8006a10 <__sfp_lock_acquire+0x8>)
 8006a0a:	f000 b92e 	b.w	8006c6a <__retarget_lock_acquire_recursive>
 8006a0e:	bf00      	nop
 8006a10:	200004c5 	.word	0x200004c5

08006a14 <__sfp_lock_release>:
 8006a14:	4801      	ldr	r0, [pc, #4]	@ (8006a1c <__sfp_lock_release+0x8>)
 8006a16:	f000 b929 	b.w	8006c6c <__retarget_lock_release_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	200004c5 	.word	0x200004c5

08006a20 <__sinit>:
 8006a20:	b510      	push	{r4, lr}
 8006a22:	4604      	mov	r4, r0
 8006a24:	f7ff fff0 	bl	8006a08 <__sfp_lock_acquire>
 8006a28:	6a23      	ldr	r3, [r4, #32]
 8006a2a:	b11b      	cbz	r3, 8006a34 <__sinit+0x14>
 8006a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a30:	f7ff bff0 	b.w	8006a14 <__sfp_lock_release>
 8006a34:	4b04      	ldr	r3, [pc, #16]	@ (8006a48 <__sinit+0x28>)
 8006a36:	6223      	str	r3, [r4, #32]
 8006a38:	4b04      	ldr	r3, [pc, #16]	@ (8006a4c <__sinit+0x2c>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1f5      	bne.n	8006a2c <__sinit+0xc>
 8006a40:	f7ff ffc4 	bl	80069cc <global_stdio_init.part.0>
 8006a44:	e7f2      	b.n	8006a2c <__sinit+0xc>
 8006a46:	bf00      	nop
 8006a48:	0800698d 	.word	0x0800698d
 8006a4c:	200004bc 	.word	0x200004bc

08006a50 <_fwalk_sglue>:
 8006a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a54:	4607      	mov	r7, r0
 8006a56:	4688      	mov	r8, r1
 8006a58:	4614      	mov	r4, r2
 8006a5a:	2600      	movs	r6, #0
 8006a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a60:	f1b9 0901 	subs.w	r9, r9, #1
 8006a64:	d505      	bpl.n	8006a72 <_fwalk_sglue+0x22>
 8006a66:	6824      	ldr	r4, [r4, #0]
 8006a68:	2c00      	cmp	r4, #0
 8006a6a:	d1f7      	bne.n	8006a5c <_fwalk_sglue+0xc>
 8006a6c:	4630      	mov	r0, r6
 8006a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a72:	89ab      	ldrh	r3, [r5, #12]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d907      	bls.n	8006a88 <_fwalk_sglue+0x38>
 8006a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	d003      	beq.n	8006a88 <_fwalk_sglue+0x38>
 8006a80:	4629      	mov	r1, r5
 8006a82:	4638      	mov	r0, r7
 8006a84:	47c0      	blx	r8
 8006a86:	4306      	orrs	r6, r0
 8006a88:	3568      	adds	r5, #104	@ 0x68
 8006a8a:	e7e9      	b.n	8006a60 <_fwalk_sglue+0x10>

08006a8c <iprintf>:
 8006a8c:	b40f      	push	{r0, r1, r2, r3}
 8006a8e:	b507      	push	{r0, r1, r2, lr}
 8006a90:	4906      	ldr	r1, [pc, #24]	@ (8006aac <iprintf+0x20>)
 8006a92:	ab04      	add	r3, sp, #16
 8006a94:	6808      	ldr	r0, [r1, #0]
 8006a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a9a:	6881      	ldr	r1, [r0, #8]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	f000 fb61 	bl	8007164 <_vfiprintf_r>
 8006aa2:	b003      	add	sp, #12
 8006aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aa8:	b004      	add	sp, #16
 8006aaa:	4770      	bx	lr
 8006aac:	20000050 	.word	0x20000050

08006ab0 <siprintf>:
 8006ab0:	b40e      	push	{r1, r2, r3}
 8006ab2:	b500      	push	{lr}
 8006ab4:	b09c      	sub	sp, #112	@ 0x70
 8006ab6:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ab8:	9002      	str	r0, [sp, #8]
 8006aba:	9006      	str	r0, [sp, #24]
 8006abc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ac0:	4809      	ldr	r0, [pc, #36]	@ (8006ae8 <siprintf+0x38>)
 8006ac2:	9107      	str	r1, [sp, #28]
 8006ac4:	9104      	str	r1, [sp, #16]
 8006ac6:	4909      	ldr	r1, [pc, #36]	@ (8006aec <siprintf+0x3c>)
 8006ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006acc:	9105      	str	r1, [sp, #20]
 8006ace:	6800      	ldr	r0, [r0, #0]
 8006ad0:	9301      	str	r3, [sp, #4]
 8006ad2:	a902      	add	r1, sp, #8
 8006ad4:	f000 fa20 	bl	8006f18 <_svfiprintf_r>
 8006ad8:	9b02      	ldr	r3, [sp, #8]
 8006ada:	2200      	movs	r2, #0
 8006adc:	701a      	strb	r2, [r3, #0]
 8006ade:	b01c      	add	sp, #112	@ 0x70
 8006ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ae4:	b003      	add	sp, #12
 8006ae6:	4770      	bx	lr
 8006ae8:	20000050 	.word	0x20000050
 8006aec:	ffff0208 	.word	0xffff0208

08006af0 <__sread>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	460c      	mov	r4, r1
 8006af4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af8:	f000 f868 	bl	8006bcc <_read_r>
 8006afc:	2800      	cmp	r0, #0
 8006afe:	bfab      	itete	ge
 8006b00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b02:	89a3      	ldrhlt	r3, [r4, #12]
 8006b04:	181b      	addge	r3, r3, r0
 8006b06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b0a:	bfac      	ite	ge
 8006b0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b0e:	81a3      	strhlt	r3, [r4, #12]
 8006b10:	bd10      	pop	{r4, pc}

08006b12 <__swrite>:
 8006b12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b16:	461f      	mov	r7, r3
 8006b18:	898b      	ldrh	r3, [r1, #12]
 8006b1a:	05db      	lsls	r3, r3, #23
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	4616      	mov	r6, r2
 8006b22:	d505      	bpl.n	8006b30 <__swrite+0x1e>
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	2302      	movs	r3, #2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f000 f83c 	bl	8006ba8 <_lseek_r>
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b3a:	81a3      	strh	r3, [r4, #12]
 8006b3c:	4632      	mov	r2, r6
 8006b3e:	463b      	mov	r3, r7
 8006b40:	4628      	mov	r0, r5
 8006b42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	f000 b853 	b.w	8006bf0 <_write_r>

08006b4a <__sseek>:
 8006b4a:	b510      	push	{r4, lr}
 8006b4c:	460c      	mov	r4, r1
 8006b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b52:	f000 f829 	bl	8006ba8 <_lseek_r>
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	bf15      	itete	ne
 8006b5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b66:	81a3      	strheq	r3, [r4, #12]
 8006b68:	bf18      	it	ne
 8006b6a:	81a3      	strhne	r3, [r4, #12]
 8006b6c:	bd10      	pop	{r4, pc}

08006b6e <__sclose>:
 8006b6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b72:	f000 b809 	b.w	8006b88 <_close_r>

08006b76 <memset>:
 8006b76:	4402      	add	r2, r0
 8006b78:	4603      	mov	r3, r0
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d100      	bne.n	8006b80 <memset+0xa>
 8006b7e:	4770      	bx	lr
 8006b80:	f803 1b01 	strb.w	r1, [r3], #1
 8006b84:	e7f9      	b.n	8006b7a <memset+0x4>
	...

08006b88 <_close_r>:
 8006b88:	b538      	push	{r3, r4, r5, lr}
 8006b8a:	4d06      	ldr	r5, [pc, #24]	@ (8006ba4 <_close_r+0x1c>)
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	4604      	mov	r4, r0
 8006b90:	4608      	mov	r0, r1
 8006b92:	602b      	str	r3, [r5, #0]
 8006b94:	f7fa fd15 	bl	80015c2 <_close>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_close_r+0x1a>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_close_r+0x1a>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	200004c0 	.word	0x200004c0

08006ba8 <_lseek_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4d07      	ldr	r5, [pc, #28]	@ (8006bc8 <_lseek_r+0x20>)
 8006bac:	4604      	mov	r4, r0
 8006bae:	4608      	mov	r0, r1
 8006bb0:	4611      	mov	r1, r2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	602a      	str	r2, [r5, #0]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f7fa fd2a 	bl	8001610 <_lseek>
 8006bbc:	1c43      	adds	r3, r0, #1
 8006bbe:	d102      	bne.n	8006bc6 <_lseek_r+0x1e>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	b103      	cbz	r3, 8006bc6 <_lseek_r+0x1e>
 8006bc4:	6023      	str	r3, [r4, #0]
 8006bc6:	bd38      	pop	{r3, r4, r5, pc}
 8006bc8:	200004c0 	.word	0x200004c0

08006bcc <_read_r>:
 8006bcc:	b538      	push	{r3, r4, r5, lr}
 8006bce:	4d07      	ldr	r5, [pc, #28]	@ (8006bec <_read_r+0x20>)
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	4608      	mov	r0, r1
 8006bd4:	4611      	mov	r1, r2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	602a      	str	r2, [r5, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f7fa fcb8 	bl	8001550 <_read>
 8006be0:	1c43      	adds	r3, r0, #1
 8006be2:	d102      	bne.n	8006bea <_read_r+0x1e>
 8006be4:	682b      	ldr	r3, [r5, #0]
 8006be6:	b103      	cbz	r3, 8006bea <_read_r+0x1e>
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	bd38      	pop	{r3, r4, r5, pc}
 8006bec:	200004c0 	.word	0x200004c0

08006bf0 <_write_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d07      	ldr	r5, [pc, #28]	@ (8006c10 <_write_r+0x20>)
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	4608      	mov	r0, r1
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f7fa fcc3 	bl	800158a <_write>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_write_r+0x1e>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_write_r+0x1e>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	200004c0 	.word	0x200004c0

08006c14 <__errno>:
 8006c14:	4b01      	ldr	r3, [pc, #4]	@ (8006c1c <__errno+0x8>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20000050 	.word	0x20000050

08006c20 <__libc_init_array>:
 8006c20:	b570      	push	{r4, r5, r6, lr}
 8006c22:	4d0d      	ldr	r5, [pc, #52]	@ (8006c58 <__libc_init_array+0x38>)
 8006c24:	4c0d      	ldr	r4, [pc, #52]	@ (8006c5c <__libc_init_array+0x3c>)
 8006c26:	1b64      	subs	r4, r4, r5
 8006c28:	10a4      	asrs	r4, r4, #2
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	42a6      	cmp	r6, r4
 8006c2e:	d109      	bne.n	8006c44 <__libc_init_array+0x24>
 8006c30:	4d0b      	ldr	r5, [pc, #44]	@ (8006c60 <__libc_init_array+0x40>)
 8006c32:	4c0c      	ldr	r4, [pc, #48]	@ (8006c64 <__libc_init_array+0x44>)
 8006c34:	f000 ff6e 	bl	8007b14 <_init>
 8006c38:	1b64      	subs	r4, r4, r5
 8006c3a:	10a4      	asrs	r4, r4, #2
 8006c3c:	2600      	movs	r6, #0
 8006c3e:	42a6      	cmp	r6, r4
 8006c40:	d105      	bne.n	8006c4e <__libc_init_array+0x2e>
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c48:	4798      	blx	r3
 8006c4a:	3601      	adds	r6, #1
 8006c4c:	e7ee      	b.n	8006c2c <__libc_init_array+0xc>
 8006c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c52:	4798      	blx	r3
 8006c54:	3601      	adds	r6, #1
 8006c56:	e7f2      	b.n	8006c3e <__libc_init_array+0x1e>
 8006c58:	08007cd8 	.word	0x08007cd8
 8006c5c:	08007cd8 	.word	0x08007cd8
 8006c60:	08007cd8 	.word	0x08007cd8
 8006c64:	08007cdc 	.word	0x08007cdc

08006c68 <__retarget_lock_init_recursive>:
 8006c68:	4770      	bx	lr

08006c6a <__retarget_lock_acquire_recursive>:
 8006c6a:	4770      	bx	lr

08006c6c <__retarget_lock_release_recursive>:
 8006c6c:	4770      	bx	lr
	...

08006c70 <_free_r>:
 8006c70:	b538      	push	{r3, r4, r5, lr}
 8006c72:	4605      	mov	r5, r0
 8006c74:	2900      	cmp	r1, #0
 8006c76:	d041      	beq.n	8006cfc <_free_r+0x8c>
 8006c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c7c:	1f0c      	subs	r4, r1, #4
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	bfb8      	it	lt
 8006c82:	18e4      	addlt	r4, r4, r3
 8006c84:	f000 f8e0 	bl	8006e48 <__malloc_lock>
 8006c88:	4a1d      	ldr	r2, [pc, #116]	@ (8006d00 <_free_r+0x90>)
 8006c8a:	6813      	ldr	r3, [r2, #0]
 8006c8c:	b933      	cbnz	r3, 8006c9c <_free_r+0x2c>
 8006c8e:	6063      	str	r3, [r4, #4]
 8006c90:	6014      	str	r4, [r2, #0]
 8006c92:	4628      	mov	r0, r5
 8006c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c98:	f000 b8dc 	b.w	8006e54 <__malloc_unlock>
 8006c9c:	42a3      	cmp	r3, r4
 8006c9e:	d908      	bls.n	8006cb2 <_free_r+0x42>
 8006ca0:	6820      	ldr	r0, [r4, #0]
 8006ca2:	1821      	adds	r1, r4, r0
 8006ca4:	428b      	cmp	r3, r1
 8006ca6:	bf01      	itttt	eq
 8006ca8:	6819      	ldreq	r1, [r3, #0]
 8006caa:	685b      	ldreq	r3, [r3, #4]
 8006cac:	1809      	addeq	r1, r1, r0
 8006cae:	6021      	streq	r1, [r4, #0]
 8006cb0:	e7ed      	b.n	8006c8e <_free_r+0x1e>
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	b10b      	cbz	r3, 8006cbc <_free_r+0x4c>
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	d9fa      	bls.n	8006cb2 <_free_r+0x42>
 8006cbc:	6811      	ldr	r1, [r2, #0]
 8006cbe:	1850      	adds	r0, r2, r1
 8006cc0:	42a0      	cmp	r0, r4
 8006cc2:	d10b      	bne.n	8006cdc <_free_r+0x6c>
 8006cc4:	6820      	ldr	r0, [r4, #0]
 8006cc6:	4401      	add	r1, r0
 8006cc8:	1850      	adds	r0, r2, r1
 8006cca:	4283      	cmp	r3, r0
 8006ccc:	6011      	str	r1, [r2, #0]
 8006cce:	d1e0      	bne.n	8006c92 <_free_r+0x22>
 8006cd0:	6818      	ldr	r0, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	6053      	str	r3, [r2, #4]
 8006cd6:	4408      	add	r0, r1
 8006cd8:	6010      	str	r0, [r2, #0]
 8006cda:	e7da      	b.n	8006c92 <_free_r+0x22>
 8006cdc:	d902      	bls.n	8006ce4 <_free_r+0x74>
 8006cde:	230c      	movs	r3, #12
 8006ce0:	602b      	str	r3, [r5, #0]
 8006ce2:	e7d6      	b.n	8006c92 <_free_r+0x22>
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	1821      	adds	r1, r4, r0
 8006ce8:	428b      	cmp	r3, r1
 8006cea:	bf04      	itt	eq
 8006cec:	6819      	ldreq	r1, [r3, #0]
 8006cee:	685b      	ldreq	r3, [r3, #4]
 8006cf0:	6063      	str	r3, [r4, #4]
 8006cf2:	bf04      	itt	eq
 8006cf4:	1809      	addeq	r1, r1, r0
 8006cf6:	6021      	streq	r1, [r4, #0]
 8006cf8:	6054      	str	r4, [r2, #4]
 8006cfa:	e7ca      	b.n	8006c92 <_free_r+0x22>
 8006cfc:	bd38      	pop	{r3, r4, r5, pc}
 8006cfe:	bf00      	nop
 8006d00:	200004cc 	.word	0x200004cc

08006d04 <sbrk_aligned>:
 8006d04:	b570      	push	{r4, r5, r6, lr}
 8006d06:	4e0f      	ldr	r6, [pc, #60]	@ (8006d44 <sbrk_aligned+0x40>)
 8006d08:	460c      	mov	r4, r1
 8006d0a:	6831      	ldr	r1, [r6, #0]
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	b911      	cbnz	r1, 8006d16 <sbrk_aligned+0x12>
 8006d10:	f000 fe28 	bl	8007964 <_sbrk_r>
 8006d14:	6030      	str	r0, [r6, #0]
 8006d16:	4621      	mov	r1, r4
 8006d18:	4628      	mov	r0, r5
 8006d1a:	f000 fe23 	bl	8007964 <_sbrk_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d103      	bne.n	8006d2a <sbrk_aligned+0x26>
 8006d22:	f04f 34ff 	mov.w	r4, #4294967295
 8006d26:	4620      	mov	r0, r4
 8006d28:	bd70      	pop	{r4, r5, r6, pc}
 8006d2a:	1cc4      	adds	r4, r0, #3
 8006d2c:	f024 0403 	bic.w	r4, r4, #3
 8006d30:	42a0      	cmp	r0, r4
 8006d32:	d0f8      	beq.n	8006d26 <sbrk_aligned+0x22>
 8006d34:	1a21      	subs	r1, r4, r0
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fe14 	bl	8007964 <_sbrk_r>
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d1f2      	bne.n	8006d26 <sbrk_aligned+0x22>
 8006d40:	e7ef      	b.n	8006d22 <sbrk_aligned+0x1e>
 8006d42:	bf00      	nop
 8006d44:	200004c8 	.word	0x200004c8

08006d48 <_malloc_r>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	1ccd      	adds	r5, r1, #3
 8006d4e:	f025 0503 	bic.w	r5, r5, #3
 8006d52:	3508      	adds	r5, #8
 8006d54:	2d0c      	cmp	r5, #12
 8006d56:	bf38      	it	cc
 8006d58:	250c      	movcc	r5, #12
 8006d5a:	2d00      	cmp	r5, #0
 8006d5c:	4606      	mov	r6, r0
 8006d5e:	db01      	blt.n	8006d64 <_malloc_r+0x1c>
 8006d60:	42a9      	cmp	r1, r5
 8006d62:	d904      	bls.n	8006d6e <_malloc_r+0x26>
 8006d64:	230c      	movs	r3, #12
 8006d66:	6033      	str	r3, [r6, #0]
 8006d68:	2000      	movs	r0, #0
 8006d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e44 <_malloc_r+0xfc>
 8006d72:	f000 f869 	bl	8006e48 <__malloc_lock>
 8006d76:	f8d8 3000 	ldr.w	r3, [r8]
 8006d7a:	461c      	mov	r4, r3
 8006d7c:	bb44      	cbnz	r4, 8006dd0 <_malloc_r+0x88>
 8006d7e:	4629      	mov	r1, r5
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7ff ffbf 	bl	8006d04 <sbrk_aligned>
 8006d86:	1c43      	adds	r3, r0, #1
 8006d88:	4604      	mov	r4, r0
 8006d8a:	d158      	bne.n	8006e3e <_malloc_r+0xf6>
 8006d8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006d90:	4627      	mov	r7, r4
 8006d92:	2f00      	cmp	r7, #0
 8006d94:	d143      	bne.n	8006e1e <_malloc_r+0xd6>
 8006d96:	2c00      	cmp	r4, #0
 8006d98:	d04b      	beq.n	8006e32 <_malloc_r+0xea>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	4639      	mov	r1, r7
 8006d9e:	4630      	mov	r0, r6
 8006da0:	eb04 0903 	add.w	r9, r4, r3
 8006da4:	f000 fdde 	bl	8007964 <_sbrk_r>
 8006da8:	4581      	cmp	r9, r0
 8006daa:	d142      	bne.n	8006e32 <_malloc_r+0xea>
 8006dac:	6821      	ldr	r1, [r4, #0]
 8006dae:	1a6d      	subs	r5, r5, r1
 8006db0:	4629      	mov	r1, r5
 8006db2:	4630      	mov	r0, r6
 8006db4:	f7ff ffa6 	bl	8006d04 <sbrk_aligned>
 8006db8:	3001      	adds	r0, #1
 8006dba:	d03a      	beq.n	8006e32 <_malloc_r+0xea>
 8006dbc:	6823      	ldr	r3, [r4, #0]
 8006dbe:	442b      	add	r3, r5
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006dc6:	685a      	ldr	r2, [r3, #4]
 8006dc8:	bb62      	cbnz	r2, 8006e24 <_malloc_r+0xdc>
 8006dca:	f8c8 7000 	str.w	r7, [r8]
 8006dce:	e00f      	b.n	8006df0 <_malloc_r+0xa8>
 8006dd0:	6822      	ldr	r2, [r4, #0]
 8006dd2:	1b52      	subs	r2, r2, r5
 8006dd4:	d420      	bmi.n	8006e18 <_malloc_r+0xd0>
 8006dd6:	2a0b      	cmp	r2, #11
 8006dd8:	d917      	bls.n	8006e0a <_malloc_r+0xc2>
 8006dda:	1961      	adds	r1, r4, r5
 8006ddc:	42a3      	cmp	r3, r4
 8006dde:	6025      	str	r5, [r4, #0]
 8006de0:	bf18      	it	ne
 8006de2:	6059      	strne	r1, [r3, #4]
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	bf08      	it	eq
 8006de8:	f8c8 1000 	streq.w	r1, [r8]
 8006dec:	5162      	str	r2, [r4, r5]
 8006dee:	604b      	str	r3, [r1, #4]
 8006df0:	4630      	mov	r0, r6
 8006df2:	f000 f82f 	bl	8006e54 <__malloc_unlock>
 8006df6:	f104 000b 	add.w	r0, r4, #11
 8006dfa:	1d23      	adds	r3, r4, #4
 8006dfc:	f020 0007 	bic.w	r0, r0, #7
 8006e00:	1ac2      	subs	r2, r0, r3
 8006e02:	bf1c      	itt	ne
 8006e04:	1a1b      	subne	r3, r3, r0
 8006e06:	50a3      	strne	r3, [r4, r2]
 8006e08:	e7af      	b.n	8006d6a <_malloc_r+0x22>
 8006e0a:	6862      	ldr	r2, [r4, #4]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	bf0c      	ite	eq
 8006e10:	f8c8 2000 	streq.w	r2, [r8]
 8006e14:	605a      	strne	r2, [r3, #4]
 8006e16:	e7eb      	b.n	8006df0 <_malloc_r+0xa8>
 8006e18:	4623      	mov	r3, r4
 8006e1a:	6864      	ldr	r4, [r4, #4]
 8006e1c:	e7ae      	b.n	8006d7c <_malloc_r+0x34>
 8006e1e:	463c      	mov	r4, r7
 8006e20:	687f      	ldr	r7, [r7, #4]
 8006e22:	e7b6      	b.n	8006d92 <_malloc_r+0x4a>
 8006e24:	461a      	mov	r2, r3
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	d1fb      	bne.n	8006e24 <_malloc_r+0xdc>
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	6053      	str	r3, [r2, #4]
 8006e30:	e7de      	b.n	8006df0 <_malloc_r+0xa8>
 8006e32:	230c      	movs	r3, #12
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	4630      	mov	r0, r6
 8006e38:	f000 f80c 	bl	8006e54 <__malloc_unlock>
 8006e3c:	e794      	b.n	8006d68 <_malloc_r+0x20>
 8006e3e:	6005      	str	r5, [r0, #0]
 8006e40:	e7d6      	b.n	8006df0 <_malloc_r+0xa8>
 8006e42:	bf00      	nop
 8006e44:	200004cc 	.word	0x200004cc

08006e48 <__malloc_lock>:
 8006e48:	4801      	ldr	r0, [pc, #4]	@ (8006e50 <__malloc_lock+0x8>)
 8006e4a:	f7ff bf0e 	b.w	8006c6a <__retarget_lock_acquire_recursive>
 8006e4e:	bf00      	nop
 8006e50:	200004c4 	.word	0x200004c4

08006e54 <__malloc_unlock>:
 8006e54:	4801      	ldr	r0, [pc, #4]	@ (8006e5c <__malloc_unlock+0x8>)
 8006e56:	f7ff bf09 	b.w	8006c6c <__retarget_lock_release_recursive>
 8006e5a:	bf00      	nop
 8006e5c:	200004c4 	.word	0x200004c4

08006e60 <__ssputs_r>:
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	688e      	ldr	r6, [r1, #8]
 8006e66:	461f      	mov	r7, r3
 8006e68:	42be      	cmp	r6, r7
 8006e6a:	680b      	ldr	r3, [r1, #0]
 8006e6c:	4682      	mov	sl, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	4690      	mov	r8, r2
 8006e72:	d82d      	bhi.n	8006ed0 <__ssputs_r+0x70>
 8006e74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006e7c:	d026      	beq.n	8006ecc <__ssputs_r+0x6c>
 8006e7e:	6965      	ldr	r5, [r4, #20]
 8006e80:	6909      	ldr	r1, [r1, #16]
 8006e82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e86:	eba3 0901 	sub.w	r9, r3, r1
 8006e8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e8e:	1c7b      	adds	r3, r7, #1
 8006e90:	444b      	add	r3, r9
 8006e92:	106d      	asrs	r5, r5, #1
 8006e94:	429d      	cmp	r5, r3
 8006e96:	bf38      	it	cc
 8006e98:	461d      	movcc	r5, r3
 8006e9a:	0553      	lsls	r3, r2, #21
 8006e9c:	d527      	bpl.n	8006eee <__ssputs_r+0x8e>
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	f7ff ff52 	bl	8006d48 <_malloc_r>
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	b360      	cbz	r0, 8006f02 <__ssputs_r+0xa2>
 8006ea8:	6921      	ldr	r1, [r4, #16]
 8006eaa:	464a      	mov	r2, r9
 8006eac:	f000 fd6a 	bl	8007984 <memcpy>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eba:	81a3      	strh	r3, [r4, #12]
 8006ebc:	6126      	str	r6, [r4, #16]
 8006ebe:	6165      	str	r5, [r4, #20]
 8006ec0:	444e      	add	r6, r9
 8006ec2:	eba5 0509 	sub.w	r5, r5, r9
 8006ec6:	6026      	str	r6, [r4, #0]
 8006ec8:	60a5      	str	r5, [r4, #8]
 8006eca:	463e      	mov	r6, r7
 8006ecc:	42be      	cmp	r6, r7
 8006ece:	d900      	bls.n	8006ed2 <__ssputs_r+0x72>
 8006ed0:	463e      	mov	r6, r7
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	4632      	mov	r2, r6
 8006ed6:	4641      	mov	r1, r8
 8006ed8:	f000 fd2a 	bl	8007930 <memmove>
 8006edc:	68a3      	ldr	r3, [r4, #8]
 8006ede:	1b9b      	subs	r3, r3, r6
 8006ee0:	60a3      	str	r3, [r4, #8]
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	4433      	add	r3, r6
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	2000      	movs	r0, #0
 8006eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eee:	462a      	mov	r2, r5
 8006ef0:	f000 fd56 	bl	80079a0 <_realloc_r>
 8006ef4:	4606      	mov	r6, r0
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	d1e0      	bne.n	8006ebc <__ssputs_r+0x5c>
 8006efa:	6921      	ldr	r1, [r4, #16]
 8006efc:	4650      	mov	r0, sl
 8006efe:	f7ff feb7 	bl	8006c70 <_free_r>
 8006f02:	230c      	movs	r3, #12
 8006f04:	f8ca 3000 	str.w	r3, [sl]
 8006f08:	89a3      	ldrh	r3, [r4, #12]
 8006f0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0e:	81a3      	strh	r3, [r4, #12]
 8006f10:	f04f 30ff 	mov.w	r0, #4294967295
 8006f14:	e7e9      	b.n	8006eea <__ssputs_r+0x8a>
	...

08006f18 <_svfiprintf_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	4698      	mov	r8, r3
 8006f1e:	898b      	ldrh	r3, [r1, #12]
 8006f20:	061b      	lsls	r3, r3, #24
 8006f22:	b09d      	sub	sp, #116	@ 0x74
 8006f24:	4607      	mov	r7, r0
 8006f26:	460d      	mov	r5, r1
 8006f28:	4614      	mov	r4, r2
 8006f2a:	d510      	bpl.n	8006f4e <_svfiprintf_r+0x36>
 8006f2c:	690b      	ldr	r3, [r1, #16]
 8006f2e:	b973      	cbnz	r3, 8006f4e <_svfiprintf_r+0x36>
 8006f30:	2140      	movs	r1, #64	@ 0x40
 8006f32:	f7ff ff09 	bl	8006d48 <_malloc_r>
 8006f36:	6028      	str	r0, [r5, #0]
 8006f38:	6128      	str	r0, [r5, #16]
 8006f3a:	b930      	cbnz	r0, 8006f4a <_svfiprintf_r+0x32>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	f04f 30ff 	mov.w	r0, #4294967295
 8006f44:	b01d      	add	sp, #116	@ 0x74
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4a:	2340      	movs	r3, #64	@ 0x40
 8006f4c:	616b      	str	r3, [r5, #20]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f52:	2320      	movs	r3, #32
 8006f54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f5c:	2330      	movs	r3, #48	@ 0x30
 8006f5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80070fc <_svfiprintf_r+0x1e4>
 8006f62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006f66:	f04f 0901 	mov.w	r9, #1
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	469a      	mov	sl, r3
 8006f6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f72:	b10a      	cbz	r2, 8006f78 <_svfiprintf_r+0x60>
 8006f74:	2a25      	cmp	r2, #37	@ 0x25
 8006f76:	d1f9      	bne.n	8006f6c <_svfiprintf_r+0x54>
 8006f78:	ebba 0b04 	subs.w	fp, sl, r4
 8006f7c:	d00b      	beq.n	8006f96 <_svfiprintf_r+0x7e>
 8006f7e:	465b      	mov	r3, fp
 8006f80:	4622      	mov	r2, r4
 8006f82:	4629      	mov	r1, r5
 8006f84:	4638      	mov	r0, r7
 8006f86:	f7ff ff6b 	bl	8006e60 <__ssputs_r>
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	f000 80a7 	beq.w	80070de <_svfiprintf_r+0x1c6>
 8006f90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f92:	445a      	add	r2, fp
 8006f94:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f96:	f89a 3000 	ldrb.w	r3, [sl]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 809f 	beq.w	80070de <_svfiprintf_r+0x1c6>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006faa:	f10a 0a01 	add.w	sl, sl, #1
 8006fae:	9304      	str	r3, [sp, #16]
 8006fb0:	9307      	str	r3, [sp, #28]
 8006fb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006fb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006fb8:	4654      	mov	r4, sl
 8006fba:	2205      	movs	r2, #5
 8006fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc0:	484e      	ldr	r0, [pc, #312]	@ (80070fc <_svfiprintf_r+0x1e4>)
 8006fc2:	f7f9 f905 	bl	80001d0 <memchr>
 8006fc6:	9a04      	ldr	r2, [sp, #16]
 8006fc8:	b9d8      	cbnz	r0, 8007002 <_svfiprintf_r+0xea>
 8006fca:	06d0      	lsls	r0, r2, #27
 8006fcc:	bf44      	itt	mi
 8006fce:	2320      	movmi	r3, #32
 8006fd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fd4:	0711      	lsls	r1, r2, #28
 8006fd6:	bf44      	itt	mi
 8006fd8:	232b      	movmi	r3, #43	@ 0x2b
 8006fda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006fde:	f89a 3000 	ldrb.w	r3, [sl]
 8006fe2:	2b2a      	cmp	r3, #42	@ 0x2a
 8006fe4:	d015      	beq.n	8007012 <_svfiprintf_r+0xfa>
 8006fe6:	9a07      	ldr	r2, [sp, #28]
 8006fe8:	4654      	mov	r4, sl
 8006fea:	2000      	movs	r0, #0
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4621      	mov	r1, r4
 8006ff2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ff6:	3b30      	subs	r3, #48	@ 0x30
 8006ff8:	2b09      	cmp	r3, #9
 8006ffa:	d94b      	bls.n	8007094 <_svfiprintf_r+0x17c>
 8006ffc:	b1b0      	cbz	r0, 800702c <_svfiprintf_r+0x114>
 8006ffe:	9207      	str	r2, [sp, #28]
 8007000:	e014      	b.n	800702c <_svfiprintf_r+0x114>
 8007002:	eba0 0308 	sub.w	r3, r0, r8
 8007006:	fa09 f303 	lsl.w	r3, r9, r3
 800700a:	4313      	orrs	r3, r2
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	46a2      	mov	sl, r4
 8007010:	e7d2      	b.n	8006fb8 <_svfiprintf_r+0xa0>
 8007012:	9b03      	ldr	r3, [sp, #12]
 8007014:	1d19      	adds	r1, r3, #4
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	9103      	str	r1, [sp, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	bfbb      	ittet	lt
 800701e:	425b      	neglt	r3, r3
 8007020:	f042 0202 	orrlt.w	r2, r2, #2
 8007024:	9307      	strge	r3, [sp, #28]
 8007026:	9307      	strlt	r3, [sp, #28]
 8007028:	bfb8      	it	lt
 800702a:	9204      	strlt	r2, [sp, #16]
 800702c:	7823      	ldrb	r3, [r4, #0]
 800702e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007030:	d10a      	bne.n	8007048 <_svfiprintf_r+0x130>
 8007032:	7863      	ldrb	r3, [r4, #1]
 8007034:	2b2a      	cmp	r3, #42	@ 0x2a
 8007036:	d132      	bne.n	800709e <_svfiprintf_r+0x186>
 8007038:	9b03      	ldr	r3, [sp, #12]
 800703a:	1d1a      	adds	r2, r3, #4
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	9203      	str	r2, [sp, #12]
 8007040:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007044:	3402      	adds	r4, #2
 8007046:	9305      	str	r3, [sp, #20]
 8007048:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800710c <_svfiprintf_r+0x1f4>
 800704c:	7821      	ldrb	r1, [r4, #0]
 800704e:	2203      	movs	r2, #3
 8007050:	4650      	mov	r0, sl
 8007052:	f7f9 f8bd 	bl	80001d0 <memchr>
 8007056:	b138      	cbz	r0, 8007068 <_svfiprintf_r+0x150>
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	eba0 000a 	sub.w	r0, r0, sl
 800705e:	2240      	movs	r2, #64	@ 0x40
 8007060:	4082      	lsls	r2, r0
 8007062:	4313      	orrs	r3, r2
 8007064:	3401      	adds	r4, #1
 8007066:	9304      	str	r3, [sp, #16]
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	4824      	ldr	r0, [pc, #144]	@ (8007100 <_svfiprintf_r+0x1e8>)
 800706e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007072:	2206      	movs	r2, #6
 8007074:	f7f9 f8ac 	bl	80001d0 <memchr>
 8007078:	2800      	cmp	r0, #0
 800707a:	d036      	beq.n	80070ea <_svfiprintf_r+0x1d2>
 800707c:	4b21      	ldr	r3, [pc, #132]	@ (8007104 <_svfiprintf_r+0x1ec>)
 800707e:	bb1b      	cbnz	r3, 80070c8 <_svfiprintf_r+0x1b0>
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	3307      	adds	r3, #7
 8007084:	f023 0307 	bic.w	r3, r3, #7
 8007088:	3308      	adds	r3, #8
 800708a:	9303      	str	r3, [sp, #12]
 800708c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800708e:	4433      	add	r3, r6
 8007090:	9309      	str	r3, [sp, #36]	@ 0x24
 8007092:	e76a      	b.n	8006f6a <_svfiprintf_r+0x52>
 8007094:	fb0c 3202 	mla	r2, ip, r2, r3
 8007098:	460c      	mov	r4, r1
 800709a:	2001      	movs	r0, #1
 800709c:	e7a8      	b.n	8006ff0 <_svfiprintf_r+0xd8>
 800709e:	2300      	movs	r3, #0
 80070a0:	3401      	adds	r4, #1
 80070a2:	9305      	str	r3, [sp, #20]
 80070a4:	4619      	mov	r1, r3
 80070a6:	f04f 0c0a 	mov.w	ip, #10
 80070aa:	4620      	mov	r0, r4
 80070ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070b0:	3a30      	subs	r2, #48	@ 0x30
 80070b2:	2a09      	cmp	r2, #9
 80070b4:	d903      	bls.n	80070be <_svfiprintf_r+0x1a6>
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d0c6      	beq.n	8007048 <_svfiprintf_r+0x130>
 80070ba:	9105      	str	r1, [sp, #20]
 80070bc:	e7c4      	b.n	8007048 <_svfiprintf_r+0x130>
 80070be:	fb0c 2101 	mla	r1, ip, r1, r2
 80070c2:	4604      	mov	r4, r0
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7f0      	b.n	80070aa <_svfiprintf_r+0x192>
 80070c8:	ab03      	add	r3, sp, #12
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	462a      	mov	r2, r5
 80070ce:	4b0e      	ldr	r3, [pc, #56]	@ (8007108 <_svfiprintf_r+0x1f0>)
 80070d0:	a904      	add	r1, sp, #16
 80070d2:	4638      	mov	r0, r7
 80070d4:	f3af 8000 	nop.w
 80070d8:	1c42      	adds	r2, r0, #1
 80070da:	4606      	mov	r6, r0
 80070dc:	d1d6      	bne.n	800708c <_svfiprintf_r+0x174>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	065b      	lsls	r3, r3, #25
 80070e2:	f53f af2d 	bmi.w	8006f40 <_svfiprintf_r+0x28>
 80070e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80070e8:	e72c      	b.n	8006f44 <_svfiprintf_r+0x2c>
 80070ea:	ab03      	add	r3, sp, #12
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	462a      	mov	r2, r5
 80070f0:	4b05      	ldr	r3, [pc, #20]	@ (8007108 <_svfiprintf_r+0x1f0>)
 80070f2:	a904      	add	r1, sp, #16
 80070f4:	4638      	mov	r0, r7
 80070f6:	f000 f9bb 	bl	8007470 <_printf_i>
 80070fa:	e7ed      	b.n	80070d8 <_svfiprintf_r+0x1c0>
 80070fc:	08007c9c 	.word	0x08007c9c
 8007100:	08007ca6 	.word	0x08007ca6
 8007104:	00000000 	.word	0x00000000
 8007108:	08006e61 	.word	0x08006e61
 800710c:	08007ca2 	.word	0x08007ca2

08007110 <__sfputc_r>:
 8007110:	6893      	ldr	r3, [r2, #8]
 8007112:	3b01      	subs	r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	b410      	push	{r4}
 8007118:	6093      	str	r3, [r2, #8]
 800711a:	da08      	bge.n	800712e <__sfputc_r+0x1e>
 800711c:	6994      	ldr	r4, [r2, #24]
 800711e:	42a3      	cmp	r3, r4
 8007120:	db01      	blt.n	8007126 <__sfputc_r+0x16>
 8007122:	290a      	cmp	r1, #10
 8007124:	d103      	bne.n	800712e <__sfputc_r+0x1e>
 8007126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800712a:	f000 bb6d 	b.w	8007808 <__swbuf_r>
 800712e:	6813      	ldr	r3, [r2, #0]
 8007130:	1c58      	adds	r0, r3, #1
 8007132:	6010      	str	r0, [r2, #0]
 8007134:	7019      	strb	r1, [r3, #0]
 8007136:	4608      	mov	r0, r1
 8007138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800713c:	4770      	bx	lr

0800713e <__sfputs_r>:
 800713e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	4614      	mov	r4, r2
 8007146:	18d5      	adds	r5, r2, r3
 8007148:	42ac      	cmp	r4, r5
 800714a:	d101      	bne.n	8007150 <__sfputs_r+0x12>
 800714c:	2000      	movs	r0, #0
 800714e:	e007      	b.n	8007160 <__sfputs_r+0x22>
 8007150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007154:	463a      	mov	r2, r7
 8007156:	4630      	mov	r0, r6
 8007158:	f7ff ffda 	bl	8007110 <__sfputc_r>
 800715c:	1c43      	adds	r3, r0, #1
 800715e:	d1f3      	bne.n	8007148 <__sfputs_r+0xa>
 8007160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007164 <_vfiprintf_r>:
 8007164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007168:	460d      	mov	r5, r1
 800716a:	b09d      	sub	sp, #116	@ 0x74
 800716c:	4614      	mov	r4, r2
 800716e:	4698      	mov	r8, r3
 8007170:	4606      	mov	r6, r0
 8007172:	b118      	cbz	r0, 800717c <_vfiprintf_r+0x18>
 8007174:	6a03      	ldr	r3, [r0, #32]
 8007176:	b90b      	cbnz	r3, 800717c <_vfiprintf_r+0x18>
 8007178:	f7ff fc52 	bl	8006a20 <__sinit>
 800717c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800717e:	07d9      	lsls	r1, r3, #31
 8007180:	d405      	bmi.n	800718e <_vfiprintf_r+0x2a>
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	059a      	lsls	r2, r3, #22
 8007186:	d402      	bmi.n	800718e <_vfiprintf_r+0x2a>
 8007188:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800718a:	f7ff fd6e 	bl	8006c6a <__retarget_lock_acquire_recursive>
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	071b      	lsls	r3, r3, #28
 8007192:	d501      	bpl.n	8007198 <_vfiprintf_r+0x34>
 8007194:	692b      	ldr	r3, [r5, #16]
 8007196:	b99b      	cbnz	r3, 80071c0 <_vfiprintf_r+0x5c>
 8007198:	4629      	mov	r1, r5
 800719a:	4630      	mov	r0, r6
 800719c:	f000 fb72 	bl	8007884 <__swsetup_r>
 80071a0:	b170      	cbz	r0, 80071c0 <_vfiprintf_r+0x5c>
 80071a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071a4:	07dc      	lsls	r4, r3, #31
 80071a6:	d504      	bpl.n	80071b2 <_vfiprintf_r+0x4e>
 80071a8:	f04f 30ff 	mov.w	r0, #4294967295
 80071ac:	b01d      	add	sp, #116	@ 0x74
 80071ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071b2:	89ab      	ldrh	r3, [r5, #12]
 80071b4:	0598      	lsls	r0, r3, #22
 80071b6:	d4f7      	bmi.n	80071a8 <_vfiprintf_r+0x44>
 80071b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ba:	f7ff fd57 	bl	8006c6c <__retarget_lock_release_recursive>
 80071be:	e7f3      	b.n	80071a8 <_vfiprintf_r+0x44>
 80071c0:	2300      	movs	r3, #0
 80071c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c4:	2320      	movs	r3, #32
 80071c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ce:	2330      	movs	r3, #48	@ 0x30
 80071d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007380 <_vfiprintf_r+0x21c>
 80071d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071d8:	f04f 0901 	mov.w	r9, #1
 80071dc:	4623      	mov	r3, r4
 80071de:	469a      	mov	sl, r3
 80071e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071e4:	b10a      	cbz	r2, 80071ea <_vfiprintf_r+0x86>
 80071e6:	2a25      	cmp	r2, #37	@ 0x25
 80071e8:	d1f9      	bne.n	80071de <_vfiprintf_r+0x7a>
 80071ea:	ebba 0b04 	subs.w	fp, sl, r4
 80071ee:	d00b      	beq.n	8007208 <_vfiprintf_r+0xa4>
 80071f0:	465b      	mov	r3, fp
 80071f2:	4622      	mov	r2, r4
 80071f4:	4629      	mov	r1, r5
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7ff ffa1 	bl	800713e <__sfputs_r>
 80071fc:	3001      	adds	r0, #1
 80071fe:	f000 80a7 	beq.w	8007350 <_vfiprintf_r+0x1ec>
 8007202:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007204:	445a      	add	r2, fp
 8007206:	9209      	str	r2, [sp, #36]	@ 0x24
 8007208:	f89a 3000 	ldrb.w	r3, [sl]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f000 809f 	beq.w	8007350 <_vfiprintf_r+0x1ec>
 8007212:	2300      	movs	r3, #0
 8007214:	f04f 32ff 	mov.w	r2, #4294967295
 8007218:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800721c:	f10a 0a01 	add.w	sl, sl, #1
 8007220:	9304      	str	r3, [sp, #16]
 8007222:	9307      	str	r3, [sp, #28]
 8007224:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007228:	931a      	str	r3, [sp, #104]	@ 0x68
 800722a:	4654      	mov	r4, sl
 800722c:	2205      	movs	r2, #5
 800722e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007232:	4853      	ldr	r0, [pc, #332]	@ (8007380 <_vfiprintf_r+0x21c>)
 8007234:	f7f8 ffcc 	bl	80001d0 <memchr>
 8007238:	9a04      	ldr	r2, [sp, #16]
 800723a:	b9d8      	cbnz	r0, 8007274 <_vfiprintf_r+0x110>
 800723c:	06d1      	lsls	r1, r2, #27
 800723e:	bf44      	itt	mi
 8007240:	2320      	movmi	r3, #32
 8007242:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007246:	0713      	lsls	r3, r2, #28
 8007248:	bf44      	itt	mi
 800724a:	232b      	movmi	r3, #43	@ 0x2b
 800724c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007250:	f89a 3000 	ldrb.w	r3, [sl]
 8007254:	2b2a      	cmp	r3, #42	@ 0x2a
 8007256:	d015      	beq.n	8007284 <_vfiprintf_r+0x120>
 8007258:	9a07      	ldr	r2, [sp, #28]
 800725a:	4654      	mov	r4, sl
 800725c:	2000      	movs	r0, #0
 800725e:	f04f 0c0a 	mov.w	ip, #10
 8007262:	4621      	mov	r1, r4
 8007264:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007268:	3b30      	subs	r3, #48	@ 0x30
 800726a:	2b09      	cmp	r3, #9
 800726c:	d94b      	bls.n	8007306 <_vfiprintf_r+0x1a2>
 800726e:	b1b0      	cbz	r0, 800729e <_vfiprintf_r+0x13a>
 8007270:	9207      	str	r2, [sp, #28]
 8007272:	e014      	b.n	800729e <_vfiprintf_r+0x13a>
 8007274:	eba0 0308 	sub.w	r3, r0, r8
 8007278:	fa09 f303 	lsl.w	r3, r9, r3
 800727c:	4313      	orrs	r3, r2
 800727e:	9304      	str	r3, [sp, #16]
 8007280:	46a2      	mov	sl, r4
 8007282:	e7d2      	b.n	800722a <_vfiprintf_r+0xc6>
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	1d19      	adds	r1, r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	9103      	str	r1, [sp, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfbb      	ittet	lt
 8007290:	425b      	neglt	r3, r3
 8007292:	f042 0202 	orrlt.w	r2, r2, #2
 8007296:	9307      	strge	r3, [sp, #28]
 8007298:	9307      	strlt	r3, [sp, #28]
 800729a:	bfb8      	it	lt
 800729c:	9204      	strlt	r2, [sp, #16]
 800729e:	7823      	ldrb	r3, [r4, #0]
 80072a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072a2:	d10a      	bne.n	80072ba <_vfiprintf_r+0x156>
 80072a4:	7863      	ldrb	r3, [r4, #1]
 80072a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072a8:	d132      	bne.n	8007310 <_vfiprintf_r+0x1ac>
 80072aa:	9b03      	ldr	r3, [sp, #12]
 80072ac:	1d1a      	adds	r2, r3, #4
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	9203      	str	r2, [sp, #12]
 80072b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072b6:	3402      	adds	r4, #2
 80072b8:	9305      	str	r3, [sp, #20]
 80072ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007390 <_vfiprintf_r+0x22c>
 80072be:	7821      	ldrb	r1, [r4, #0]
 80072c0:	2203      	movs	r2, #3
 80072c2:	4650      	mov	r0, sl
 80072c4:	f7f8 ff84 	bl	80001d0 <memchr>
 80072c8:	b138      	cbz	r0, 80072da <_vfiprintf_r+0x176>
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	eba0 000a 	sub.w	r0, r0, sl
 80072d0:	2240      	movs	r2, #64	@ 0x40
 80072d2:	4082      	lsls	r2, r0
 80072d4:	4313      	orrs	r3, r2
 80072d6:	3401      	adds	r4, #1
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072de:	4829      	ldr	r0, [pc, #164]	@ (8007384 <_vfiprintf_r+0x220>)
 80072e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072e4:	2206      	movs	r2, #6
 80072e6:	f7f8 ff73 	bl	80001d0 <memchr>
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d03f      	beq.n	800736e <_vfiprintf_r+0x20a>
 80072ee:	4b26      	ldr	r3, [pc, #152]	@ (8007388 <_vfiprintf_r+0x224>)
 80072f0:	bb1b      	cbnz	r3, 800733a <_vfiprintf_r+0x1d6>
 80072f2:	9b03      	ldr	r3, [sp, #12]
 80072f4:	3307      	adds	r3, #7
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	3308      	adds	r3, #8
 80072fc:	9303      	str	r3, [sp, #12]
 80072fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007300:	443b      	add	r3, r7
 8007302:	9309      	str	r3, [sp, #36]	@ 0x24
 8007304:	e76a      	b.n	80071dc <_vfiprintf_r+0x78>
 8007306:	fb0c 3202 	mla	r2, ip, r2, r3
 800730a:	460c      	mov	r4, r1
 800730c:	2001      	movs	r0, #1
 800730e:	e7a8      	b.n	8007262 <_vfiprintf_r+0xfe>
 8007310:	2300      	movs	r3, #0
 8007312:	3401      	adds	r4, #1
 8007314:	9305      	str	r3, [sp, #20]
 8007316:	4619      	mov	r1, r3
 8007318:	f04f 0c0a 	mov.w	ip, #10
 800731c:	4620      	mov	r0, r4
 800731e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007322:	3a30      	subs	r2, #48	@ 0x30
 8007324:	2a09      	cmp	r2, #9
 8007326:	d903      	bls.n	8007330 <_vfiprintf_r+0x1cc>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0c6      	beq.n	80072ba <_vfiprintf_r+0x156>
 800732c:	9105      	str	r1, [sp, #20]
 800732e:	e7c4      	b.n	80072ba <_vfiprintf_r+0x156>
 8007330:	fb0c 2101 	mla	r1, ip, r1, r2
 8007334:	4604      	mov	r4, r0
 8007336:	2301      	movs	r3, #1
 8007338:	e7f0      	b.n	800731c <_vfiprintf_r+0x1b8>
 800733a:	ab03      	add	r3, sp, #12
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	462a      	mov	r2, r5
 8007340:	4b12      	ldr	r3, [pc, #72]	@ (800738c <_vfiprintf_r+0x228>)
 8007342:	a904      	add	r1, sp, #16
 8007344:	4630      	mov	r0, r6
 8007346:	f3af 8000 	nop.w
 800734a:	4607      	mov	r7, r0
 800734c:	1c78      	adds	r0, r7, #1
 800734e:	d1d6      	bne.n	80072fe <_vfiprintf_r+0x19a>
 8007350:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007352:	07d9      	lsls	r1, r3, #31
 8007354:	d405      	bmi.n	8007362 <_vfiprintf_r+0x1fe>
 8007356:	89ab      	ldrh	r3, [r5, #12]
 8007358:	059a      	lsls	r2, r3, #22
 800735a:	d402      	bmi.n	8007362 <_vfiprintf_r+0x1fe>
 800735c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800735e:	f7ff fc85 	bl	8006c6c <__retarget_lock_release_recursive>
 8007362:	89ab      	ldrh	r3, [r5, #12]
 8007364:	065b      	lsls	r3, r3, #25
 8007366:	f53f af1f 	bmi.w	80071a8 <_vfiprintf_r+0x44>
 800736a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800736c:	e71e      	b.n	80071ac <_vfiprintf_r+0x48>
 800736e:	ab03      	add	r3, sp, #12
 8007370:	9300      	str	r3, [sp, #0]
 8007372:	462a      	mov	r2, r5
 8007374:	4b05      	ldr	r3, [pc, #20]	@ (800738c <_vfiprintf_r+0x228>)
 8007376:	a904      	add	r1, sp, #16
 8007378:	4630      	mov	r0, r6
 800737a:	f000 f879 	bl	8007470 <_printf_i>
 800737e:	e7e4      	b.n	800734a <_vfiprintf_r+0x1e6>
 8007380:	08007c9c 	.word	0x08007c9c
 8007384:	08007ca6 	.word	0x08007ca6
 8007388:	00000000 	.word	0x00000000
 800738c:	0800713f 	.word	0x0800713f
 8007390:	08007ca2 	.word	0x08007ca2

08007394 <_printf_common>:
 8007394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007398:	4616      	mov	r6, r2
 800739a:	4698      	mov	r8, r3
 800739c:	688a      	ldr	r2, [r1, #8]
 800739e:	690b      	ldr	r3, [r1, #16]
 80073a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80073a4:	4293      	cmp	r3, r2
 80073a6:	bfb8      	it	lt
 80073a8:	4613      	movlt	r3, r2
 80073aa:	6033      	str	r3, [r6, #0]
 80073ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80073b0:	4607      	mov	r7, r0
 80073b2:	460c      	mov	r4, r1
 80073b4:	b10a      	cbz	r2, 80073ba <_printf_common+0x26>
 80073b6:	3301      	adds	r3, #1
 80073b8:	6033      	str	r3, [r6, #0]
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	0699      	lsls	r1, r3, #26
 80073be:	bf42      	ittt	mi
 80073c0:	6833      	ldrmi	r3, [r6, #0]
 80073c2:	3302      	addmi	r3, #2
 80073c4:	6033      	strmi	r3, [r6, #0]
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	f015 0506 	ands.w	r5, r5, #6
 80073cc:	d106      	bne.n	80073dc <_printf_common+0x48>
 80073ce:	f104 0a19 	add.w	sl, r4, #25
 80073d2:	68e3      	ldr	r3, [r4, #12]
 80073d4:	6832      	ldr	r2, [r6, #0]
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	42ab      	cmp	r3, r5
 80073da:	dc26      	bgt.n	800742a <_printf_common+0x96>
 80073dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80073e0:	6822      	ldr	r2, [r4, #0]
 80073e2:	3b00      	subs	r3, #0
 80073e4:	bf18      	it	ne
 80073e6:	2301      	movne	r3, #1
 80073e8:	0692      	lsls	r2, r2, #26
 80073ea:	d42b      	bmi.n	8007444 <_printf_common+0xb0>
 80073ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80073f0:	4641      	mov	r1, r8
 80073f2:	4638      	mov	r0, r7
 80073f4:	47c8      	blx	r9
 80073f6:	3001      	adds	r0, #1
 80073f8:	d01e      	beq.n	8007438 <_printf_common+0xa4>
 80073fa:	6823      	ldr	r3, [r4, #0]
 80073fc:	6922      	ldr	r2, [r4, #16]
 80073fe:	f003 0306 	and.w	r3, r3, #6
 8007402:	2b04      	cmp	r3, #4
 8007404:	bf02      	ittt	eq
 8007406:	68e5      	ldreq	r5, [r4, #12]
 8007408:	6833      	ldreq	r3, [r6, #0]
 800740a:	1aed      	subeq	r5, r5, r3
 800740c:	68a3      	ldr	r3, [r4, #8]
 800740e:	bf0c      	ite	eq
 8007410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007414:	2500      	movne	r5, #0
 8007416:	4293      	cmp	r3, r2
 8007418:	bfc4      	itt	gt
 800741a:	1a9b      	subgt	r3, r3, r2
 800741c:	18ed      	addgt	r5, r5, r3
 800741e:	2600      	movs	r6, #0
 8007420:	341a      	adds	r4, #26
 8007422:	42b5      	cmp	r5, r6
 8007424:	d11a      	bne.n	800745c <_printf_common+0xc8>
 8007426:	2000      	movs	r0, #0
 8007428:	e008      	b.n	800743c <_printf_common+0xa8>
 800742a:	2301      	movs	r3, #1
 800742c:	4652      	mov	r2, sl
 800742e:	4641      	mov	r1, r8
 8007430:	4638      	mov	r0, r7
 8007432:	47c8      	blx	r9
 8007434:	3001      	adds	r0, #1
 8007436:	d103      	bne.n	8007440 <_printf_common+0xac>
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007440:	3501      	adds	r5, #1
 8007442:	e7c6      	b.n	80073d2 <_printf_common+0x3e>
 8007444:	18e1      	adds	r1, r4, r3
 8007446:	1c5a      	adds	r2, r3, #1
 8007448:	2030      	movs	r0, #48	@ 0x30
 800744a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800744e:	4422      	add	r2, r4
 8007450:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007454:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007458:	3302      	adds	r3, #2
 800745a:	e7c7      	b.n	80073ec <_printf_common+0x58>
 800745c:	2301      	movs	r3, #1
 800745e:	4622      	mov	r2, r4
 8007460:	4641      	mov	r1, r8
 8007462:	4638      	mov	r0, r7
 8007464:	47c8      	blx	r9
 8007466:	3001      	adds	r0, #1
 8007468:	d0e6      	beq.n	8007438 <_printf_common+0xa4>
 800746a:	3601      	adds	r6, #1
 800746c:	e7d9      	b.n	8007422 <_printf_common+0x8e>
	...

08007470 <_printf_i>:
 8007470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	7e0f      	ldrb	r7, [r1, #24]
 8007476:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007478:	2f78      	cmp	r7, #120	@ 0x78
 800747a:	4691      	mov	r9, r2
 800747c:	4680      	mov	r8, r0
 800747e:	460c      	mov	r4, r1
 8007480:	469a      	mov	sl, r3
 8007482:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007486:	d807      	bhi.n	8007498 <_printf_i+0x28>
 8007488:	2f62      	cmp	r7, #98	@ 0x62
 800748a:	d80a      	bhi.n	80074a2 <_printf_i+0x32>
 800748c:	2f00      	cmp	r7, #0
 800748e:	f000 80d2 	beq.w	8007636 <_printf_i+0x1c6>
 8007492:	2f58      	cmp	r7, #88	@ 0x58
 8007494:	f000 80b9 	beq.w	800760a <_printf_i+0x19a>
 8007498:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800749c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80074a0:	e03a      	b.n	8007518 <_printf_i+0xa8>
 80074a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80074a6:	2b15      	cmp	r3, #21
 80074a8:	d8f6      	bhi.n	8007498 <_printf_i+0x28>
 80074aa:	a101      	add	r1, pc, #4	@ (adr r1, 80074b0 <_printf_i+0x40>)
 80074ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074b0:	08007509 	.word	0x08007509
 80074b4:	0800751d 	.word	0x0800751d
 80074b8:	08007499 	.word	0x08007499
 80074bc:	08007499 	.word	0x08007499
 80074c0:	08007499 	.word	0x08007499
 80074c4:	08007499 	.word	0x08007499
 80074c8:	0800751d 	.word	0x0800751d
 80074cc:	08007499 	.word	0x08007499
 80074d0:	08007499 	.word	0x08007499
 80074d4:	08007499 	.word	0x08007499
 80074d8:	08007499 	.word	0x08007499
 80074dc:	0800761d 	.word	0x0800761d
 80074e0:	08007547 	.word	0x08007547
 80074e4:	080075d7 	.word	0x080075d7
 80074e8:	08007499 	.word	0x08007499
 80074ec:	08007499 	.word	0x08007499
 80074f0:	0800763f 	.word	0x0800763f
 80074f4:	08007499 	.word	0x08007499
 80074f8:	08007547 	.word	0x08007547
 80074fc:	08007499 	.word	0x08007499
 8007500:	08007499 	.word	0x08007499
 8007504:	080075df 	.word	0x080075df
 8007508:	6833      	ldr	r3, [r6, #0]
 800750a:	1d1a      	adds	r2, r3, #4
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6032      	str	r2, [r6, #0]
 8007510:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007514:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007518:	2301      	movs	r3, #1
 800751a:	e09d      	b.n	8007658 <_printf_i+0x1e8>
 800751c:	6833      	ldr	r3, [r6, #0]
 800751e:	6820      	ldr	r0, [r4, #0]
 8007520:	1d19      	adds	r1, r3, #4
 8007522:	6031      	str	r1, [r6, #0]
 8007524:	0606      	lsls	r6, r0, #24
 8007526:	d501      	bpl.n	800752c <_printf_i+0xbc>
 8007528:	681d      	ldr	r5, [r3, #0]
 800752a:	e003      	b.n	8007534 <_printf_i+0xc4>
 800752c:	0645      	lsls	r5, r0, #25
 800752e:	d5fb      	bpl.n	8007528 <_printf_i+0xb8>
 8007530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007534:	2d00      	cmp	r5, #0
 8007536:	da03      	bge.n	8007540 <_printf_i+0xd0>
 8007538:	232d      	movs	r3, #45	@ 0x2d
 800753a:	426d      	negs	r5, r5
 800753c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007540:	4859      	ldr	r0, [pc, #356]	@ (80076a8 <_printf_i+0x238>)
 8007542:	230a      	movs	r3, #10
 8007544:	e011      	b.n	800756a <_printf_i+0xfa>
 8007546:	6821      	ldr	r1, [r4, #0]
 8007548:	6833      	ldr	r3, [r6, #0]
 800754a:	0608      	lsls	r0, r1, #24
 800754c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007550:	d402      	bmi.n	8007558 <_printf_i+0xe8>
 8007552:	0649      	lsls	r1, r1, #25
 8007554:	bf48      	it	mi
 8007556:	b2ad      	uxthmi	r5, r5
 8007558:	2f6f      	cmp	r7, #111	@ 0x6f
 800755a:	4853      	ldr	r0, [pc, #332]	@ (80076a8 <_printf_i+0x238>)
 800755c:	6033      	str	r3, [r6, #0]
 800755e:	bf14      	ite	ne
 8007560:	230a      	movne	r3, #10
 8007562:	2308      	moveq	r3, #8
 8007564:	2100      	movs	r1, #0
 8007566:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800756a:	6866      	ldr	r6, [r4, #4]
 800756c:	60a6      	str	r6, [r4, #8]
 800756e:	2e00      	cmp	r6, #0
 8007570:	bfa2      	ittt	ge
 8007572:	6821      	ldrge	r1, [r4, #0]
 8007574:	f021 0104 	bicge.w	r1, r1, #4
 8007578:	6021      	strge	r1, [r4, #0]
 800757a:	b90d      	cbnz	r5, 8007580 <_printf_i+0x110>
 800757c:	2e00      	cmp	r6, #0
 800757e:	d04b      	beq.n	8007618 <_printf_i+0x1a8>
 8007580:	4616      	mov	r6, r2
 8007582:	fbb5 f1f3 	udiv	r1, r5, r3
 8007586:	fb03 5711 	mls	r7, r3, r1, r5
 800758a:	5dc7      	ldrb	r7, [r0, r7]
 800758c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007590:	462f      	mov	r7, r5
 8007592:	42bb      	cmp	r3, r7
 8007594:	460d      	mov	r5, r1
 8007596:	d9f4      	bls.n	8007582 <_printf_i+0x112>
 8007598:	2b08      	cmp	r3, #8
 800759a:	d10b      	bne.n	80075b4 <_printf_i+0x144>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	07df      	lsls	r7, r3, #31
 80075a0:	d508      	bpl.n	80075b4 <_printf_i+0x144>
 80075a2:	6923      	ldr	r3, [r4, #16]
 80075a4:	6861      	ldr	r1, [r4, #4]
 80075a6:	4299      	cmp	r1, r3
 80075a8:	bfde      	ittt	le
 80075aa:	2330      	movle	r3, #48	@ 0x30
 80075ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80075b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80075b4:	1b92      	subs	r2, r2, r6
 80075b6:	6122      	str	r2, [r4, #16]
 80075b8:	f8cd a000 	str.w	sl, [sp]
 80075bc:	464b      	mov	r3, r9
 80075be:	aa03      	add	r2, sp, #12
 80075c0:	4621      	mov	r1, r4
 80075c2:	4640      	mov	r0, r8
 80075c4:	f7ff fee6 	bl	8007394 <_printf_common>
 80075c8:	3001      	adds	r0, #1
 80075ca:	d14a      	bne.n	8007662 <_printf_i+0x1f2>
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	b004      	add	sp, #16
 80075d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	f043 0320 	orr.w	r3, r3, #32
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	4833      	ldr	r0, [pc, #204]	@ (80076ac <_printf_i+0x23c>)
 80075e0:	2778      	movs	r7, #120	@ 0x78
 80075e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80075e6:	6823      	ldr	r3, [r4, #0]
 80075e8:	6831      	ldr	r1, [r6, #0]
 80075ea:	061f      	lsls	r7, r3, #24
 80075ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80075f0:	d402      	bmi.n	80075f8 <_printf_i+0x188>
 80075f2:	065f      	lsls	r7, r3, #25
 80075f4:	bf48      	it	mi
 80075f6:	b2ad      	uxthmi	r5, r5
 80075f8:	6031      	str	r1, [r6, #0]
 80075fa:	07d9      	lsls	r1, r3, #31
 80075fc:	bf44      	itt	mi
 80075fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007602:	6023      	strmi	r3, [r4, #0]
 8007604:	b11d      	cbz	r5, 800760e <_printf_i+0x19e>
 8007606:	2310      	movs	r3, #16
 8007608:	e7ac      	b.n	8007564 <_printf_i+0xf4>
 800760a:	4827      	ldr	r0, [pc, #156]	@ (80076a8 <_printf_i+0x238>)
 800760c:	e7e9      	b.n	80075e2 <_printf_i+0x172>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	f023 0320 	bic.w	r3, r3, #32
 8007614:	6023      	str	r3, [r4, #0]
 8007616:	e7f6      	b.n	8007606 <_printf_i+0x196>
 8007618:	4616      	mov	r6, r2
 800761a:	e7bd      	b.n	8007598 <_printf_i+0x128>
 800761c:	6833      	ldr	r3, [r6, #0]
 800761e:	6825      	ldr	r5, [r4, #0]
 8007620:	6961      	ldr	r1, [r4, #20]
 8007622:	1d18      	adds	r0, r3, #4
 8007624:	6030      	str	r0, [r6, #0]
 8007626:	062e      	lsls	r6, r5, #24
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	d501      	bpl.n	8007630 <_printf_i+0x1c0>
 800762c:	6019      	str	r1, [r3, #0]
 800762e:	e002      	b.n	8007636 <_printf_i+0x1c6>
 8007630:	0668      	lsls	r0, r5, #25
 8007632:	d5fb      	bpl.n	800762c <_printf_i+0x1bc>
 8007634:	8019      	strh	r1, [r3, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	4616      	mov	r6, r2
 800763c:	e7bc      	b.n	80075b8 <_printf_i+0x148>
 800763e:	6833      	ldr	r3, [r6, #0]
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	6032      	str	r2, [r6, #0]
 8007644:	681e      	ldr	r6, [r3, #0]
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	2100      	movs	r1, #0
 800764a:	4630      	mov	r0, r6
 800764c:	f7f8 fdc0 	bl	80001d0 <memchr>
 8007650:	b108      	cbz	r0, 8007656 <_printf_i+0x1e6>
 8007652:	1b80      	subs	r0, r0, r6
 8007654:	6060      	str	r0, [r4, #4]
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	2300      	movs	r3, #0
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007660:	e7aa      	b.n	80075b8 <_printf_i+0x148>
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	4632      	mov	r2, r6
 8007666:	4649      	mov	r1, r9
 8007668:	4640      	mov	r0, r8
 800766a:	47d0      	blx	sl
 800766c:	3001      	adds	r0, #1
 800766e:	d0ad      	beq.n	80075cc <_printf_i+0x15c>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	079b      	lsls	r3, r3, #30
 8007674:	d413      	bmi.n	800769e <_printf_i+0x22e>
 8007676:	68e0      	ldr	r0, [r4, #12]
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	4298      	cmp	r0, r3
 800767c:	bfb8      	it	lt
 800767e:	4618      	movlt	r0, r3
 8007680:	e7a6      	b.n	80075d0 <_printf_i+0x160>
 8007682:	2301      	movs	r3, #1
 8007684:	4632      	mov	r2, r6
 8007686:	4649      	mov	r1, r9
 8007688:	4640      	mov	r0, r8
 800768a:	47d0      	blx	sl
 800768c:	3001      	adds	r0, #1
 800768e:	d09d      	beq.n	80075cc <_printf_i+0x15c>
 8007690:	3501      	adds	r5, #1
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	9903      	ldr	r1, [sp, #12]
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	42ab      	cmp	r3, r5
 800769a:	dcf2      	bgt.n	8007682 <_printf_i+0x212>
 800769c:	e7eb      	b.n	8007676 <_printf_i+0x206>
 800769e:	2500      	movs	r5, #0
 80076a0:	f104 0619 	add.w	r6, r4, #25
 80076a4:	e7f5      	b.n	8007692 <_printf_i+0x222>
 80076a6:	bf00      	nop
 80076a8:	08007cad 	.word	0x08007cad
 80076ac:	08007cbe 	.word	0x08007cbe

080076b0 <__sflush_r>:
 80076b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b8:	0716      	lsls	r6, r2, #28
 80076ba:	4605      	mov	r5, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	d454      	bmi.n	800776a <__sflush_r+0xba>
 80076c0:	684b      	ldr	r3, [r1, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	dc02      	bgt.n	80076cc <__sflush_r+0x1c>
 80076c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	dd48      	ble.n	800775e <__sflush_r+0xae>
 80076cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d045      	beq.n	800775e <__sflush_r+0xae>
 80076d2:	2300      	movs	r3, #0
 80076d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076d8:	682f      	ldr	r7, [r5, #0]
 80076da:	6a21      	ldr	r1, [r4, #32]
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	d030      	beq.n	8007742 <__sflush_r+0x92>
 80076e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	0759      	lsls	r1, r3, #29
 80076e6:	d505      	bpl.n	80076f4 <__sflush_r+0x44>
 80076e8:	6863      	ldr	r3, [r4, #4]
 80076ea:	1ad2      	subs	r2, r2, r3
 80076ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076ee:	b10b      	cbz	r3, 80076f4 <__sflush_r+0x44>
 80076f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	2300      	movs	r3, #0
 80076f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076f8:	6a21      	ldr	r1, [r4, #32]
 80076fa:	4628      	mov	r0, r5
 80076fc:	47b0      	blx	r6
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	d106      	bne.n	8007712 <__sflush_r+0x62>
 8007704:	6829      	ldr	r1, [r5, #0]
 8007706:	291d      	cmp	r1, #29
 8007708:	d82b      	bhi.n	8007762 <__sflush_r+0xb2>
 800770a:	4a2a      	ldr	r2, [pc, #168]	@ (80077b4 <__sflush_r+0x104>)
 800770c:	410a      	asrs	r2, r1
 800770e:	07d6      	lsls	r6, r2, #31
 8007710:	d427      	bmi.n	8007762 <__sflush_r+0xb2>
 8007712:	2200      	movs	r2, #0
 8007714:	6062      	str	r2, [r4, #4]
 8007716:	04d9      	lsls	r1, r3, #19
 8007718:	6922      	ldr	r2, [r4, #16]
 800771a:	6022      	str	r2, [r4, #0]
 800771c:	d504      	bpl.n	8007728 <__sflush_r+0x78>
 800771e:	1c42      	adds	r2, r0, #1
 8007720:	d101      	bne.n	8007726 <__sflush_r+0x76>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	b903      	cbnz	r3, 8007728 <__sflush_r+0x78>
 8007726:	6560      	str	r0, [r4, #84]	@ 0x54
 8007728:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800772a:	602f      	str	r7, [r5, #0]
 800772c:	b1b9      	cbz	r1, 800775e <__sflush_r+0xae>
 800772e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007732:	4299      	cmp	r1, r3
 8007734:	d002      	beq.n	800773c <__sflush_r+0x8c>
 8007736:	4628      	mov	r0, r5
 8007738:	f7ff fa9a 	bl	8006c70 <_free_r>
 800773c:	2300      	movs	r3, #0
 800773e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007740:	e00d      	b.n	800775e <__sflush_r+0xae>
 8007742:	2301      	movs	r3, #1
 8007744:	4628      	mov	r0, r5
 8007746:	47b0      	blx	r6
 8007748:	4602      	mov	r2, r0
 800774a:	1c50      	adds	r0, r2, #1
 800774c:	d1c9      	bne.n	80076e2 <__sflush_r+0x32>
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d0c6      	beq.n	80076e2 <__sflush_r+0x32>
 8007754:	2b1d      	cmp	r3, #29
 8007756:	d001      	beq.n	800775c <__sflush_r+0xac>
 8007758:	2b16      	cmp	r3, #22
 800775a:	d11e      	bne.n	800779a <__sflush_r+0xea>
 800775c:	602f      	str	r7, [r5, #0]
 800775e:	2000      	movs	r0, #0
 8007760:	e022      	b.n	80077a8 <__sflush_r+0xf8>
 8007762:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007766:	b21b      	sxth	r3, r3
 8007768:	e01b      	b.n	80077a2 <__sflush_r+0xf2>
 800776a:	690f      	ldr	r7, [r1, #16]
 800776c:	2f00      	cmp	r7, #0
 800776e:	d0f6      	beq.n	800775e <__sflush_r+0xae>
 8007770:	0793      	lsls	r3, r2, #30
 8007772:	680e      	ldr	r6, [r1, #0]
 8007774:	bf08      	it	eq
 8007776:	694b      	ldreq	r3, [r1, #20]
 8007778:	600f      	str	r7, [r1, #0]
 800777a:	bf18      	it	ne
 800777c:	2300      	movne	r3, #0
 800777e:	eba6 0807 	sub.w	r8, r6, r7
 8007782:	608b      	str	r3, [r1, #8]
 8007784:	f1b8 0f00 	cmp.w	r8, #0
 8007788:	dde9      	ble.n	800775e <__sflush_r+0xae>
 800778a:	6a21      	ldr	r1, [r4, #32]
 800778c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800778e:	4643      	mov	r3, r8
 8007790:	463a      	mov	r2, r7
 8007792:	4628      	mov	r0, r5
 8007794:	47b0      	blx	r6
 8007796:	2800      	cmp	r0, #0
 8007798:	dc08      	bgt.n	80077ac <__sflush_r+0xfc>
 800779a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800779e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077a2:	81a3      	strh	r3, [r4, #12]
 80077a4:	f04f 30ff 	mov.w	r0, #4294967295
 80077a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ac:	4407      	add	r7, r0
 80077ae:	eba8 0800 	sub.w	r8, r8, r0
 80077b2:	e7e7      	b.n	8007784 <__sflush_r+0xd4>
 80077b4:	dfbffffe 	.word	0xdfbffffe

080077b8 <_fflush_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	690b      	ldr	r3, [r1, #16]
 80077bc:	4605      	mov	r5, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	b913      	cbnz	r3, 80077c8 <_fflush_r+0x10>
 80077c2:	2500      	movs	r5, #0
 80077c4:	4628      	mov	r0, r5
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	b118      	cbz	r0, 80077d2 <_fflush_r+0x1a>
 80077ca:	6a03      	ldr	r3, [r0, #32]
 80077cc:	b90b      	cbnz	r3, 80077d2 <_fflush_r+0x1a>
 80077ce:	f7ff f927 	bl	8006a20 <__sinit>
 80077d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f3      	beq.n	80077c2 <_fflush_r+0xa>
 80077da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077dc:	07d0      	lsls	r0, r2, #31
 80077de:	d404      	bmi.n	80077ea <_fflush_r+0x32>
 80077e0:	0599      	lsls	r1, r3, #22
 80077e2:	d402      	bmi.n	80077ea <_fflush_r+0x32>
 80077e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077e6:	f7ff fa40 	bl	8006c6a <__retarget_lock_acquire_recursive>
 80077ea:	4628      	mov	r0, r5
 80077ec:	4621      	mov	r1, r4
 80077ee:	f7ff ff5f 	bl	80076b0 <__sflush_r>
 80077f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077f4:	07da      	lsls	r2, r3, #31
 80077f6:	4605      	mov	r5, r0
 80077f8:	d4e4      	bmi.n	80077c4 <_fflush_r+0xc>
 80077fa:	89a3      	ldrh	r3, [r4, #12]
 80077fc:	059b      	lsls	r3, r3, #22
 80077fe:	d4e1      	bmi.n	80077c4 <_fflush_r+0xc>
 8007800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007802:	f7ff fa33 	bl	8006c6c <__retarget_lock_release_recursive>
 8007806:	e7dd      	b.n	80077c4 <_fflush_r+0xc>

08007808 <__swbuf_r>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	460e      	mov	r6, r1
 800780c:	4614      	mov	r4, r2
 800780e:	4605      	mov	r5, r0
 8007810:	b118      	cbz	r0, 800781a <__swbuf_r+0x12>
 8007812:	6a03      	ldr	r3, [r0, #32]
 8007814:	b90b      	cbnz	r3, 800781a <__swbuf_r+0x12>
 8007816:	f7ff f903 	bl	8006a20 <__sinit>
 800781a:	69a3      	ldr	r3, [r4, #24]
 800781c:	60a3      	str	r3, [r4, #8]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	071a      	lsls	r2, r3, #28
 8007822:	d501      	bpl.n	8007828 <__swbuf_r+0x20>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	b943      	cbnz	r3, 800783a <__swbuf_r+0x32>
 8007828:	4621      	mov	r1, r4
 800782a:	4628      	mov	r0, r5
 800782c:	f000 f82a 	bl	8007884 <__swsetup_r>
 8007830:	b118      	cbz	r0, 800783a <__swbuf_r+0x32>
 8007832:	f04f 37ff 	mov.w	r7, #4294967295
 8007836:	4638      	mov	r0, r7
 8007838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783a:	6823      	ldr	r3, [r4, #0]
 800783c:	6922      	ldr	r2, [r4, #16]
 800783e:	1a98      	subs	r0, r3, r2
 8007840:	6963      	ldr	r3, [r4, #20]
 8007842:	b2f6      	uxtb	r6, r6
 8007844:	4283      	cmp	r3, r0
 8007846:	4637      	mov	r7, r6
 8007848:	dc05      	bgt.n	8007856 <__swbuf_r+0x4e>
 800784a:	4621      	mov	r1, r4
 800784c:	4628      	mov	r0, r5
 800784e:	f7ff ffb3 	bl	80077b8 <_fflush_r>
 8007852:	2800      	cmp	r0, #0
 8007854:	d1ed      	bne.n	8007832 <__swbuf_r+0x2a>
 8007856:	68a3      	ldr	r3, [r4, #8]
 8007858:	3b01      	subs	r3, #1
 800785a:	60a3      	str	r3, [r4, #8]
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	6022      	str	r2, [r4, #0]
 8007862:	701e      	strb	r6, [r3, #0]
 8007864:	6962      	ldr	r2, [r4, #20]
 8007866:	1c43      	adds	r3, r0, #1
 8007868:	429a      	cmp	r2, r3
 800786a:	d004      	beq.n	8007876 <__swbuf_r+0x6e>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	07db      	lsls	r3, r3, #31
 8007870:	d5e1      	bpl.n	8007836 <__swbuf_r+0x2e>
 8007872:	2e0a      	cmp	r6, #10
 8007874:	d1df      	bne.n	8007836 <__swbuf_r+0x2e>
 8007876:	4621      	mov	r1, r4
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff ff9d 	bl	80077b8 <_fflush_r>
 800787e:	2800      	cmp	r0, #0
 8007880:	d0d9      	beq.n	8007836 <__swbuf_r+0x2e>
 8007882:	e7d6      	b.n	8007832 <__swbuf_r+0x2a>

08007884 <__swsetup_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4b29      	ldr	r3, [pc, #164]	@ (800792c <__swsetup_r+0xa8>)
 8007888:	4605      	mov	r5, r0
 800788a:	6818      	ldr	r0, [r3, #0]
 800788c:	460c      	mov	r4, r1
 800788e:	b118      	cbz	r0, 8007898 <__swsetup_r+0x14>
 8007890:	6a03      	ldr	r3, [r0, #32]
 8007892:	b90b      	cbnz	r3, 8007898 <__swsetup_r+0x14>
 8007894:	f7ff f8c4 	bl	8006a20 <__sinit>
 8007898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789c:	0719      	lsls	r1, r3, #28
 800789e:	d422      	bmi.n	80078e6 <__swsetup_r+0x62>
 80078a0:	06da      	lsls	r2, r3, #27
 80078a2:	d407      	bmi.n	80078b4 <__swsetup_r+0x30>
 80078a4:	2209      	movs	r2, #9
 80078a6:	602a      	str	r2, [r5, #0]
 80078a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	f04f 30ff 	mov.w	r0, #4294967295
 80078b2:	e033      	b.n	800791c <__swsetup_r+0x98>
 80078b4:	0758      	lsls	r0, r3, #29
 80078b6:	d512      	bpl.n	80078de <__swsetup_r+0x5a>
 80078b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078ba:	b141      	cbz	r1, 80078ce <__swsetup_r+0x4a>
 80078bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078c0:	4299      	cmp	r1, r3
 80078c2:	d002      	beq.n	80078ca <__swsetup_r+0x46>
 80078c4:	4628      	mov	r0, r5
 80078c6:	f7ff f9d3 	bl	8006c70 <_free_r>
 80078ca:	2300      	movs	r3, #0
 80078cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078d4:	81a3      	strh	r3, [r4, #12]
 80078d6:	2300      	movs	r3, #0
 80078d8:	6063      	str	r3, [r4, #4]
 80078da:	6923      	ldr	r3, [r4, #16]
 80078dc:	6023      	str	r3, [r4, #0]
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	f043 0308 	orr.w	r3, r3, #8
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	6923      	ldr	r3, [r4, #16]
 80078e8:	b94b      	cbnz	r3, 80078fe <__swsetup_r+0x7a>
 80078ea:	89a3      	ldrh	r3, [r4, #12]
 80078ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f4:	d003      	beq.n	80078fe <__swsetup_r+0x7a>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f8a5 	bl	8007a48 <__smakebuf_r>
 80078fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007902:	f013 0201 	ands.w	r2, r3, #1
 8007906:	d00a      	beq.n	800791e <__swsetup_r+0x9a>
 8007908:	2200      	movs	r2, #0
 800790a:	60a2      	str	r2, [r4, #8]
 800790c:	6962      	ldr	r2, [r4, #20]
 800790e:	4252      	negs	r2, r2
 8007910:	61a2      	str	r2, [r4, #24]
 8007912:	6922      	ldr	r2, [r4, #16]
 8007914:	b942      	cbnz	r2, 8007928 <__swsetup_r+0xa4>
 8007916:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800791a:	d1c5      	bne.n	80078a8 <__swsetup_r+0x24>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	0799      	lsls	r1, r3, #30
 8007920:	bf58      	it	pl
 8007922:	6962      	ldrpl	r2, [r4, #20]
 8007924:	60a2      	str	r2, [r4, #8]
 8007926:	e7f4      	b.n	8007912 <__swsetup_r+0x8e>
 8007928:	2000      	movs	r0, #0
 800792a:	e7f7      	b.n	800791c <__swsetup_r+0x98>
 800792c:	20000050 	.word	0x20000050

08007930 <memmove>:
 8007930:	4288      	cmp	r0, r1
 8007932:	b510      	push	{r4, lr}
 8007934:	eb01 0402 	add.w	r4, r1, r2
 8007938:	d902      	bls.n	8007940 <memmove+0x10>
 800793a:	4284      	cmp	r4, r0
 800793c:	4623      	mov	r3, r4
 800793e:	d807      	bhi.n	8007950 <memmove+0x20>
 8007940:	1e43      	subs	r3, r0, #1
 8007942:	42a1      	cmp	r1, r4
 8007944:	d008      	beq.n	8007958 <memmove+0x28>
 8007946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800794a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800794e:	e7f8      	b.n	8007942 <memmove+0x12>
 8007950:	4402      	add	r2, r0
 8007952:	4601      	mov	r1, r0
 8007954:	428a      	cmp	r2, r1
 8007956:	d100      	bne.n	800795a <memmove+0x2a>
 8007958:	bd10      	pop	{r4, pc}
 800795a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800795e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007962:	e7f7      	b.n	8007954 <memmove+0x24>

08007964 <_sbrk_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d06      	ldr	r5, [pc, #24]	@ (8007980 <_sbrk_r+0x1c>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	602b      	str	r3, [r5, #0]
 8007970:	f7f9 fe5c 	bl	800162c <_sbrk>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_sbrk_r+0x1a>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_sbrk_r+0x1a>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	200004c0 	.word	0x200004c0

08007984 <memcpy>:
 8007984:	440a      	add	r2, r1
 8007986:	4291      	cmp	r1, r2
 8007988:	f100 33ff 	add.w	r3, r0, #4294967295
 800798c:	d100      	bne.n	8007990 <memcpy+0xc>
 800798e:	4770      	bx	lr
 8007990:	b510      	push	{r4, lr}
 8007992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800799a:	4291      	cmp	r1, r2
 800799c:	d1f9      	bne.n	8007992 <memcpy+0xe>
 800799e:	bd10      	pop	{r4, pc}

080079a0 <_realloc_r>:
 80079a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a4:	4680      	mov	r8, r0
 80079a6:	4615      	mov	r5, r2
 80079a8:	460c      	mov	r4, r1
 80079aa:	b921      	cbnz	r1, 80079b6 <_realloc_r+0x16>
 80079ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	4611      	mov	r1, r2
 80079b2:	f7ff b9c9 	b.w	8006d48 <_malloc_r>
 80079b6:	b92a      	cbnz	r2, 80079c4 <_realloc_r+0x24>
 80079b8:	f7ff f95a 	bl	8006c70 <_free_r>
 80079bc:	2400      	movs	r4, #0
 80079be:	4620      	mov	r0, r4
 80079c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079c4:	f000 f89e 	bl	8007b04 <_malloc_usable_size_r>
 80079c8:	4285      	cmp	r5, r0
 80079ca:	4606      	mov	r6, r0
 80079cc:	d802      	bhi.n	80079d4 <_realloc_r+0x34>
 80079ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80079d2:	d8f4      	bhi.n	80079be <_realloc_r+0x1e>
 80079d4:	4629      	mov	r1, r5
 80079d6:	4640      	mov	r0, r8
 80079d8:	f7ff f9b6 	bl	8006d48 <_malloc_r>
 80079dc:	4607      	mov	r7, r0
 80079de:	2800      	cmp	r0, #0
 80079e0:	d0ec      	beq.n	80079bc <_realloc_r+0x1c>
 80079e2:	42b5      	cmp	r5, r6
 80079e4:	462a      	mov	r2, r5
 80079e6:	4621      	mov	r1, r4
 80079e8:	bf28      	it	cs
 80079ea:	4632      	movcs	r2, r6
 80079ec:	f7ff ffca 	bl	8007984 <memcpy>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff f93c 	bl	8006c70 <_free_r>
 80079f8:	463c      	mov	r4, r7
 80079fa:	e7e0      	b.n	80079be <_realloc_r+0x1e>

080079fc <__swhatbuf_r>:
 80079fc:	b570      	push	{r4, r5, r6, lr}
 80079fe:	460c      	mov	r4, r1
 8007a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a04:	2900      	cmp	r1, #0
 8007a06:	b096      	sub	sp, #88	@ 0x58
 8007a08:	4615      	mov	r5, r2
 8007a0a:	461e      	mov	r6, r3
 8007a0c:	da0d      	bge.n	8007a2a <__swhatbuf_r+0x2e>
 8007a0e:	89a3      	ldrh	r3, [r4, #12]
 8007a10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007a14:	f04f 0100 	mov.w	r1, #0
 8007a18:	bf14      	ite	ne
 8007a1a:	2340      	movne	r3, #64	@ 0x40
 8007a1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a20:	2000      	movs	r0, #0
 8007a22:	6031      	str	r1, [r6, #0]
 8007a24:	602b      	str	r3, [r5, #0]
 8007a26:	b016      	add	sp, #88	@ 0x58
 8007a28:	bd70      	pop	{r4, r5, r6, pc}
 8007a2a:	466a      	mov	r2, sp
 8007a2c:	f000 f848 	bl	8007ac0 <_fstat_r>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	dbec      	blt.n	8007a0e <__swhatbuf_r+0x12>
 8007a34:	9901      	ldr	r1, [sp, #4]
 8007a36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a3e:	4259      	negs	r1, r3
 8007a40:	4159      	adcs	r1, r3
 8007a42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a46:	e7eb      	b.n	8007a20 <__swhatbuf_r+0x24>

08007a48 <__smakebuf_r>:
 8007a48:	898b      	ldrh	r3, [r1, #12]
 8007a4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a4c:	079d      	lsls	r5, r3, #30
 8007a4e:	4606      	mov	r6, r0
 8007a50:	460c      	mov	r4, r1
 8007a52:	d507      	bpl.n	8007a64 <__smakebuf_r+0x1c>
 8007a54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	6163      	str	r3, [r4, #20]
 8007a60:	b003      	add	sp, #12
 8007a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a64:	ab01      	add	r3, sp, #4
 8007a66:	466a      	mov	r2, sp
 8007a68:	f7ff ffc8 	bl	80079fc <__swhatbuf_r>
 8007a6c:	9f00      	ldr	r7, [sp, #0]
 8007a6e:	4605      	mov	r5, r0
 8007a70:	4639      	mov	r1, r7
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff f968 	bl	8006d48 <_malloc_r>
 8007a78:	b948      	cbnz	r0, 8007a8e <__smakebuf_r+0x46>
 8007a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a7e:	059a      	lsls	r2, r3, #22
 8007a80:	d4ee      	bmi.n	8007a60 <__smakebuf_r+0x18>
 8007a82:	f023 0303 	bic.w	r3, r3, #3
 8007a86:	f043 0302 	orr.w	r3, r3, #2
 8007a8a:	81a3      	strh	r3, [r4, #12]
 8007a8c:	e7e2      	b.n	8007a54 <__smakebuf_r+0xc>
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	6020      	str	r0, [r4, #0]
 8007a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a96:	81a3      	strh	r3, [r4, #12]
 8007a98:	9b01      	ldr	r3, [sp, #4]
 8007a9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a9e:	b15b      	cbz	r3, 8007ab8 <__smakebuf_r+0x70>
 8007aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	f000 f81d 	bl	8007ae4 <_isatty_r>
 8007aaa:	b128      	cbz	r0, 8007ab8 <__smakebuf_r+0x70>
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	81a3      	strh	r3, [r4, #12]
 8007ab8:	89a3      	ldrh	r3, [r4, #12]
 8007aba:	431d      	orrs	r5, r3
 8007abc:	81a5      	strh	r5, [r4, #12]
 8007abe:	e7cf      	b.n	8007a60 <__smakebuf_r+0x18>

08007ac0 <_fstat_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	@ (8007ae0 <_fstat_r+0x20>)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	4608      	mov	r0, r1
 8007aca:	4611      	mov	r1, r2
 8007acc:	602b      	str	r3, [r5, #0]
 8007ace:	f7f9 fd84 	bl	80015da <_fstat>
 8007ad2:	1c43      	adds	r3, r0, #1
 8007ad4:	d102      	bne.n	8007adc <_fstat_r+0x1c>
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	b103      	cbz	r3, 8007adc <_fstat_r+0x1c>
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	bd38      	pop	{r3, r4, r5, pc}
 8007ade:	bf00      	nop
 8007ae0:	200004c0 	.word	0x200004c0

08007ae4 <_isatty_r>:
 8007ae4:	b538      	push	{r3, r4, r5, lr}
 8007ae6:	4d06      	ldr	r5, [pc, #24]	@ (8007b00 <_isatty_r+0x1c>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	4604      	mov	r4, r0
 8007aec:	4608      	mov	r0, r1
 8007aee:	602b      	str	r3, [r5, #0]
 8007af0:	f7f9 fd83 	bl	80015fa <_isatty>
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	d102      	bne.n	8007afe <_isatty_r+0x1a>
 8007af8:	682b      	ldr	r3, [r5, #0]
 8007afa:	b103      	cbz	r3, 8007afe <_isatty_r+0x1a>
 8007afc:	6023      	str	r3, [r4, #0]
 8007afe:	bd38      	pop	{r3, r4, r5, pc}
 8007b00:	200004c0 	.word	0x200004c0

08007b04 <_malloc_usable_size_r>:
 8007b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b08:	1f18      	subs	r0, r3, #4
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfbc      	itt	lt
 8007b0e:	580b      	ldrlt	r3, [r1, r0]
 8007b10:	18c0      	addlt	r0, r0, r3
 8007b12:	4770      	bx	lr

08007b14 <_init>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	bf00      	nop
 8007b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b1a:	bc08      	pop	{r3}
 8007b1c:	469e      	mov	lr, r3
 8007b1e:	4770      	bx	lr

08007b20 <_fini>:
 8007b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b22:	bf00      	nop
 8007b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b26:	bc08      	pop	{r3}
 8007b28:	469e      	mov	lr, r3
 8007b2a:	4770      	bx	lr
