
Spin_a_Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077c8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08007958  08007958  00008958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007da8  08007da8  00009088  2**0
                  CONTENTS
  4 .ARM          00000008  08007da8  08007da8  00008da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007db0  08007db0  00009088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007db0  08007db0  00008db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08007db8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000088  08007e40  00009088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08007e40  00009488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c18  00000000  00000000  000090b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002705  00000000  00000000  0001acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  0001d3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cac  00000000  00000000  0001e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280df  00000000  00000000  0001f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013cb3  00000000  00000000  0004719b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4c44  00000000  00000000  0005ae4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fa92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd0  00000000  00000000  0014fad8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00154aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007940 	.word	0x08007940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007940 	.word	0x08007940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <task1>:
static void MX_TIM3_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

// Task 1 - KEY INPUTS
void task1(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// Task 0 - INIT
	if (currentState == 0) {
 8000576:	4b4f      	ldr	r3, [pc, #316]	@ (80006b4 <task1+0x144>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d11c      	bne.n	80005b8 <task1+0x48>

		printf("Task 1, State 0\n");
 800057e:	484e      	ldr	r0, [pc, #312]	@ (80006b8 <task1+0x148>)
 8000580:	f005 fcfe 	bl	8005f80 <puts>

		//set up the first receive
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&char_in,1);
 8000584:	2201      	movs	r2, #1
 8000586:	494d      	ldr	r1, [pc, #308]	@ (80006bc <task1+0x14c>)
 8000588:	484d      	ldr	r0, [pc, #308]	@ (80006c0 <task1+0x150>)
 800058a:	f004 f8df 	bl	800474c <HAL_UART_Receive_IT>
		currentState = 1;
 800058e:	4b49      	ldr	r3, [pc, #292]	@ (80006b4 <task1+0x144>)
 8000590:	2201      	movs	r2, #1
 8000592:	601a      	str	r2, [r3, #0]

		//initialize buffer with all zeros
		for (int i = 0; i < 20; i++) {
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	e007      	b.n	80005aa <task1+0x3a>
			buff[i] = 0;
 800059a:	4a4a      	ldr	r2, [pc, #296]	@ (80006c4 <task1+0x154>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4413      	add	r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 20; i++) {
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3301      	adds	r3, #1
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b13      	cmp	r3, #19
 80005ae:	ddf4      	ble.n	800059a <task1+0x2a>
		}
		wait_flag = 0;
 80005b0:	4b45      	ldr	r3, [pc, #276]	@ (80006c8 <task1+0x158>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]

	else {
		// Invalid state
		currentState = 0; // Reset state
	}
}
 80005b6:	e079      	b.n	80006ac <task1+0x13c>
	else if (currentState == 1) {
 80005b8:	4b3e      	ldr	r3, [pc, #248]	@ (80006b4 <task1+0x144>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d110      	bne.n	80005e2 <task1+0x72>
		printf("Task 1, State 1\n");
 80005c0:	4842      	ldr	r0, [pc, #264]	@ (80006cc <task1+0x15c>)
 80005c2:	f005 fcdd 	bl	8005f80 <puts>
		if(char_flag == 1){
 80005c6:	4b42      	ldr	r3, [pc, #264]	@ (80006d0 <task1+0x160>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d16e      	bne.n	80006ac <task1+0x13c>
			currentState = 2;
 80005ce:	4b39      	ldr	r3, [pc, #228]	@ (80006b4 <task1+0x144>)
 80005d0:	2202      	movs	r2, #2
 80005d2:	601a      	str	r2, [r3, #0]
			buff[pos] = char_in;
 80005d4:	4b3f      	ldr	r3, [pc, #252]	@ (80006d4 <task1+0x164>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a38      	ldr	r2, [pc, #224]	@ (80006bc <task1+0x14c>)
 80005da:	7811      	ldrb	r1, [r2, #0]
 80005dc:	4a39      	ldr	r2, [pc, #228]	@ (80006c4 <task1+0x154>)
 80005de:	54d1      	strb	r1, [r2, r3]
}
 80005e0:	e064      	b.n	80006ac <task1+0x13c>
	else if (currentState == 2) {
 80005e2:	4b34      	ldr	r3, [pc, #208]	@ (80006b4 <task1+0x144>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d151      	bne.n	800068e <task1+0x11e>
		printf("Task 1, State 1\n");
 80005ea:	4838      	ldr	r0, [pc, #224]	@ (80006cc <task1+0x15c>)
 80005ec:	f005 fcc8 	bl	8005f80 <puts>
		HAL_UART_Transmit(&huart2, (uint8_t*)&char_in,1,1);
 80005f0:	2301      	movs	r3, #1
 80005f2:	2201      	movs	r2, #1
 80005f4:	4931      	ldr	r1, [pc, #196]	@ (80006bc <task1+0x14c>)
 80005f6:	4832      	ldr	r0, [pc, #200]	@ (80006c0 <task1+0x150>)
 80005f8:	f004 f81e 	bl	8004638 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, (uint8_t*)&char_in,1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	492f      	ldr	r1, [pc, #188]	@ (80006bc <task1+0x14c>)
 8000600:	482f      	ldr	r0, [pc, #188]	@ (80006c0 <task1+0x150>)
 8000602:	f004 f8a3 	bl	800474c <HAL_UART_Receive_IT>
		char_flag = 0;
 8000606:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <task1+0x160>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
		currentState = 1;
 800060c:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <task1+0x144>)
 800060e:	2201      	movs	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
		pos++;
 8000612:	4b30      	ldr	r3, [pc, #192]	@ (80006d4 <task1+0x164>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3301      	adds	r3, #1
 8000618:	4a2e      	ldr	r2, [pc, #184]	@ (80006d4 <task1+0x164>)
 800061a:	6013      	str	r3, [r2, #0]
		if (pos>20){
 800061c:	4b2d      	ldr	r3, [pc, #180]	@ (80006d4 <task1+0x164>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b14      	cmp	r3, #20
 8000622:	dd2c      	ble.n	800067e <task1+0x10e>
			n = sprintf(print_buff,"\n\rInvalid Entry. Please try again.\n\r",pos);
 8000624:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <task1+0x164>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	461a      	mov	r2, r3
 800062a:	492b      	ldr	r1, [pc, #172]	@ (80006d8 <task1+0x168>)
 800062c:	482b      	ldr	r0, [pc, #172]	@ (80006dc <task1+0x16c>)
 800062e:	f005 fcaf 	bl	8005f90 <siprintf>
 8000632:	4603      	mov	r3, r0
 8000634:	4a2a      	ldr	r2, [pc, #168]	@ (80006e0 <task1+0x170>)
 8000636:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <task1+0x170>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	b29a      	uxth	r2, r3
 800063e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000642:	4926      	ldr	r1, [pc, #152]	@ (80006dc <task1+0x16c>)
 8000644:	481e      	ldr	r0, [pc, #120]	@ (80006c0 <task1+0x150>)
 8000646:	f003 fff7 	bl	8004638 <HAL_UART_Transmit>
			for (int i = 0; i < 20; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	e007      	b.n	8000660 <task1+0xf0>
				buff[i] = 0;
 8000650:	4a1c      	ldr	r2, [pc, #112]	@ (80006c4 <task1+0x154>)
 8000652:	683b      	ldr	r3, [r7, #0]
 8000654:	4413      	add	r3, r2
 8000656:	2200      	movs	r2, #0
 8000658:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	2b13      	cmp	r3, #19
 8000664:	ddf4      	ble.n	8000650 <task1+0xe0>
			pos = 0;
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <task1+0x164>)
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
			currentState = 1;
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <task1+0x144>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]
			char_in = 0;
 8000672:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <task1+0x14c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
			wait_flag = 0;
 8000678:	4b13      	ldr	r3, [pc, #76]	@ (80006c8 <task1+0x158>)
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
		if(wait_flag == 1){
 800067e:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <task1+0x158>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d112      	bne.n	80006ac <task1+0x13c>
			currentState = 3;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <task1+0x144>)
 8000688:	2203      	movs	r2, #3
 800068a:	601a      	str	r2, [r3, #0]
}
 800068c:	e00e      	b.n	80006ac <task1+0x13c>
	else if (currentState == 3) {
 800068e:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <task1+0x144>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b03      	cmp	r3, #3
 8000694:	d107      	bne.n	80006a6 <task1+0x136>
		if(wait_flag == 0){
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <task1+0x158>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d106      	bne.n	80006ac <task1+0x13c>
			currentState = 1;
 800069e:	4b05      	ldr	r3, [pc, #20]	@ (80006b4 <task1+0x144>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	601a      	str	r2, [r3, #0]
}
 80006a4:	e002      	b.n	80006ac <task1+0x13c>
		currentState = 0; // Reset state
 80006a6:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <task1+0x144>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	200001e8 	.word	0x200001e8
 80006b8:	08007958 	.word	0x08007958
 80006bc:	200001dc 	.word	0x200001dc
 80006c0:	2000013c 	.word	0x2000013c
 80006c4:	200001c8 	.word	0x200001c8
 80006c8:	200001e4 	.word	0x200001e4
 80006cc:	08007968 	.word	0x08007968
 80006d0:	200001c4 	.word	0x200001c4
 80006d4:	200001e0 	.word	0x200001e0
 80006d8:	08007978 	.word	0x08007978
 80006dc:	200001ec 	.word	0x200001ec
 80006e0:	20000284 	.word	0x20000284

080006e4 <task2>:


// Task 2 MOTOR AND KEY INTERPRETATION
void task2(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
	static char print_buff[150];
	static int n;
	static int duty_int;

	// State 0 - INIT MOTORS
	if (currentState == 0) {
 80006ea:	4b8e      	ldr	r3, [pc, #568]	@ (8000924 <task2+0x240>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d12a      	bne.n	8000748 <task2+0x64>

		printf("Task 2, State 0\n");
 80006f2:	488d      	ldr	r0, [pc, #564]	@ (8000928 <task2+0x244>)
 80006f4:	f005 fc44 	bl	8005f80 <puts>

		//start PWM generation for both motors
		start_PWM(&mot1);
 80006f8:	488c      	ldr	r0, [pc, #560]	@ (800092c <task2+0x248>)
 80006fa:	f000 fc69 	bl	8000fd0 <start_PWM>
		start_PWM(&mot2);
 80006fe:	488c      	ldr	r0, [pc, #560]	@ (8000930 <task2+0x24c>)
 8000700:	f000 fc66 	bl	8000fd0 <start_PWM>
		set_duty(&mot1,0);
 8000704:	2100      	movs	r1, #0
 8000706:	4889      	ldr	r0, [pc, #548]	@ (800092c <task2+0x248>)
 8000708:	f000 fc7c 	bl	8001004 <set_duty>
		set_duty(&mot2,0);
 800070c:	2100      	movs	r1, #0
 800070e:	4888      	ldr	r0, [pc, #544]	@ (8000930 <task2+0x24c>)
 8000710:	f000 fc78 	bl	8001004 <set_duty>
		printf("Task 2, State 1\n");
 8000714:	4887      	ldr	r0, [pc, #540]	@ (8000934 <task2+0x250>)
 8000716:	f005 fc33 	bl	8005f80 <puts>

		n = sprintf(print_buff,"\n\rEnter Motor instructions in the format 'Mnxy' where n is the motor number and xy is the duty cycle in hex.\n\r");
 800071a:	4987      	ldr	r1, [pc, #540]	@ (8000938 <task2+0x254>)
 800071c:	4887      	ldr	r0, [pc, #540]	@ (800093c <task2+0x258>)
 800071e:	f005 fc37 	bl	8005f90 <siprintf>
 8000722:	4603      	mov	r3, r0
 8000724:	4a86      	ldr	r2, [pc, #536]	@ (8000940 <task2+0x25c>)
 8000726:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000728:	4b85      	ldr	r3, [pc, #532]	@ (8000940 <task2+0x25c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	b29a      	uxth	r2, r3
 800072e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000732:	4982      	ldr	r1, [pc, #520]	@ (800093c <task2+0x258>)
 8000734:	4883      	ldr	r0, [pc, #524]	@ (8000944 <task2+0x260>)
 8000736:	f003 ff7f 	bl	8004638 <HAL_UART_Transmit>

		// Transition to state Always
		currentState = 1;
 800073a:	4b7a      	ldr	r3, [pc, #488]	@ (8000924 <task2+0x240>)
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
		wait_flag = 0;
 8000740:	4b81      	ldr	r3, [pc, #516]	@ (8000948 <task2+0x264>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
		currentState = 1;
	} else {
		// Invalid state
		currentState = 1; // Reset state
	}
}
 8000746:	e22a      	b.n	8000b9e <task2+0x4ba>
	} else if (currentState == 1) {
 8000748:	4b76      	ldr	r3, [pc, #472]	@ (8000924 <task2+0x240>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d12b      	bne.n	80007a8 <task2+0xc4>
		printf("Task 2, State 1\n");
 8000750:	4878      	ldr	r0, [pc, #480]	@ (8000934 <task2+0x250>)
 8000752:	f005 fc15 	bl	8005f80 <puts>
		char check = buff[pos-1];
 8000756:	4b7d      	ldr	r3, [pc, #500]	@ (800094c <task2+0x268>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	3b01      	subs	r3, #1
 800075c:	4a7c      	ldr	r2, [pc, #496]	@ (8000950 <task2+0x26c>)
 800075e:	5cd3      	ldrb	r3, [r2, r3]
 8000760:	71fb      	strb	r3, [r7, #7]
		if (check == '\r')
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b0d      	cmp	r3, #13
 8000766:	d110      	bne.n	800078a <task2+0xa6>
			currentState = 2;
 8000768:	4b6e      	ldr	r3, [pc, #440]	@ (8000924 <task2+0x240>)
 800076a:	2202      	movs	r2, #2
 800076c:	601a      	str	r2, [r3, #0]
			wait_flag = 1;
 800076e:	4b76      	ldr	r3, [pc, #472]	@ (8000948 <task2+0x264>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
			pos--;
 8000774:	4b75      	ldr	r3, [pc, #468]	@ (800094c <task2+0x268>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	3b01      	subs	r3, #1
 800077a:	4a74      	ldr	r2, [pc, #464]	@ (800094c <task2+0x268>)
 800077c:	6013      	str	r3, [r2, #0]
			buff[pos] = 0;
 800077e:	4b73      	ldr	r3, [pc, #460]	@ (800094c <task2+0x268>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a73      	ldr	r2, [pc, #460]	@ (8000950 <task2+0x26c>)
 8000784:	2100      	movs	r1, #0
 8000786:	54d1      	strb	r1, [r2, r3]
}
 8000788:	e209      	b.n	8000b9e <task2+0x4ba>
		else if (check == 0x7F){
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b7f      	cmp	r3, #127	@ 0x7f
 800078e:	f040 8206 	bne.w	8000b9e <task2+0x4ba>
			pos = pos - 2;
 8000792:	4b6e      	ldr	r3, [pc, #440]	@ (800094c <task2+0x268>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3b02      	subs	r3, #2
 8000798:	4a6c      	ldr	r2, [pc, #432]	@ (800094c <task2+0x268>)
 800079a:	6013      	str	r3, [r2, #0]
			buff[pos] = 0;
 800079c:	4b6b      	ldr	r3, [pc, #428]	@ (800094c <task2+0x268>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a6b      	ldr	r2, [pc, #428]	@ (8000950 <task2+0x26c>)
 80007a2:	2100      	movs	r1, #0
 80007a4:	54d1      	strb	r1, [r2, r3]
}
 80007a6:	e1fa      	b.n	8000b9e <task2+0x4ba>
	else if (currentState == 2) {
 80007a8:	4b5e      	ldr	r3, [pc, #376]	@ (8000924 <task2+0x240>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b02      	cmp	r3, #2
 80007ae:	f040 819e 	bne.w	8000aee <task2+0x40a>
		printf("Task 2, State 1\n");
 80007b2:	4860      	ldr	r0, [pc, #384]	@ (8000934 <task2+0x250>)
 80007b4:	f005 fbe4 	bl	8005f80 <puts>
		n = sprintf(print_buff,"\n\rChecking Entry...\n\r");
 80007b8:	4966      	ldr	r1, [pc, #408]	@ (8000954 <task2+0x270>)
 80007ba:	4860      	ldr	r0, [pc, #384]	@ (800093c <task2+0x258>)
 80007bc:	f005 fbe8 	bl	8005f90 <siprintf>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4a5f      	ldr	r2, [pc, #380]	@ (8000940 <task2+0x25c>)
 80007c4:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2,print_buff,n,400);
 80007c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000940 <task2+0x25c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	b29a      	uxth	r2, r3
 80007cc:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80007d0:	495a      	ldr	r1, [pc, #360]	@ (800093c <task2+0x258>)
 80007d2:	485c      	ldr	r0, [pc, #368]	@ (8000944 <task2+0x260>)
 80007d4:	f003 ff30 	bl	8004638 <HAL_UART_Transmit>
		if(buff[0] != 'M'){
 80007d8:	4b5d      	ldr	r3, [pc, #372]	@ (8000950 <task2+0x26c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b4d      	cmp	r3, #77	@ 0x4d
 80007de:	d02a      	beq.n	8000836 <task2+0x152>
			n = sprintf(print_buff,"\n\rInvalid char 1 Entry. Entry must be in the format Mnxy.\n\r");
 80007e0:	495d      	ldr	r1, [pc, #372]	@ (8000958 <task2+0x274>)
 80007e2:	4856      	ldr	r0, [pc, #344]	@ (800093c <task2+0x258>)
 80007e4:	f005 fbd4 	bl	8005f90 <siprintf>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a55      	ldr	r2, [pc, #340]	@ (8000940 <task2+0x25c>)
 80007ec:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 80007ee:	4b54      	ldr	r3, [pc, #336]	@ (8000940 <task2+0x25c>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80007f8:	4950      	ldr	r1, [pc, #320]	@ (800093c <task2+0x258>)
 80007fa:	4852      	ldr	r0, [pc, #328]	@ (8000944 <task2+0x260>)
 80007fc:	f003 ff1c 	bl	8004638 <HAL_UART_Transmit>
			for (int i = 0; i < 20; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	e007      	b.n	8000816 <task2+0x132>
				buff[i] = 0;
 8000806:	4a52      	ldr	r2, [pc, #328]	@ (8000950 <task2+0x26c>)
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	4413      	add	r3, r2
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	3301      	adds	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	2b13      	cmp	r3, #19
 800081a:	ddf4      	ble.n	8000806 <task2+0x122>
			pos = 0;
 800081c:	4b4b      	ldr	r3, [pc, #300]	@ (800094c <task2+0x268>)
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
			currentState = 1;
 8000822:	4b40      	ldr	r3, [pc, #256]	@ (8000924 <task2+0x240>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
			char_in = 0;
 8000828:	4b4c      	ldr	r3, [pc, #304]	@ (800095c <task2+0x278>)
 800082a:	2200      	movs	r2, #0
 800082c:	701a      	strb	r2, [r3, #0]
			wait_flag = 0;
 800082e:	4b46      	ldr	r3, [pc, #280]	@ (8000948 <task2+0x264>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
}
 8000834:	e1b3      	b.n	8000b9e <task2+0x4ba>
		else if((buff[1] != '1') && (buff[1] != '2' ) ){
 8000836:	4b46      	ldr	r3, [pc, #280]	@ (8000950 <task2+0x26c>)
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	2b31      	cmp	r3, #49	@ 0x31
 800083c:	d02e      	beq.n	800089c <task2+0x1b8>
 800083e:	4b44      	ldr	r3, [pc, #272]	@ (8000950 <task2+0x26c>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	2b32      	cmp	r3, #50	@ 0x32
 8000844:	d02a      	beq.n	800089c <task2+0x1b8>
			n = sprintf(print_buff,"\n\rInvalid char 2 Entry. Entry must be in the format 'Mnxy'.\n\r");
 8000846:	4946      	ldr	r1, [pc, #280]	@ (8000960 <task2+0x27c>)
 8000848:	483c      	ldr	r0, [pc, #240]	@ (800093c <task2+0x258>)
 800084a:	f005 fba1 	bl	8005f90 <siprintf>
 800084e:	4603      	mov	r3, r0
 8000850:	4a3b      	ldr	r2, [pc, #236]	@ (8000940 <task2+0x25c>)
 8000852:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000854:	4b3a      	ldr	r3, [pc, #232]	@ (8000940 <task2+0x25c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	b29a      	uxth	r2, r3
 800085a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800085e:	4937      	ldr	r1, [pc, #220]	@ (800093c <task2+0x258>)
 8000860:	4838      	ldr	r0, [pc, #224]	@ (8000944 <task2+0x260>)
 8000862:	f003 fee9 	bl	8004638 <HAL_UART_Transmit>
			for (int i = 0; i < 20; i++) {
 8000866:	2300      	movs	r3, #0
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	e007      	b.n	800087c <task2+0x198>
				buff[i] = 0;
 800086c:	4a38      	ldr	r2, [pc, #224]	@ (8000950 <task2+0x26c>)
 800086e:	69bb      	ldr	r3, [r7, #24]
 8000870:	4413      	add	r3, r2
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	3301      	adds	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	2b13      	cmp	r3, #19
 8000880:	ddf4      	ble.n	800086c <task2+0x188>
			pos = 0;
 8000882:	4b32      	ldr	r3, [pc, #200]	@ (800094c <task2+0x268>)
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
			currentState = 1;
 8000888:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <task2+0x240>)
 800088a:	2201      	movs	r2, #1
 800088c:	601a      	str	r2, [r3, #0]
			char_in = 0;
 800088e:	4b33      	ldr	r3, [pc, #204]	@ (800095c <task2+0x278>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
			wait_flag = 0;
 8000894:	4b2c      	ldr	r3, [pc, #176]	@ (8000948 <task2+0x264>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	e180      	b.n	8000b9e <task2+0x4ba>
		else if((isdigit(buff[2]) == 0 && isalpha(buff[2]) == 0) || buff[2]>'F'){
 800089c:	4b2c      	ldr	r3, [pc, #176]	@ (8000950 <task2+0x26c>)
 800089e:	789b      	ldrb	r3, [r3, #2]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a30      	ldr	r2, [pc, #192]	@ (8000964 <task2+0x280>)
 80008a4:	4413      	add	r3, r2
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d109      	bne.n	80008c4 <task2+0x1e0>
 80008b0:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <task2+0x26c>)
 80008b2:	789b      	ldrb	r3, [r3, #2]
 80008b4:	3301      	adds	r3, #1
 80008b6:	4a2b      	ldr	r2, [pc, #172]	@ (8000964 <task2+0x280>)
 80008b8:	4413      	add	r3, r2
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d003      	beq.n	80008cc <task2+0x1e8>
 80008c4:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <task2+0x26c>)
 80008c6:	789b      	ldrb	r3, [r3, #2]
 80008c8:	2b46      	cmp	r3, #70	@ 0x46
 80008ca:	d94f      	bls.n	800096c <task2+0x288>
			n = sprintf(print_buff,"\n\rInvalid char 3 Entry. Entry must be in the format 'Mnxy'.\n\r");
 80008cc:	4926      	ldr	r1, [pc, #152]	@ (8000968 <task2+0x284>)
 80008ce:	481b      	ldr	r0, [pc, #108]	@ (800093c <task2+0x258>)
 80008d0:	f005 fb5e 	bl	8005f90 <siprintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	4a1a      	ldr	r2, [pc, #104]	@ (8000940 <task2+0x25c>)
 80008d8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 80008da:	4b19      	ldr	r3, [pc, #100]	@ (8000940 <task2+0x25c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008e4:	4915      	ldr	r1, [pc, #84]	@ (800093c <task2+0x258>)
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <task2+0x260>)
 80008e8:	f003 fea6 	bl	8004638 <HAL_UART_Transmit>
			for (int i = 0; i < 20; i++) {
 80008ec:	2300      	movs	r3, #0
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e007      	b.n	8000902 <task2+0x21e>
				buff[i] = 0;
 80008f2:	4a17      	ldr	r2, [pc, #92]	@ (8000950 <task2+0x26c>)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	4413      	add	r3, r2
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	3301      	adds	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2b13      	cmp	r3, #19
 8000906:	ddf4      	ble.n	80008f2 <task2+0x20e>
			pos = 0;
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <task2+0x268>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
			currentState = 1;
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <task2+0x240>)
 8000910:	2201      	movs	r2, #1
 8000912:	601a      	str	r2, [r3, #0]
			char_in = 0;
 8000914:	4b11      	ldr	r3, [pc, #68]	@ (800095c <task2+0x278>)
 8000916:	2200      	movs	r2, #0
 8000918:	701a      	strb	r2, [r3, #0]
			wait_flag = 0;
 800091a:	4b0b      	ldr	r3, [pc, #44]	@ (8000948 <task2+0x264>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e13d      	b.n	8000b9e <task2+0x4ba>
 8000922:	bf00      	nop
 8000924:	20000288 	.word	0x20000288
 8000928:	080079a0 	.word	0x080079a0
 800092c:	20000000 	.word	0x20000000
 8000930:	20000010 	.word	0x20000010
 8000934:	080079b0 	.word	0x080079b0
 8000938:	080079c0 	.word	0x080079c0
 800093c:	2000028c 	.word	0x2000028c
 8000940:	20000324 	.word	0x20000324
 8000944:	2000013c 	.word	0x2000013c
 8000948:	200001e4 	.word	0x200001e4
 800094c:	200001e0 	.word	0x200001e0
 8000950:	200001c8 	.word	0x200001c8
 8000954:	08007a30 	.word	0x08007a30
 8000958:	08007a48 	.word	0x08007a48
 800095c:	200001dc 	.word	0x200001dc
 8000960:	08007a84 	.word	0x08007a84
 8000964:	08007c58 	.word	0x08007c58
 8000968:	08007ac4 	.word	0x08007ac4
		else if((isdigit(buff[3]) == 0 && isalpha(buff[3]) == 0) || buff[3]>'F'){
 800096c:	4b8e      	ldr	r3, [pc, #568]	@ (8000ba8 <task2+0x4c4>)
 800096e:	78db      	ldrb	r3, [r3, #3]
 8000970:	3301      	adds	r3, #1
 8000972:	4a8e      	ldr	r2, [pc, #568]	@ (8000bac <task2+0x4c8>)
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	f003 0304 	and.w	r3, r3, #4
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <task2+0x2b0>
 8000980:	4b89      	ldr	r3, [pc, #548]	@ (8000ba8 <task2+0x4c4>)
 8000982:	78db      	ldrb	r3, [r3, #3]
 8000984:	3301      	adds	r3, #1
 8000986:	4a89      	ldr	r2, [pc, #548]	@ (8000bac <task2+0x4c8>)
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d003      	beq.n	800099c <task2+0x2b8>
 8000994:	4b84      	ldr	r3, [pc, #528]	@ (8000ba8 <task2+0x4c4>)
 8000996:	78db      	ldrb	r3, [r3, #3]
 8000998:	2b46      	cmp	r3, #70	@ 0x46
 800099a:	d92a      	bls.n	80009f2 <task2+0x30e>
			n = sprintf(print_buff,"\n\rInvalid char 4 Entry. Entry must be in the format 'Mnxy'.\n\r");
 800099c:	4984      	ldr	r1, [pc, #528]	@ (8000bb0 <task2+0x4cc>)
 800099e:	4885      	ldr	r0, [pc, #532]	@ (8000bb4 <task2+0x4d0>)
 80009a0:	f005 faf6 	bl	8005f90 <siprintf>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a84      	ldr	r2, [pc, #528]	@ (8000bb8 <task2+0x4d4>)
 80009a8:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 80009aa:	4b83      	ldr	r3, [pc, #524]	@ (8000bb8 <task2+0x4d4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80009b4:	497f      	ldr	r1, [pc, #508]	@ (8000bb4 <task2+0x4d0>)
 80009b6:	4881      	ldr	r0, [pc, #516]	@ (8000bbc <task2+0x4d8>)
 80009b8:	f003 fe3e 	bl	8004638 <HAL_UART_Transmit>
			for (int i = 0; i < 20; i++) {
 80009bc:	2300      	movs	r3, #0
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	e007      	b.n	80009d2 <task2+0x2ee>
				buff[i] = 0;
 80009c2:	4a79      	ldr	r2, [pc, #484]	@ (8000ba8 <task2+0x4c4>)
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4413      	add	r3, r2
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	3301      	adds	r3, #1
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b13      	cmp	r3, #19
 80009d6:	ddf4      	ble.n	80009c2 <task2+0x2de>
			pos = 0;
 80009d8:	4b79      	ldr	r3, [pc, #484]	@ (8000bc0 <task2+0x4dc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
			currentState = 1;
 80009de:	4b79      	ldr	r3, [pc, #484]	@ (8000bc4 <task2+0x4e0>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
			char_in = 0;
 80009e4:	4b78      	ldr	r3, [pc, #480]	@ (8000bc8 <task2+0x4e4>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
			wait_flag = 0;
 80009ea:	4b78      	ldr	r3, [pc, #480]	@ (8000bcc <task2+0x4e8>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	e0d5      	b.n	8000b9e <task2+0x4ba>
		else if(buff[4]!= 0){
 80009f2:	4b6d      	ldr	r3, [pc, #436]	@ (8000ba8 <task2+0x4c4>)
 80009f4:	791b      	ldrb	r3, [r3, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d02a      	beq.n	8000a50 <task2+0x36c>
			n = sprintf(print_buff,"\n\rEntry too long. Entry must be in the format 'Mnxy'.\n\r");
 80009fa:	4975      	ldr	r1, [pc, #468]	@ (8000bd0 <task2+0x4ec>)
 80009fc:	486d      	ldr	r0, [pc, #436]	@ (8000bb4 <task2+0x4d0>)
 80009fe:	f005 fac7 	bl	8005f90 <siprintf>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a6c      	ldr	r2, [pc, #432]	@ (8000bb8 <task2+0x4d4>)
 8000a06:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000a08:	4b6b      	ldr	r3, [pc, #428]	@ (8000bb8 <task2+0x4d4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a12:	4968      	ldr	r1, [pc, #416]	@ (8000bb4 <task2+0x4d0>)
 8000a14:	4869      	ldr	r0, [pc, #420]	@ (8000bbc <task2+0x4d8>)
 8000a16:	f003 fe0f 	bl	8004638 <HAL_UART_Transmit>
			for (int i = 0; i < 20; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e007      	b.n	8000a30 <task2+0x34c>
				buff[i] = 0;
 8000a20:	4a61      	ldr	r2, [pc, #388]	@ (8000ba8 <task2+0x4c4>)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4413      	add	r3, r2
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	2b13      	cmp	r3, #19
 8000a34:	ddf4      	ble.n	8000a20 <task2+0x33c>
			pos = 0;
 8000a36:	4b62      	ldr	r3, [pc, #392]	@ (8000bc0 <task2+0x4dc>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
			currentState = 1;
 8000a3c:	4b61      	ldr	r3, [pc, #388]	@ (8000bc4 <task2+0x4e0>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
			char_in = 0;
 8000a42:	4b61      	ldr	r3, [pc, #388]	@ (8000bc8 <task2+0x4e4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
			wait_flag = 0;
 8000a48:	4b60      	ldr	r3, [pc, #384]	@ (8000bcc <task2+0x4e8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	e0a6      	b.n	8000b9e <task2+0x4ba>
			n = sprintf(print_buff,"\n\rValid Entry.\n\r");
 8000a50:	4960      	ldr	r1, [pc, #384]	@ (8000bd4 <task2+0x4f0>)
 8000a52:	4858      	ldr	r0, [pc, #352]	@ (8000bb4 <task2+0x4d0>)
 8000a54:	f005 fa9c 	bl	8005f90 <siprintf>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a57      	ldr	r2, [pc, #348]	@ (8000bb8 <task2+0x4d4>)
 8000a5c:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000a5e:	4b56      	ldr	r3, [pc, #344]	@ (8000bb8 <task2+0x4d4>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a68:	4952      	ldr	r1, [pc, #328]	@ (8000bb4 <task2+0x4d0>)
 8000a6a:	4854      	ldr	r0, [pc, #336]	@ (8000bbc <task2+0x4d8>)
 8000a6c:	f003 fde4 	bl	8004638 <HAL_UART_Transmit>
			motor_num = buff[1] - '0';
 8000a70:	4b4d      	ldr	r3, [pc, #308]	@ (8000ba8 <task2+0x4c4>)
 8000a72:	785b      	ldrb	r3, [r3, #1]
 8000a74:	3b30      	subs	r3, #48	@ 0x30
 8000a76:	4a58      	ldr	r2, [pc, #352]	@ (8000bd8 <task2+0x4f4>)
 8000a78:	6013      	str	r3, [r2, #0]
			char duty_str[2] = {buff[2],buff[3]};
 8000a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ba8 <task2+0x4c4>)
 8000a7c:	789b      	ldrb	r3, [r3, #2]
 8000a7e:	713b      	strb	r3, [r7, #4]
 8000a80:	4b49      	ldr	r3, [pc, #292]	@ (8000ba8 <task2+0x4c4>)
 8000a82:	78db      	ldrb	r3, [r3, #3]
 8000a84:	717b      	strb	r3, [r7, #5]
			sscanf(duty_str, "%x", &duty_int);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4a54      	ldr	r2, [pc, #336]	@ (8000bdc <task2+0x4f8>)
 8000a8a:	4955      	ldr	r1, [pc, #340]	@ (8000be0 <task2+0x4fc>)
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f005 fa9f 	bl	8005fd0 <siscanf>
			if(duty_int >=128){
 8000a92:	4b52      	ldr	r3, [pc, #328]	@ (8000bdc <task2+0x4f8>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a98:	dd0a      	ble.n	8000ab0 <task2+0x3cc>
				duty_int ^= 128;
 8000a9a:	4b50      	ldr	r3, [pc, #320]	@ (8000bdc <task2+0x4f8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8000aa2:	4a4e      	ldr	r2, [pc, #312]	@ (8000bdc <task2+0x4f8>)
 8000aa4:	6013      	str	r3, [r2, #0]
				duty_int -= 128;
 8000aa6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bdc <task2+0x4f8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3b80      	subs	r3, #128	@ 0x80
 8000aac:	4a4b      	ldr	r2, [pc, #300]	@ (8000bdc <task2+0x4f8>)
 8000aae:	6013      	str	r3, [r2, #0]
			duty_int = duty_int*5;
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bdc <task2+0x4f8>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a48      	ldr	r2, [pc, #288]	@ (8000bdc <task2+0x4f8>)
 8000abc:	6013      	str	r3, [r2, #0]
			for (int i = 0; i < 20; i++) {
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	e007      	b.n	8000ad4 <task2+0x3f0>
				buff[i] = 0;
 8000ac4:	4a38      	ldr	r2, [pc, #224]	@ (8000ba8 <task2+0x4c4>)
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	2200      	movs	r2, #0
 8000acc:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 20; i++) {
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	2b13      	cmp	r3, #19
 8000ad8:	ddf4      	ble.n	8000ac4 <task2+0x3e0>
			pos = 0;
 8000ada:	4b39      	ldr	r3, [pc, #228]	@ (8000bc0 <task2+0x4dc>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
			currentState = 3;
 8000ae0:	4b38      	ldr	r3, [pc, #224]	@ (8000bc4 <task2+0x4e0>)
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	601a      	str	r2, [r3, #0]
			char_in = 0;
 8000ae6:	4b38      	ldr	r3, [pc, #224]	@ (8000bc8 <task2+0x4e4>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	701a      	strb	r2, [r3, #0]
}
 8000aec:	e057      	b.n	8000b9e <task2+0x4ba>
	else if (currentState == 3) {
 8000aee:	4b35      	ldr	r3, [pc, #212]	@ (8000bc4 <task2+0x4e0>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d14f      	bne.n	8000b96 <task2+0x4b2>
		printf("Task 2, State 1\n");
 8000af6:	483b      	ldr	r0, [pc, #236]	@ (8000be4 <task2+0x500>)
 8000af8:	f005 fa42 	bl	8005f80 <puts>
		if(motor_num == 1){
 8000afc:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <task2+0x4f4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d120      	bne.n	8000b46 <task2+0x462>
			duty = duty_int;
 8000b04:	4b35      	ldr	r3, [pc, #212]	@ (8000bdc <task2+0x4f8>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a37      	ldr	r2, [pc, #220]	@ (8000be8 <task2+0x504>)
 8000b0a:	6013      	str	r3, [r2, #0]
			set_duty(&mot1,duty);
 8000b0c:	4b36      	ldr	r3, [pc, #216]	@ (8000be8 <task2+0x504>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4836      	ldr	r0, [pc, #216]	@ (8000bec <task2+0x508>)
 8000b14:	f000 fa76 	bl	8001004 <set_duty>
			n = sprintf(print_buff,"\n\rUpdated Motor 1 to a %d duty cycle.\n\r",duty);
 8000b18:	4b33      	ldr	r3, [pc, #204]	@ (8000be8 <task2+0x504>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4934      	ldr	r1, [pc, #208]	@ (8000bf0 <task2+0x50c>)
 8000b20:	4824      	ldr	r0, [pc, #144]	@ (8000bb4 <task2+0x4d0>)
 8000b22:	f005 fa35 	bl	8005f90 <siprintf>
 8000b26:	4603      	mov	r3, r0
 8000b28:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <task2+0x4d4>)
 8000b2a:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000b2c:	4b22      	ldr	r3, [pc, #136]	@ (8000bb8 <task2+0x4d4>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b36:	491f      	ldr	r1, [pc, #124]	@ (8000bb4 <task2+0x4d0>)
 8000b38:	4820      	ldr	r0, [pc, #128]	@ (8000bbc <task2+0x4d8>)
 8000b3a:	f003 fd7d 	bl	8004638 <HAL_UART_Transmit>
			wait_flag = 0;
 8000b3e:	4b23      	ldr	r3, [pc, #140]	@ (8000bcc <task2+0x4e8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	e023      	b.n	8000b8e <task2+0x4aa>
		else if(motor_num == 2){
 8000b46:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <task2+0x4f4>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d11f      	bne.n	8000b8e <task2+0x4aa>
			duty = duty_int;
 8000b4e:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <task2+0x4f8>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <task2+0x504>)
 8000b54:	6013      	str	r3, [r2, #0]
			set_duty(&mot2,duty);
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <task2+0x504>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4825      	ldr	r0, [pc, #148]	@ (8000bf4 <task2+0x510>)
 8000b5e:	f000 fa51 	bl	8001004 <set_duty>
			n = sprintf(print_buff,"\n\rUpdated Motor 2 to a %d duty cycle.\n\r",duty);
 8000b62:	4b21      	ldr	r3, [pc, #132]	@ (8000be8 <task2+0x504>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	4923      	ldr	r1, [pc, #140]	@ (8000bf8 <task2+0x514>)
 8000b6a:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <task2+0x4d0>)
 8000b6c:	f005 fa10 	bl	8005f90 <siprintf>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <task2+0x4d4>)
 8000b74:	6013      	str	r3, [r2, #0]
			HAL_UART_Transmit(&huart2,print_buff,n,400);
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <task2+0x4d4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b80:	490c      	ldr	r1, [pc, #48]	@ (8000bb4 <task2+0x4d0>)
 8000b82:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <task2+0x4d8>)
 8000b84:	f003 fd58 	bl	8004638 <HAL_UART_Transmit>
			wait_flag = 0;
 8000b88:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <task2+0x4e8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
		currentState = 1;
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <task2+0x4e0>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	e003      	b.n	8000b9e <task2+0x4ba>
		currentState = 1; // Reset state
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <task2+0x4e0>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	e7ff      	b.n	8000b9e <task2+0x4ba>
 8000b9e:	bf00      	nop
 8000ba0:	3720      	adds	r7, #32
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	200001c8 	.word	0x200001c8
 8000bac:	08007c58 	.word	0x08007c58
 8000bb0:	08007b04 	.word	0x08007b04
 8000bb4:	2000028c 	.word	0x2000028c
 8000bb8:	20000324 	.word	0x20000324
 8000bbc:	2000013c 	.word	0x2000013c
 8000bc0:	200001e0 	.word	0x200001e0
 8000bc4:	20000288 	.word	0x20000288
 8000bc8:	200001dc 	.word	0x200001dc
 8000bcc:	200001e4 	.word	0x200001e4
 8000bd0:	08007b44 	.word	0x08007b44
 8000bd4:	08007b7c 	.word	0x08007b7c
 8000bd8:	20000328 	.word	0x20000328
 8000bdc:	2000032c 	.word	0x2000032c
 8000be0:	08007b90 	.word	0x08007b90
 8000be4:	080079b0 	.word	0x080079b0
 8000be8:	20000330 	.word	0x20000330
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	08007b94 	.word	0x08007b94
 8000bf4:	20000010 	.word	0x20000010
 8000bf8:	08007bbc 	.word	0x08007bbc

08000bfc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c00:	f000 fda9 	bl	8001756 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c04:	f000 f80e 	bl	8000c24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c08:	f000 f994 	bl	8000f34 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000c0c:	f000 f85c 	bl	8000cc8 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000c10:	f000 f8dc 	bl	8000dcc <MX_TIM3_Init>
	MX_USART2_UART_Init();
 8000c14:	f000 f95e 	bl	8000ed4 <MX_USART2_UART_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		// Execute task 1
		task1();
 8000c18:	f7ff fcaa 	bl	8000570 <task1>

		// Execute task 2
		task2();
 8000c1c:	f7ff fd62 	bl	80006e4 <task2>
		task1();
 8000c20:	bf00      	nop
 8000c22:	e7f9      	b.n	8000c18 <main+0x1c>

08000c24 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b096      	sub	sp, #88	@ 0x58
 8000c28:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0314 	add.w	r3, r7, #20
 8000c2e:	2244      	movs	r2, #68	@ 0x44
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f005 fad0 	bl	80061d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c4a:	f001 f941 	bl	8001ed0 <HAL_PWREx_ControlVoltageScaling>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000c54:	f000 f9b6 	bl	8000fc4 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c58:	2310      	movs	r3, #16
 8000c5a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c64:	2360      	movs	r3, #96	@ 0x60
 8000c66:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000c70:	2301      	movs	r3, #1
 8000c72:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000c74:	2328      	movs	r3, #40	@ 0x28
 8000c76:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c78:	2307      	movs	r3, #7
 8000c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 f977 	bl	8001f7c <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x74>
	{
		Error_Handler();
 8000c94:	f000 f996 	bl	8000fc4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cac:	463b      	mov	r3, r7
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fd3f 	bl	8002734 <HAL_RCC_ClockConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8000cbc:	f000 f982 	bl	8000fc4 <Error_Handler>
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	3758      	adds	r7, #88	@ 0x58
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08e      	sub	sp, #56	@ 0x38
 8000ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce8:	463b      	mov	r3, r7
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000cfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d00:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000d02:	4b31      	ldr	r3, [pc, #196]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1599;
 8000d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d10:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000d14:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d16:	4b2c      	ldr	r3, [pc, #176]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d22:	4829      	ldr	r0, [pc, #164]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d24:	f002 fbe6 	bl	80034f4 <HAL_TIM_Base_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM2_Init+0x6a>
	{
		Error_Handler();
 8000d2e:	f000 f949 	bl	8000fc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d36:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d38:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4822      	ldr	r0, [pc, #136]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d40:	f002 feaa 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM2_Init+0x86>
	{
		Error_Handler();
 8000d4a:	f000 f93b 	bl	8000fc4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d4e:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d50:	f002 fc27 	bl	80035a2 <HAL_TIM_PWM_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM2_Init+0x96>
	{
		Error_Handler();
 8000d5a:	f000 f933 	bl	8000fc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d66:	f107 031c 	add.w	r3, r7, #28
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4816      	ldr	r0, [pc, #88]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d6e:	f003 fb8d 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM2_Init+0xb4>
	{
		Error_Handler();
 8000d78:	f000 f924 	bl	8000fc4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	@ 0x60
 8000d7e:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 640;
 8000d80:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000d84:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	480c      	ldr	r0, [pc, #48]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000d96:	f002 fd6b 	bl	8003870 <HAL_TIM_PWM_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0xdc>
	{
		Error_Handler();
 8000da0:	f000 f910 	bl	8000fc4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000da4:	463b      	mov	r3, r7
 8000da6:	2204      	movs	r2, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000dac:	f002 fd60 	bl	8003870 <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0xf2>
	{
		Error_Handler();
 8000db6:	f000 f905 	bl	8000fc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000dba:	4803      	ldr	r0, [pc, #12]	@ (8000dc8 <MX_TIM2_Init+0x100>)
 8000dbc:	f000 faf4 	bl	80013a8 <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3738      	adds	r7, #56	@ 0x38
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200000a4 	.word	0x200000a4

08000dcc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08e      	sub	sp, #56	@ 0x38
 8000dd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	463b      	mov	r3, r7
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000dfe:	4b33      	ldr	r3, [pc, #204]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e00:	4a33      	ldr	r2, [pc, #204]	@ (8000ed0 <MX_TIM3_Init+0x104>)
 8000e02:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e04:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b30      	ldr	r3, [pc, #192]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1599;
 8000e10:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e12:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000e16:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e24:	4829      	ldr	r0, [pc, #164]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e26:	f002 fb65 	bl	80034f4 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0x68>
	{
		Error_Handler();
 8000e30:	f000 f8c8 	bl	8000fc4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4822      	ldr	r0, [pc, #136]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e42:	f002 fe29 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x84>
	{
		Error_Handler();
 8000e4c:	f000 f8ba 	bl	8000fc4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e50:	481e      	ldr	r0, [pc, #120]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e52:	f002 fba6 	bl	80035a2 <HAL_TIM_PWM_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x94>
	{
		Error_Handler();
 8000e5c:	f000 f8b2 	bl	8000fc4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4817      	ldr	r0, [pc, #92]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e70:	f003 fb0c 	bl	800448c <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xb2>
	{
		Error_Handler();
 8000e7a:	f000 f8a3 	bl	8000fc4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	@ 0x60
 8000e80:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 640;
 8000e82:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8000e86:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000e98:	f002 fcea 	bl	8003870 <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0xda>
	{
		Error_Handler();
 8000ea2:	f000 f88f 	bl	8000fc4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000eae:	f002 fcdf 	bl	8003870 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0xf0>
	{
		Error_Handler();
 8000eb8:	f000 f884 	bl	8000fc4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <MX_TIM3_Init+0x100>)
 8000ebe:	f000 fa73 	bl	80013a8 <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3738      	adds	r7, #56	@ 0x38
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000f0 	.word	0x200000f0
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	@ (8000f30 <MX_USART2_UART_Init+0x5c>)
 8000edc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000ede:	4b13      	ldr	r3, [pc, #76]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b09      	ldr	r3, [pc, #36]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	@ (8000f2c <MX_USART2_UART_Init+0x58>)
 8000f18:	f003 fb40 	bl	800459c <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000f22:	f000 f84f 	bl	8000fc4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000013c 	.word	0x2000013c
 8000f30:	40004400 	.word	0x40004400

08000f34 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	4b14      	ldr	r3, [pc, #80]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4e:	4a13      	ldr	r2, [pc, #76]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f56:	4b11      	ldr	r3, [pc, #68]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <MX_GPIO_Init+0x68>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : button_Pin */
	GPIO_InitStruct.Pin = button_Pin;
 8000f7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_GPIO_Init+0x6c>)
 8000f90:	f000 fde6 	bl	8001b60 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000800 	.word	0x48000800

08000fa4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart2){
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	char_flag = 1;
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x1c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	200001c4 	.word	0x200001c4

08000fc4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <Error_Handler+0x8>

08000fd0 <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(&p_mot->hal_tim, &p_mot->channel1);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f103 020c 	add.w	r2, r3, #12
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f002 fb3d 	bl	8003664 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&p_mot->hal_tim, &p_mot->channel2);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f103 020c 	add.w	r2, r3, #12
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3308      	adds	r3, #8
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	f002 fb34 	bl	8003664 <HAL_TIM_PWM_Start>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <set_duty>:
			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->channel2);

}

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

	// Print to the console so we can see what's happening
	    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	4884      	ldr	r0, [pc, #528]	@ (8001224 <set_duty+0x220>)
 8001012:	f004 ff4d 	bl	8005eb0 <iprintf>

	    // Assign the duty cycle to a field in the structure
	    p_mot->pwm_val = pwm_sig;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	601a      	str	r2, [r3, #0]
	    // dereferencing and accessing struct fields
	    // p_mot->duty = duty;
	    // is shorthand for
	    // (*p_mot).duty = duty;

	    if (pwm_sig > 0) {
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	dd6e      	ble.n	8001100 <set_duty+0xfc>

	    	//forwards
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,pwm_sig);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <set_duty+0x32>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34
 8001034:	e02c      	b.n	8001090 <set_duty+0x8c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b04      	cmp	r3, #4
 800103c:	d105      	bne.n	800104a <set_duty+0x46>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6393      	str	r3, [r2, #56]	@ 0x38
 8001048:	e022      	b.n	8001090 <set_duty+0x8c>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b08      	cmp	r3, #8
 8001050:	d105      	bne.n	800105e <set_duty+0x5a>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800105c:	e018      	b.n	8001090 <set_duty+0x8c>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d105      	bne.n	8001072 <set_duty+0x6e>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001070:	e00e      	b.n	8001090 <set_duty+0x8c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	2b10      	cmp	r3, #16
 8001078:	d105      	bne.n	8001086 <set_duty+0x82>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	6593      	str	r3, [r2, #88]	@ 0x58
 8001084:	e004      	b.n	8001090 <set_duty+0x8c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d105      	bne.n	80010a4 <set_duty+0xa0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	635a      	str	r2, [r3, #52]	@ 0x34
	      }




}
 80010a2:	e127      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,0);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d105      	bne.n	80010b8 <set_duty+0xb4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80010b6:	e11d      	b.n	80012f4 <set_duty+0x2f0>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d105      	bne.n	80010cc <set_duty+0xc8>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80010ca:	e113      	b.n	80012f4 <set_duty+0x2f0>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	2b0c      	cmp	r3, #12
 80010d2:	d105      	bne.n	80010e0 <set_duty+0xdc>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	2300      	movs	r3, #0
 80010dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80010de:	e109      	b.n	80012f4 <set_duty+0x2f0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	d105      	bne.n	80010f4 <set_duty+0xf0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2300      	movs	r3, #0
 80010f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80010f2:	e0ff      	b.n	80012f4 <set_duty+0x2f0>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80010fe:	e0f9      	b.n	80012f4 <set_duty+0x2f0>
	    else if(pwm_sig == 0){
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d17a      	bne.n	80011fc <set_duty+0x1f8>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,640);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d106      	bne.n	800111c <set_duty+0x118>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001118:	635a      	str	r2, [r3, #52]	@ 0x34
 800111a:	e031      	b.n	8001180 <set_duty+0x17c>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b04      	cmp	r3, #4
 8001122:	d106      	bne.n	8001132 <set_duty+0x12e>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800112e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001130:	e026      	b.n	8001180 <set_duty+0x17c>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d106      	bne.n	8001148 <set_duty+0x144>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001144:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001146:	e01b      	b.n	8001180 <set_duty+0x17c>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	d106      	bne.n	800115e <set_duty+0x15a>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800115a:	6413      	str	r3, [r2, #64]	@ 0x40
 800115c:	e010      	b.n	8001180 <set_duty+0x17c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b10      	cmp	r3, #16
 8001164:	d106      	bne.n	8001174 <set_duty+0x170>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001170:	6593      	str	r3, [r2, #88]	@ 0x58
 8001172:	e005      	b.n	8001180 <set_duty+0x17c>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800117e:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <set_duty+0x192>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001192:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001194:	e0ae      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,640);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	2b04      	cmp	r3, #4
 800119c:	d106      	bne.n	80011ac <set_duty+0x1a8>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80011aa:	e0a3      	b.n	80012f4 <set_duty+0x2f0>
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b08      	cmp	r3, #8
 80011b2:	d106      	bne.n	80011c2 <set_duty+0x1be>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011be:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80011c0:	e098      	b.n	80012f4 <set_duty+0x2f0>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d106      	bne.n	80011d8 <set_duty+0x1d4>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	e08d      	b.n	80012f4 <set_duty+0x2f0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b10      	cmp	r3, #16
 80011de:	d106      	bne.n	80011ee <set_duty+0x1ea>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ec:	e082      	b.n	80012f4 <set_duty+0x2f0>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80011f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80011fa:	e07b      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel1,0);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d105      	bne.n	8001210 <set_duty+0x20c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	635a      	str	r2, [r3, #52]	@ 0x34
 800120e:	e02e      	b.n	800126e <set_duty+0x26a>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d107      	bne.n	8001228 <set_duty+0x224>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2300      	movs	r3, #0
 8001220:	6393      	str	r3, [r2, #56]	@ 0x38
 8001222:	e024      	b.n	800126e <set_duty+0x26a>
 8001224:	08007be4 	.word	0x08007be4
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d105      	bne.n	800123c <set_duty+0x238>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800123a:	e018      	b.n	800126e <set_duty+0x26a>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b0c      	cmp	r3, #12
 8001242:	d105      	bne.n	8001250 <set_duty+0x24c>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	6413      	str	r3, [r2, #64]	@ 0x40
 800124e:	e00e      	b.n	800126e <set_duty+0x26a>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b10      	cmp	r3, #16
 8001256:	d105      	bne.n	8001264 <set_duty+0x260>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	6593      	str	r3, [r2, #88]	@ 0x58
 8001262:	e004      	b.n	800126e <set_duty+0x26a>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	65d3      	str	r3, [r2, #92]	@ 0x5c
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d106      	bne.n	8001284 <set_duty+0x280>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	425a      	negs	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001282:	e037      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d107      	bne.n	800129c <set_duty+0x298>
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	4259      	negs	r1, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	460b      	mov	r3, r1
 8001298:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800129a:	e02b      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d107      	bne.n	80012b4 <set_duty+0x2b0>
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	4259      	negs	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	460b      	mov	r3, r1
 80012b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80012b2:	e01f      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	2b0c      	cmp	r3, #12
 80012ba:	d107      	bne.n	80012cc <set_duty+0x2c8>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	4259      	negs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	460b      	mov	r3, r1
 80012c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012ca:	e013      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	d107      	bne.n	80012e4 <set_duty+0x2e0>
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	4259      	negs	r1, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	460b      	mov	r3, r1
 80012e0:	6593      	str	r3, [r2, #88]	@ 0x58
}
 80012e2:	e007      	b.n	80012f4 <set_duty+0x2f0>
	    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->channel2,-pwm_sig);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	4259      	negs	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	460b      	mov	r3, r1
 80012f0:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 80012f2:	e7ff      	b.n	80012f4 <set_duty+0x2f0>
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_MspInit+0x44>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_MspInit+0x44>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6613      	str	r3, [r2, #96]	@ 0x60
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_MspInit+0x44>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <HAL_MspInit+0x44>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001324:	6593      	str	r3, [r2, #88]	@ 0x58
 8001326:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_MspInit+0x44>)
 8001328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800132a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	40021000 	.word	0x40021000

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001354:	d10c      	bne.n	8001370 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001356:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_TIM_Base_MspInit+0x5c>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <HAL_TIM_Base_MspInit+0x5c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6593      	str	r3, [r2, #88]	@ 0x58
 8001362:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <HAL_TIM_Base_MspInit+0x5c>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800136e:	e010      	b.n	8001392 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	@ (80013a4 <HAL_TIM_Base_MspInit+0x60>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10b      	bne.n	8001392 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800137a:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <HAL_TIM_Base_MspInit+0x5c>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	4a08      	ldr	r2, [pc, #32]	@ (80013a0 <HAL_TIM_Base_MspInit+0x5c>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6593      	str	r3, [r2, #88]	@ 0x58
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_TIM_Base_MspInit+0x5c>)
 8001388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40021000 	.word	0x40021000
 80013a4:	40000400 	.word	0x40000400

080013a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013c8:	d11d      	bne.n	8001406 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <HAL_TIM_MspPostInit+0xac>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ce:	4a21      	ldr	r2, [pc, #132]	@ (8001454 <HAL_TIM_MspPostInit+0xac>)
 80013d0:	f043 0301 	orr.w	r3, r3, #1
 80013d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <HAL_TIM_MspPostInit+0xac>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013e2:	2303      	movs	r3, #3
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f2:	2301      	movs	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001400:	f000 fbae 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001404:	e021      	b.n	800144a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a13      	ldr	r2, [pc, #76]	@ (8001458 <HAL_TIM_MspPostInit+0xb0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d11c      	bne.n	800144a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <HAL_TIM_MspPostInit+0xac>)
 8001412:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001414:	4a0f      	ldr	r2, [pc, #60]	@ (8001454 <HAL_TIM_MspPostInit+0xac>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_TIM_MspPostInit+0xac>)
 800141e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001428:	23c0      	movs	r3, #192	@ 0xc0
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	2302      	movs	r3, #2
 800142e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001438:	2302      	movs	r3, #2
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001446:	f000 fb8b 	bl	8001b60 <HAL_GPIO_Init>
}
 800144a:	bf00      	nop
 800144c:	3728      	adds	r7, #40	@ 0x28
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	40000400 	.word	0x40000400

0800145c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0ac      	sub	sp, #176	@ 0xb0
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0314 	add.w	r3, r7, #20
 8001478:	2288      	movs	r2, #136	@ 0x88
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f004 feab 	bl	80061d8 <memset>
  if(huart->Instance==USART2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a25      	ldr	r2, [pc, #148]	@ (800151c <HAL_UART_MspInit+0xc0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d143      	bne.n	8001514 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800148c:	2302      	movs	r3, #2
 800148e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001490:	2300      	movs	r3, #0
 8001492:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	4618      	mov	r0, r3
 800149a:	f001 fb6f 	bl	8002b7c <HAL_RCCEx_PeriphCLKConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014a4:	f7ff fd8e 	bl	8000fc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001520 <HAL_UART_MspInit+0xc4>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ac:	4a1c      	ldr	r2, [pc, #112]	@ (8001520 <HAL_UART_MspInit+0xc4>)
 80014ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <HAL_UART_MspInit+0xc4>)
 80014b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	4b17      	ldr	r3, [pc, #92]	@ (8001520 <HAL_UART_MspInit+0xc4>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014c4:	4a16      	ldr	r2, [pc, #88]	@ (8001520 <HAL_UART_MspInit+0xc4>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <HAL_UART_MspInit+0xc4>)
 80014ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014d8:	230c      	movs	r3, #12
 80014da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f0:	2307      	movs	r3, #7
 80014f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014fa:	4619      	mov	r1, r3
 80014fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001500:	f000 fb2e 	bl	8001b60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2026      	movs	r0, #38	@ 0x26
 800150a:	f000 fa74 	bl	80019f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800150e:	2026      	movs	r0, #38	@ 0x26
 8001510:	f000 fa8d 	bl	8001a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001514:	bf00      	nop
 8001516:	37b0      	adds	r7, #176	@ 0xb0
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40004400 	.word	0x40004400
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <NMI_Handler+0x4>

0800152c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <HardFault_Handler+0x4>

08001534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <UsageFault_Handler+0x4>

0800154c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr

08001576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001576:	b580      	push	{r7, lr}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157a:	f000 f941 	bl	8001800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <USART2_IRQHandler+0x10>)
 800158a:	f003 f92b 	bl	80047e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	2000013c 	.word	0x2000013c

08001598 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
  }

  return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e009      	b.n	80015f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf1      	blt.n	80015e4 <_write+0x12>
  }
  return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001632:	605a      	str	r2, [r3, #4]
  return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_isatty>:

int _isatty(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	@ (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	@ (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	@ (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f004 fde6 	bl	8006274 <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	@ (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20018000 	.word	0x20018000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	20000334 	.word	0x20000334
 80016dc:	20000488 	.word	0x20000488

080016e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800173c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001708:	f7ff ffea 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	@ (8001740 <LoopForever+0x6>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	@ (8001744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	@ (8001748 <LoopForever+0xe>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	@ (8001750 <LoopForever+0x16>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001732:	f004 fda5 	bl	8006280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001736:	f7ff fa61 	bl	8000bfc <main>

0800173a <LoopForever>:

LoopForever:
    b LoopForever
 800173a:	e7fe      	b.n	800173a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800173c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001748:	08007db8 	.word	0x08007db8
  ldr r2, =_sbss
 800174c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001750:	20000488 	.word	0x20000488

08001754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_2_IRQHandler>

08001756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f93d 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001766:	200f      	movs	r0, #15
 8001768:	f000 f80e 	bl	8001788 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e001      	b.n	800177c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001778:	f7ff fdc0 	bl	80012fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177c:	79fb      	ldrb	r3, [r7, #7]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <HAL_InitTick+0x6c>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d023      	beq.n	80017e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <HAL_InitTick+0x70>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_InitTick+0x6c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f949 	bl	8001a4a <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10f      	bne.n	80017de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b0f      	cmp	r3, #15
 80017c2:	d809      	bhi.n	80017d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c4:	2200      	movs	r2, #0
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	f04f 30ff 	mov.w	r0, #4294967295
 80017cc:	f000 f913 	bl	80019f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017d0:	4a0a      	ldr	r2, [pc, #40]	@ (80017fc <HAL_InitTick+0x74>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	e007      	b.n	80017e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e004      	b.n	80017e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e001      	b.n	80017e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000028 	.word	0x20000028
 80017f8:	20000020 	.word	0x20000020
 80017fc:	20000024 	.word	0x20000024

08001800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001804:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_IncTick+0x20>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	461a      	mov	r2, r3
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x24>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4413      	add	r3, r2
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <HAL_IncTick+0x24>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000028 	.word	0x20000028
 8001824:	20000338 	.word	0x20000338

08001828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return uwTick;
 800182c:	4b03      	ldr	r3, [pc, #12]	@ (800183c <HAL_GetTick+0x14>)
 800182e:	681b      	ldr	r3, [r3, #0]
}
 8001830:	4618      	mov	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000338 	.word	0x20000338

08001840 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800185c:	4013      	ands	r3, r2
 800185e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001868:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800186c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	@ (8001884 <__NVIC_SetPriorityGrouping+0x44>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <__NVIC_GetPriorityGrouping+0x18>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	0a1b      	lsrs	r3, r3, #8
 8001892:	f003 0307 	and.w	r3, r3, #7
}
 8001896:	4618      	mov	r0, r3
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	db0b      	blt.n	80018ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	4907      	ldr	r1, [pc, #28]	@ (80018dc <__NVIC_EnableIRQ+0x38>)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	095b      	lsrs	r3, r3, #5
 80018c4:	2001      	movs	r0, #1
 80018c6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	e000e100 	.word	0xe000e100

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	@ (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	@ (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	@ 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	@ 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	@ (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	@ (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff29 	bl	8001840 <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff3e 	bl	8001888 <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff8e 	bl	8001934 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5d 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff31 	bl	80018a4 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa2 	bl	800199c <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d008      	beq.n	8001a8c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e022      	b.n	8001ad2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 020e 	bic.w	r2, r2, #14
 8001a9a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab0:	f003 021c 	and.w	r2, r3, #28
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab8:	2101      	movs	r1, #1
 8001aba:	fa01 f202 	lsl.w	r2, r1, r2
 8001abe:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d005      	beq.n	8001b02 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2204      	movs	r2, #4
 8001afa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	73fb      	strb	r3, [r7, #15]
 8001b00:	e029      	b.n	8001b56 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 020e 	bic.w	r2, r2, #14
 8001b10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 021c 	and.w	r2, r3, #28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
    }
  }
  return status;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e17f      	b.n	8001e70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8171 	beq.w	8001e6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d118      	bne.n	8001c40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	4013      	ands	r3, r2
 8001c22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	6939      	ldr	r1, [r7, #16]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80ac 	beq.w	8001e6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	4b5f      	ldr	r3, [pc, #380]	@ (8001e90 <HAL_GPIO_Init+0x330>)
 8001d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d16:	4a5e      	ldr	r2, [pc, #376]	@ (8001e90 <HAL_GPIO_Init+0x330>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8001e90 <HAL_GPIO_Init+0x330>)
 8001d20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d2a:	4a5a      	ldr	r2, [pc, #360]	@ (8001e94 <HAL_GPIO_Init+0x334>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x242>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4f      	ldr	r2, [pc, #316]	@ (8001e98 <HAL_GPIO_Init+0x338>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x23e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a4e      	ldr	r2, [pc, #312]	@ (8001e9c <HAL_GPIO_Init+0x33c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x23a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ea0 <HAL_GPIO_Init+0x340>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x236>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea4 <HAL_GPIO_Init+0x344>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x232>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea8 <HAL_GPIO_Init+0x348>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x22e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4a      	ldr	r2, [pc, #296]	@ (8001eac <HAL_GPIO_Init+0x34c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x22a>
 8001d86:	2306      	movs	r3, #6
 8001d88:	e00c      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e00a      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001d8e:	2305      	movs	r3, #5
 8001d90:	e008      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001d92:	2304      	movs	r3, #4
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001d96:	2303      	movs	r3, #3
 8001d98:	e004      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	e002      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_GPIO_Init+0x244>
 8001da2:	2300      	movs	r3, #0
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	f002 0203 	and.w	r2, r2, #3
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	4093      	lsls	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001db4:	4937      	ldr	r1, [pc, #220]	@ (8001e94 <HAL_GPIO_Init+0x334>)
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	089b      	lsrs	r3, r3, #2
 8001dba:	3302      	adds	r3, #2
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc2:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dde:	693a      	ldr	r2, [r7, #16]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001de6:	4a32      	ldr	r2, [pc, #200]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001dec:	4b30      	ldr	r3, [pc, #192]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e10:	4a27      	ldr	r2, [pc, #156]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e16:	4b26      	ldr	r3, [pc, #152]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e64:	4a12      	ldr	r2, [pc, #72]	@ (8001eb0 <HAL_GPIO_Init+0x350>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa22 f303 	lsr.w	r3, r2, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f47f ae78 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40010000 	.word	0x40010000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000800 	.word	0x48000800
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	48001000 	.word	0x48001000
 8001ea8:	48001400 	.word	0x48001400
 8001eac:	48001800 	.word	0x48001800
 8001eb0:	40010400 	.word	0x40010400

08001eb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <HAL_PWREx_GetVoltageRange+0x18>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ede:	d130      	bne.n	8001f42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ee0:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ee8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eec:	d038      	beq.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eee:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001efe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2232      	movs	r2, #50	@ 0x32
 8001f04:	fb02 f303 	mul.w	r3, r2, r3
 8001f08:	4a1b      	ldr	r2, [pc, #108]	@ (8001f78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	3301      	adds	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f14:	e002      	b.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1c:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f28:	d102      	bne.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f2      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f30:	4b0f      	ldr	r3, [pc, #60]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3c:	d110      	bne.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e00f      	b.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f42:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f4e:	d007      	beq.n	8001f60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f50:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f58:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40007000 	.word	0x40007000
 8001f74:	20000020 	.word	0x20000020
 8001f78:	431bde83 	.word	0x431bde83

08001f7c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e3ca      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8e:	4b97      	ldr	r3, [pc, #604]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f98:	4b94      	ldr	r3, [pc, #592]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80e4 	beq.w	8002178 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d007      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4a>
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	f040 808b 	bne.w	80020d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f040 8087 	bne.w	80020d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fc6:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d005      	beq.n	8001fde <HAL_RCC_OscConfig+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e3a2      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	4b82      	ldr	r3, [pc, #520]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d004      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x7c>
 8001fee:	4b7f      	ldr	r3, [pc, #508]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff6:	e005      	b.n	8002004 <HAL_RCC_OscConfig+0x88>
 8001ff8:	4b7c      	ldr	r3, [pc, #496]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8001ffa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ffe:	091b      	lsrs	r3, r3, #4
 8002000:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002004:	4293      	cmp	r3, r2
 8002006:	d223      	bcs.n	8002050 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fd55 	bl	8002abc <RCC_SetFlashLatencyFromMSIRange>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e383      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201c:	4b73      	ldr	r3, [pc, #460]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a72      	ldr	r2, [pc, #456]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002022:	f043 0308 	orr.w	r3, r3, #8
 8002026:	6013      	str	r3, [r2, #0]
 8002028:	4b70      	ldr	r3, [pc, #448]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	496d      	ldr	r1, [pc, #436]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203a:	4b6c      	ldr	r3, [pc, #432]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	021b      	lsls	r3, r3, #8
 8002048:	4968      	ldr	r1, [pc, #416]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800204a:	4313      	orrs	r3, r2
 800204c:	604b      	str	r3, [r1, #4]
 800204e:	e025      	b.n	800209c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002050:	4b66      	ldr	r3, [pc, #408]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a65      	ldr	r2, [pc, #404]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002056:	f043 0308 	orr.w	r3, r3, #8
 800205a:	6013      	str	r3, [r2, #0]
 800205c:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	4960      	ldr	r1, [pc, #384]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800206a:	4313      	orrs	r3, r2
 800206c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800206e:	4b5f      	ldr	r3, [pc, #380]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	495b      	ldr	r1, [pc, #364]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d109      	bne.n	800209c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fd15 	bl	8002abc <RCC_SetFlashLatencyFromMSIRange>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e343      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800209c:	f000 fc4a 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b52      	ldr	r3, [pc, #328]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	091b      	lsrs	r3, r3, #4
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	4950      	ldr	r1, [pc, #320]	@ (80021f0 <HAL_RCC_OscConfig+0x274>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	4a4e      	ldr	r2, [pc, #312]	@ (80021f4 <HAL_RCC_OscConfig+0x278>)
 80020ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020bc:	4b4e      	ldr	r3, [pc, #312]	@ (80021f8 <HAL_RCC_OscConfig+0x27c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fb61 	bl	8001788 <HAL_InitTick>
 80020c6:	4603      	mov	r3, r0
 80020c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d052      	beq.n	8002176 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	e327      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d032      	beq.n	8002142 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020dc:	4b43      	ldr	r3, [pc, #268]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a42      	ldr	r2, [pc, #264]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020e8:	f7ff fb9e 	bl	8001828 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020ee:	e008      	b.n	8002102 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020f0:	f7ff fb9a 	bl	8001828 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e310      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002102:	4b3a      	ldr	r3, [pc, #232]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d0f0      	beq.n	80020f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800210e:	4b37      	ldr	r3, [pc, #220]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a36      	ldr	r2, [pc, #216]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	4b34      	ldr	r3, [pc, #208]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4931      	ldr	r1, [pc, #196]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002128:	4313      	orrs	r3, r2
 800212a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800212c:	4b2f      	ldr	r3, [pc, #188]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	492c      	ldr	r1, [pc, #176]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]
 8002140:	e01a      	b.n	8002178 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a29      	ldr	r2, [pc, #164]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800214e:	f7ff fb6b 	bl	8001828 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002156:	f7ff fb67 	bl	8001828 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e2dd      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002168:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x1da>
 8002174:	e000      	b.n	8002178 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002176:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0301 	and.w	r3, r3, #1
 8002180:	2b00      	cmp	r3, #0
 8002182:	d074      	beq.n	800226e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	2b08      	cmp	r3, #8
 8002188:	d005      	beq.n	8002196 <HAL_RCC_OscConfig+0x21a>
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d10e      	bne.n	80021ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	2b03      	cmp	r3, #3
 8002194:	d10b      	bne.n	80021ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d064      	beq.n	800226c <HAL_RCC_OscConfig+0x2f0>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d160      	bne.n	800226c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e2ba      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCC_OscConfig+0x24a>
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80021be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021c2:	6013      	str	r3, [r2, #0]
 80021c4:	e026      	b.n	8002214 <HAL_RCC_OscConfig+0x298>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021ce:	d115      	bne.n	80021fc <HAL_RCC_OscConfig+0x280>
 80021d0:	4b06      	ldr	r3, [pc, #24]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a05      	ldr	r2, [pc, #20]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80021d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b03      	ldr	r3, [pc, #12]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a02      	ldr	r2, [pc, #8]	@ (80021ec <HAL_RCC_OscConfig+0x270>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e014      	b.n	8002214 <HAL_RCC_OscConfig+0x298>
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08007c10 	.word	0x08007c10
 80021f4:	20000020 	.word	0x20000020
 80021f8:	20000024 	.word	0x20000024
 80021fc:	4ba0      	ldr	r3, [pc, #640]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a9f      	ldr	r2, [pc, #636]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	4b9d      	ldr	r3, [pc, #628]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a9c      	ldr	r2, [pc, #624]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800220e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002212:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d013      	beq.n	8002244 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff fb04 	bl	8001828 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fb00 	bl	8001828 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	@ 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e276      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002236:	4b92      	ldr	r3, [pc, #584]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d0f0      	beq.n	8002224 <HAL_RCC_OscConfig+0x2a8>
 8002242:	e014      	b.n	800226e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff faf0 	bl	8001828 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800224c:	f7ff faec 	bl	8001828 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b64      	cmp	r3, #100	@ 0x64
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e262      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800225e:	4b88      	ldr	r3, [pc, #544]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x2d0>
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d060      	beq.n	800233c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d005      	beq.n	800228c <HAL_RCC_OscConfig+0x310>
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d119      	bne.n	80022ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d116      	bne.n	80022ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	4b7c      	ldr	r3, [pc, #496]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_OscConfig+0x328>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e23f      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b76      	ldr	r3, [pc, #472]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	061b      	lsls	r3, r3, #24
 80022b2:	4973      	ldr	r1, [pc, #460]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b8:	e040      	b.n	800233c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d023      	beq.n	800230a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c2:	4b6f      	ldr	r3, [pc, #444]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a6e      	ldr	r2, [pc, #440]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80022c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff faab 	bl	8001828 <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d6:	f7ff faa7 	bl	8001828 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e21d      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e8:	4b65      	ldr	r3, [pc, #404]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0f0      	beq.n	80022d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f4:	4b62      	ldr	r3, [pc, #392]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	061b      	lsls	r3, r3, #24
 8002302:	495f      	ldr	r1, [pc, #380]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
 8002308:	e018      	b.n	800233c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800230a:	4b5d      	ldr	r3, [pc, #372]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a5c      	ldr	r2, [pc, #368]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7ff fa87 	bl	8001828 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7ff fa83 	bl	8001828 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e1f9      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002330:	4b53      	ldr	r3, [pc, #332]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d03c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01c      	beq.n	800238a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002350:	4b4b      	ldr	r3, [pc, #300]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002352:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002356:	4a4a      	ldr	r2, [pc, #296]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002360:	f7ff fa62 	bl	8001828 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002368:	f7ff fa5e 	bl	8001828 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1d4      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800237a:	4b41      	ldr	r3, [pc, #260]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800237c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ef      	beq.n	8002368 <HAL_RCC_OscConfig+0x3ec>
 8002388:	e01b      	b.n	80023c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800238a:	4b3d      	ldr	r3, [pc, #244]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800238c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002390:	4a3b      	ldr	r2, [pc, #236]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800239a:	f7ff fa45 	bl	8001828 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a2:	f7ff fa41 	bl	8001828 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1b7      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023b4:	4b32      	ldr	r3, [pc, #200]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80023b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1ef      	bne.n	80023a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0304 	and.w	r3, r3, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80a6 	beq.w	800251c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80023d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d10d      	bne.n	80023fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80023e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e4:	4a26      	ldr	r2, [pc, #152]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80023e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	60bb      	str	r3, [r7, #8]
 80023f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <HAL_RCC_OscConfig+0x508>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002404:	2b00      	cmp	r3, #0
 8002406:	d118      	bne.n	800243a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002408:	4b1e      	ldr	r3, [pc, #120]	@ (8002484 <HAL_RCC_OscConfig+0x508>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a1d      	ldr	r2, [pc, #116]	@ (8002484 <HAL_RCC_OscConfig+0x508>)
 800240e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002412:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002414:	f7ff fa08 	bl	8001828 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800241c:	f7ff fa04 	bl	8001828 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e17a      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800242e:	4b15      	ldr	r3, [pc, #84]	@ (8002484 <HAL_RCC_OscConfig+0x508>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_RCC_OscConfig+0x4d8>
 8002442:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002448:	4a0d      	ldr	r2, [pc, #52]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002452:	e029      	b.n	80024a8 <HAL_RCC_OscConfig+0x52c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	2b05      	cmp	r3, #5
 800245a:	d115      	bne.n	8002488 <HAL_RCC_OscConfig+0x50c>
 800245c:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002462:	4a07      	ldr	r2, [pc, #28]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800246c:	4b04      	ldr	r3, [pc, #16]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002472:	4a03      	ldr	r2, [pc, #12]	@ (8002480 <HAL_RCC_OscConfig+0x504>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800247c:	e014      	b.n	80024a8 <HAL_RCC_OscConfig+0x52c>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	4b9c      	ldr	r3, [pc, #624]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800248e:	4a9b      	ldr	r2, [pc, #620]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002498:	4b98      	ldr	r3, [pc, #608]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800249e:	4a97      	ldr	r2, [pc, #604]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80024a0:	f023 0304 	bic.w	r3, r3, #4
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d016      	beq.n	80024de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b0:	f7ff f9ba 	bl	8001828 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	e00a      	b.n	80024ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b8:	f7ff f9b6 	bl	8001828 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e12a      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024ce:	4b8b      	ldr	r3, [pc, #556]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80024d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0ed      	beq.n	80024b8 <HAL_RCC_OscConfig+0x53c>
 80024dc:	e015      	b.n	800250a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7ff f9a3 	bl	8001828 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e4:	e00a      	b.n	80024fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024e6:	f7ff f99f 	bl	8001828 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e113      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fc:	4b7f      	ldr	r3, [pc, #508]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1ed      	bne.n	80024e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800250a:	7ffb      	ldrb	r3, [r7, #31]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d105      	bne.n	800251c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002510:	4b7a      	ldr	r3, [pc, #488]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	4a79      	ldr	r2, [pc, #484]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002516:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800251a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 80fe 	beq.w	8002722 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	2b02      	cmp	r3, #2
 800252c:	f040 80d0 	bne.w	80026d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002530:	4b72      	ldr	r3, [pc, #456]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0203 	and.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002540:	429a      	cmp	r2, r3
 8002542:	d130      	bne.n	80025a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	3b01      	subs	r3, #1
 8002550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d127      	bne.n	80025a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002560:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d11f      	bne.n	80025a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002570:	2a07      	cmp	r2, #7
 8002572:	bf14      	ite	ne
 8002574:	2201      	movne	r2, #1
 8002576:	2200      	moveq	r2, #0
 8002578:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800257a:	4293      	cmp	r3, r2
 800257c:	d113      	bne.n	80025a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002588:	085b      	lsrs	r3, r3, #1
 800258a:	3b01      	subs	r3, #1
 800258c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	085b      	lsrs	r3, r3, #1
 800259e:	3b01      	subs	r3, #1
 80025a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d06e      	beq.n	8002684 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d069      	beq.n	8002680 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025ac:	4b53      	ldr	r3, [pc, #332]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025b8:	4b50      	ldr	r3, [pc, #320]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0ad      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c8:	4b4c      	ldr	r3, [pc, #304]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a4b      	ldr	r2, [pc, #300]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80025ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d4:	f7ff f928 	bl	8001828 <HAL_GetTick>
 80025d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025dc:	f7ff f924 	bl	8001828 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e09a      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ee:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f0      	bne.n	80025dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025fa:	4b40      	ldr	r3, [pc, #256]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	4b40      	ldr	r3, [pc, #256]	@ (8002700 <HAL_RCC_OscConfig+0x784>)
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800260a:	3a01      	subs	r2, #1
 800260c:	0112      	lsls	r2, r2, #4
 800260e:	4311      	orrs	r1, r2
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002614:	0212      	lsls	r2, r2, #8
 8002616:	4311      	orrs	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800261c:	0852      	lsrs	r2, r2, #1
 800261e:	3a01      	subs	r2, #1
 8002620:	0552      	lsls	r2, r2, #21
 8002622:	4311      	orrs	r1, r2
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002628:	0852      	lsrs	r2, r2, #1
 800262a:	3a01      	subs	r2, #1
 800262c:	0652      	lsls	r2, r2, #25
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002634:	0912      	lsrs	r2, r2, #4
 8002636:	0452      	lsls	r2, r2, #17
 8002638:	430a      	orrs	r2, r1
 800263a:	4930      	ldr	r1, [pc, #192]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002640:	4b2e      	ldr	r3, [pc, #184]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a2d      	ldr	r2, [pc, #180]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800264a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800264c:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002652:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002656:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002658:	f7ff f8e6 	bl	8001828 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002660:	f7ff f8e2 	bl	8001828 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e058      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002672:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267e:	e050      	b.n	8002722 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e04f      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002684:	4b1d      	ldr	r3, [pc, #116]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d148      	bne.n	8002722 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002690:	4b1a      	ldr	r3, [pc, #104]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a19      	ldr	r2, [pc, #100]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 8002696:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800269c:	4b17      	ldr	r3, [pc, #92]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4a16      	ldr	r2, [pc, #88]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80026a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026a8:	f7ff f8be 	bl	8001828 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7ff f8ba 	bl	8001828 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e030      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x734>
 80026ce:	e028      	b.n	8002722 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d023      	beq.n	800271e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d6:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a08      	ldr	r2, [pc, #32]	@ (80026fc <HAL_RCC_OscConfig+0x780>)
 80026dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7ff f8a1 	bl	8001828 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e8:	e00c      	b.n	8002704 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7ff f89d 	bl	8001828 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d905      	bls.n	8002704 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e013      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
 80026fc:	40021000 	.word	0x40021000
 8002700:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002704:	4b09      	ldr	r3, [pc, #36]	@ (800272c <HAL_RCC_OscConfig+0x7b0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1ec      	bne.n	80026ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <HAL_RCC_OscConfig+0x7b0>)
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	4905      	ldr	r1, [pc, #20]	@ (800272c <HAL_RCC_OscConfig+0x7b0>)
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <HAL_RCC_OscConfig+0x7b4>)
 8002718:	4013      	ands	r3, r2
 800271a:	60cb      	str	r3, [r1, #12]
 800271c:	e001      	b.n	8002722 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3720      	adds	r7, #32
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	feeefffc 	.word	0xfeeefffc

08002734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0e7      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002748:	4b75      	ldr	r3, [pc, #468]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0307 	and.w	r3, r3, #7
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d910      	bls.n	8002778 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002756:	4b72      	ldr	r3, [pc, #456]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 0207 	bic.w	r2, r3, #7
 800275e:	4970      	ldr	r1, [pc, #448]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	4313      	orrs	r3, r2
 8002764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002766:	4b6e      	ldr	r3, [pc, #440]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0cf      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d010      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002790:	429a      	cmp	r2, r3
 8002792:	d908      	bls.n	80027a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002794:	4b63      	ldr	r3, [pc, #396]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	4960      	ldr	r1, [pc, #384]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d04c      	beq.n	800284c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d121      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e0a6      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d2:	4b54      	ldr	r3, [pc, #336]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d115      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e09a      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d107      	bne.n	80027fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d109      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e08e      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e086      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800280a:	4b46      	ldr	r3, [pc, #280]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f023 0203 	bic.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4943      	ldr	r1, [pc, #268]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002818:	4313      	orrs	r3, r2
 800281a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800281c:	f7ff f804 	bl	8001828 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	e00a      	b.n	800283a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002824:	f7ff f800 	bl	8001828 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002832:	4293      	cmp	r3, r2
 8002834:	d901      	bls.n	800283a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e06e      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800283a:	4b3a      	ldr	r3, [pc, #232]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f003 020c 	and.w	r2, r3, #12
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	429a      	cmp	r2, r3
 800284a:	d1eb      	bne.n	8002824 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	4b31      	ldr	r3, [pc, #196]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002864:	429a      	cmp	r2, r3
 8002866:	d208      	bcs.n	800287a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b2e      	ldr	r3, [pc, #184]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	492b      	ldr	r1, [pc, #172]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800287a:	4b29      	ldr	r3, [pc, #164]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d210      	bcs.n	80028aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002888:	4b25      	ldr	r3, [pc, #148]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 0207 	bic.w	r2, r3, #7
 8002890:	4923      	ldr	r1, [pc, #140]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002898:	4b21      	ldr	r3, [pc, #132]	@ (8002920 <HAL_RCC_ClockConfig+0x1ec>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d001      	beq.n	80028aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e036      	b.n	8002918 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d008      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	4918      	ldr	r1, [pc, #96]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d009      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4910      	ldr	r1, [pc, #64]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e8:	f000 f824 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <HAL_RCC_ClockConfig+0x1f0>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 030f 	and.w	r3, r3, #15
 80028f8:	490b      	ldr	r1, [pc, #44]	@ (8002928 <HAL_RCC_ClockConfig+0x1f4>)
 80028fa:	5ccb      	ldrb	r3, [r1, r3]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
 8002904:	4a09      	ldr	r2, [pc, #36]	@ (800292c <HAL_RCC_ClockConfig+0x1f8>)
 8002906:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_ClockConfig+0x1fc>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe ff3b 	bl	8001788 <HAL_InitTick>
 8002912:	4603      	mov	r3, r0
 8002914:	72fb      	strb	r3, [r7, #11]

  return status;
 8002916:	7afb      	ldrb	r3, [r7, #11]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40022000 	.word	0x40022000
 8002924:	40021000 	.word	0x40021000
 8002928:	08007c10 	.word	0x08007c10
 800292c:	20000020 	.word	0x20000020
 8002930:	20000024 	.word	0x20000024

08002934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	@ 0x24
 8002938:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b3e      	ldr	r3, [pc, #248]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800294c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_GetSysClockFreq+0x34>
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d121      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d11e      	bne.n	80029a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002968:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d107      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002974:	4b31      	ldr	r3, [pc, #196]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002976:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297a:	0a1b      	lsrs	r3, r3, #8
 800297c:	f003 030f 	and.w	r3, r3, #15
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e005      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002984:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002990:	4a2b      	ldr	r2, [pc, #172]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10d      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d102      	bne.n	80029b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029ac:	4b25      	ldr	r3, [pc, #148]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e004      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b8:	4b23      	ldr	r3, [pc, #140]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x114>)
 80029ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d134      	bne.n	8002a2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029c2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0xa6>
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d003      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0xac>
 80029d8:	e005      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	@ (8002a44 <HAL_RCC_GetSysClockFreq+0x110>)
 80029dc:	617b      	str	r3, [r7, #20]
      break;
 80029de:	e005      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_RCC_GetSysClockFreq+0x114>)
 80029e2:	617b      	str	r3, [r7, #20]
      break;
 80029e4:	e002      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	617b      	str	r3, [r7, #20]
      break;
 80029ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	091b      	lsrs	r3, r3, #4
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	3301      	adds	r3, #1
 80029f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029fa:	4b10      	ldr	r3, [pc, #64]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	fb03 f202 	mul.w	r2, r3, r2
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	0e5b      	lsrs	r3, r3, #25
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a2c:	69bb      	ldr	r3, [r7, #24]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3724      	adds	r7, #36	@ 0x24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	08007c28 	.word	0x08007c28
 8002a44:	00f42400 	.word	0x00f42400
 8002a48:	007a1200 	.word	0x007a1200

08002a4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a50:	4b03      	ldr	r3, [pc, #12]	@ (8002a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000020 	.word	0x20000020

08002a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a68:	f7ff fff0 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4904      	ldr	r1, [pc, #16]	@ (8002a8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08007c20 	.word	0x08007c20

08002a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a94:	f7ff ffda 	bl	8002a4c <HAL_RCC_GetHCLKFreq>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0adb      	lsrs	r3, r3, #11
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	4904      	ldr	r1, [pc, #16]	@ (8002ab8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aa6:	5ccb      	ldrb	r3, [r1, r3]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08007c20 	.word	0x08007c20

08002abc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ad4:	f7ff f9ee 	bl	8001eb4 <HAL_PWREx_GetVoltageRange>
 8002ad8:	6178      	str	r0, [r7, #20]
 8002ada:	e014      	b.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b25      	ldr	r3, [pc, #148]	@ (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	4a24      	ldr	r2, [pc, #144]	@ (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ae6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ae8:	4b22      	ldr	r3, [pc, #136]	@ (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002af4:	f7ff f9de 	bl	8001eb4 <HAL_PWREx_GetVoltageRange>
 8002af8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002afa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002afe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b0c:	d10b      	bne.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b80      	cmp	r3, #128	@ 0x80
 8002b12:	d919      	bls.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b18:	d902      	bls.n	8002b20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	e013      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b20:	2301      	movs	r3, #1
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	e010      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b80      	cmp	r3, #128	@ 0x80
 8002b2a:	d902      	bls.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	613b      	str	r3, [r7, #16]
 8002b30:	e00a      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b80      	cmp	r3, #128	@ 0x80
 8002b36:	d102      	bne.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b38:	2302      	movs	r3, #2
 8002b3a:	613b      	str	r3, [r7, #16]
 8002b3c:	e004      	b.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b70      	cmp	r3, #112	@ 0x70
 8002b42:	d101      	bne.n	8002b48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b44:	2301      	movs	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b48:	4b0b      	ldr	r3, [pc, #44]	@ (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f023 0207 	bic.w	r2, r3, #7
 8002b50:	4909      	ldr	r1, [pc, #36]	@ (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b58:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d001      	beq.n	8002b6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e000      	b.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40022000 	.word	0x40022000

08002b7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b84:	2300      	movs	r3, #0
 8002b86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b88:	2300      	movs	r3, #0
 8002b8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d041      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ba0:	d02a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ba2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002bb2:	d81e      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bc0:	4b86      	ldr	r3, [pc, #536]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4a85      	ldr	r2, [pc, #532]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bcc:	e015      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 fabb 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bde:	e00c      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3320      	adds	r3, #32
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fba6 	bl	8003338 <RCCEx_PLLSAI2_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bf0:	e003      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bf6:	e000      	b.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bf8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfa:	7cfb      	ldrb	r3, [r7, #19]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d10b      	bne.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c00:	4b76      	ldr	r3, [pc, #472]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c0e:	4973      	ldr	r1, [pc, #460]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c16:	e001      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d041      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c30:	d02a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c36:	d824      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c3c:	d008      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c42:	d81e      	bhi.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c4c:	d010      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c4e:	e018      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c50:	4b62      	ldr	r3, [pc, #392]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a61      	ldr	r2, [pc, #388]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c5c:	e015      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2100      	movs	r1, #0
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 fa73 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c6e:	e00c      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3320      	adds	r3, #32
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fb5e 	bl	8003338 <RCCEx_PLLSAI2_Config>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c80:	e003      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	74fb      	strb	r3, [r7, #19]
      break;
 8002c86:	e000      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c8a:	7cfb      	ldrb	r3, [r7, #19]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c90:	4b52      	ldr	r3, [pc, #328]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c9e:	494f      	ldr	r1, [pc, #316]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002ca6:	e001      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80a0 	beq.w	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cbe:	4b47      	ldr	r3, [pc, #284]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd4:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd8:	4a40      	ldr	r2, [pc, #256]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cde:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ce0:	4b3e      	ldr	r3, [pc, #248]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ce2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cec:	2301      	movs	r3, #1
 8002cee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a3a      	ldr	r2, [pc, #232]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fd94 	bl	8001828 <HAL_GetTick>
 8002d00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d02:	e009      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d04:	f7fe fd90 	bl	8001828 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d902      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	74fb      	strb	r3, [r7, #19]
        break;
 8002d16:	e005      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d18:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ef      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d24:	7cfb      	ldrb	r3, [r7, #19]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d15c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d01f      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d019      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d48:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d54:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	4a20      	ldr	r2, [pc, #128]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d64:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d74:	4a19      	ldr	r2, [pc, #100]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d016      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fd4f 	bl	8001828 <HAL_GetTick>
 8002d8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d8c:	e00b      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe fd4b 	bl	8001828 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d902      	bls.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	74fb      	strb	r3, [r7, #19]
            break;
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002da6:	4b0d      	ldr	r3, [pc, #52]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ec      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10c      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dba:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dca:	4904      	ldr	r1, [pc, #16]	@ (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dd2:	e009      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
 8002dd8:	e006      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de8:	7c7b      	ldrb	r3, [r7, #17]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d105      	bne.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dee:	4b9e      	ldr	r3, [pc, #632]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	4a9d      	ldr	r2, [pc, #628]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002df8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e06:	4b98      	ldr	r3, [pc, #608]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	f023 0203 	bic.w	r2, r3, #3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e14:	4994      	ldr	r1, [pc, #592]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e28:	4b8f      	ldr	r3, [pc, #572]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2e:	f023 020c 	bic.w	r2, r3, #12
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e36:	498c      	ldr	r1, [pc, #560]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e4a:	4b87      	ldr	r3, [pc, #540]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	4983      	ldr	r1, [pc, #524]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	497b      	ldr	r1, [pc, #492]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e8e:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9c:	4972      	ldr	r1, [pc, #456]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	496a      	ldr	r1, [pc, #424]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ed2:	4b65      	ldr	r3, [pc, #404]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	4961      	ldr	r1, [pc, #388]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ef4:	4b5c      	ldr	r3, [pc, #368]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002efa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f02:	4959      	ldr	r1, [pc, #356]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f16:	4b54      	ldr	r3, [pc, #336]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	4950      	ldr	r1, [pc, #320]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f38:	4b4b      	ldr	r3, [pc, #300]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	4948      	ldr	r1, [pc, #288]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f5a:	4b43      	ldr	r3, [pc, #268]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	493f      	ldr	r1, [pc, #252]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d028      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f7c:	4b3a      	ldr	r3, [pc, #232]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f8a:	4937      	ldr	r1, [pc, #220]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f9a:	d106      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9c:	4b32      	ldr	r3, [pc, #200]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a31      	ldr	r2, [pc, #196]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa6:	60d3      	str	r3, [r2, #12]
 8002fa8:	e011      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002fae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fb2:	d10c      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f8c8 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fc4:	7cfb      	ldrb	r3, [r7, #19]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fca:	7cfb      	ldrb	r3, [r7, #19]
 8002fcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d028      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fda:	4b23      	ldr	r3, [pc, #140]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe8:	491f      	ldr	r1, [pc, #124]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ff8:	d106      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffa:	4b1b      	ldr	r3, [pc, #108]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003000:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003004:	60d3      	str	r3, [r2, #12]
 8003006:	e011      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003010:	d10c      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3304      	adds	r3, #4
 8003016:	2101      	movs	r1, #1
 8003018:	4618      	mov	r0, r3
 800301a:	f000 f899 	bl	8003150 <RCCEx_PLLSAI1_Config>
 800301e:	4603      	mov	r3, r0
 8003020:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003028:	7cfb      	ldrb	r3, [r7, #19]
 800302a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02b      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003038:	4b0b      	ldr	r3, [pc, #44]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800303e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003046:	4908      	ldr	r1, [pc, #32]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003048:	4313      	orrs	r3, r2
 800304a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003056:	d109      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003058:	4b03      	ldr	r3, [pc, #12]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a02      	ldr	r2, [pc, #8]	@ (8003068 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800305e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003062:	60d3      	str	r3, [r2, #12]
 8003064:	e014      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003074:	d10c      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	2101      	movs	r1, #1
 800307c:	4618      	mov	r0, r3
 800307e:	f000 f867 	bl	8003150 <RCCEx_PLLSAI1_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003086:	7cfb      	ldrb	r3, [r7, #19]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d02f      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800309c:	4b2b      	ldr	r3, [pc, #172]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800309e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030aa:	4928      	ldr	r1, [pc, #160]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030ba:	d10d      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3304      	adds	r3, #4
 80030c0:	2102      	movs	r1, #2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 f844 	bl	8003150 <RCCEx_PLLSAI1_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d014      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030d2:	7cfb      	ldrb	r3, [r7, #19]
 80030d4:	74bb      	strb	r3, [r7, #18]
 80030d6:	e011      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3320      	adds	r3, #32
 80030e6:	2102      	movs	r1, #2
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f925 	bl	8003338 <RCCEx_PLLSAI2_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030f2:	7cfb      	ldrb	r3, [r7, #19]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00a      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003108:	4b10      	ldr	r3, [pc, #64]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800310e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003116:	490d      	ldr	r1, [pc, #52]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00b      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800312a:	4b08      	ldr	r3, [pc, #32]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800312c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003130:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800313a:	4904      	ldr	r1, [pc, #16]	@ (800314c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003142:	7cbb      	ldrb	r3, [r7, #18]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	40021000 	.word	0x40021000

08003150 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800315e:	4b75      	ldr	r3, [pc, #468]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d018      	beq.n	800319c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800316a:	4b72      	ldr	r3, [pc, #456]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0203 	and.w	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d10d      	bne.n	8003196 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
       ||
 800317e:	2b00      	cmp	r3, #0
 8003180:	d009      	beq.n	8003196 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003182:	4b6c      	ldr	r3, [pc, #432]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
       ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d047      	beq.n	8003226 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	73fb      	strb	r3, [r7, #15]
 800319a:	e044      	b.n	8003226 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d018      	beq.n	80031d6 <RCCEx_PLLSAI1_Config+0x86>
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d825      	bhi.n	80031f4 <RCCEx_PLLSAI1_Config+0xa4>
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <RCCEx_PLLSAI1_Config+0x62>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d009      	beq.n	80031c4 <RCCEx_PLLSAI1_Config+0x74>
 80031b0:	e020      	b.n	80031f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031b2:	4b60      	ldr	r3, [pc, #384]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11d      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c2:	e01a      	b.n	80031fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031c4:	4b5b      	ldr	r3, [pc, #364]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d4:	e013      	b.n	80031fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031d6:	4b57      	ldr	r3, [pc, #348]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10f      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031e2:	4b54      	ldr	r3, [pc, #336]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031f2:	e006      	b.n	8003202 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	73fb      	strb	r3, [r7, #15]
      break;
 80031f8:	e004      	b.n	8003204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fa:	bf00      	nop
 80031fc:	e002      	b.n	8003204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fe:	bf00      	nop
 8003200:	e000      	b.n	8003204 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003202:	bf00      	nop
    }

    if(status == HAL_OK)
 8003204:	7bfb      	ldrb	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10d      	bne.n	8003226 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800320a:	4b4a      	ldr	r3, [pc, #296]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	3b01      	subs	r3, #1
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	430b      	orrs	r3, r1
 8003220:	4944      	ldr	r1, [pc, #272]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003226:	7bfb      	ldrb	r3, [r7, #15]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d17d      	bne.n	8003328 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800322c:	4b41      	ldr	r3, [pc, #260]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a40      	ldr	r2, [pc, #256]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003232:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003236:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003238:	f7fe faf6 	bl	8001828 <HAL_GetTick>
 800323c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800323e:	e009      	b.n	8003254 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003240:	f7fe faf2 	bl	8001828 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d902      	bls.n	8003254 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	73fb      	strb	r3, [r7, #15]
        break;
 8003252:	e005      	b.n	8003260 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003254:	4b37      	ldr	r3, [pc, #220]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1ef      	bne.n	8003240 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d160      	bne.n	8003328 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d111      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800326c:	4b31      	ldr	r3, [pc, #196]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003274:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6892      	ldr	r2, [r2, #8]
 800327c:	0211      	lsls	r1, r2, #8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	68d2      	ldr	r2, [r2, #12]
 8003282:	0912      	lsrs	r2, r2, #4
 8003284:	0452      	lsls	r2, r2, #17
 8003286:	430a      	orrs	r2, r1
 8003288:	492a      	ldr	r1, [pc, #168]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
 800328e:	e027      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d112      	bne.n	80032bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003296:	4b27      	ldr	r3, [pc, #156]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800329e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6892      	ldr	r2, [r2, #8]
 80032a6:	0211      	lsls	r1, r2, #8
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6912      	ldr	r2, [r2, #16]
 80032ac:	0852      	lsrs	r2, r2, #1
 80032ae:	3a01      	subs	r2, #1
 80032b0:	0552      	lsls	r2, r2, #21
 80032b2:	430a      	orrs	r2, r1
 80032b4:	491f      	ldr	r1, [pc, #124]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	610b      	str	r3, [r1, #16]
 80032ba:	e011      	b.n	80032e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80032c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6892      	ldr	r2, [r2, #8]
 80032cc:	0211      	lsls	r1, r2, #8
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6952      	ldr	r2, [r2, #20]
 80032d2:	0852      	lsrs	r2, r2, #1
 80032d4:	3a01      	subs	r2, #1
 80032d6:	0652      	lsls	r2, r2, #25
 80032d8:	430a      	orrs	r2, r1
 80032da:	4916      	ldr	r1, [pc, #88]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032e0:	4b14      	ldr	r3, [pc, #80]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a13      	ldr	r2, [pc, #76]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ec:	f7fe fa9c 	bl	8001828 <HAL_GetTick>
 80032f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032f2:	e009      	b.n	8003308 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032f4:	f7fe fa98 	bl	8001828 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d902      	bls.n	8003308 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	73fb      	strb	r3, [r7, #15]
          break;
 8003306:	e005      	b.n	8003314 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003308:	4b0a      	ldr	r3, [pc, #40]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0ef      	beq.n	80032f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800331a:	4b06      	ldr	r3, [pc, #24]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	691a      	ldr	r2, [r3, #16]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	4904      	ldr	r1, [pc, #16]	@ (8003334 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003324:	4313      	orrs	r3, r2
 8003326:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40021000 	.word	0x40021000

08003338 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003346:	4b6a      	ldr	r3, [pc, #424]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003352:	4b67      	ldr	r3, [pc, #412]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f003 0203 	and.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d10d      	bne.n	800337e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
       ||
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800336a:	4b61      	ldr	r3, [pc, #388]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
       ||
 800337a:	429a      	cmp	r2, r3
 800337c:	d047      	beq.n	800340e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	73fb      	strb	r3, [r7, #15]
 8003382:	e044      	b.n	800340e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d018      	beq.n	80033be <RCCEx_PLLSAI2_Config+0x86>
 800338c:	2b03      	cmp	r3, #3
 800338e:	d825      	bhi.n	80033dc <RCCEx_PLLSAI2_Config+0xa4>
 8003390:	2b01      	cmp	r3, #1
 8003392:	d002      	beq.n	800339a <RCCEx_PLLSAI2_Config+0x62>
 8003394:	2b02      	cmp	r3, #2
 8003396:	d009      	beq.n	80033ac <RCCEx_PLLSAI2_Config+0x74>
 8003398:	e020      	b.n	80033dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800339a:	4b55      	ldr	r3, [pc, #340]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d11d      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033aa:	e01a      	b.n	80033e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033ac:	4b50      	ldr	r3, [pc, #320]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d116      	bne.n	80033e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033bc:	e013      	b.n	80033e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033be:	4b4c      	ldr	r3, [pc, #304]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033ca:	4b49      	ldr	r3, [pc, #292]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d109      	bne.n	80033ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033da:	e006      	b.n	80033ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e004      	b.n	80033ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033e2:	bf00      	nop
 80033e4:	e002      	b.n	80033ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033e6:	bf00      	nop
 80033e8:	e000      	b.n	80033ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10d      	bne.n	800340e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033f2:	4b3f      	ldr	r3, [pc, #252]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6819      	ldr	r1, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	3b01      	subs	r3, #1
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	430b      	orrs	r3, r1
 8003408:	4939      	ldr	r1, [pc, #228]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d167      	bne.n	80034e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003414:	4b36      	ldr	r3, [pc, #216]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a35      	ldr	r2, [pc, #212]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003420:	f7fe fa02 	bl	8001828 <HAL_GetTick>
 8003424:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003426:	e009      	b.n	800343c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003428:	f7fe f9fe 	bl	8001828 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d902      	bls.n	800343c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	73fb      	strb	r3, [r7, #15]
        break;
 800343a:	e005      	b.n	8003448 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800343c:	4b2c      	ldr	r3, [pc, #176]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1ef      	bne.n	8003428 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d14a      	bne.n	80034e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d111      	bne.n	8003478 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003454:	4b26      	ldr	r3, [pc, #152]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800345c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	0211      	lsls	r1, r2, #8
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0912      	lsrs	r2, r2, #4
 800346c:	0452      	lsls	r2, r2, #17
 800346e:	430a      	orrs	r2, r1
 8003470:	491f      	ldr	r1, [pc, #124]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003472:	4313      	orrs	r3, r2
 8003474:	614b      	str	r3, [r1, #20]
 8003476:	e011      	b.n	800349c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003478:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003480:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	6892      	ldr	r2, [r2, #8]
 8003488:	0211      	lsls	r1, r2, #8
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6912      	ldr	r2, [r2, #16]
 800348e:	0852      	lsrs	r2, r2, #1
 8003490:	3a01      	subs	r2, #1
 8003492:	0652      	lsls	r2, r2, #25
 8003494:	430a      	orrs	r2, r1
 8003496:	4916      	ldr	r1, [pc, #88]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003498:	4313      	orrs	r3, r2
 800349a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800349c:	4b14      	ldr	r3, [pc, #80]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a13      	ldr	r2, [pc, #76]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a8:	f7fe f9be 	bl	8001828 <HAL_GetTick>
 80034ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034ae:	e009      	b.n	80034c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034b0:	f7fe f9ba 	bl	8001828 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d902      	bls.n	80034c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	73fb      	strb	r3, [r7, #15]
          break;
 80034c2:	e005      	b.n	80034d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034c4:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0ef      	beq.n	80034b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034d6:	4b06      	ldr	r3, [pc, #24]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	4904      	ldr	r1, [pc, #16]	@ (80034f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000

080034f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e049      	b.n	800359a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd ff12 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3304      	adds	r3, #4
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f000 fb7a 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e049      	b.n	8003648 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f841 	bl	8003650 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	3304      	adds	r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	4610      	mov	r0, r2
 80035e2:	f000 fb23 	bl	8003c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2201      	movs	r2, #1
 800363a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d109      	bne.n	8003688 <HAL_TIM_PWM_Start+0x24>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b01      	cmp	r3, #1
 800367e:	bf14      	ite	ne
 8003680:	2301      	movne	r3, #1
 8003682:	2300      	moveq	r3, #0
 8003684:	b2db      	uxtb	r3, r3
 8003686:	e03c      	b.n	8003702 <HAL_TIM_PWM_Start+0x9e>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b04      	cmp	r3, #4
 800368c:	d109      	bne.n	80036a2 <HAL_TIM_PWM_Start+0x3e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b01      	cmp	r3, #1
 8003698:	bf14      	ite	ne
 800369a:	2301      	movne	r3, #1
 800369c:	2300      	moveq	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	e02f      	b.n	8003702 <HAL_TIM_PWM_Start+0x9e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d109      	bne.n	80036bc <HAL_TIM_PWM_Start+0x58>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	bf14      	ite	ne
 80036b4:	2301      	movne	r3, #1
 80036b6:	2300      	moveq	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e022      	b.n	8003702 <HAL_TIM_PWM_Start+0x9e>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b0c      	cmp	r3, #12
 80036c0:	d109      	bne.n	80036d6 <HAL_TIM_PWM_Start+0x72>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e015      	b.n	8003702 <HAL_TIM_PWM_Start+0x9e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d109      	bne.n	80036f0 <HAL_TIM_PWM_Start+0x8c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e008      	b.n	8003702 <HAL_TIM_PWM_Start+0x9e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	bf14      	ite	ne
 80036fc:	2301      	movne	r3, #1
 80036fe:	2300      	moveq	r3, #0
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e09c      	b.n	8003844 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d104      	bne.n	800371a <HAL_TIM_PWM_Start+0xb6>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003718:	e023      	b.n	8003762 <HAL_TIM_PWM_Start+0xfe>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b04      	cmp	r3, #4
 800371e:	d104      	bne.n	800372a <HAL_TIM_PWM_Start+0xc6>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003728:	e01b      	b.n	8003762 <HAL_TIM_PWM_Start+0xfe>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <HAL_TIM_PWM_Start+0xd6>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003738:	e013      	b.n	8003762 <HAL_TIM_PWM_Start+0xfe>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d104      	bne.n	800374a <HAL_TIM_PWM_Start+0xe6>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003748:	e00b      	b.n	8003762 <HAL_TIM_PWM_Start+0xfe>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b10      	cmp	r3, #16
 800374e:	d104      	bne.n	800375a <HAL_TIM_PWM_Start+0xf6>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003758:	e003      	b.n	8003762 <HAL_TIM_PWM_Start+0xfe>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2202      	movs	r2, #2
 800375e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2201      	movs	r2, #1
 8003768:	6839      	ldr	r1, [r7, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f000 fe68 	bl	8004440 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a35      	ldr	r2, [pc, #212]	@ (800384c <HAL_TIM_PWM_Start+0x1e8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x13e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <HAL_TIM_PWM_Start+0x1ec>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x13e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a32      	ldr	r2, [pc, #200]	@ (8003854 <HAL_TIM_PWM_Start+0x1f0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x13e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_TIM_PWM_Start+0x1f4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x13e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a2f      	ldr	r2, [pc, #188]	@ (800385c <HAL_TIM_PWM_Start+0x1f8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d101      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x142>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <HAL_TIM_PWM_Start+0x144>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d007      	beq.n	80037bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a22      	ldr	r2, [pc, #136]	@ (800384c <HAL_TIM_PWM_Start+0x1e8>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01d      	beq.n	8003802 <HAL_TIM_PWM_Start+0x19e>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037ce:	d018      	beq.n	8003802 <HAL_TIM_PWM_Start+0x19e>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a22      	ldr	r2, [pc, #136]	@ (8003860 <HAL_TIM_PWM_Start+0x1fc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_TIM_PWM_Start+0x19e>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a21      	ldr	r2, [pc, #132]	@ (8003864 <HAL_TIM_PWM_Start+0x200>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_TIM_PWM_Start+0x19e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003868 <HAL_TIM_PWM_Start+0x204>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_TIM_PWM_Start+0x19e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <HAL_TIM_PWM_Start+0x1ec>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_TIM_PWM_Start+0x19e>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a15      	ldr	r2, [pc, #84]	@ (8003854 <HAL_TIM_PWM_Start+0x1f0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d115      	bne.n	800382e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	4b18      	ldr	r3, [pc, #96]	@ (800386c <HAL_TIM_PWM_Start+0x208>)
 800380a:	4013      	ands	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2b06      	cmp	r3, #6
 8003812:	d015      	beq.n	8003840 <HAL_TIM_PWM_Start+0x1dc>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800381a:	d011      	beq.n	8003840 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	e008      	b.n	8003840 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
 800383e:	e000      	b.n	8003842 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003840:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40012c00 	.word	0x40012c00
 8003850:	40013400 	.word	0x40013400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	40000400 	.word	0x40000400
 8003864:	40000800 	.word	0x40000800
 8003868:	40000c00 	.word	0x40000c00
 800386c:	00010007 	.word	0x00010007

08003870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800388a:	2302      	movs	r3, #2
 800388c:	e0ff      	b.n	8003a8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b14      	cmp	r3, #20
 800389a:	f200 80f0 	bhi.w	8003a7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800389e:	a201      	add	r2, pc, #4	@ (adr r2, 80038a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80038a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a4:	080038f9 	.word	0x080038f9
 80038a8:	08003a7f 	.word	0x08003a7f
 80038ac:	08003a7f 	.word	0x08003a7f
 80038b0:	08003a7f 	.word	0x08003a7f
 80038b4:	08003939 	.word	0x08003939
 80038b8:	08003a7f 	.word	0x08003a7f
 80038bc:	08003a7f 	.word	0x08003a7f
 80038c0:	08003a7f 	.word	0x08003a7f
 80038c4:	0800397b 	.word	0x0800397b
 80038c8:	08003a7f 	.word	0x08003a7f
 80038cc:	08003a7f 	.word	0x08003a7f
 80038d0:	08003a7f 	.word	0x08003a7f
 80038d4:	080039bb 	.word	0x080039bb
 80038d8:	08003a7f 	.word	0x08003a7f
 80038dc:	08003a7f 	.word	0x08003a7f
 80038e0:	08003a7f 	.word	0x08003a7f
 80038e4:	080039fd 	.word	0x080039fd
 80038e8:	08003a7f 	.word	0x08003a7f
 80038ec:	08003a7f 	.word	0x08003a7f
 80038f0:	08003a7f 	.word	0x08003a7f
 80038f4:	08003a3d 	.word	0x08003a3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fa2e 	bl	8003d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0208 	orr.w	r2, r2, #8
 8003912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6999      	ldr	r1, [r3, #24]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	619a      	str	r2, [r3, #24]
      break;
 8003936:	e0a5      	b.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa9e 	bl	8003e80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
      break;
 8003978:	e084      	b.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fb07 	bl	8003f94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0208 	orr.w	r2, r2, #8
 8003994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0204 	bic.w	r2, r2, #4
 80039a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69d9      	ldr	r1, [r3, #28]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	61da      	str	r2, [r3, #28]
      break;
 80039b8:	e064      	b.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb6f 	bl	80040a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	021a      	lsls	r2, r3, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	61da      	str	r2, [r3, #28]
      break;
 80039fa:	e043      	b.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fbb8 	bl	8004178 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0208 	orr.w	r2, r2, #8
 8003a16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0204 	bic.w	r2, r2, #4
 8003a26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a3a:	e023      	b.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68b9      	ldr	r1, [r7, #8]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fbfc 	bl	8004240 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a56:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a66:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	021a      	lsls	r2, r3, #8
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003a7c:	e002      	b.n	8003a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	75fb      	strb	r3, [r7, #23]
      break;
 8003a82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b6      	b.n	8003c22 <HAL_TIM_ConfigClockSource+0x18a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af0:	d03e      	beq.n	8003b70 <HAL_TIM_ConfigClockSource+0xd8>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af6:	f200 8087 	bhi.w	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003afa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afe:	f000 8086 	beq.w	8003c0e <HAL_TIM_ConfigClockSource+0x176>
 8003b02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b06:	d87f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b08:	2b70      	cmp	r3, #112	@ 0x70
 8003b0a:	d01a      	beq.n	8003b42 <HAL_TIM_ConfigClockSource+0xaa>
 8003b0c:	2b70      	cmp	r3, #112	@ 0x70
 8003b0e:	d87b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b10:	2b60      	cmp	r3, #96	@ 0x60
 8003b12:	d050      	beq.n	8003bb6 <HAL_TIM_ConfigClockSource+0x11e>
 8003b14:	2b60      	cmp	r3, #96	@ 0x60
 8003b16:	d877      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b18:	2b50      	cmp	r3, #80	@ 0x50
 8003b1a:	d03c      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xfe>
 8003b1c:	2b50      	cmp	r3, #80	@ 0x50
 8003b1e:	d873      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d058      	beq.n	8003bd6 <HAL_TIM_ConfigClockSource+0x13e>
 8003b24:	2b40      	cmp	r3, #64	@ 0x40
 8003b26:	d86f      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b28:	2b30      	cmp	r3, #48	@ 0x30
 8003b2a:	d064      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8003b2c:	2b30      	cmp	r3, #48	@ 0x30
 8003b2e:	d86b      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d060      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	d867      	bhi.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d05c      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d05a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8003b40:	e062      	b.n	8003c08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b52:	f000 fc55 	bl	8004400 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	609a      	str	r2, [r3, #8]
      break;
 8003b6e:	e04f      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b80:	f000 fc3e 	bl	8004400 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b92:	609a      	str	r2, [r3, #8]
      break;
 8003b94:	e03c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	f000 fbb2 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2150      	movs	r1, #80	@ 0x50
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fc0b 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003bb4:	e02c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	f000 fbd1 	bl	800436a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2160      	movs	r1, #96	@ 0x60
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fbfb 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003bd4:	e01c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	461a      	mov	r2, r3
 8003be4:	f000 fb92 	bl	800430c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2140      	movs	r1, #64	@ 0x40
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fbeb 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003bf4:	e00c      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4610      	mov	r0, r2
 8003c02:	f000 fbe2 	bl	80043ca <TIM_ITRx_SetConfig>
      break;
 8003c06:	e003      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c0c:	e000      	b.n	8003c10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a40      	ldr	r2, [pc, #256]	@ (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4a:	d00f      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a3d      	ldr	r2, [pc, #244]	@ (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	@ (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d4c <TIM_Base_SetConfig+0x120>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x40>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3a      	ldr	r2, [pc, #232]	@ (8003d50 <TIM_Base_SetConfig+0x124>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a2f      	ldr	r2, [pc, #188]	@ (8003d40 <TIM_Base_SetConfig+0x114>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d01b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a2c      	ldr	r2, [pc, #176]	@ (8003d44 <TIM_Base_SetConfig+0x118>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d017      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	@ (8003d48 <TIM_Base_SetConfig+0x11c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d013      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8003d4c <TIM_Base_SetConfig+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00f      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	@ (8003d50 <TIM_Base_SetConfig+0x124>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a28      	ldr	r2, [pc, #160]	@ (8003d54 <TIM_Base_SetConfig+0x128>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a27      	ldr	r2, [pc, #156]	@ (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_Base_SetConfig+0x9a>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a26      	ldr	r2, [pc, #152]	@ (8003d5c <TIM_Base_SetConfig+0x130>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d108      	bne.n	8003cd8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ccc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a10      	ldr	r2, [pc, #64]	@ (8003d40 <TIM_Base_SetConfig+0x114>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00f      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a12      	ldr	r2, [pc, #72]	@ (8003d50 <TIM_Base_SetConfig+0x124>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d00b      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a11      	ldr	r2, [pc, #68]	@ (8003d54 <TIM_Base_SetConfig+0x128>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d007      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a10      	ldr	r2, [pc, #64]	@ (8003d58 <TIM_Base_SetConfig+0x12c>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <TIM_Base_SetConfig+0xf8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d5c <TIM_Base_SetConfig+0x130>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800
 8003d4c:	40000c00 	.word	0x40000c00
 8003d50:	40013400 	.word	0x40013400
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800

08003d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f023 0201 	bic.w	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f023 0303 	bic.w	r3, r3, #3
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f023 0302 	bic.w	r3, r3, #2
 8003dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a2c      	ldr	r2, [pc, #176]	@ (8003e6c <TIM_OC1_SetConfig+0x10c>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00f      	beq.n	8003de0 <TIM_OC1_SetConfig+0x80>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8003e70 <TIM_OC1_SetConfig+0x110>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00b      	beq.n	8003de0 <TIM_OC1_SetConfig+0x80>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <TIM_OC1_SetConfig+0x114>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d007      	beq.n	8003de0 <TIM_OC1_SetConfig+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a29      	ldr	r2, [pc, #164]	@ (8003e78 <TIM_OC1_SetConfig+0x118>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC1_SetConfig+0x80>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a28      	ldr	r2, [pc, #160]	@ (8003e7c <TIM_OC1_SetConfig+0x11c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10c      	bne.n	8003dfa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0308 	bic.w	r3, r3, #8
 8003de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f023 0304 	bic.w	r3, r3, #4
 8003df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e6c <TIM_OC1_SetConfig+0x10c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00f      	beq.n	8003e22 <TIM_OC1_SetConfig+0xc2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a1a      	ldr	r2, [pc, #104]	@ (8003e70 <TIM_OC1_SetConfig+0x110>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00b      	beq.n	8003e22 <TIM_OC1_SetConfig+0xc2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a19      	ldr	r2, [pc, #100]	@ (8003e74 <TIM_OC1_SetConfig+0x114>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d007      	beq.n	8003e22 <TIM_OC1_SetConfig+0xc2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a18      	ldr	r2, [pc, #96]	@ (8003e78 <TIM_OC1_SetConfig+0x118>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d003      	beq.n	8003e22 <TIM_OC1_SetConfig+0xc2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <TIM_OC1_SetConfig+0x11c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d111      	bne.n	8003e46 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	621a      	str	r2, [r3, #32]
}
 8003e60:	bf00      	nop
 8003e62:	371c      	adds	r7, #28
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40013400 	.word	0x40013400
 8003e74:	40014000 	.word	0x40014000
 8003e78:	40014400 	.word	0x40014400
 8003e7c:	40014800 	.word	0x40014800

08003e80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	f023 0210 	bic.w	r2, r3, #16
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003eae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	f023 0320 	bic.w	r3, r3, #32
 8003ece:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a28      	ldr	r2, [pc, #160]	@ (8003f80 <TIM_OC2_SetConfig+0x100>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC2_SetConfig+0x6c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <TIM_OC2_SetConfig+0x104>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d10d      	bne.n	8003f08 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8003f80 <TIM_OC2_SetConfig+0x100>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00f      	beq.n	8003f30 <TIM_OC2_SetConfig+0xb0>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a1c      	ldr	r2, [pc, #112]	@ (8003f84 <TIM_OC2_SetConfig+0x104>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00b      	beq.n	8003f30 <TIM_OC2_SetConfig+0xb0>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <TIM_OC2_SetConfig+0x108>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d007      	beq.n	8003f30 <TIM_OC2_SetConfig+0xb0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a1a      	ldr	r2, [pc, #104]	@ (8003f8c <TIM_OC2_SetConfig+0x10c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d003      	beq.n	8003f30 <TIM_OC2_SetConfig+0xb0>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a19      	ldr	r2, [pc, #100]	@ (8003f90 <TIM_OC2_SetConfig+0x110>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d113      	bne.n	8003f58 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	621a      	str	r2, [r3, #32]
}
 8003f72:	bf00      	nop
 8003f74:	371c      	adds	r7, #28
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40012c00 	.word	0x40012c00
 8003f84:	40013400 	.word	0x40013400
 8003f88:	40014000 	.word	0x40014000
 8003f8c:	40014400 	.word	0x40014400
 8003f90:	40014800 	.word	0x40014800

08003f94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a1b      	ldr	r3, [r3, #32]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0303 	bic.w	r3, r3, #3
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	021b      	lsls	r3, r3, #8
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a27      	ldr	r2, [pc, #156]	@ (8004090 <TIM_OC3_SetConfig+0xfc>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d003      	beq.n	8003ffe <TIM_OC3_SetConfig+0x6a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a26      	ldr	r2, [pc, #152]	@ (8004094 <TIM_OC3_SetConfig+0x100>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d10d      	bne.n	800401a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a1c      	ldr	r2, [pc, #112]	@ (8004090 <TIM_OC3_SetConfig+0xfc>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_OC3_SetConfig+0xae>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1b      	ldr	r2, [pc, #108]	@ (8004094 <TIM_OC3_SetConfig+0x100>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_OC3_SetConfig+0xae>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a1a      	ldr	r2, [pc, #104]	@ (8004098 <TIM_OC3_SetConfig+0x104>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_OC3_SetConfig+0xae>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a19      	ldr	r2, [pc, #100]	@ (800409c <TIM_OC3_SetConfig+0x108>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC3_SetConfig+0xae>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a18      	ldr	r2, [pc, #96]	@ (80040a0 <TIM_OC3_SetConfig+0x10c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d113      	bne.n	800406a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004048:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004050:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	621a      	str	r2, [r3, #32]
}
 8004084:	bf00      	nop
 8004086:	371c      	adds	r7, #28
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40013400 	.word	0x40013400
 8004098:	40014000 	.word	0x40014000
 800409c:	40014400 	.word	0x40014400
 80040a0:	40014800 	.word	0x40014800

080040a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	021b      	lsls	r3, r3, #8
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	031b      	lsls	r3, r3, #12
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a18      	ldr	r2, [pc, #96]	@ (8004164 <TIM_OC4_SetConfig+0xc0>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d00f      	beq.n	8004128 <TIM_OC4_SetConfig+0x84>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a17      	ldr	r2, [pc, #92]	@ (8004168 <TIM_OC4_SetConfig+0xc4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d00b      	beq.n	8004128 <TIM_OC4_SetConfig+0x84>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <TIM_OC4_SetConfig+0xc8>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d007      	beq.n	8004128 <TIM_OC4_SetConfig+0x84>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a15      	ldr	r2, [pc, #84]	@ (8004170 <TIM_OC4_SetConfig+0xcc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d003      	beq.n	8004128 <TIM_OC4_SetConfig+0x84>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a14      	ldr	r2, [pc, #80]	@ (8004174 <TIM_OC4_SetConfig+0xd0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d109      	bne.n	800413c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800412e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	019b      	lsls	r3, r3, #6
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	4313      	orrs	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	621a      	str	r2, [r3, #32]
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40012c00 	.word	0x40012c00
 8004168:	40013400 	.word	0x40013400
 800416c:	40014000 	.word	0x40014000
 8004170:	40014400 	.word	0x40014400
 8004174:	40014800 	.word	0x40014800

08004178 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b480      	push	{r7}
 800417a:	b087      	sub	sp, #28
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80041bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a17      	ldr	r2, [pc, #92]	@ (800422c <TIM_OC5_SetConfig+0xb4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d00f      	beq.n	80041f2 <TIM_OC5_SetConfig+0x7a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a16      	ldr	r2, [pc, #88]	@ (8004230 <TIM_OC5_SetConfig+0xb8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d00b      	beq.n	80041f2 <TIM_OC5_SetConfig+0x7a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a15      	ldr	r2, [pc, #84]	@ (8004234 <TIM_OC5_SetConfig+0xbc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d007      	beq.n	80041f2 <TIM_OC5_SetConfig+0x7a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a14      	ldr	r2, [pc, #80]	@ (8004238 <TIM_OC5_SetConfig+0xc0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d003      	beq.n	80041f2 <TIM_OC5_SetConfig+0x7a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a13      	ldr	r2, [pc, #76]	@ (800423c <TIM_OC5_SetConfig+0xc4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d109      	bne.n	8004206 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	621a      	str	r2, [r3, #32]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40012c00 	.word	0x40012c00
 8004230:	40013400 	.word	0x40013400
 8004234:	40014000 	.word	0x40014000
 8004238:	40014400 	.word	0x40014400
 800423c:	40014800 	.word	0x40014800

08004240 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004240:	b480      	push	{r7}
 8004242:	b087      	sub	sp, #28
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	051b      	lsls	r3, r3, #20
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a18      	ldr	r2, [pc, #96]	@ (80042f8 <TIM_OC6_SetConfig+0xb8>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d00f      	beq.n	80042bc <TIM_OC6_SetConfig+0x7c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a17      	ldr	r2, [pc, #92]	@ (80042fc <TIM_OC6_SetConfig+0xbc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00b      	beq.n	80042bc <TIM_OC6_SetConfig+0x7c>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a16      	ldr	r2, [pc, #88]	@ (8004300 <TIM_OC6_SetConfig+0xc0>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d007      	beq.n	80042bc <TIM_OC6_SetConfig+0x7c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a15      	ldr	r2, [pc, #84]	@ (8004304 <TIM_OC6_SetConfig+0xc4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d003      	beq.n	80042bc <TIM_OC6_SetConfig+0x7c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <TIM_OC6_SetConfig+0xc8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d109      	bne.n	80042d0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	029b      	lsls	r3, r3, #10
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	621a      	str	r2, [r3, #32]
}
 80042ea:	bf00      	nop
 80042ec:	371c      	adds	r7, #28
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	40012c00 	.word	0x40012c00
 80042fc:	40013400 	.word	0x40013400
 8004300:	40014000 	.word	0x40014000
 8004304:	40014400 	.word	0x40014400
 8004308:	40014800 	.word	0x40014800

0800430c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800430c:	b480      	push	{r7}
 800430e:	b087      	sub	sp, #28
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	f023 0201 	bic.w	r2, r3, #1
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f023 030a 	bic.w	r3, r3, #10
 8004348:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	621a      	str	r2, [r3, #32]
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800436a:	b480      	push	{r7}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	f023 0210 	bic.w	r2, r3, #16
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	031b      	lsls	r3, r3, #12
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f043 0307 	orr.w	r3, r3, #7
 80043ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]
}
 80043f4:	bf00      	nop
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004400:	b480      	push	{r7}
 8004402:	b087      	sub	sp, #28
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800441a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	021a      	lsls	r2, r3, #8
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	431a      	orrs	r2, r3
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4313      	orrs	r3, r2
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	4313      	orrs	r3, r2
 800442c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	609a      	str	r2, [r3, #8]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004440:	b480      	push	{r7}
 8004442:	b087      	sub	sp, #28
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2201      	movs	r2, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6a1a      	ldr	r2, [r3, #32]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	43db      	mvns	r3, r3
 8004462:	401a      	ands	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a1a      	ldr	r2, [r3, #32]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
	...

0800448c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800449c:	2b01      	cmp	r3, #1
 800449e:	d101      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044a0:	2302      	movs	r3, #2
 80044a2:	e068      	b.n	8004576 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a2e      	ldr	r2, [pc, #184]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a2d      	ldr	r2, [pc, #180]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a1e      	ldr	r2, [pc, #120]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d01d      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004516:	d018      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a1b      	ldr	r2, [pc, #108]	@ (800458c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d013      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a1a      	ldr	r2, [pc, #104]	@ (8004590 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d00e      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a18      	ldr	r2, [pc, #96]	@ (8004594 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a13      	ldr	r2, [pc, #76]	@ (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d004      	beq.n	800454a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a14      	ldr	r2, [pc, #80]	@ (8004598 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d10c      	bne.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004550:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	4313      	orrs	r3, r2
 800455a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40012c00 	.word	0x40012c00
 8004588:	40013400 	.word	0x40013400
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40014000 	.word	0x40014000

0800459c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e040      	b.n	8004630 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fc ff4c 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2224      	movs	r2, #36	@ 0x24
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0201 	bic.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 fec0 	bl	8005368 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 fc05 	bl	8004df8 <UART_SetConfig>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e01b      	b.n	8004630 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004616:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 ff3f 	bl	80054ac <UART_CheckIdleState>
 800462e:	4603      	mov	r3, r0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08a      	sub	sp, #40	@ 0x28
 800463c:	af02      	add	r7, sp, #8
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	4613      	mov	r3, r2
 8004646:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800464c:	2b20      	cmp	r3, #32
 800464e:	d177      	bne.n	8004740 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <HAL_UART_Transmit+0x24>
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e070      	b.n	8004742 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2221      	movs	r2, #33	@ 0x21
 800466c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466e:	f7fd f8db 	bl	8001828 <HAL_GetTick>
 8004672:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800468c:	d108      	bne.n	80046a0 <HAL_UART_Transmit+0x68>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e003      	b.n	80046a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a8:	e02f      	b.n	800470a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	2180      	movs	r1, #128	@ 0x80
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 ffa1 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d004      	beq.n	80046ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2220      	movs	r2, #32
 80046c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e03b      	b.n	8004742 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	881a      	ldrh	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046dc:	b292      	uxth	r2, r2
 80046de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	3302      	adds	r3, #2
 80046e4:	61bb      	str	r3, [r7, #24]
 80046e6:	e007      	b.n	80046f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	781a      	ldrb	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1c9      	bne.n	80046aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	9300      	str	r3, [sp, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2200      	movs	r2, #0
 800471e:	2140      	movs	r1, #64	@ 0x40
 8004720:	68f8      	ldr	r0, [r7, #12]
 8004722:	f000 ff6b 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e005      	b.n	8004742 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2220      	movs	r2, #32
 800473a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	@ 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	4613      	mov	r3, r2
 8004758:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004760:	2b20      	cmp	r3, #32
 8004762:	d137      	bne.n	80047d4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_UART_Receive_IT+0x24>
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d101      	bne.n	8004774 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e030      	b.n	80047d6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a18      	ldr	r2, [pc, #96]	@ (80047e0 <HAL_UART_Receive_IT+0x94>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d01f      	beq.n	80047c4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d018      	beq.n	80047c4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	e853 3f00 	ldrex	r3, [r3]
 800479e:	613b      	str	r3, [r7, #16]
   return(result);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	461a      	mov	r2, r3
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	623b      	str	r3, [r7, #32]
 80047b2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b4:	69f9      	ldr	r1, [r7, #28]
 80047b6:	6a3a      	ldr	r2, [r7, #32]
 80047b8:	e841 2300 	strex	r3, r2, [r1]
 80047bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1e6      	bne.n	8004792 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047c4:	88fb      	ldrh	r3, [r7, #6]
 80047c6:	461a      	mov	r2, r3
 80047c8:	68b9      	ldr	r1, [r7, #8]
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 ff7e 	bl	80056cc <UART_Start_Receive_IT>
 80047d0:	4603      	mov	r3, r0
 80047d2:	e000      	b.n	80047d6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047d4:	2302      	movs	r3, #2
  }
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3728      	adds	r7, #40	@ 0x28
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	40008000 	.word	0x40008000

080047e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b0ba      	sub	sp, #232	@ 0xe8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800480a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800480e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004812:	4013      	ands	r3, r2
 8004814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004818:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800481c:	2b00      	cmp	r3, #0
 800481e:	d115      	bne.n	800484c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00f      	beq.n	800484c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 82ae 	beq.w	8004d9e <HAL_UART_IRQHandler+0x5ba>
      {
        huart->RxISR(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
      }
      return;
 800484a:	e2a8      	b.n	8004d9e <HAL_UART_IRQHandler+0x5ba>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800484c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8117 	beq.w	8004a84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004862:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004866:	4b85      	ldr	r3, [pc, #532]	@ (8004a7c <HAL_UART_IRQHandler+0x298>)
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 810a 	beq.w	8004a84 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d011      	beq.n	80048a0 <HAL_UART_IRQHandler+0xbc>
 800487c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00b      	beq.n	80048a0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004896:	f043 0201 	orr.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d011      	beq.n	80048d0 <HAL_UART_IRQHandler+0xec>
 80048ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048b0:	f003 0301 	and.w	r3, r3, #1
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2202      	movs	r2, #2
 80048be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048c6:	f043 0204 	orr.w	r2, r3, #4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d011      	beq.n	8004900 <HAL_UART_IRQHandler+0x11c>
 80048dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00b      	beq.n	8004900 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2204      	movs	r2, #4
 80048ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d017      	beq.n	800493c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800491c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00b      	beq.n	800493c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2208      	movs	r2, #8
 800492a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004932:	f043 0208 	orr.w	r2, r3, #8
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004940:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <HAL_UART_IRQHandler+0x18a>
 8004948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800494c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800495c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004964:	f043 0220 	orr.w	r2, r3, #32
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004974:	2b00      	cmp	r3, #0
 8004976:	f000 8214 	beq.w	8004da2 <HAL_UART_IRQHandler+0x5be>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497e:	f003 0320 	and.w	r3, r3, #32
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004986:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800498a:	f003 0320 	and.w	r3, r3, #32
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b40      	cmp	r3, #64	@ 0x40
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049be:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d04f      	beq.n	8004a66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 ff46 	bl	8005858 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	d141      	bne.n	8004a5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3308      	adds	r3, #8
 80049e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004a06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004a12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1d9      	bne.n	80049da <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d013      	beq.n	8004a56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a32:	4a13      	ldr	r2, [pc, #76]	@ (8004a80 <HAL_UART_IRQHandler+0x29c>)
 8004a34:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fd f84f 	bl	8001ade <HAL_DMA_Abort_IT>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d017      	beq.n	8004a76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a50:	4610      	mov	r0, r2
 8004a52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	e00f      	b.n	8004a76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f9b8 	bl	8004dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00b      	b.n	8004a76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f9b4 	bl	8004dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e007      	b.n	8004a76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f9b0 	bl	8004dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004a74:	e195      	b.n	8004da2 <HAL_UART_IRQHandler+0x5be>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a76:	bf00      	nop
    return;
 8004a78:	e193      	b.n	8004da2 <HAL_UART_IRQHandler+0x5be>
 8004a7a:	bf00      	nop
 8004a7c:	04000120 	.word	0x04000120
 8004a80:	08005921 	.word	0x08005921

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f040 814e 	bne.w	8004d2a <HAL_UART_IRQHandler+0x546>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a92:	f003 0310 	and.w	r3, r3, #16
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f000 8147 	beq.w	8004d2a <HAL_UART_IRQHandler+0x546>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8140 	beq.w	8004d2a <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2210      	movs	r2, #16
 8004ab0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	f040 80b8 	bne.w	8004c32 <HAL_UART_IRQHandler+0x44e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ace:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8167 	beq.w	8004da6 <HAL_UART_IRQHandler+0x5c2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	f080 815f 	bcs.w	8004da6 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f040 8086 	bne.w	8004c10 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	461a      	mov	r2, r3
 8004b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b3e:	e841 2300 	strex	r3, r2, [r1]
 8004b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1da      	bne.n	8004b04 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3308      	adds	r3, #8
 8004b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b60:	f023 0301 	bic.w	r3, r3, #1
 8004b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e1      	bne.n	8004b4e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	3308      	adds	r3, #8
 8004b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b94:	e853 3f00 	ldrex	r3, [r3]
 8004b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e3      	bne.n	8004b8a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bd8:	e853 3f00 	ldrex	r3, [r3]
 8004bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004be0:	f023 0310 	bic.w	r3, r3, #16
 8004be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004bf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e4      	bne.n	8004bd0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fc ff29 	bl	8001a62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2202      	movs	r2, #2
 8004c14:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8d8 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c30:	e0b9      	b.n	8004da6 <HAL_UART_IRQHandler+0x5c2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80ab 	beq.w	8004daa <HAL_UART_IRQHandler+0x5c6>
          && (nb_rx_data > 0U))
 8004c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a6 	beq.w	8004daa <HAL_UART_IRQHandler+0x5c6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c66:	e853 3f00 	ldrex	r3, [r3]
 8004c6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c80:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c82:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c88:	e841 2300 	strex	r3, r2, [r1]
 8004c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e4      	bne.n	8004c5e <HAL_UART_IRQHandler+0x47a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca4:	6a3b      	ldr	r3, [r7, #32]
 8004ca6:	f023 0301 	bic.w	r3, r3, #1
 8004caa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3308      	adds	r3, #8
 8004cb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004cb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8004cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cc0:	e841 2300 	strex	r3, r2, [r1]
 8004cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1e3      	bne.n	8004c94 <HAL_UART_IRQHandler+0x4b0>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	e853 3f00 	ldrex	r3, [r3]
 8004cec:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f023 0310 	bic.w	r3, r3, #16
 8004cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004d02:	61fb      	str	r3, [r7, #28]
 8004d04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d06:	69b9      	ldr	r1, [r7, #24]
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	e841 2300 	strex	r3, r2, [r1]
 8004d0e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d1e4      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x4fc>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f85c 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d28:	e03f      	b.n	8004daa <HAL_UART_IRQHandler+0x5c6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00e      	beq.n	8004d54 <HAL_UART_IRQHandler+0x570>
 8004d36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d008      	beq.n	8004d54 <HAL_UART_IRQHandler+0x570>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004d4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 ffe3 	bl	8005d18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d52:	e02d      	b.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00e      	beq.n	8004d7e <HAL_UART_IRQHandler+0x59a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d008      	beq.n	8004d7e <HAL_UART_IRQHandler+0x59a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01c      	beq.n	8004dae <HAL_UART_IRQHandler+0x5ca>
    {
      huart->TxISR(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	4798      	blx	r3
    }
    return;
 8004d7c:	e017      	b.n	8004dae <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00c      	beq.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
  {
    UART_EndTransmit_IT(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fdd8 	bl	800594c <UART_EndTransmit_IT>
    return;
 8004d9c:	e008      	b.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004d9e:	bf00      	nop
 8004da0:	e006      	b.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004da2:	bf00      	nop
 8004da4:	e004      	b.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
      return;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <HAL_UART_IRQHandler+0x5cc>
    return;
 8004dae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004db0:	37e8      	adds	r7, #232	@ 0xe8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop

08004db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dfc:	b08a      	sub	sp, #40	@ 0x28
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4ba4      	ldr	r3, [pc, #656]	@ (80050b8 <UART_SetConfig+0x2c0>)
 8004e28:	4013      	ands	r3, r2
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e30:	430b      	orrs	r3, r1
 8004e32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a99      	ldr	r2, [pc, #612]	@ (80050bc <UART_SetConfig+0x2c4>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d004      	beq.n	8004e64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e60:	4313      	orrs	r3, r2
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a90      	ldr	r2, [pc, #576]	@ (80050c0 <UART_SetConfig+0x2c8>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d126      	bne.n	8004ed0 <UART_SetConfig+0xd8>
 8004e82:	4b90      	ldr	r3, [pc, #576]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b03      	cmp	r3, #3
 8004e8e:	d81b      	bhi.n	8004ec8 <UART_SetConfig+0xd0>
 8004e90:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0xa0>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004eb9 	.word	0x08004eb9
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004ec1 	.word	0x08004ec1
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eae:	e116      	b.n	80050de <UART_SetConfig+0x2e6>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb6:	e112      	b.n	80050de <UART_SetConfig+0x2e6>
 8004eb8:	2304      	movs	r3, #4
 8004eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ebe:	e10e      	b.n	80050de <UART_SetConfig+0x2e6>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec6:	e10a      	b.n	80050de <UART_SetConfig+0x2e6>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ece:	e106      	b.n	80050de <UART_SetConfig+0x2e6>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a7c      	ldr	r2, [pc, #496]	@ (80050c8 <UART_SetConfig+0x2d0>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d138      	bne.n	8004f4c <UART_SetConfig+0x154>
 8004eda:	4b7a      	ldr	r3, [pc, #488]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee0:	f003 030c 	and.w	r3, r3, #12
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d82d      	bhi.n	8004f44 <UART_SetConfig+0x14c>
 8004ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <UART_SetConfig+0xf8>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f45 	.word	0x08004f45
 8004ef8:	08004f45 	.word	0x08004f45
 8004efc:	08004f45 	.word	0x08004f45
 8004f00:	08004f35 	.word	0x08004f35
 8004f04:	08004f45 	.word	0x08004f45
 8004f08:	08004f45 	.word	0x08004f45
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f2d 	.word	0x08004f2d
 8004f14:	08004f45 	.word	0x08004f45
 8004f18:	08004f45 	.word	0x08004f45
 8004f1c:	08004f45 	.word	0x08004f45
 8004f20:	08004f3d 	.word	0x08004f3d
 8004f24:	2300      	movs	r3, #0
 8004f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2a:	e0d8      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f32:	e0d4      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f34:	2304      	movs	r3, #4
 8004f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f3a:	e0d0      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f3c:	2308      	movs	r3, #8
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e0cc      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f44:	2310      	movs	r3, #16
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e0c8      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a5e      	ldr	r2, [pc, #376]	@ (80050cc <UART_SetConfig+0x2d4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d125      	bne.n	8004fa2 <UART_SetConfig+0x1aa>
 8004f56:	4b5b      	ldr	r3, [pc, #364]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f60:	2b30      	cmp	r3, #48	@ 0x30
 8004f62:	d016      	beq.n	8004f92 <UART_SetConfig+0x19a>
 8004f64:	2b30      	cmp	r3, #48	@ 0x30
 8004f66:	d818      	bhi.n	8004f9a <UART_SetConfig+0x1a2>
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d00a      	beq.n	8004f82 <UART_SetConfig+0x18a>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d814      	bhi.n	8004f9a <UART_SetConfig+0x1a2>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <UART_SetConfig+0x182>
 8004f74:	2b10      	cmp	r3, #16
 8004f76:	d008      	beq.n	8004f8a <UART_SetConfig+0x192>
 8004f78:	e00f      	b.n	8004f9a <UART_SetConfig+0x1a2>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f80:	e0ad      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f82:	2302      	movs	r3, #2
 8004f84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f88:	e0a9      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f8a:	2304      	movs	r3, #4
 8004f8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f90:	e0a5      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f92:	2308      	movs	r3, #8
 8004f94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f98:	e0a1      	b.n	80050de <UART_SetConfig+0x2e6>
 8004f9a:	2310      	movs	r3, #16
 8004f9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa0:	e09d      	b.n	80050de <UART_SetConfig+0x2e6>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80050d0 <UART_SetConfig+0x2d8>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d125      	bne.n	8004ff8 <UART_SetConfig+0x200>
 8004fac:	4b45      	ldr	r3, [pc, #276]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fb6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb8:	d016      	beq.n	8004fe8 <UART_SetConfig+0x1f0>
 8004fba:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fbc:	d818      	bhi.n	8004ff0 <UART_SetConfig+0x1f8>
 8004fbe:	2b80      	cmp	r3, #128	@ 0x80
 8004fc0:	d00a      	beq.n	8004fd8 <UART_SetConfig+0x1e0>
 8004fc2:	2b80      	cmp	r3, #128	@ 0x80
 8004fc4:	d814      	bhi.n	8004ff0 <UART_SetConfig+0x1f8>
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <UART_SetConfig+0x1d8>
 8004fca:	2b40      	cmp	r3, #64	@ 0x40
 8004fcc:	d008      	beq.n	8004fe0 <UART_SetConfig+0x1e8>
 8004fce:	e00f      	b.n	8004ff0 <UART_SetConfig+0x1f8>
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd6:	e082      	b.n	80050de <UART_SetConfig+0x2e6>
 8004fd8:	2302      	movs	r3, #2
 8004fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fde:	e07e      	b.n	80050de <UART_SetConfig+0x2e6>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe6:	e07a      	b.n	80050de <UART_SetConfig+0x2e6>
 8004fe8:	2308      	movs	r3, #8
 8004fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fee:	e076      	b.n	80050de <UART_SetConfig+0x2e6>
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ff6:	e072      	b.n	80050de <UART_SetConfig+0x2e6>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a35      	ldr	r2, [pc, #212]	@ (80050d4 <UART_SetConfig+0x2dc>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d12a      	bne.n	8005058 <UART_SetConfig+0x260>
 8005002:	4b30      	ldr	r3, [pc, #192]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8005004:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005008:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800500c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005010:	d01a      	beq.n	8005048 <UART_SetConfig+0x250>
 8005012:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005016:	d81b      	bhi.n	8005050 <UART_SetConfig+0x258>
 8005018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800501c:	d00c      	beq.n	8005038 <UART_SetConfig+0x240>
 800501e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005022:	d815      	bhi.n	8005050 <UART_SetConfig+0x258>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x238>
 8005028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502c:	d008      	beq.n	8005040 <UART_SetConfig+0x248>
 800502e:	e00f      	b.n	8005050 <UART_SetConfig+0x258>
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005036:	e052      	b.n	80050de <UART_SetConfig+0x2e6>
 8005038:	2302      	movs	r3, #2
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503e:	e04e      	b.n	80050de <UART_SetConfig+0x2e6>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005046:	e04a      	b.n	80050de <UART_SetConfig+0x2e6>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800504e:	e046      	b.n	80050de <UART_SetConfig+0x2e6>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005056:	e042      	b.n	80050de <UART_SetConfig+0x2e6>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <UART_SetConfig+0x2c4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d13a      	bne.n	80050d8 <UART_SetConfig+0x2e0>
 8005062:	4b18      	ldr	r3, [pc, #96]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005068:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800506c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005070:	d01a      	beq.n	80050a8 <UART_SetConfig+0x2b0>
 8005072:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005076:	d81b      	bhi.n	80050b0 <UART_SetConfig+0x2b8>
 8005078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507c:	d00c      	beq.n	8005098 <UART_SetConfig+0x2a0>
 800507e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005082:	d815      	bhi.n	80050b0 <UART_SetConfig+0x2b8>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <UART_SetConfig+0x298>
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508c:	d008      	beq.n	80050a0 <UART_SetConfig+0x2a8>
 800508e:	e00f      	b.n	80050b0 <UART_SetConfig+0x2b8>
 8005090:	2300      	movs	r3, #0
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e022      	b.n	80050de <UART_SetConfig+0x2e6>
 8005098:	2302      	movs	r3, #2
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e01e      	b.n	80050de <UART_SetConfig+0x2e6>
 80050a0:	2304      	movs	r3, #4
 80050a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050a6:	e01a      	b.n	80050de <UART_SetConfig+0x2e6>
 80050a8:	2308      	movs	r3, #8
 80050aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ae:	e016      	b.n	80050de <UART_SetConfig+0x2e6>
 80050b0:	2310      	movs	r3, #16
 80050b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050b6:	e012      	b.n	80050de <UART_SetConfig+0x2e6>
 80050b8:	efff69f3 	.word	0xefff69f3
 80050bc:	40008000 	.word	0x40008000
 80050c0:	40013800 	.word	0x40013800
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40004400 	.word	0x40004400
 80050cc:	40004800 	.word	0x40004800
 80050d0:	40004c00 	.word	0x40004c00
 80050d4:	40005000 	.word	0x40005000
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a9f      	ldr	r2, [pc, #636]	@ (8005360 <UART_SetConfig+0x568>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d17a      	bne.n	80051de <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d824      	bhi.n	800513a <UART_SetConfig+0x342>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <UART_SetConfig+0x300>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	0800513b 	.word	0x0800513b
 8005100:	08005125 	.word	0x08005125
 8005104:	0800513b 	.word	0x0800513b
 8005108:	0800512b 	.word	0x0800512b
 800510c:	0800513b 	.word	0x0800513b
 8005110:	0800513b 	.word	0x0800513b
 8005114:	0800513b 	.word	0x0800513b
 8005118:	08005133 	.word	0x08005133
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800511c:	f7fd fca2 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8005120:	61f8      	str	r0, [r7, #28]
        break;
 8005122:	e010      	b.n	8005146 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005124:	4b8f      	ldr	r3, [pc, #572]	@ (8005364 <UART_SetConfig+0x56c>)
 8005126:	61fb      	str	r3, [r7, #28]
        break;
 8005128:	e00d      	b.n	8005146 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800512a:	f7fd fc03 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 800512e:	61f8      	str	r0, [r7, #28]
        break;
 8005130:	e009      	b.n	8005146 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005132:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005136:	61fb      	str	r3, [r7, #28]
        break;
 8005138:	e005      	b.n	8005146 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005144:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80fb 	beq.w	8005344 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	005b      	lsls	r3, r3, #1
 8005156:	4413      	add	r3, r2
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	429a      	cmp	r2, r3
 800515c:	d305      	bcc.n	800516a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	429a      	cmp	r2, r3
 8005168:	d903      	bls.n	8005172 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005170:	e0e8      	b.n	8005344 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2200      	movs	r2, #0
 8005176:	461c      	mov	r4, r3
 8005178:	4615      	mov	r5, r2
 800517a:	f04f 0200 	mov.w	r2, #0
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	022b      	lsls	r3, r5, #8
 8005184:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005188:	0222      	lsls	r2, r4, #8
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	6849      	ldr	r1, [r1, #4]
 800518e:	0849      	lsrs	r1, r1, #1
 8005190:	2000      	movs	r0, #0
 8005192:	4688      	mov	r8, r1
 8005194:	4681      	mov	r9, r0
 8005196:	eb12 0a08 	adds.w	sl, r2, r8
 800519a:	eb43 0b09 	adc.w	fp, r3, r9
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	603b      	str	r3, [r7, #0]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ac:	4650      	mov	r0, sl
 80051ae:	4659      	mov	r1, fp
 80051b0:	f7fb f866 	bl	8000280 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4613      	mov	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051c2:	d308      	bcc.n	80051d6 <UART_SetConfig+0x3de>
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ca:	d204      	bcs.n	80051d6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	69ba      	ldr	r2, [r7, #24]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	e0b6      	b.n	8005344 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051dc:	e0b2      	b.n	8005344 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e6:	d15e      	bne.n	80052a6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80051e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d828      	bhi.n	8005242 <UART_SetConfig+0x44a>
 80051f0:	a201      	add	r2, pc, #4	@ (adr r2, 80051f8 <UART_SetConfig+0x400>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005225 	.word	0x08005225
 8005200:	0800522d 	.word	0x0800522d
 8005204:	08005243 	.word	0x08005243
 8005208:	08005233 	.word	0x08005233
 800520c:	08005243 	.word	0x08005243
 8005210:	08005243 	.word	0x08005243
 8005214:	08005243 	.word	0x08005243
 8005218:	0800523b 	.word	0x0800523b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7fd fc22 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 8005220:	61f8      	str	r0, [r7, #28]
        break;
 8005222:	e014      	b.n	800524e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005224:	f7fd fc34 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 8005228:	61f8      	str	r0, [r7, #28]
        break;
 800522a:	e010      	b.n	800524e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800522c:	4b4d      	ldr	r3, [pc, #308]	@ (8005364 <UART_SetConfig+0x56c>)
 800522e:	61fb      	str	r3, [r7, #28]
        break;
 8005230:	e00d      	b.n	800524e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005232:	f7fd fb7f 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 8005236:	61f8      	str	r0, [r7, #28]
        break;
 8005238:	e009      	b.n	800524e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800523e:	61fb      	str	r3, [r7, #28]
        break;
 8005240:	e005      	b.n	800524e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800524c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d077      	beq.n	8005344 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	005a      	lsls	r2, r3, #1
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	441a      	add	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b0f      	cmp	r3, #15
 800526e:	d916      	bls.n	800529e <UART_SetConfig+0x4a6>
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005276:	d212      	bcs.n	800529e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f023 030f 	bic.w	r3, r3, #15
 8005280:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	085b      	lsrs	r3, r3, #1
 8005286:	b29b      	uxth	r3, r3
 8005288:	f003 0307 	and.w	r3, r3, #7
 800528c:	b29a      	uxth	r2, r3
 800528e:	8afb      	ldrh	r3, [r7, #22]
 8005290:	4313      	orrs	r3, r2
 8005292:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	8afa      	ldrh	r2, [r7, #22]
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e052      	b.n	8005344 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052a4:	e04e      	b.n	8005344 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d827      	bhi.n	80052fe <UART_SetConfig+0x506>
 80052ae:	a201      	add	r2, pc, #4	@ (adr r2, 80052b4 <UART_SetConfig+0x4bc>)
 80052b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b4:	080052d9 	.word	0x080052d9
 80052b8:	080052e1 	.word	0x080052e1
 80052bc:	080052e9 	.word	0x080052e9
 80052c0:	080052ff 	.word	0x080052ff
 80052c4:	080052ef 	.word	0x080052ef
 80052c8:	080052ff 	.word	0x080052ff
 80052cc:	080052ff 	.word	0x080052ff
 80052d0:	080052ff 	.word	0x080052ff
 80052d4:	080052f7 	.word	0x080052f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052d8:	f7fd fbc4 	bl	8002a64 <HAL_RCC_GetPCLK1Freq>
 80052dc:	61f8      	str	r0, [r7, #28]
        break;
 80052de:	e014      	b.n	800530a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052e0:	f7fd fbd6 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
 80052e4:	61f8      	str	r0, [r7, #28]
        break;
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005364 <UART_SetConfig+0x56c>)
 80052ea:	61fb      	str	r3, [r7, #28]
        break;
 80052ec:	e00d      	b.n	800530a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ee:	f7fd fb21 	bl	8002934 <HAL_RCC_GetSysClockFreq>
 80052f2:	61f8      	str	r0, [r7, #28]
        break;
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052fa:	61fb      	str	r3, [r7, #28]
        break;
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005308:	bf00      	nop
    }

    if (pclk != 0U)
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d019      	beq.n	8005344 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	085a      	lsrs	r2, r3, #1
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	441a      	add	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005322:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b0f      	cmp	r3, #15
 8005328:	d909      	bls.n	800533e <UART_SetConfig+0x546>
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005330:	d205      	bcs.n	800533e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	60da      	str	r2, [r3, #12]
 800533c:	e002      	b.n	8005344 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005350:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005354:	4618      	mov	r0, r3
 8005356:	3728      	adds	r7, #40	@ 0x28
 8005358:	46bd      	mov	sp, r7
 800535a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800535e:	bf00      	nop
 8005360:	40008000 	.word	0x40008000
 8005364:	00f42400 	.word	0x00f42400

08005368 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	430a      	orrs	r2, r1
 800543a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d01a      	beq.n	800547e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005462:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005466:	d10a      	bne.n	800547e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b098      	sub	sp, #96	@ 0x60
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054bc:	f7fc f9b4 	bl	8001828 <HAL_GetTick>
 80054c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d12e      	bne.n	800552e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d8:	2200      	movs	r2, #0
 80054da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f88c 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d021      	beq.n	800552e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f2:	e853 3f00 	ldrex	r3, [r3]
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	461a      	mov	r2, r3
 8005506:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005508:	647b      	str	r3, [r7, #68]	@ 0x44
 800550a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800550e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005510:	e841 2300 	strex	r3, r2, [r1]
 8005514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1e6      	bne.n	80054ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e062      	b.n	80055f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b04      	cmp	r3, #4
 800553a:	d149      	bne.n	80055d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800553c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005544:	2200      	movs	r2, #0
 8005546:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f856 	bl	80055fc <UART_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d03c      	beq.n	80055d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	623b      	str	r3, [r7, #32]
   return(result);
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	633b      	str	r3, [r7, #48]	@ 0x30
 8005576:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800557a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e6      	bne.n	8005556 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	60fb      	str	r3, [r7, #12]
   return(result);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055a8:	61fa      	str	r2, [r7, #28]
 80055aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	69b9      	ldr	r1, [r7, #24]
 80055ae:	69fa      	ldr	r2, [r7, #28]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	617b      	str	r3, [r7, #20]
   return(result);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e011      	b.n	80055f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2220      	movs	r2, #32
 80055d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3758      	adds	r7, #88	@ 0x58
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	60b9      	str	r1, [r7, #8]
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800560c:	e049      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005614:	d045      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005616:	f7fc f907 	bl	8001828 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	429a      	cmp	r2, r3
 8005624:	d302      	bcc.n	800562c <UART_WaitOnFlagUntilTimeout+0x30>
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e048      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0304 	and.w	r3, r3, #4
 800563a:	2b00      	cmp	r3, #0
 800563c:	d031      	beq.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 0308 	and.w	r3, r3, #8
 8005648:	2b08      	cmp	r3, #8
 800564a:	d110      	bne.n	800566e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f8ff 	bl	8005858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2208      	movs	r2, #8
 800565e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e029      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005678:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800567c:	d111      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005686:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f000 f8e5 	bl	8005858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e00f      	b.n	80056c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4013      	ands	r3, r2
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	bf0c      	ite	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	2300      	movne	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	79fb      	ldrb	r3, [r7, #7]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d0a6      	beq.n	800560e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b097      	sub	sp, #92	@ 0x5c
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	4613      	mov	r3, r2
 80056d8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	88fa      	ldrh	r2, [r7, #6]
 80056e4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056fe:	d10e      	bne.n	800571e <UART_Start_Receive_IT+0x52>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <UART_Start_Receive_IT+0x48>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800570e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005712:	e02d      	b.n	8005770 <UART_Start_Receive_IT+0xa4>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	22ff      	movs	r2, #255	@ 0xff
 8005718:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800571c:	e028      	b.n	8005770 <UART_Start_Receive_IT+0xa4>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10d      	bne.n	8005742 <UART_Start_Receive_IT+0x76>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d104      	bne.n	8005738 <UART_Start_Receive_IT+0x6c>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22ff      	movs	r2, #255	@ 0xff
 8005732:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005736:	e01b      	b.n	8005770 <UART_Start_Receive_IT+0xa4>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	227f      	movs	r2, #127	@ 0x7f
 800573c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005740:	e016      	b.n	8005770 <UART_Start_Receive_IT+0xa4>
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800574a:	d10d      	bne.n	8005768 <UART_Start_Receive_IT+0x9c>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d104      	bne.n	800575e <UART_Start_Receive_IT+0x92>
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	227f      	movs	r2, #127	@ 0x7f
 8005758:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800575c:	e008      	b.n	8005770 <UART_Start_Receive_IT+0xa4>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	223f      	movs	r2, #63	@ 0x3f
 8005762:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005766:	e003      	b.n	8005770 <UART_Start_Receive_IT+0xa4>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2200      	movs	r2, #0
 800576c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2222      	movs	r2, #34	@ 0x22
 800577c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3308      	adds	r3, #8
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	657b      	str	r3, [r7, #84]	@ 0x54
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80057a0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80057a2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80057ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e5      	bne.n	8005780 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d107      	bne.n	80057ce <UART_Start_Receive_IT+0x102>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d103      	bne.n	80057ce <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a21      	ldr	r2, [pc, #132]	@ (8005850 <UART_Start_Receive_IT+0x184>)
 80057ca:	669a      	str	r2, [r3, #104]	@ 0x68
 80057cc:	e002      	b.n	80057d4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a20      	ldr	r2, [pc, #128]	@ (8005854 <UART_Start_Receive_IT+0x188>)
 80057d2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d019      	beq.n	8005810 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ec:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80057f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80057fc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005800:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005802:	e841 2300 	strex	r3, r2, [r1]
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1e6      	bne.n	80057dc <UART_Start_Receive_IT+0x110>
 800580e:	e018      	b.n	8005842 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	e853 3f00 	ldrex	r3, [r3]
 800581c:	613b      	str	r3, [r7, #16]
   return(result);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f043 0320 	orr.w	r3, r3, #32
 8005824:	653b      	str	r3, [r7, #80]	@ 0x50
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005832:	69f9      	ldr	r1, [r7, #28]
 8005834:	6a3a      	ldr	r2, [r7, #32]
 8005836:	e841 2300 	strex	r3, r2, [r1]
 800583a:	61bb      	str	r3, [r7, #24]
   return(result);
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1e6      	bne.n	8005810 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	375c      	adds	r7, #92	@ 0x5c
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr
 8005850:	08005b5d 	.word	0x08005b5d
 8005854:	080059a1 	.word	0x080059a1

08005858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b095      	sub	sp, #84	@ 0x54
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800586e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800587e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005880:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005884:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e6      	bne.n	8005860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ba:	e841 2300 	strex	r3, r2, [r1]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1e5      	bne.n	8005892 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d118      	bne.n	8005900 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	60bb      	str	r3, [r7, #8]
   return(result);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f023 0310 	bic.w	r3, r3, #16
 80058e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058ec:	61bb      	str	r3, [r7, #24]
 80058ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6979      	ldr	r1, [r7, #20]
 80058f2:	69ba      	ldr	r2, [r7, #24]
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	613b      	str	r3, [r7, #16]
   return(result);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e6      	bne.n	80058ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2220      	movs	r2, #32
 8005904:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005914:	bf00      	nop
 8005916:	3754      	adds	r7, #84	@ 0x54
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b084      	sub	sp, #16
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff fa44 	bl	8004dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	60bb      	str	r3, [r7, #8]
   return(result);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005968:	61fb      	str	r3, [r7, #28]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	61bb      	str	r3, [r7, #24]
 8005974:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	613b      	str	r3, [r7, #16]
   return(result);
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e6      	bne.n	8005954 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2220      	movs	r2, #32
 800598a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fa10 	bl	8004db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005998:	bf00      	nop
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b09c      	sub	sp, #112	@ 0x70
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059ae:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059b8:	2b22      	cmp	r3, #34	@ 0x22
 80059ba:	f040 80be 	bne.w	8005b3a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80059c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80059cc:	b2d9      	uxtb	r1, r3
 80059ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80059d2:	b2da      	uxtb	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	400a      	ands	r2, r1
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 80a3 	bne.w	8005b4e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a10:	e853 3f00 	ldrex	r3, [r3]
 8005a14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a2e:	e841 2300 	strex	r3, r2, [r1]
 8005a32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1e6      	bne.n	8005a08 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3308      	adds	r3, #8
 8005a40:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a4c:	f023 0301 	bic.w	r3, r3, #1
 8005a50:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005a5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005a5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a34      	ldr	r2, [pc, #208]	@ (8005b58 <UART_RxISR_8BIT+0x1b8>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d01f      	beq.n	8005acc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	e853 3f00 	ldrex	r3, [r3]
 8005aa6:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005aae:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005abe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ac0:	e841 2300 	strex	r3, r2, [r1]
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e6      	bne.n	8005a9a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d12e      	bne.n	8005b32 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0310 	bic.w	r3, r3, #16
 8005aee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	461a      	mov	r2, r3
 8005af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	69b9      	ldr	r1, [r7, #24]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	617b      	str	r3, [r7, #20]
   return(result);
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e6      	bne.n	8005ada <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b10      	cmp	r3, #16
 8005b18:	d103      	bne.n	8005b22 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2210      	movs	r2, #16
 8005b20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7ff f958 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b30:	e00d      	b.n	8005b4e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7fb fa36 	bl	8000fa4 <HAL_UART_RxCpltCallback>
}
 8005b38:	e009      	b.n	8005b4e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	8b1b      	ldrh	r3, [r3, #24]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0208 	orr.w	r2, r2, #8
 8005b4a:	b292      	uxth	r2, r2
 8005b4c:	831a      	strh	r2, [r3, #24]
}
 8005b4e:	bf00      	nop
 8005b50:	3770      	adds	r7, #112	@ 0x70
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40008000 	.word	0x40008000

08005b5c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b09c      	sub	sp, #112	@ 0x70
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b6a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b74:	2b22      	cmp	r3, #34	@ 0x22
 8005b76:	f040 80be 	bne.w	8005cf6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005b80:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005b8a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8005b8e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005b92:	4013      	ands	r3, r2
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b98:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	3b01      	subs	r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f040 80a3 	bne.w	8005d0a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005be4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005be8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005bf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005c16:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a34      	ldr	r2, [pc, #208]	@ (8005d14 <UART_RxISR_16BIT+0x1b8>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d01f      	beq.n	8005c88 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d018      	beq.n	8005c88 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c76:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e6      	bne.n	8005c56 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d12e      	bne.n	8005cee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	e853 3f00 	ldrex	r3, [r3]
 8005ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f023 0310 	bic.w	r3, r3, #16
 8005caa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cb4:	61bb      	str	r3, [r7, #24]
 8005cb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb8:	6979      	ldr	r1, [r7, #20]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	e841 2300 	strex	r3, r2, [r1]
 8005cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d1e6      	bne.n	8005c96 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b10      	cmp	r3, #16
 8005cd4:	d103      	bne.n	8005cde <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2210      	movs	r2, #16
 8005cdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff f87a 	bl	8004de0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cec:	e00d      	b.n	8005d0a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fb f958 	bl	8000fa4 <HAL_UART_RxCpltCallback>
}
 8005cf4:	e009      	b.n	8005d0a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	8b1b      	ldrh	r3, [r3, #24]
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0208 	orr.w	r2, r2, #8
 8005d06:	b292      	uxth	r2, r2
 8005d08:	831a      	strh	r2, [r3, #24]
}
 8005d0a:	bf00      	nop
 8005d0c:	3770      	adds	r7, #112	@ 0x70
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40008000 	.word	0x40008000

08005d18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <std>:
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	b510      	push	{r4, lr}
 8005d30:	4604      	mov	r4, r0
 8005d32:	e9c0 3300 	strd	r3, r3, [r0]
 8005d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d3a:	6083      	str	r3, [r0, #8]
 8005d3c:	8181      	strh	r1, [r0, #12]
 8005d3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d40:	81c2      	strh	r2, [r0, #14]
 8005d42:	6183      	str	r3, [r0, #24]
 8005d44:	4619      	mov	r1, r3
 8005d46:	2208      	movs	r2, #8
 8005d48:	305c      	adds	r0, #92	@ 0x5c
 8005d4a:	f000 fa45 	bl	80061d8 <memset>
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d84 <std+0x58>)
 8005d50:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d52:	4b0d      	ldr	r3, [pc, #52]	@ (8005d88 <std+0x5c>)
 8005d54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d56:	4b0d      	ldr	r3, [pc, #52]	@ (8005d8c <std+0x60>)
 8005d58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d90 <std+0x64>)
 8005d5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <std+0x68>)
 8005d60:	6224      	str	r4, [r4, #32]
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d006      	beq.n	8005d74 <std+0x48>
 8005d66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d6a:	4294      	cmp	r4, r2
 8005d6c:	d002      	beq.n	8005d74 <std+0x48>
 8005d6e:	33d0      	adds	r3, #208	@ 0xd0
 8005d70:	429c      	cmp	r4, r3
 8005d72:	d105      	bne.n	8005d80 <std+0x54>
 8005d74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7c:	f000 baa4 	b.w	80062c8 <__retarget_lock_init_recursive>
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	08006025 	.word	0x08006025
 8005d88:	0800604b 	.word	0x0800604b
 8005d8c:	08006083 	.word	0x08006083
 8005d90:	080060a7 	.word	0x080060a7
 8005d94:	2000033c 	.word	0x2000033c

08005d98 <stdio_exit_handler>:
 8005d98:	4a02      	ldr	r2, [pc, #8]	@ (8005da4 <stdio_exit_handler+0xc>)
 8005d9a:	4903      	ldr	r1, [pc, #12]	@ (8005da8 <stdio_exit_handler+0x10>)
 8005d9c:	4803      	ldr	r0, [pc, #12]	@ (8005dac <stdio_exit_handler+0x14>)
 8005d9e:	f000 b869 	b.w	8005e74 <_fwalk_sglue>
 8005da2:	bf00      	nop
 8005da4:	2000002c 	.word	0x2000002c
 8005da8:	0800744d 	.word	0x0800744d
 8005dac:	2000003c 	.word	0x2000003c

08005db0 <cleanup_stdio>:
 8005db0:	6841      	ldr	r1, [r0, #4]
 8005db2:	4b0c      	ldr	r3, [pc, #48]	@ (8005de4 <cleanup_stdio+0x34>)
 8005db4:	4299      	cmp	r1, r3
 8005db6:	b510      	push	{r4, lr}
 8005db8:	4604      	mov	r4, r0
 8005dba:	d001      	beq.n	8005dc0 <cleanup_stdio+0x10>
 8005dbc:	f001 fb46 	bl	800744c <_fflush_r>
 8005dc0:	68a1      	ldr	r1, [r4, #8]
 8005dc2:	4b09      	ldr	r3, [pc, #36]	@ (8005de8 <cleanup_stdio+0x38>)
 8005dc4:	4299      	cmp	r1, r3
 8005dc6:	d002      	beq.n	8005dce <cleanup_stdio+0x1e>
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f001 fb3f 	bl	800744c <_fflush_r>
 8005dce:	68e1      	ldr	r1, [r4, #12]
 8005dd0:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <cleanup_stdio+0x3c>)
 8005dd2:	4299      	cmp	r1, r3
 8005dd4:	d004      	beq.n	8005de0 <cleanup_stdio+0x30>
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ddc:	f001 bb36 	b.w	800744c <_fflush_r>
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	bf00      	nop
 8005de4:	2000033c 	.word	0x2000033c
 8005de8:	200003a4 	.word	0x200003a4
 8005dec:	2000040c 	.word	0x2000040c

08005df0 <global_stdio_init.part.0>:
 8005df0:	b510      	push	{r4, lr}
 8005df2:	4b0b      	ldr	r3, [pc, #44]	@ (8005e20 <global_stdio_init.part.0+0x30>)
 8005df4:	4c0b      	ldr	r4, [pc, #44]	@ (8005e24 <global_stdio_init.part.0+0x34>)
 8005df6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e28 <global_stdio_init.part.0+0x38>)
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2104      	movs	r1, #4
 8005e00:	f7ff ff94 	bl	8005d2c <std>
 8005e04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005e08:	2201      	movs	r2, #1
 8005e0a:	2109      	movs	r1, #9
 8005e0c:	f7ff ff8e 	bl	8005d2c <std>
 8005e10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005e14:	2202      	movs	r2, #2
 8005e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e1a:	2112      	movs	r1, #18
 8005e1c:	f7ff bf86 	b.w	8005d2c <std>
 8005e20:	20000474 	.word	0x20000474
 8005e24:	2000033c 	.word	0x2000033c
 8005e28:	08005d99 	.word	0x08005d99

08005e2c <__sfp_lock_acquire>:
 8005e2c:	4801      	ldr	r0, [pc, #4]	@ (8005e34 <__sfp_lock_acquire+0x8>)
 8005e2e:	f000 ba4c 	b.w	80062ca <__retarget_lock_acquire_recursive>
 8005e32:	bf00      	nop
 8005e34:	2000047d 	.word	0x2000047d

08005e38 <__sfp_lock_release>:
 8005e38:	4801      	ldr	r0, [pc, #4]	@ (8005e40 <__sfp_lock_release+0x8>)
 8005e3a:	f000 ba47 	b.w	80062cc <__retarget_lock_release_recursive>
 8005e3e:	bf00      	nop
 8005e40:	2000047d 	.word	0x2000047d

08005e44 <__sinit>:
 8005e44:	b510      	push	{r4, lr}
 8005e46:	4604      	mov	r4, r0
 8005e48:	f7ff fff0 	bl	8005e2c <__sfp_lock_acquire>
 8005e4c:	6a23      	ldr	r3, [r4, #32]
 8005e4e:	b11b      	cbz	r3, 8005e58 <__sinit+0x14>
 8005e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e54:	f7ff bff0 	b.w	8005e38 <__sfp_lock_release>
 8005e58:	4b04      	ldr	r3, [pc, #16]	@ (8005e6c <__sinit+0x28>)
 8005e5a:	6223      	str	r3, [r4, #32]
 8005e5c:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <__sinit+0x2c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f5      	bne.n	8005e50 <__sinit+0xc>
 8005e64:	f7ff ffc4 	bl	8005df0 <global_stdio_init.part.0>
 8005e68:	e7f2      	b.n	8005e50 <__sinit+0xc>
 8005e6a:	bf00      	nop
 8005e6c:	08005db1 	.word	0x08005db1
 8005e70:	20000474 	.word	0x20000474

08005e74 <_fwalk_sglue>:
 8005e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e78:	4607      	mov	r7, r0
 8005e7a:	4688      	mov	r8, r1
 8005e7c:	4614      	mov	r4, r2
 8005e7e:	2600      	movs	r6, #0
 8005e80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e84:	f1b9 0901 	subs.w	r9, r9, #1
 8005e88:	d505      	bpl.n	8005e96 <_fwalk_sglue+0x22>
 8005e8a:	6824      	ldr	r4, [r4, #0]
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d1f7      	bne.n	8005e80 <_fwalk_sglue+0xc>
 8005e90:	4630      	mov	r0, r6
 8005e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e96:	89ab      	ldrh	r3, [r5, #12]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d907      	bls.n	8005eac <_fwalk_sglue+0x38>
 8005e9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	d003      	beq.n	8005eac <_fwalk_sglue+0x38>
 8005ea4:	4629      	mov	r1, r5
 8005ea6:	4638      	mov	r0, r7
 8005ea8:	47c0      	blx	r8
 8005eaa:	4306      	orrs	r6, r0
 8005eac:	3568      	adds	r5, #104	@ 0x68
 8005eae:	e7e9      	b.n	8005e84 <_fwalk_sglue+0x10>

08005eb0 <iprintf>:
 8005eb0:	b40f      	push	{r0, r1, r2, r3}
 8005eb2:	b507      	push	{r0, r1, r2, lr}
 8005eb4:	4906      	ldr	r1, [pc, #24]	@ (8005ed0 <iprintf+0x20>)
 8005eb6:	ab04      	add	r3, sp, #16
 8005eb8:	6808      	ldr	r0, [r1, #0]
 8005eba:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ebe:	6881      	ldr	r1, [r0, #8]
 8005ec0:	9301      	str	r3, [sp, #4]
 8005ec2:	f000 fe4b 	bl	8006b5c <_vfiprintf_r>
 8005ec6:	b003      	add	sp, #12
 8005ec8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ecc:	b004      	add	sp, #16
 8005ece:	4770      	bx	lr
 8005ed0:	20000038 	.word	0x20000038

08005ed4 <_puts_r>:
 8005ed4:	6a03      	ldr	r3, [r0, #32]
 8005ed6:	b570      	push	{r4, r5, r6, lr}
 8005ed8:	6884      	ldr	r4, [r0, #8]
 8005eda:	4605      	mov	r5, r0
 8005edc:	460e      	mov	r6, r1
 8005ede:	b90b      	cbnz	r3, 8005ee4 <_puts_r+0x10>
 8005ee0:	f7ff ffb0 	bl	8005e44 <__sinit>
 8005ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ee6:	07db      	lsls	r3, r3, #31
 8005ee8:	d405      	bmi.n	8005ef6 <_puts_r+0x22>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	0598      	lsls	r0, r3, #22
 8005eee:	d402      	bmi.n	8005ef6 <_puts_r+0x22>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef2:	f000 f9ea 	bl	80062ca <__retarget_lock_acquire_recursive>
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	0719      	lsls	r1, r3, #28
 8005efa:	d502      	bpl.n	8005f02 <_puts_r+0x2e>
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d135      	bne.n	8005f6e <_puts_r+0x9a>
 8005f02:	4621      	mov	r1, r4
 8005f04:	4628      	mov	r0, r5
 8005f06:	f000 f911 	bl	800612c <__swsetup_r>
 8005f0a:	b380      	cbz	r0, 8005f6e <_puts_r+0x9a>
 8005f0c:	f04f 35ff 	mov.w	r5, #4294967295
 8005f10:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f12:	07da      	lsls	r2, r3, #31
 8005f14:	d405      	bmi.n	8005f22 <_puts_r+0x4e>
 8005f16:	89a3      	ldrh	r3, [r4, #12]
 8005f18:	059b      	lsls	r3, r3, #22
 8005f1a:	d402      	bmi.n	8005f22 <_puts_r+0x4e>
 8005f1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f1e:	f000 f9d5 	bl	80062cc <__retarget_lock_release_recursive>
 8005f22:	4628      	mov	r0, r5
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	da04      	bge.n	8005f34 <_puts_r+0x60>
 8005f2a:	69a2      	ldr	r2, [r4, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	dc17      	bgt.n	8005f60 <_puts_r+0x8c>
 8005f30:	290a      	cmp	r1, #10
 8005f32:	d015      	beq.n	8005f60 <_puts_r+0x8c>
 8005f34:	6823      	ldr	r3, [r4, #0]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	6022      	str	r2, [r4, #0]
 8005f3a:	7019      	strb	r1, [r3, #0]
 8005f3c:	68a3      	ldr	r3, [r4, #8]
 8005f3e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f42:	3b01      	subs	r3, #1
 8005f44:	60a3      	str	r3, [r4, #8]
 8005f46:	2900      	cmp	r1, #0
 8005f48:	d1ed      	bne.n	8005f26 <_puts_r+0x52>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	da11      	bge.n	8005f72 <_puts_r+0x9e>
 8005f4e:	4622      	mov	r2, r4
 8005f50:	210a      	movs	r1, #10
 8005f52:	4628      	mov	r0, r5
 8005f54:	f000 f8ab 	bl	80060ae <__swbuf_r>
 8005f58:	3001      	adds	r0, #1
 8005f5a:	d0d7      	beq.n	8005f0c <_puts_r+0x38>
 8005f5c:	250a      	movs	r5, #10
 8005f5e:	e7d7      	b.n	8005f10 <_puts_r+0x3c>
 8005f60:	4622      	mov	r2, r4
 8005f62:	4628      	mov	r0, r5
 8005f64:	f000 f8a3 	bl	80060ae <__swbuf_r>
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d1e7      	bne.n	8005f3c <_puts_r+0x68>
 8005f6c:	e7ce      	b.n	8005f0c <_puts_r+0x38>
 8005f6e:	3e01      	subs	r6, #1
 8005f70:	e7e4      	b.n	8005f3c <_puts_r+0x68>
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	6022      	str	r2, [r4, #0]
 8005f78:	220a      	movs	r2, #10
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	e7ee      	b.n	8005f5c <_puts_r+0x88>
	...

08005f80 <puts>:
 8005f80:	4b02      	ldr	r3, [pc, #8]	@ (8005f8c <puts+0xc>)
 8005f82:	4601      	mov	r1, r0
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	f7ff bfa5 	b.w	8005ed4 <_puts_r>
 8005f8a:	bf00      	nop
 8005f8c:	20000038 	.word	0x20000038

08005f90 <siprintf>:
 8005f90:	b40e      	push	{r1, r2, r3}
 8005f92:	b500      	push	{lr}
 8005f94:	b09c      	sub	sp, #112	@ 0x70
 8005f96:	ab1d      	add	r3, sp, #116	@ 0x74
 8005f98:	9002      	str	r0, [sp, #8]
 8005f9a:	9006      	str	r0, [sp, #24]
 8005f9c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005fa0:	4809      	ldr	r0, [pc, #36]	@ (8005fc8 <siprintf+0x38>)
 8005fa2:	9107      	str	r1, [sp, #28]
 8005fa4:	9104      	str	r1, [sp, #16]
 8005fa6:	4909      	ldr	r1, [pc, #36]	@ (8005fcc <siprintf+0x3c>)
 8005fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fac:	9105      	str	r1, [sp, #20]
 8005fae:	6800      	ldr	r0, [r0, #0]
 8005fb0:	9301      	str	r3, [sp, #4]
 8005fb2:	a902      	add	r1, sp, #8
 8005fb4:	f000 fae0 	bl	8006578 <_svfiprintf_r>
 8005fb8:	9b02      	ldr	r3, [sp, #8]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	b01c      	add	sp, #112	@ 0x70
 8005fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc4:	b003      	add	sp, #12
 8005fc6:	4770      	bx	lr
 8005fc8:	20000038 	.word	0x20000038
 8005fcc:	ffff0208 	.word	0xffff0208

08005fd0 <siscanf>:
 8005fd0:	b40e      	push	{r1, r2, r3}
 8005fd2:	b530      	push	{r4, r5, lr}
 8005fd4:	b09c      	sub	sp, #112	@ 0x70
 8005fd6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005fd8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005fdc:	f854 5b04 	ldr.w	r5, [r4], #4
 8005fe0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	9006      	str	r0, [sp, #24]
 8005fe8:	f7fa f8f2 	bl	80001d0 <strlen>
 8005fec:	4b0b      	ldr	r3, [pc, #44]	@ (800601c <siscanf+0x4c>)
 8005fee:	9003      	str	r0, [sp, #12]
 8005ff0:	9007      	str	r0, [sp, #28]
 8005ff2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ff4:	480a      	ldr	r0, [pc, #40]	@ (8006020 <siscanf+0x50>)
 8005ff6:	9401      	str	r4, [sp, #4]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005ffc:	9314      	str	r3, [sp, #80]	@ 0x50
 8005ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006002:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006006:	462a      	mov	r2, r5
 8006008:	4623      	mov	r3, r4
 800600a:	a902      	add	r1, sp, #8
 800600c:	6800      	ldr	r0, [r0, #0]
 800600e:	f000 fc07 	bl	8006820 <__ssvfiscanf_r>
 8006012:	b01c      	add	sp, #112	@ 0x70
 8006014:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006018:	b003      	add	sp, #12
 800601a:	4770      	bx	lr
 800601c:	08006047 	.word	0x08006047
 8006020:	20000038 	.word	0x20000038

08006024 <__sread>:
 8006024:	b510      	push	{r4, lr}
 8006026:	460c      	mov	r4, r1
 8006028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800602c:	f000 f8fe 	bl	800622c <_read_r>
 8006030:	2800      	cmp	r0, #0
 8006032:	bfab      	itete	ge
 8006034:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006036:	89a3      	ldrhlt	r3, [r4, #12]
 8006038:	181b      	addge	r3, r3, r0
 800603a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800603e:	bfac      	ite	ge
 8006040:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006042:	81a3      	strhlt	r3, [r4, #12]
 8006044:	bd10      	pop	{r4, pc}

08006046 <__seofread>:
 8006046:	2000      	movs	r0, #0
 8006048:	4770      	bx	lr

0800604a <__swrite>:
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	461f      	mov	r7, r3
 8006050:	898b      	ldrh	r3, [r1, #12]
 8006052:	05db      	lsls	r3, r3, #23
 8006054:	4605      	mov	r5, r0
 8006056:	460c      	mov	r4, r1
 8006058:	4616      	mov	r6, r2
 800605a:	d505      	bpl.n	8006068 <__swrite+0x1e>
 800605c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006060:	2302      	movs	r3, #2
 8006062:	2200      	movs	r2, #0
 8006064:	f000 f8d0 	bl	8006208 <_lseek_r>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800606e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006072:	81a3      	strh	r3, [r4, #12]
 8006074:	4632      	mov	r2, r6
 8006076:	463b      	mov	r3, r7
 8006078:	4628      	mov	r0, r5
 800607a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800607e:	f000 b8e7 	b.w	8006250 <_write_r>

08006082 <__sseek>:
 8006082:	b510      	push	{r4, lr}
 8006084:	460c      	mov	r4, r1
 8006086:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608a:	f000 f8bd 	bl	8006208 <_lseek_r>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	89a3      	ldrh	r3, [r4, #12]
 8006092:	bf15      	itete	ne
 8006094:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006096:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800609a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800609e:	81a3      	strheq	r3, [r4, #12]
 80060a0:	bf18      	it	ne
 80060a2:	81a3      	strhne	r3, [r4, #12]
 80060a4:	bd10      	pop	{r4, pc}

080060a6 <__sclose>:
 80060a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060aa:	f000 b89d 	b.w	80061e8 <_close_r>

080060ae <__swbuf_r>:
 80060ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b0:	460e      	mov	r6, r1
 80060b2:	4614      	mov	r4, r2
 80060b4:	4605      	mov	r5, r0
 80060b6:	b118      	cbz	r0, 80060c0 <__swbuf_r+0x12>
 80060b8:	6a03      	ldr	r3, [r0, #32]
 80060ba:	b90b      	cbnz	r3, 80060c0 <__swbuf_r+0x12>
 80060bc:	f7ff fec2 	bl	8005e44 <__sinit>
 80060c0:	69a3      	ldr	r3, [r4, #24]
 80060c2:	60a3      	str	r3, [r4, #8]
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	071a      	lsls	r2, r3, #28
 80060c8:	d501      	bpl.n	80060ce <__swbuf_r+0x20>
 80060ca:	6923      	ldr	r3, [r4, #16]
 80060cc:	b943      	cbnz	r3, 80060e0 <__swbuf_r+0x32>
 80060ce:	4621      	mov	r1, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	f000 f82b 	bl	800612c <__swsetup_r>
 80060d6:	b118      	cbz	r0, 80060e0 <__swbuf_r+0x32>
 80060d8:	f04f 37ff 	mov.w	r7, #4294967295
 80060dc:	4638      	mov	r0, r7
 80060de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	6922      	ldr	r2, [r4, #16]
 80060e4:	1a98      	subs	r0, r3, r2
 80060e6:	6963      	ldr	r3, [r4, #20]
 80060e8:	b2f6      	uxtb	r6, r6
 80060ea:	4283      	cmp	r3, r0
 80060ec:	4637      	mov	r7, r6
 80060ee:	dc05      	bgt.n	80060fc <__swbuf_r+0x4e>
 80060f0:	4621      	mov	r1, r4
 80060f2:	4628      	mov	r0, r5
 80060f4:	f001 f9aa 	bl	800744c <_fflush_r>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d1ed      	bne.n	80060d8 <__swbuf_r+0x2a>
 80060fc:	68a3      	ldr	r3, [r4, #8]
 80060fe:	3b01      	subs	r3, #1
 8006100:	60a3      	str	r3, [r4, #8]
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	1c5a      	adds	r2, r3, #1
 8006106:	6022      	str	r2, [r4, #0]
 8006108:	701e      	strb	r6, [r3, #0]
 800610a:	6962      	ldr	r2, [r4, #20]
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	429a      	cmp	r2, r3
 8006110:	d004      	beq.n	800611c <__swbuf_r+0x6e>
 8006112:	89a3      	ldrh	r3, [r4, #12]
 8006114:	07db      	lsls	r3, r3, #31
 8006116:	d5e1      	bpl.n	80060dc <__swbuf_r+0x2e>
 8006118:	2e0a      	cmp	r6, #10
 800611a:	d1df      	bne.n	80060dc <__swbuf_r+0x2e>
 800611c:	4621      	mov	r1, r4
 800611e:	4628      	mov	r0, r5
 8006120:	f001 f994 	bl	800744c <_fflush_r>
 8006124:	2800      	cmp	r0, #0
 8006126:	d0d9      	beq.n	80060dc <__swbuf_r+0x2e>
 8006128:	e7d6      	b.n	80060d8 <__swbuf_r+0x2a>
	...

0800612c <__swsetup_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4b29      	ldr	r3, [pc, #164]	@ (80061d4 <__swsetup_r+0xa8>)
 8006130:	4605      	mov	r5, r0
 8006132:	6818      	ldr	r0, [r3, #0]
 8006134:	460c      	mov	r4, r1
 8006136:	b118      	cbz	r0, 8006140 <__swsetup_r+0x14>
 8006138:	6a03      	ldr	r3, [r0, #32]
 800613a:	b90b      	cbnz	r3, 8006140 <__swsetup_r+0x14>
 800613c:	f7ff fe82 	bl	8005e44 <__sinit>
 8006140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006144:	0719      	lsls	r1, r3, #28
 8006146:	d422      	bmi.n	800618e <__swsetup_r+0x62>
 8006148:	06da      	lsls	r2, r3, #27
 800614a:	d407      	bmi.n	800615c <__swsetup_r+0x30>
 800614c:	2209      	movs	r2, #9
 800614e:	602a      	str	r2, [r5, #0]
 8006150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006154:	81a3      	strh	r3, [r4, #12]
 8006156:	f04f 30ff 	mov.w	r0, #4294967295
 800615a:	e033      	b.n	80061c4 <__swsetup_r+0x98>
 800615c:	0758      	lsls	r0, r3, #29
 800615e:	d512      	bpl.n	8006186 <__swsetup_r+0x5a>
 8006160:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006162:	b141      	cbz	r1, 8006176 <__swsetup_r+0x4a>
 8006164:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006168:	4299      	cmp	r1, r3
 800616a:	d002      	beq.n	8006172 <__swsetup_r+0x46>
 800616c:	4628      	mov	r0, r5
 800616e:	f000 f8af 	bl	80062d0 <_free_r>
 8006172:	2300      	movs	r3, #0
 8006174:	6363      	str	r3, [r4, #52]	@ 0x34
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	2300      	movs	r3, #0
 8006180:	6063      	str	r3, [r4, #4]
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	f043 0308 	orr.w	r3, r3, #8
 800618c:	81a3      	strh	r3, [r4, #12]
 800618e:	6923      	ldr	r3, [r4, #16]
 8006190:	b94b      	cbnz	r3, 80061a6 <__swsetup_r+0x7a>
 8006192:	89a3      	ldrh	r3, [r4, #12]
 8006194:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006198:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800619c:	d003      	beq.n	80061a6 <__swsetup_r+0x7a>
 800619e:	4621      	mov	r1, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	f001 f9a1 	bl	80074e8 <__smakebuf_r>
 80061a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061aa:	f013 0201 	ands.w	r2, r3, #1
 80061ae:	d00a      	beq.n	80061c6 <__swsetup_r+0x9a>
 80061b0:	2200      	movs	r2, #0
 80061b2:	60a2      	str	r2, [r4, #8]
 80061b4:	6962      	ldr	r2, [r4, #20]
 80061b6:	4252      	negs	r2, r2
 80061b8:	61a2      	str	r2, [r4, #24]
 80061ba:	6922      	ldr	r2, [r4, #16]
 80061bc:	b942      	cbnz	r2, 80061d0 <__swsetup_r+0xa4>
 80061be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061c2:	d1c5      	bne.n	8006150 <__swsetup_r+0x24>
 80061c4:	bd38      	pop	{r3, r4, r5, pc}
 80061c6:	0799      	lsls	r1, r3, #30
 80061c8:	bf58      	it	pl
 80061ca:	6962      	ldrpl	r2, [r4, #20]
 80061cc:	60a2      	str	r2, [r4, #8]
 80061ce:	e7f4      	b.n	80061ba <__swsetup_r+0x8e>
 80061d0:	2000      	movs	r0, #0
 80061d2:	e7f7      	b.n	80061c4 <__swsetup_r+0x98>
 80061d4:	20000038 	.word	0x20000038

080061d8 <memset>:
 80061d8:	4402      	add	r2, r0
 80061da:	4603      	mov	r3, r0
 80061dc:	4293      	cmp	r3, r2
 80061de:	d100      	bne.n	80061e2 <memset+0xa>
 80061e0:	4770      	bx	lr
 80061e2:	f803 1b01 	strb.w	r1, [r3], #1
 80061e6:	e7f9      	b.n	80061dc <memset+0x4>

080061e8 <_close_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d06      	ldr	r5, [pc, #24]	@ (8006204 <_close_r+0x1c>)
 80061ec:	2300      	movs	r3, #0
 80061ee:	4604      	mov	r4, r0
 80061f0:	4608      	mov	r0, r1
 80061f2:	602b      	str	r3, [r5, #0]
 80061f4:	f7fb fa09 	bl	800160a <_close>
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	d102      	bne.n	8006202 <_close_r+0x1a>
 80061fc:	682b      	ldr	r3, [r5, #0]
 80061fe:	b103      	cbz	r3, 8006202 <_close_r+0x1a>
 8006200:	6023      	str	r3, [r4, #0]
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000478 	.word	0x20000478

08006208 <_lseek_r>:
 8006208:	b538      	push	{r3, r4, r5, lr}
 800620a:	4d07      	ldr	r5, [pc, #28]	@ (8006228 <_lseek_r+0x20>)
 800620c:	4604      	mov	r4, r0
 800620e:	4608      	mov	r0, r1
 8006210:	4611      	mov	r1, r2
 8006212:	2200      	movs	r2, #0
 8006214:	602a      	str	r2, [r5, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	f7fb fa1e 	bl	8001658 <_lseek>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_lseek_r+0x1e>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_lseek_r+0x1e>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	20000478 	.word	0x20000478

0800622c <_read_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d07      	ldr	r5, [pc, #28]	@ (800624c <_read_r+0x20>)
 8006230:	4604      	mov	r4, r0
 8006232:	4608      	mov	r0, r1
 8006234:	4611      	mov	r1, r2
 8006236:	2200      	movs	r2, #0
 8006238:	602a      	str	r2, [r5, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	f7fb f9ac 	bl	8001598 <_read>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_read_r+0x1e>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_read_r+0x1e>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000478 	.word	0x20000478

08006250 <_write_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	@ (8006270 <_write_r+0x20>)
 8006254:	4604      	mov	r4, r0
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	2200      	movs	r2, #0
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fb f9b7 	bl	80015d2 <_write>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_write_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_write_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20000478 	.word	0x20000478

08006274 <__errno>:
 8006274:	4b01      	ldr	r3, [pc, #4]	@ (800627c <__errno+0x8>)
 8006276:	6818      	ldr	r0, [r3, #0]
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	20000038 	.word	0x20000038

08006280 <__libc_init_array>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	4d0d      	ldr	r5, [pc, #52]	@ (80062b8 <__libc_init_array+0x38>)
 8006284:	4c0d      	ldr	r4, [pc, #52]	@ (80062bc <__libc_init_array+0x3c>)
 8006286:	1b64      	subs	r4, r4, r5
 8006288:	10a4      	asrs	r4, r4, #2
 800628a:	2600      	movs	r6, #0
 800628c:	42a6      	cmp	r6, r4
 800628e:	d109      	bne.n	80062a4 <__libc_init_array+0x24>
 8006290:	4d0b      	ldr	r5, [pc, #44]	@ (80062c0 <__libc_init_array+0x40>)
 8006292:	4c0c      	ldr	r4, [pc, #48]	@ (80062c4 <__libc_init_array+0x44>)
 8006294:	f001 fb54 	bl	8007940 <_init>
 8006298:	1b64      	subs	r4, r4, r5
 800629a:	10a4      	asrs	r4, r4, #2
 800629c:	2600      	movs	r6, #0
 800629e:	42a6      	cmp	r6, r4
 80062a0:	d105      	bne.n	80062ae <__libc_init_array+0x2e>
 80062a2:	bd70      	pop	{r4, r5, r6, pc}
 80062a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a8:	4798      	blx	r3
 80062aa:	3601      	adds	r6, #1
 80062ac:	e7ee      	b.n	800628c <__libc_init_array+0xc>
 80062ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b2:	4798      	blx	r3
 80062b4:	3601      	adds	r6, #1
 80062b6:	e7f2      	b.n	800629e <__libc_init_array+0x1e>
 80062b8:	08007db0 	.word	0x08007db0
 80062bc:	08007db0 	.word	0x08007db0
 80062c0:	08007db0 	.word	0x08007db0
 80062c4:	08007db4 	.word	0x08007db4

080062c8 <__retarget_lock_init_recursive>:
 80062c8:	4770      	bx	lr

080062ca <__retarget_lock_acquire_recursive>:
 80062ca:	4770      	bx	lr

080062cc <__retarget_lock_release_recursive>:
 80062cc:	4770      	bx	lr
	...

080062d0 <_free_r>:
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d041      	beq.n	800635c <_free_r+0x8c>
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f0c      	subs	r4, r1, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfb8      	it	lt
 80062e2:	18e4      	addlt	r4, r4, r3
 80062e4:	f000 f8e0 	bl	80064a8 <__malloc_lock>
 80062e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006360 <_free_r+0x90>)
 80062ea:	6813      	ldr	r3, [r2, #0]
 80062ec:	b933      	cbnz	r3, 80062fc <_free_r+0x2c>
 80062ee:	6063      	str	r3, [r4, #4]
 80062f0:	6014      	str	r4, [r2, #0]
 80062f2:	4628      	mov	r0, r5
 80062f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062f8:	f000 b8dc 	b.w	80064b4 <__malloc_unlock>
 80062fc:	42a3      	cmp	r3, r4
 80062fe:	d908      	bls.n	8006312 <_free_r+0x42>
 8006300:	6820      	ldr	r0, [r4, #0]
 8006302:	1821      	adds	r1, r4, r0
 8006304:	428b      	cmp	r3, r1
 8006306:	bf01      	itttt	eq
 8006308:	6819      	ldreq	r1, [r3, #0]
 800630a:	685b      	ldreq	r3, [r3, #4]
 800630c:	1809      	addeq	r1, r1, r0
 800630e:	6021      	streq	r1, [r4, #0]
 8006310:	e7ed      	b.n	80062ee <_free_r+0x1e>
 8006312:	461a      	mov	r2, r3
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	b10b      	cbz	r3, 800631c <_free_r+0x4c>
 8006318:	42a3      	cmp	r3, r4
 800631a:	d9fa      	bls.n	8006312 <_free_r+0x42>
 800631c:	6811      	ldr	r1, [r2, #0]
 800631e:	1850      	adds	r0, r2, r1
 8006320:	42a0      	cmp	r0, r4
 8006322:	d10b      	bne.n	800633c <_free_r+0x6c>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	4401      	add	r1, r0
 8006328:	1850      	adds	r0, r2, r1
 800632a:	4283      	cmp	r3, r0
 800632c:	6011      	str	r1, [r2, #0]
 800632e:	d1e0      	bne.n	80062f2 <_free_r+0x22>
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	6053      	str	r3, [r2, #4]
 8006336:	4408      	add	r0, r1
 8006338:	6010      	str	r0, [r2, #0]
 800633a:	e7da      	b.n	80062f2 <_free_r+0x22>
 800633c:	d902      	bls.n	8006344 <_free_r+0x74>
 800633e:	230c      	movs	r3, #12
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	e7d6      	b.n	80062f2 <_free_r+0x22>
 8006344:	6820      	ldr	r0, [r4, #0]
 8006346:	1821      	adds	r1, r4, r0
 8006348:	428b      	cmp	r3, r1
 800634a:	bf04      	itt	eq
 800634c:	6819      	ldreq	r1, [r3, #0]
 800634e:	685b      	ldreq	r3, [r3, #4]
 8006350:	6063      	str	r3, [r4, #4]
 8006352:	bf04      	itt	eq
 8006354:	1809      	addeq	r1, r1, r0
 8006356:	6021      	streq	r1, [r4, #0]
 8006358:	6054      	str	r4, [r2, #4]
 800635a:	e7ca      	b.n	80062f2 <_free_r+0x22>
 800635c:	bd38      	pop	{r3, r4, r5, pc}
 800635e:	bf00      	nop
 8006360:	20000484 	.word	0x20000484

08006364 <sbrk_aligned>:
 8006364:	b570      	push	{r4, r5, r6, lr}
 8006366:	4e0f      	ldr	r6, [pc, #60]	@ (80063a4 <sbrk_aligned+0x40>)
 8006368:	460c      	mov	r4, r1
 800636a:	6831      	ldr	r1, [r6, #0]
 800636c:	4605      	mov	r5, r0
 800636e:	b911      	cbnz	r1, 8006376 <sbrk_aligned+0x12>
 8006370:	f001 f9a6 	bl	80076c0 <_sbrk_r>
 8006374:	6030      	str	r0, [r6, #0]
 8006376:	4621      	mov	r1, r4
 8006378:	4628      	mov	r0, r5
 800637a:	f001 f9a1 	bl	80076c0 <_sbrk_r>
 800637e:	1c43      	adds	r3, r0, #1
 8006380:	d103      	bne.n	800638a <sbrk_aligned+0x26>
 8006382:	f04f 34ff 	mov.w	r4, #4294967295
 8006386:	4620      	mov	r0, r4
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	1cc4      	adds	r4, r0, #3
 800638c:	f024 0403 	bic.w	r4, r4, #3
 8006390:	42a0      	cmp	r0, r4
 8006392:	d0f8      	beq.n	8006386 <sbrk_aligned+0x22>
 8006394:	1a21      	subs	r1, r4, r0
 8006396:	4628      	mov	r0, r5
 8006398:	f001 f992 	bl	80076c0 <_sbrk_r>
 800639c:	3001      	adds	r0, #1
 800639e:	d1f2      	bne.n	8006386 <sbrk_aligned+0x22>
 80063a0:	e7ef      	b.n	8006382 <sbrk_aligned+0x1e>
 80063a2:	bf00      	nop
 80063a4:	20000480 	.word	0x20000480

080063a8 <_malloc_r>:
 80063a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063ac:	1ccd      	adds	r5, r1, #3
 80063ae:	f025 0503 	bic.w	r5, r5, #3
 80063b2:	3508      	adds	r5, #8
 80063b4:	2d0c      	cmp	r5, #12
 80063b6:	bf38      	it	cc
 80063b8:	250c      	movcc	r5, #12
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	4606      	mov	r6, r0
 80063be:	db01      	blt.n	80063c4 <_malloc_r+0x1c>
 80063c0:	42a9      	cmp	r1, r5
 80063c2:	d904      	bls.n	80063ce <_malloc_r+0x26>
 80063c4:	230c      	movs	r3, #12
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	2000      	movs	r0, #0
 80063ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064a4 <_malloc_r+0xfc>
 80063d2:	f000 f869 	bl	80064a8 <__malloc_lock>
 80063d6:	f8d8 3000 	ldr.w	r3, [r8]
 80063da:	461c      	mov	r4, r3
 80063dc:	bb44      	cbnz	r4, 8006430 <_malloc_r+0x88>
 80063de:	4629      	mov	r1, r5
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7ff ffbf 	bl	8006364 <sbrk_aligned>
 80063e6:	1c43      	adds	r3, r0, #1
 80063e8:	4604      	mov	r4, r0
 80063ea:	d158      	bne.n	800649e <_malloc_r+0xf6>
 80063ec:	f8d8 4000 	ldr.w	r4, [r8]
 80063f0:	4627      	mov	r7, r4
 80063f2:	2f00      	cmp	r7, #0
 80063f4:	d143      	bne.n	800647e <_malloc_r+0xd6>
 80063f6:	2c00      	cmp	r4, #0
 80063f8:	d04b      	beq.n	8006492 <_malloc_r+0xea>
 80063fa:	6823      	ldr	r3, [r4, #0]
 80063fc:	4639      	mov	r1, r7
 80063fe:	4630      	mov	r0, r6
 8006400:	eb04 0903 	add.w	r9, r4, r3
 8006404:	f001 f95c 	bl	80076c0 <_sbrk_r>
 8006408:	4581      	cmp	r9, r0
 800640a:	d142      	bne.n	8006492 <_malloc_r+0xea>
 800640c:	6821      	ldr	r1, [r4, #0]
 800640e:	1a6d      	subs	r5, r5, r1
 8006410:	4629      	mov	r1, r5
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffa6 	bl	8006364 <sbrk_aligned>
 8006418:	3001      	adds	r0, #1
 800641a:	d03a      	beq.n	8006492 <_malloc_r+0xea>
 800641c:	6823      	ldr	r3, [r4, #0]
 800641e:	442b      	add	r3, r5
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	f8d8 3000 	ldr.w	r3, [r8]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	bb62      	cbnz	r2, 8006484 <_malloc_r+0xdc>
 800642a:	f8c8 7000 	str.w	r7, [r8]
 800642e:	e00f      	b.n	8006450 <_malloc_r+0xa8>
 8006430:	6822      	ldr	r2, [r4, #0]
 8006432:	1b52      	subs	r2, r2, r5
 8006434:	d420      	bmi.n	8006478 <_malloc_r+0xd0>
 8006436:	2a0b      	cmp	r2, #11
 8006438:	d917      	bls.n	800646a <_malloc_r+0xc2>
 800643a:	1961      	adds	r1, r4, r5
 800643c:	42a3      	cmp	r3, r4
 800643e:	6025      	str	r5, [r4, #0]
 8006440:	bf18      	it	ne
 8006442:	6059      	strne	r1, [r3, #4]
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	bf08      	it	eq
 8006448:	f8c8 1000 	streq.w	r1, [r8]
 800644c:	5162      	str	r2, [r4, r5]
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	4630      	mov	r0, r6
 8006452:	f000 f82f 	bl	80064b4 <__malloc_unlock>
 8006456:	f104 000b 	add.w	r0, r4, #11
 800645a:	1d23      	adds	r3, r4, #4
 800645c:	f020 0007 	bic.w	r0, r0, #7
 8006460:	1ac2      	subs	r2, r0, r3
 8006462:	bf1c      	itt	ne
 8006464:	1a1b      	subne	r3, r3, r0
 8006466:	50a3      	strne	r3, [r4, r2]
 8006468:	e7af      	b.n	80063ca <_malloc_r+0x22>
 800646a:	6862      	ldr	r2, [r4, #4]
 800646c:	42a3      	cmp	r3, r4
 800646e:	bf0c      	ite	eq
 8006470:	f8c8 2000 	streq.w	r2, [r8]
 8006474:	605a      	strne	r2, [r3, #4]
 8006476:	e7eb      	b.n	8006450 <_malloc_r+0xa8>
 8006478:	4623      	mov	r3, r4
 800647a:	6864      	ldr	r4, [r4, #4]
 800647c:	e7ae      	b.n	80063dc <_malloc_r+0x34>
 800647e:	463c      	mov	r4, r7
 8006480:	687f      	ldr	r7, [r7, #4]
 8006482:	e7b6      	b.n	80063f2 <_malloc_r+0x4a>
 8006484:	461a      	mov	r2, r3
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	42a3      	cmp	r3, r4
 800648a:	d1fb      	bne.n	8006484 <_malloc_r+0xdc>
 800648c:	2300      	movs	r3, #0
 800648e:	6053      	str	r3, [r2, #4]
 8006490:	e7de      	b.n	8006450 <_malloc_r+0xa8>
 8006492:	230c      	movs	r3, #12
 8006494:	6033      	str	r3, [r6, #0]
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f80c 	bl	80064b4 <__malloc_unlock>
 800649c:	e794      	b.n	80063c8 <_malloc_r+0x20>
 800649e:	6005      	str	r5, [r0, #0]
 80064a0:	e7d6      	b.n	8006450 <_malloc_r+0xa8>
 80064a2:	bf00      	nop
 80064a4:	20000484 	.word	0x20000484

080064a8 <__malloc_lock>:
 80064a8:	4801      	ldr	r0, [pc, #4]	@ (80064b0 <__malloc_lock+0x8>)
 80064aa:	f7ff bf0e 	b.w	80062ca <__retarget_lock_acquire_recursive>
 80064ae:	bf00      	nop
 80064b0:	2000047c 	.word	0x2000047c

080064b4 <__malloc_unlock>:
 80064b4:	4801      	ldr	r0, [pc, #4]	@ (80064bc <__malloc_unlock+0x8>)
 80064b6:	f7ff bf09 	b.w	80062cc <__retarget_lock_release_recursive>
 80064ba:	bf00      	nop
 80064bc:	2000047c 	.word	0x2000047c

080064c0 <__ssputs_r>:
 80064c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064c4:	688e      	ldr	r6, [r1, #8]
 80064c6:	461f      	mov	r7, r3
 80064c8:	42be      	cmp	r6, r7
 80064ca:	680b      	ldr	r3, [r1, #0]
 80064cc:	4682      	mov	sl, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	4690      	mov	r8, r2
 80064d2:	d82d      	bhi.n	8006530 <__ssputs_r+0x70>
 80064d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064dc:	d026      	beq.n	800652c <__ssputs_r+0x6c>
 80064de:	6965      	ldr	r5, [r4, #20]
 80064e0:	6909      	ldr	r1, [r1, #16]
 80064e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064e6:	eba3 0901 	sub.w	r9, r3, r1
 80064ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064ee:	1c7b      	adds	r3, r7, #1
 80064f0:	444b      	add	r3, r9
 80064f2:	106d      	asrs	r5, r5, #1
 80064f4:	429d      	cmp	r5, r3
 80064f6:	bf38      	it	cc
 80064f8:	461d      	movcc	r5, r3
 80064fa:	0553      	lsls	r3, r2, #21
 80064fc:	d527      	bpl.n	800654e <__ssputs_r+0x8e>
 80064fe:	4629      	mov	r1, r5
 8006500:	f7ff ff52 	bl	80063a8 <_malloc_r>
 8006504:	4606      	mov	r6, r0
 8006506:	b360      	cbz	r0, 8006562 <__ssputs_r+0xa2>
 8006508:	6921      	ldr	r1, [r4, #16]
 800650a:	464a      	mov	r2, r9
 800650c:	f001 f8e8 	bl	80076e0 <memcpy>
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651a:	81a3      	strh	r3, [r4, #12]
 800651c:	6126      	str	r6, [r4, #16]
 800651e:	6165      	str	r5, [r4, #20]
 8006520:	444e      	add	r6, r9
 8006522:	eba5 0509 	sub.w	r5, r5, r9
 8006526:	6026      	str	r6, [r4, #0]
 8006528:	60a5      	str	r5, [r4, #8]
 800652a:	463e      	mov	r6, r7
 800652c:	42be      	cmp	r6, r7
 800652e:	d900      	bls.n	8006532 <__ssputs_r+0x72>
 8006530:	463e      	mov	r6, r7
 8006532:	6820      	ldr	r0, [r4, #0]
 8006534:	4632      	mov	r2, r6
 8006536:	4641      	mov	r1, r8
 8006538:	f001 f885 	bl	8007646 <memmove>
 800653c:	68a3      	ldr	r3, [r4, #8]
 800653e:	1b9b      	subs	r3, r3, r6
 8006540:	60a3      	str	r3, [r4, #8]
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	4433      	add	r3, r6
 8006546:	6023      	str	r3, [r4, #0]
 8006548:	2000      	movs	r0, #0
 800654a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800654e:	462a      	mov	r2, r5
 8006550:	f001 f8d4 	bl	80076fc <_realloc_r>
 8006554:	4606      	mov	r6, r0
 8006556:	2800      	cmp	r0, #0
 8006558:	d1e0      	bne.n	800651c <__ssputs_r+0x5c>
 800655a:	6921      	ldr	r1, [r4, #16]
 800655c:	4650      	mov	r0, sl
 800655e:	f7ff feb7 	bl	80062d0 <_free_r>
 8006562:	230c      	movs	r3, #12
 8006564:	f8ca 3000 	str.w	r3, [sl]
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800656e:	81a3      	strh	r3, [r4, #12]
 8006570:	f04f 30ff 	mov.w	r0, #4294967295
 8006574:	e7e9      	b.n	800654a <__ssputs_r+0x8a>
	...

08006578 <_svfiprintf_r>:
 8006578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657c:	4698      	mov	r8, r3
 800657e:	898b      	ldrh	r3, [r1, #12]
 8006580:	061b      	lsls	r3, r3, #24
 8006582:	b09d      	sub	sp, #116	@ 0x74
 8006584:	4607      	mov	r7, r0
 8006586:	460d      	mov	r5, r1
 8006588:	4614      	mov	r4, r2
 800658a:	d510      	bpl.n	80065ae <_svfiprintf_r+0x36>
 800658c:	690b      	ldr	r3, [r1, #16]
 800658e:	b973      	cbnz	r3, 80065ae <_svfiprintf_r+0x36>
 8006590:	2140      	movs	r1, #64	@ 0x40
 8006592:	f7ff ff09 	bl	80063a8 <_malloc_r>
 8006596:	6028      	str	r0, [r5, #0]
 8006598:	6128      	str	r0, [r5, #16]
 800659a:	b930      	cbnz	r0, 80065aa <_svfiprintf_r+0x32>
 800659c:	230c      	movs	r3, #12
 800659e:	603b      	str	r3, [r7, #0]
 80065a0:	f04f 30ff 	mov.w	r0, #4294967295
 80065a4:	b01d      	add	sp, #116	@ 0x74
 80065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	2340      	movs	r3, #64	@ 0x40
 80065ac:	616b      	str	r3, [r5, #20]
 80065ae:	2300      	movs	r3, #0
 80065b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80065b2:	2320      	movs	r3, #32
 80065b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80065bc:	2330      	movs	r3, #48	@ 0x30
 80065be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800675c <_svfiprintf_r+0x1e4>
 80065c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065c6:	f04f 0901 	mov.w	r9, #1
 80065ca:	4623      	mov	r3, r4
 80065cc:	469a      	mov	sl, r3
 80065ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065d2:	b10a      	cbz	r2, 80065d8 <_svfiprintf_r+0x60>
 80065d4:	2a25      	cmp	r2, #37	@ 0x25
 80065d6:	d1f9      	bne.n	80065cc <_svfiprintf_r+0x54>
 80065d8:	ebba 0b04 	subs.w	fp, sl, r4
 80065dc:	d00b      	beq.n	80065f6 <_svfiprintf_r+0x7e>
 80065de:	465b      	mov	r3, fp
 80065e0:	4622      	mov	r2, r4
 80065e2:	4629      	mov	r1, r5
 80065e4:	4638      	mov	r0, r7
 80065e6:	f7ff ff6b 	bl	80064c0 <__ssputs_r>
 80065ea:	3001      	adds	r0, #1
 80065ec:	f000 80a7 	beq.w	800673e <_svfiprintf_r+0x1c6>
 80065f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065f2:	445a      	add	r2, fp
 80065f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80065f6:	f89a 3000 	ldrb.w	r3, [sl]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 809f 	beq.w	800673e <_svfiprintf_r+0x1c6>
 8006600:	2300      	movs	r3, #0
 8006602:	f04f 32ff 	mov.w	r2, #4294967295
 8006606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800660a:	f10a 0a01 	add.w	sl, sl, #1
 800660e:	9304      	str	r3, [sp, #16]
 8006610:	9307      	str	r3, [sp, #28]
 8006612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006616:	931a      	str	r3, [sp, #104]	@ 0x68
 8006618:	4654      	mov	r4, sl
 800661a:	2205      	movs	r2, #5
 800661c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006620:	484e      	ldr	r0, [pc, #312]	@ (800675c <_svfiprintf_r+0x1e4>)
 8006622:	f7f9 fddd 	bl	80001e0 <memchr>
 8006626:	9a04      	ldr	r2, [sp, #16]
 8006628:	b9d8      	cbnz	r0, 8006662 <_svfiprintf_r+0xea>
 800662a:	06d0      	lsls	r0, r2, #27
 800662c:	bf44      	itt	mi
 800662e:	2320      	movmi	r3, #32
 8006630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006634:	0711      	lsls	r1, r2, #28
 8006636:	bf44      	itt	mi
 8006638:	232b      	movmi	r3, #43	@ 0x2b
 800663a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800663e:	f89a 3000 	ldrb.w	r3, [sl]
 8006642:	2b2a      	cmp	r3, #42	@ 0x2a
 8006644:	d015      	beq.n	8006672 <_svfiprintf_r+0xfa>
 8006646:	9a07      	ldr	r2, [sp, #28]
 8006648:	4654      	mov	r4, sl
 800664a:	2000      	movs	r0, #0
 800664c:	f04f 0c0a 	mov.w	ip, #10
 8006650:	4621      	mov	r1, r4
 8006652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006656:	3b30      	subs	r3, #48	@ 0x30
 8006658:	2b09      	cmp	r3, #9
 800665a:	d94b      	bls.n	80066f4 <_svfiprintf_r+0x17c>
 800665c:	b1b0      	cbz	r0, 800668c <_svfiprintf_r+0x114>
 800665e:	9207      	str	r2, [sp, #28]
 8006660:	e014      	b.n	800668c <_svfiprintf_r+0x114>
 8006662:	eba0 0308 	sub.w	r3, r0, r8
 8006666:	fa09 f303 	lsl.w	r3, r9, r3
 800666a:	4313      	orrs	r3, r2
 800666c:	9304      	str	r3, [sp, #16]
 800666e:	46a2      	mov	sl, r4
 8006670:	e7d2      	b.n	8006618 <_svfiprintf_r+0xa0>
 8006672:	9b03      	ldr	r3, [sp, #12]
 8006674:	1d19      	adds	r1, r3, #4
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	9103      	str	r1, [sp, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	bfbb      	ittet	lt
 800667e:	425b      	neglt	r3, r3
 8006680:	f042 0202 	orrlt.w	r2, r2, #2
 8006684:	9307      	strge	r3, [sp, #28]
 8006686:	9307      	strlt	r3, [sp, #28]
 8006688:	bfb8      	it	lt
 800668a:	9204      	strlt	r2, [sp, #16]
 800668c:	7823      	ldrb	r3, [r4, #0]
 800668e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006690:	d10a      	bne.n	80066a8 <_svfiprintf_r+0x130>
 8006692:	7863      	ldrb	r3, [r4, #1]
 8006694:	2b2a      	cmp	r3, #42	@ 0x2a
 8006696:	d132      	bne.n	80066fe <_svfiprintf_r+0x186>
 8006698:	9b03      	ldr	r3, [sp, #12]
 800669a:	1d1a      	adds	r2, r3, #4
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	9203      	str	r2, [sp, #12]
 80066a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066a4:	3402      	adds	r4, #2
 80066a6:	9305      	str	r3, [sp, #20]
 80066a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800676c <_svfiprintf_r+0x1f4>
 80066ac:	7821      	ldrb	r1, [r4, #0]
 80066ae:	2203      	movs	r2, #3
 80066b0:	4650      	mov	r0, sl
 80066b2:	f7f9 fd95 	bl	80001e0 <memchr>
 80066b6:	b138      	cbz	r0, 80066c8 <_svfiprintf_r+0x150>
 80066b8:	9b04      	ldr	r3, [sp, #16]
 80066ba:	eba0 000a 	sub.w	r0, r0, sl
 80066be:	2240      	movs	r2, #64	@ 0x40
 80066c0:	4082      	lsls	r2, r0
 80066c2:	4313      	orrs	r3, r2
 80066c4:	3401      	adds	r4, #1
 80066c6:	9304      	str	r3, [sp, #16]
 80066c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066cc:	4824      	ldr	r0, [pc, #144]	@ (8006760 <_svfiprintf_r+0x1e8>)
 80066ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066d2:	2206      	movs	r2, #6
 80066d4:	f7f9 fd84 	bl	80001e0 <memchr>
 80066d8:	2800      	cmp	r0, #0
 80066da:	d036      	beq.n	800674a <_svfiprintf_r+0x1d2>
 80066dc:	4b21      	ldr	r3, [pc, #132]	@ (8006764 <_svfiprintf_r+0x1ec>)
 80066de:	bb1b      	cbnz	r3, 8006728 <_svfiprintf_r+0x1b0>
 80066e0:	9b03      	ldr	r3, [sp, #12]
 80066e2:	3307      	adds	r3, #7
 80066e4:	f023 0307 	bic.w	r3, r3, #7
 80066e8:	3308      	adds	r3, #8
 80066ea:	9303      	str	r3, [sp, #12]
 80066ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ee:	4433      	add	r3, r6
 80066f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80066f2:	e76a      	b.n	80065ca <_svfiprintf_r+0x52>
 80066f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80066f8:	460c      	mov	r4, r1
 80066fa:	2001      	movs	r0, #1
 80066fc:	e7a8      	b.n	8006650 <_svfiprintf_r+0xd8>
 80066fe:	2300      	movs	r3, #0
 8006700:	3401      	adds	r4, #1
 8006702:	9305      	str	r3, [sp, #20]
 8006704:	4619      	mov	r1, r3
 8006706:	f04f 0c0a 	mov.w	ip, #10
 800670a:	4620      	mov	r0, r4
 800670c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006710:	3a30      	subs	r2, #48	@ 0x30
 8006712:	2a09      	cmp	r2, #9
 8006714:	d903      	bls.n	800671e <_svfiprintf_r+0x1a6>
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0c6      	beq.n	80066a8 <_svfiprintf_r+0x130>
 800671a:	9105      	str	r1, [sp, #20]
 800671c:	e7c4      	b.n	80066a8 <_svfiprintf_r+0x130>
 800671e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006722:	4604      	mov	r4, r0
 8006724:	2301      	movs	r3, #1
 8006726:	e7f0      	b.n	800670a <_svfiprintf_r+0x192>
 8006728:	ab03      	add	r3, sp, #12
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	462a      	mov	r2, r5
 800672e:	4b0e      	ldr	r3, [pc, #56]	@ (8006768 <_svfiprintf_r+0x1f0>)
 8006730:	a904      	add	r1, sp, #16
 8006732:	4638      	mov	r0, r7
 8006734:	f3af 8000 	nop.w
 8006738:	1c42      	adds	r2, r0, #1
 800673a:	4606      	mov	r6, r0
 800673c:	d1d6      	bne.n	80066ec <_svfiprintf_r+0x174>
 800673e:	89ab      	ldrh	r3, [r5, #12]
 8006740:	065b      	lsls	r3, r3, #25
 8006742:	f53f af2d 	bmi.w	80065a0 <_svfiprintf_r+0x28>
 8006746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006748:	e72c      	b.n	80065a4 <_svfiprintf_r+0x2c>
 800674a:	ab03      	add	r3, sp, #12
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	462a      	mov	r2, r5
 8006750:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <_svfiprintf_r+0x1f0>)
 8006752:	a904      	add	r1, sp, #16
 8006754:	4638      	mov	r0, r7
 8006756:	f000 fb87 	bl	8006e68 <_printf_i>
 800675a:	e7ed      	b.n	8006738 <_svfiprintf_r+0x1c0>
 800675c:	08007d59 	.word	0x08007d59
 8006760:	08007d63 	.word	0x08007d63
 8006764:	00000000 	.word	0x00000000
 8006768:	080064c1 	.word	0x080064c1
 800676c:	08007d5f 	.word	0x08007d5f

08006770 <_sungetc_r>:
 8006770:	b538      	push	{r3, r4, r5, lr}
 8006772:	1c4b      	adds	r3, r1, #1
 8006774:	4614      	mov	r4, r2
 8006776:	d103      	bne.n	8006780 <_sungetc_r+0x10>
 8006778:	f04f 35ff 	mov.w	r5, #4294967295
 800677c:	4628      	mov	r0, r5
 800677e:	bd38      	pop	{r3, r4, r5, pc}
 8006780:	8993      	ldrh	r3, [r2, #12]
 8006782:	f023 0320 	bic.w	r3, r3, #32
 8006786:	8193      	strh	r3, [r2, #12]
 8006788:	6853      	ldr	r3, [r2, #4]
 800678a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800678c:	b2cd      	uxtb	r5, r1
 800678e:	b18a      	cbz	r2, 80067b4 <_sungetc_r+0x44>
 8006790:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8006792:	429a      	cmp	r2, r3
 8006794:	dd08      	ble.n	80067a8 <_sungetc_r+0x38>
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	1e5a      	subs	r2, r3, #1
 800679a:	6022      	str	r2, [r4, #0]
 800679c:	f803 5c01 	strb.w	r5, [r3, #-1]
 80067a0:	6863      	ldr	r3, [r4, #4]
 80067a2:	3301      	adds	r3, #1
 80067a4:	6063      	str	r3, [r4, #4]
 80067a6:	e7e9      	b.n	800677c <_sungetc_r+0xc>
 80067a8:	4621      	mov	r1, r4
 80067aa:	f000 ff12 	bl	80075d2 <__submore>
 80067ae:	2800      	cmp	r0, #0
 80067b0:	d0f1      	beq.n	8006796 <_sungetc_r+0x26>
 80067b2:	e7e1      	b.n	8006778 <_sungetc_r+0x8>
 80067b4:	6921      	ldr	r1, [r4, #16]
 80067b6:	6822      	ldr	r2, [r4, #0]
 80067b8:	b141      	cbz	r1, 80067cc <_sungetc_r+0x5c>
 80067ba:	4291      	cmp	r1, r2
 80067bc:	d206      	bcs.n	80067cc <_sungetc_r+0x5c>
 80067be:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80067c2:	42a9      	cmp	r1, r5
 80067c4:	d102      	bne.n	80067cc <_sungetc_r+0x5c>
 80067c6:	3a01      	subs	r2, #1
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	e7ea      	b.n	80067a2 <_sungetc_r+0x32>
 80067cc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80067d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80067d6:	2303      	movs	r3, #3
 80067d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80067da:	4623      	mov	r3, r4
 80067dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	2301      	movs	r3, #1
 80067e4:	e7de      	b.n	80067a4 <_sungetc_r+0x34>

080067e6 <__ssrefill_r>:
 80067e6:	b510      	push	{r4, lr}
 80067e8:	460c      	mov	r4, r1
 80067ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80067ec:	b169      	cbz	r1, 800680a <__ssrefill_r+0x24>
 80067ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067f2:	4299      	cmp	r1, r3
 80067f4:	d001      	beq.n	80067fa <__ssrefill_r+0x14>
 80067f6:	f7ff fd6b 	bl	80062d0 <_free_r>
 80067fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067fc:	6063      	str	r3, [r4, #4]
 80067fe:	2000      	movs	r0, #0
 8006800:	6360      	str	r0, [r4, #52]	@ 0x34
 8006802:	b113      	cbz	r3, 800680a <__ssrefill_r+0x24>
 8006804:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006806:	6023      	str	r3, [r4, #0]
 8006808:	bd10      	pop	{r4, pc}
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	2300      	movs	r3, #0
 8006810:	6063      	str	r3, [r4, #4]
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f043 0320 	orr.w	r3, r3, #32
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	f04f 30ff 	mov.w	r0, #4294967295
 800681e:	e7f3      	b.n	8006808 <__ssrefill_r+0x22>

08006820 <__ssvfiscanf_r>:
 8006820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	460c      	mov	r4, r1
 8006826:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800682a:	2100      	movs	r1, #0
 800682c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006830:	49a5      	ldr	r1, [pc, #660]	@ (8006ac8 <__ssvfiscanf_r+0x2a8>)
 8006832:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006834:	f10d 0804 	add.w	r8, sp, #4
 8006838:	49a4      	ldr	r1, [pc, #656]	@ (8006acc <__ssvfiscanf_r+0x2ac>)
 800683a:	4fa5      	ldr	r7, [pc, #660]	@ (8006ad0 <__ssvfiscanf_r+0x2b0>)
 800683c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006840:	4606      	mov	r6, r0
 8006842:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	7813      	ldrb	r3, [r2, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	f000 8158 	beq.w	8006afe <__ssvfiscanf_r+0x2de>
 800684e:	5cf9      	ldrb	r1, [r7, r3]
 8006850:	f011 0108 	ands.w	r1, r1, #8
 8006854:	f102 0501 	add.w	r5, r2, #1
 8006858:	d019      	beq.n	800688e <__ssvfiscanf_r+0x6e>
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	dd0f      	ble.n	8006880 <__ssvfiscanf_r+0x60>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	781a      	ldrb	r2, [r3, #0]
 8006864:	5cba      	ldrb	r2, [r7, r2]
 8006866:	0712      	lsls	r2, r2, #28
 8006868:	d401      	bmi.n	800686e <__ssvfiscanf_r+0x4e>
 800686a:	462a      	mov	r2, r5
 800686c:	e7eb      	b.n	8006846 <__ssvfiscanf_r+0x26>
 800686e:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006870:	3201      	adds	r2, #1
 8006872:	9245      	str	r2, [sp, #276]	@ 0x114
 8006874:	6862      	ldr	r2, [r4, #4]
 8006876:	3301      	adds	r3, #1
 8006878:	3a01      	subs	r2, #1
 800687a:	6062      	str	r2, [r4, #4]
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	e7ec      	b.n	800685a <__ssvfiscanf_r+0x3a>
 8006880:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006882:	4621      	mov	r1, r4
 8006884:	4630      	mov	r0, r6
 8006886:	4798      	blx	r3
 8006888:	2800      	cmp	r0, #0
 800688a:	d0e9      	beq.n	8006860 <__ssvfiscanf_r+0x40>
 800688c:	e7ed      	b.n	800686a <__ssvfiscanf_r+0x4a>
 800688e:	2b25      	cmp	r3, #37	@ 0x25
 8006890:	d012      	beq.n	80068b8 <__ssvfiscanf_r+0x98>
 8006892:	4699      	mov	r9, r3
 8006894:	6863      	ldr	r3, [r4, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	f340 8093 	ble.w	80069c2 <__ssvfiscanf_r+0x1a2>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	7813      	ldrb	r3, [r2, #0]
 80068a0:	454b      	cmp	r3, r9
 80068a2:	f040 812c 	bne.w	8006afe <__ssvfiscanf_r+0x2de>
 80068a6:	6863      	ldr	r3, [r4, #4]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	6063      	str	r3, [r4, #4]
 80068ac:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80068ae:	3201      	adds	r2, #1
 80068b0:	3301      	adds	r3, #1
 80068b2:	6022      	str	r2, [r4, #0]
 80068b4:	9345      	str	r3, [sp, #276]	@ 0x114
 80068b6:	e7d8      	b.n	800686a <__ssvfiscanf_r+0x4a>
 80068b8:	9141      	str	r1, [sp, #260]	@ 0x104
 80068ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80068bc:	7853      	ldrb	r3, [r2, #1]
 80068be:	2b2a      	cmp	r3, #42	@ 0x2a
 80068c0:	bf02      	ittt	eq
 80068c2:	2310      	moveq	r3, #16
 80068c4:	1c95      	addeq	r5, r2, #2
 80068c6:	9341      	streq	r3, [sp, #260]	@ 0x104
 80068c8:	220a      	movs	r2, #10
 80068ca:	46a9      	mov	r9, r5
 80068cc:	f819 1b01 	ldrb.w	r1, [r9], #1
 80068d0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80068d4:	2b09      	cmp	r3, #9
 80068d6:	d91e      	bls.n	8006916 <__ssvfiscanf_r+0xf6>
 80068d8:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006ad4 <__ssvfiscanf_r+0x2b4>
 80068dc:	2203      	movs	r2, #3
 80068de:	4650      	mov	r0, sl
 80068e0:	f7f9 fc7e 	bl	80001e0 <memchr>
 80068e4:	b138      	cbz	r0, 80068f6 <__ssvfiscanf_r+0xd6>
 80068e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80068e8:	eba0 000a 	sub.w	r0, r0, sl
 80068ec:	2301      	movs	r3, #1
 80068ee:	4083      	lsls	r3, r0
 80068f0:	4313      	orrs	r3, r2
 80068f2:	9341      	str	r3, [sp, #260]	@ 0x104
 80068f4:	464d      	mov	r5, r9
 80068f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068fa:	2b78      	cmp	r3, #120	@ 0x78
 80068fc:	d806      	bhi.n	800690c <__ssvfiscanf_r+0xec>
 80068fe:	2b57      	cmp	r3, #87	@ 0x57
 8006900:	d810      	bhi.n	8006924 <__ssvfiscanf_r+0x104>
 8006902:	2b25      	cmp	r3, #37	@ 0x25
 8006904:	d0c5      	beq.n	8006892 <__ssvfiscanf_r+0x72>
 8006906:	d857      	bhi.n	80069b8 <__ssvfiscanf_r+0x198>
 8006908:	2b00      	cmp	r3, #0
 800690a:	d065      	beq.n	80069d8 <__ssvfiscanf_r+0x1b8>
 800690c:	2303      	movs	r3, #3
 800690e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006910:	230a      	movs	r3, #10
 8006912:	9342      	str	r3, [sp, #264]	@ 0x108
 8006914:	e078      	b.n	8006a08 <__ssvfiscanf_r+0x1e8>
 8006916:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006918:	fb02 1103 	mla	r1, r2, r3, r1
 800691c:	3930      	subs	r1, #48	@ 0x30
 800691e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006920:	464d      	mov	r5, r9
 8006922:	e7d2      	b.n	80068ca <__ssvfiscanf_r+0xaa>
 8006924:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006928:	2a20      	cmp	r2, #32
 800692a:	d8ef      	bhi.n	800690c <__ssvfiscanf_r+0xec>
 800692c:	a101      	add	r1, pc, #4	@ (adr r1, 8006934 <__ssvfiscanf_r+0x114>)
 800692e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006932:	bf00      	nop
 8006934:	080069e7 	.word	0x080069e7
 8006938:	0800690d 	.word	0x0800690d
 800693c:	0800690d 	.word	0x0800690d
 8006940:	08006a41 	.word	0x08006a41
 8006944:	0800690d 	.word	0x0800690d
 8006948:	0800690d 	.word	0x0800690d
 800694c:	0800690d 	.word	0x0800690d
 8006950:	0800690d 	.word	0x0800690d
 8006954:	0800690d 	.word	0x0800690d
 8006958:	0800690d 	.word	0x0800690d
 800695c:	0800690d 	.word	0x0800690d
 8006960:	08006a57 	.word	0x08006a57
 8006964:	08006a3d 	.word	0x08006a3d
 8006968:	080069bf 	.word	0x080069bf
 800696c:	080069bf 	.word	0x080069bf
 8006970:	080069bf 	.word	0x080069bf
 8006974:	0800690d 	.word	0x0800690d
 8006978:	080069f9 	.word	0x080069f9
 800697c:	0800690d 	.word	0x0800690d
 8006980:	0800690d 	.word	0x0800690d
 8006984:	0800690d 	.word	0x0800690d
 8006988:	0800690d 	.word	0x0800690d
 800698c:	08006a67 	.word	0x08006a67
 8006990:	08006a01 	.word	0x08006a01
 8006994:	080069df 	.word	0x080069df
 8006998:	0800690d 	.word	0x0800690d
 800699c:	0800690d 	.word	0x0800690d
 80069a0:	08006a63 	.word	0x08006a63
 80069a4:	0800690d 	.word	0x0800690d
 80069a8:	08006a3d 	.word	0x08006a3d
 80069ac:	0800690d 	.word	0x0800690d
 80069b0:	0800690d 	.word	0x0800690d
 80069b4:	080069e7 	.word	0x080069e7
 80069b8:	3b45      	subs	r3, #69	@ 0x45
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d8a6      	bhi.n	800690c <__ssvfiscanf_r+0xec>
 80069be:	2305      	movs	r3, #5
 80069c0:	e021      	b.n	8006a06 <__ssvfiscanf_r+0x1e6>
 80069c2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80069c4:	4621      	mov	r1, r4
 80069c6:	4630      	mov	r0, r6
 80069c8:	4798      	blx	r3
 80069ca:	2800      	cmp	r0, #0
 80069cc:	f43f af66 	beq.w	800689c <__ssvfiscanf_r+0x7c>
 80069d0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80069d2:	2800      	cmp	r0, #0
 80069d4:	f040 808b 	bne.w	8006aee <__ssvfiscanf_r+0x2ce>
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295
 80069dc:	e08b      	b.n	8006af6 <__ssvfiscanf_r+0x2d6>
 80069de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80069e0:	f042 0220 	orr.w	r2, r2, #32
 80069e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80069e6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80069e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069ec:	9241      	str	r2, [sp, #260]	@ 0x104
 80069ee:	2210      	movs	r2, #16
 80069f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80069f2:	9242      	str	r2, [sp, #264]	@ 0x108
 80069f4:	d902      	bls.n	80069fc <__ssvfiscanf_r+0x1dc>
 80069f6:	e005      	b.n	8006a04 <__ssvfiscanf_r+0x1e4>
 80069f8:	2300      	movs	r3, #0
 80069fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80069fc:	2303      	movs	r3, #3
 80069fe:	e002      	b.n	8006a06 <__ssvfiscanf_r+0x1e6>
 8006a00:	2308      	movs	r3, #8
 8006a02:	9342      	str	r3, [sp, #264]	@ 0x108
 8006a04:	2304      	movs	r3, #4
 8006a06:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dd39      	ble.n	8006a82 <__ssvfiscanf_r+0x262>
 8006a0e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006a10:	0659      	lsls	r1, r3, #25
 8006a12:	d404      	bmi.n	8006a1e <__ssvfiscanf_r+0x1fe>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	781a      	ldrb	r2, [r3, #0]
 8006a18:	5cba      	ldrb	r2, [r7, r2]
 8006a1a:	0712      	lsls	r2, r2, #28
 8006a1c:	d438      	bmi.n	8006a90 <__ssvfiscanf_r+0x270>
 8006a1e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	dc47      	bgt.n	8006ab4 <__ssvfiscanf_r+0x294>
 8006a24:	466b      	mov	r3, sp
 8006a26:	4622      	mov	r2, r4
 8006a28:	a941      	add	r1, sp, #260	@ 0x104
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	f000 fb3c 	bl	80070a8 <_scanf_chars>
 8006a30:	2801      	cmp	r0, #1
 8006a32:	d064      	beq.n	8006afe <__ssvfiscanf_r+0x2de>
 8006a34:	2802      	cmp	r0, #2
 8006a36:	f47f af18 	bne.w	800686a <__ssvfiscanf_r+0x4a>
 8006a3a:	e7c9      	b.n	80069d0 <__ssvfiscanf_r+0x1b0>
 8006a3c:	220a      	movs	r2, #10
 8006a3e:	e7d7      	b.n	80069f0 <__ssvfiscanf_r+0x1d0>
 8006a40:	4629      	mov	r1, r5
 8006a42:	4640      	mov	r0, r8
 8006a44:	f000 fd8c 	bl	8007560 <__sccl>
 8006a48:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006a4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a4e:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a50:	4605      	mov	r5, r0
 8006a52:	2301      	movs	r3, #1
 8006a54:	e7d7      	b.n	8006a06 <__ssvfiscanf_r+0x1e6>
 8006a56:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a5c:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e7d1      	b.n	8006a06 <__ssvfiscanf_r+0x1e6>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e7cf      	b.n	8006a06 <__ssvfiscanf_r+0x1e6>
 8006a66:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006a68:	06c3      	lsls	r3, r0, #27
 8006a6a:	f53f aefe 	bmi.w	800686a <__ssvfiscanf_r+0x4a>
 8006a6e:	9b00      	ldr	r3, [sp, #0]
 8006a70:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a72:	1d19      	adds	r1, r3, #4
 8006a74:	9100      	str	r1, [sp, #0]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	07c0      	lsls	r0, r0, #31
 8006a7a:	bf4c      	ite	mi
 8006a7c:	801a      	strhmi	r2, [r3, #0]
 8006a7e:	601a      	strpl	r2, [r3, #0]
 8006a80:	e6f3      	b.n	800686a <__ssvfiscanf_r+0x4a>
 8006a82:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006a84:	4621      	mov	r1, r4
 8006a86:	4630      	mov	r0, r6
 8006a88:	4798      	blx	r3
 8006a8a:	2800      	cmp	r0, #0
 8006a8c:	d0bf      	beq.n	8006a0e <__ssvfiscanf_r+0x1ee>
 8006a8e:	e79f      	b.n	80069d0 <__ssvfiscanf_r+0x1b0>
 8006a90:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a92:	3201      	adds	r2, #1
 8006a94:	9245      	str	r2, [sp, #276]	@ 0x114
 8006a96:	6862      	ldr	r2, [r4, #4]
 8006a98:	3a01      	subs	r2, #1
 8006a9a:	2a00      	cmp	r2, #0
 8006a9c:	6062      	str	r2, [r4, #4]
 8006a9e:	dd02      	ble.n	8006aa6 <__ssvfiscanf_r+0x286>
 8006aa0:	3301      	adds	r3, #1
 8006aa2:	6023      	str	r3, [r4, #0]
 8006aa4:	e7b6      	b.n	8006a14 <__ssvfiscanf_r+0x1f4>
 8006aa6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4798      	blx	r3
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0b0      	beq.n	8006a14 <__ssvfiscanf_r+0x1f4>
 8006ab2:	e78d      	b.n	80069d0 <__ssvfiscanf_r+0x1b0>
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	dc0f      	bgt.n	8006ad8 <__ssvfiscanf_r+0x2b8>
 8006ab8:	466b      	mov	r3, sp
 8006aba:	4622      	mov	r2, r4
 8006abc:	a941      	add	r1, sp, #260	@ 0x104
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f000 fb4c 	bl	800715c <_scanf_i>
 8006ac4:	e7b4      	b.n	8006a30 <__ssvfiscanf_r+0x210>
 8006ac6:	bf00      	nop
 8006ac8:	08006771 	.word	0x08006771
 8006acc:	080067e7 	.word	0x080067e7
 8006ad0:	08007c59 	.word	0x08007c59
 8006ad4:	08007d5f 	.word	0x08007d5f
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8006b04 <__ssvfiscanf_r+0x2e4>)
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f43f aec5 	beq.w	800686a <__ssvfiscanf_r+0x4a>
 8006ae0:	466b      	mov	r3, sp
 8006ae2:	4622      	mov	r2, r4
 8006ae4:	a941      	add	r1, sp, #260	@ 0x104
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f3af 8000 	nop.w
 8006aec:	e7a0      	b.n	8006a30 <__ssvfiscanf_r+0x210>
 8006aee:	89a3      	ldrh	r3, [r4, #12]
 8006af0:	065b      	lsls	r3, r3, #25
 8006af2:	f53f af71 	bmi.w	80069d8 <__ssvfiscanf_r+0x1b8>
 8006af6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afe:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006b00:	e7f9      	b.n	8006af6 <__ssvfiscanf_r+0x2d6>
 8006b02:	bf00      	nop
 8006b04:	00000000 	.word	0x00000000

08006b08 <__sfputc_r>:
 8006b08:	6893      	ldr	r3, [r2, #8]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	b410      	push	{r4}
 8006b10:	6093      	str	r3, [r2, #8]
 8006b12:	da08      	bge.n	8006b26 <__sfputc_r+0x1e>
 8006b14:	6994      	ldr	r4, [r2, #24]
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	db01      	blt.n	8006b1e <__sfputc_r+0x16>
 8006b1a:	290a      	cmp	r1, #10
 8006b1c:	d103      	bne.n	8006b26 <__sfputc_r+0x1e>
 8006b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b22:	f7ff bac4 	b.w	80060ae <__swbuf_r>
 8006b26:	6813      	ldr	r3, [r2, #0]
 8006b28:	1c58      	adds	r0, r3, #1
 8006b2a:	6010      	str	r0, [r2, #0]
 8006b2c:	7019      	strb	r1, [r3, #0]
 8006b2e:	4608      	mov	r0, r1
 8006b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <__sfputs_r>:
 8006b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b38:	4606      	mov	r6, r0
 8006b3a:	460f      	mov	r7, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	18d5      	adds	r5, r2, r3
 8006b40:	42ac      	cmp	r4, r5
 8006b42:	d101      	bne.n	8006b48 <__sfputs_r+0x12>
 8006b44:	2000      	movs	r0, #0
 8006b46:	e007      	b.n	8006b58 <__sfputs_r+0x22>
 8006b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4c:	463a      	mov	r2, r7
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff ffda 	bl	8006b08 <__sfputc_r>
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d1f3      	bne.n	8006b40 <__sfputs_r+0xa>
 8006b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b5c <_vfiprintf_r>:
 8006b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b60:	460d      	mov	r5, r1
 8006b62:	b09d      	sub	sp, #116	@ 0x74
 8006b64:	4614      	mov	r4, r2
 8006b66:	4698      	mov	r8, r3
 8006b68:	4606      	mov	r6, r0
 8006b6a:	b118      	cbz	r0, 8006b74 <_vfiprintf_r+0x18>
 8006b6c:	6a03      	ldr	r3, [r0, #32]
 8006b6e:	b90b      	cbnz	r3, 8006b74 <_vfiprintf_r+0x18>
 8006b70:	f7ff f968 	bl	8005e44 <__sinit>
 8006b74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b76:	07d9      	lsls	r1, r3, #31
 8006b78:	d405      	bmi.n	8006b86 <_vfiprintf_r+0x2a>
 8006b7a:	89ab      	ldrh	r3, [r5, #12]
 8006b7c:	059a      	lsls	r2, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_vfiprintf_r+0x2a>
 8006b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006b82:	f7ff fba2 	bl	80062ca <__retarget_lock_acquire_recursive>
 8006b86:	89ab      	ldrh	r3, [r5, #12]
 8006b88:	071b      	lsls	r3, r3, #28
 8006b8a:	d501      	bpl.n	8006b90 <_vfiprintf_r+0x34>
 8006b8c:	692b      	ldr	r3, [r5, #16]
 8006b8e:	b99b      	cbnz	r3, 8006bb8 <_vfiprintf_r+0x5c>
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff faca 	bl	800612c <__swsetup_r>
 8006b98:	b170      	cbz	r0, 8006bb8 <_vfiprintf_r+0x5c>
 8006b9a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006b9c:	07dc      	lsls	r4, r3, #31
 8006b9e:	d504      	bpl.n	8006baa <_vfiprintf_r+0x4e>
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	b01d      	add	sp, #116	@ 0x74
 8006ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006baa:	89ab      	ldrh	r3, [r5, #12]
 8006bac:	0598      	lsls	r0, r3, #22
 8006bae:	d4f7      	bmi.n	8006ba0 <_vfiprintf_r+0x44>
 8006bb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bb2:	f7ff fb8b 	bl	80062cc <__retarget_lock_release_recursive>
 8006bb6:	e7f3      	b.n	8006ba0 <_vfiprintf_r+0x44>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bc6:	2330      	movs	r3, #48	@ 0x30
 8006bc8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006d78 <_vfiprintf_r+0x21c>
 8006bcc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006bd0:	f04f 0901 	mov.w	r9, #1
 8006bd4:	4623      	mov	r3, r4
 8006bd6:	469a      	mov	sl, r3
 8006bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bdc:	b10a      	cbz	r2, 8006be2 <_vfiprintf_r+0x86>
 8006bde:	2a25      	cmp	r2, #37	@ 0x25
 8006be0:	d1f9      	bne.n	8006bd6 <_vfiprintf_r+0x7a>
 8006be2:	ebba 0b04 	subs.w	fp, sl, r4
 8006be6:	d00b      	beq.n	8006c00 <_vfiprintf_r+0xa4>
 8006be8:	465b      	mov	r3, fp
 8006bea:	4622      	mov	r2, r4
 8006bec:	4629      	mov	r1, r5
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7ff ffa1 	bl	8006b36 <__sfputs_r>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	f000 80a7 	beq.w	8006d48 <_vfiprintf_r+0x1ec>
 8006bfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bfc:	445a      	add	r2, fp
 8006bfe:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c00:	f89a 3000 	ldrb.w	r3, [sl]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 809f 	beq.w	8006d48 <_vfiprintf_r+0x1ec>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c14:	f10a 0a01 	add.w	sl, sl, #1
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	9307      	str	r3, [sp, #28]
 8006c1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c20:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c22:	4654      	mov	r4, sl
 8006c24:	2205      	movs	r2, #5
 8006c26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2a:	4853      	ldr	r0, [pc, #332]	@ (8006d78 <_vfiprintf_r+0x21c>)
 8006c2c:	f7f9 fad8 	bl	80001e0 <memchr>
 8006c30:	9a04      	ldr	r2, [sp, #16]
 8006c32:	b9d8      	cbnz	r0, 8006c6c <_vfiprintf_r+0x110>
 8006c34:	06d1      	lsls	r1, r2, #27
 8006c36:	bf44      	itt	mi
 8006c38:	2320      	movmi	r3, #32
 8006c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c3e:	0713      	lsls	r3, r2, #28
 8006c40:	bf44      	itt	mi
 8006c42:	232b      	movmi	r3, #43	@ 0x2b
 8006c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c48:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c4e:	d015      	beq.n	8006c7c <_vfiprintf_r+0x120>
 8006c50:	9a07      	ldr	r2, [sp, #28]
 8006c52:	4654      	mov	r4, sl
 8006c54:	2000      	movs	r0, #0
 8006c56:	f04f 0c0a 	mov.w	ip, #10
 8006c5a:	4621      	mov	r1, r4
 8006c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c60:	3b30      	subs	r3, #48	@ 0x30
 8006c62:	2b09      	cmp	r3, #9
 8006c64:	d94b      	bls.n	8006cfe <_vfiprintf_r+0x1a2>
 8006c66:	b1b0      	cbz	r0, 8006c96 <_vfiprintf_r+0x13a>
 8006c68:	9207      	str	r2, [sp, #28]
 8006c6a:	e014      	b.n	8006c96 <_vfiprintf_r+0x13a>
 8006c6c:	eba0 0308 	sub.w	r3, r0, r8
 8006c70:	fa09 f303 	lsl.w	r3, r9, r3
 8006c74:	4313      	orrs	r3, r2
 8006c76:	9304      	str	r3, [sp, #16]
 8006c78:	46a2      	mov	sl, r4
 8006c7a:	e7d2      	b.n	8006c22 <_vfiprintf_r+0xc6>
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	1d19      	adds	r1, r3, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	9103      	str	r1, [sp, #12]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bfbb      	ittet	lt
 8006c88:	425b      	neglt	r3, r3
 8006c8a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c8e:	9307      	strge	r3, [sp, #28]
 8006c90:	9307      	strlt	r3, [sp, #28]
 8006c92:	bfb8      	it	lt
 8006c94:	9204      	strlt	r2, [sp, #16]
 8006c96:	7823      	ldrb	r3, [r4, #0]
 8006c98:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c9a:	d10a      	bne.n	8006cb2 <_vfiprintf_r+0x156>
 8006c9c:	7863      	ldrb	r3, [r4, #1]
 8006c9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ca0:	d132      	bne.n	8006d08 <_vfiprintf_r+0x1ac>
 8006ca2:	9b03      	ldr	r3, [sp, #12]
 8006ca4:	1d1a      	adds	r2, r3, #4
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	9203      	str	r2, [sp, #12]
 8006caa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cae:	3402      	adds	r4, #2
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006d88 <_vfiprintf_r+0x22c>
 8006cb6:	7821      	ldrb	r1, [r4, #0]
 8006cb8:	2203      	movs	r2, #3
 8006cba:	4650      	mov	r0, sl
 8006cbc:	f7f9 fa90 	bl	80001e0 <memchr>
 8006cc0:	b138      	cbz	r0, 8006cd2 <_vfiprintf_r+0x176>
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	eba0 000a 	sub.w	r0, r0, sl
 8006cc8:	2240      	movs	r2, #64	@ 0x40
 8006cca:	4082      	lsls	r2, r0
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	3401      	adds	r4, #1
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd6:	4829      	ldr	r0, [pc, #164]	@ (8006d7c <_vfiprintf_r+0x220>)
 8006cd8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006cdc:	2206      	movs	r2, #6
 8006cde:	f7f9 fa7f 	bl	80001e0 <memchr>
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	d03f      	beq.n	8006d66 <_vfiprintf_r+0x20a>
 8006ce6:	4b26      	ldr	r3, [pc, #152]	@ (8006d80 <_vfiprintf_r+0x224>)
 8006ce8:	bb1b      	cbnz	r3, 8006d32 <_vfiprintf_r+0x1d6>
 8006cea:	9b03      	ldr	r3, [sp, #12]
 8006cec:	3307      	adds	r3, #7
 8006cee:	f023 0307 	bic.w	r3, r3, #7
 8006cf2:	3308      	adds	r3, #8
 8006cf4:	9303      	str	r3, [sp, #12]
 8006cf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cf8:	443b      	add	r3, r7
 8006cfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cfc:	e76a      	b.n	8006bd4 <_vfiprintf_r+0x78>
 8006cfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d02:	460c      	mov	r4, r1
 8006d04:	2001      	movs	r0, #1
 8006d06:	e7a8      	b.n	8006c5a <_vfiprintf_r+0xfe>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	3401      	adds	r4, #1
 8006d0c:	9305      	str	r3, [sp, #20]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f04f 0c0a 	mov.w	ip, #10
 8006d14:	4620      	mov	r0, r4
 8006d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d1a:	3a30      	subs	r2, #48	@ 0x30
 8006d1c:	2a09      	cmp	r2, #9
 8006d1e:	d903      	bls.n	8006d28 <_vfiprintf_r+0x1cc>
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d0c6      	beq.n	8006cb2 <_vfiprintf_r+0x156>
 8006d24:	9105      	str	r1, [sp, #20]
 8006d26:	e7c4      	b.n	8006cb2 <_vfiprintf_r+0x156>
 8006d28:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7f0      	b.n	8006d14 <_vfiprintf_r+0x1b8>
 8006d32:	ab03      	add	r3, sp, #12
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	462a      	mov	r2, r5
 8006d38:	4b12      	ldr	r3, [pc, #72]	@ (8006d84 <_vfiprintf_r+0x228>)
 8006d3a:	a904      	add	r1, sp, #16
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	f3af 8000 	nop.w
 8006d42:	4607      	mov	r7, r0
 8006d44:	1c78      	adds	r0, r7, #1
 8006d46:	d1d6      	bne.n	8006cf6 <_vfiprintf_r+0x19a>
 8006d48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006d4a:	07d9      	lsls	r1, r3, #31
 8006d4c:	d405      	bmi.n	8006d5a <_vfiprintf_r+0x1fe>
 8006d4e:	89ab      	ldrh	r3, [r5, #12]
 8006d50:	059a      	lsls	r2, r3, #22
 8006d52:	d402      	bmi.n	8006d5a <_vfiprintf_r+0x1fe>
 8006d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006d56:	f7ff fab9 	bl	80062cc <__retarget_lock_release_recursive>
 8006d5a:	89ab      	ldrh	r3, [r5, #12]
 8006d5c:	065b      	lsls	r3, r3, #25
 8006d5e:	f53f af1f 	bmi.w	8006ba0 <_vfiprintf_r+0x44>
 8006d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d64:	e71e      	b.n	8006ba4 <_vfiprintf_r+0x48>
 8006d66:	ab03      	add	r3, sp, #12
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4b05      	ldr	r3, [pc, #20]	@ (8006d84 <_vfiprintf_r+0x228>)
 8006d6e:	a904      	add	r1, sp, #16
 8006d70:	4630      	mov	r0, r6
 8006d72:	f000 f879 	bl	8006e68 <_printf_i>
 8006d76:	e7e4      	b.n	8006d42 <_vfiprintf_r+0x1e6>
 8006d78:	08007d59 	.word	0x08007d59
 8006d7c:	08007d63 	.word	0x08007d63
 8006d80:	00000000 	.word	0x00000000
 8006d84:	08006b37 	.word	0x08006b37
 8006d88:	08007d5f 	.word	0x08007d5f

08006d8c <_printf_common>:
 8006d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d90:	4616      	mov	r6, r2
 8006d92:	4698      	mov	r8, r3
 8006d94:	688a      	ldr	r2, [r1, #8]
 8006d96:	690b      	ldr	r3, [r1, #16]
 8006d98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	bfb8      	it	lt
 8006da0:	4613      	movlt	r3, r2
 8006da2:	6033      	str	r3, [r6, #0]
 8006da4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006da8:	4607      	mov	r7, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	b10a      	cbz	r2, 8006db2 <_printf_common+0x26>
 8006dae:	3301      	adds	r3, #1
 8006db0:	6033      	str	r3, [r6, #0]
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	0699      	lsls	r1, r3, #26
 8006db6:	bf42      	ittt	mi
 8006db8:	6833      	ldrmi	r3, [r6, #0]
 8006dba:	3302      	addmi	r3, #2
 8006dbc:	6033      	strmi	r3, [r6, #0]
 8006dbe:	6825      	ldr	r5, [r4, #0]
 8006dc0:	f015 0506 	ands.w	r5, r5, #6
 8006dc4:	d106      	bne.n	8006dd4 <_printf_common+0x48>
 8006dc6:	f104 0a19 	add.w	sl, r4, #25
 8006dca:	68e3      	ldr	r3, [r4, #12]
 8006dcc:	6832      	ldr	r2, [r6, #0]
 8006dce:	1a9b      	subs	r3, r3, r2
 8006dd0:	42ab      	cmp	r3, r5
 8006dd2:	dc26      	bgt.n	8006e22 <_printf_common+0x96>
 8006dd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dd8:	6822      	ldr	r2, [r4, #0]
 8006dda:	3b00      	subs	r3, #0
 8006ddc:	bf18      	it	ne
 8006dde:	2301      	movne	r3, #1
 8006de0:	0692      	lsls	r2, r2, #26
 8006de2:	d42b      	bmi.n	8006e3c <_printf_common+0xb0>
 8006de4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006de8:	4641      	mov	r1, r8
 8006dea:	4638      	mov	r0, r7
 8006dec:	47c8      	blx	r9
 8006dee:	3001      	adds	r0, #1
 8006df0:	d01e      	beq.n	8006e30 <_printf_common+0xa4>
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	6922      	ldr	r2, [r4, #16]
 8006df6:	f003 0306 	and.w	r3, r3, #6
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	bf02      	ittt	eq
 8006dfe:	68e5      	ldreq	r5, [r4, #12]
 8006e00:	6833      	ldreq	r3, [r6, #0]
 8006e02:	1aed      	subeq	r5, r5, r3
 8006e04:	68a3      	ldr	r3, [r4, #8]
 8006e06:	bf0c      	ite	eq
 8006e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e0c:	2500      	movne	r5, #0
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	bfc4      	itt	gt
 8006e12:	1a9b      	subgt	r3, r3, r2
 8006e14:	18ed      	addgt	r5, r5, r3
 8006e16:	2600      	movs	r6, #0
 8006e18:	341a      	adds	r4, #26
 8006e1a:	42b5      	cmp	r5, r6
 8006e1c:	d11a      	bne.n	8006e54 <_printf_common+0xc8>
 8006e1e:	2000      	movs	r0, #0
 8006e20:	e008      	b.n	8006e34 <_printf_common+0xa8>
 8006e22:	2301      	movs	r3, #1
 8006e24:	4652      	mov	r2, sl
 8006e26:	4641      	mov	r1, r8
 8006e28:	4638      	mov	r0, r7
 8006e2a:	47c8      	blx	r9
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	d103      	bne.n	8006e38 <_printf_common+0xac>
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e38:	3501      	adds	r5, #1
 8006e3a:	e7c6      	b.n	8006dca <_printf_common+0x3e>
 8006e3c:	18e1      	adds	r1, r4, r3
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	2030      	movs	r0, #48	@ 0x30
 8006e42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e46:	4422      	add	r2, r4
 8006e48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e50:	3302      	adds	r3, #2
 8006e52:	e7c7      	b.n	8006de4 <_printf_common+0x58>
 8006e54:	2301      	movs	r3, #1
 8006e56:	4622      	mov	r2, r4
 8006e58:	4641      	mov	r1, r8
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	47c8      	blx	r9
 8006e5e:	3001      	adds	r0, #1
 8006e60:	d0e6      	beq.n	8006e30 <_printf_common+0xa4>
 8006e62:	3601      	adds	r6, #1
 8006e64:	e7d9      	b.n	8006e1a <_printf_common+0x8e>
	...

08006e68 <_printf_i>:
 8006e68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e6c:	7e0f      	ldrb	r7, [r1, #24]
 8006e6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e70:	2f78      	cmp	r7, #120	@ 0x78
 8006e72:	4691      	mov	r9, r2
 8006e74:	4680      	mov	r8, r0
 8006e76:	460c      	mov	r4, r1
 8006e78:	469a      	mov	sl, r3
 8006e7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e7e:	d807      	bhi.n	8006e90 <_printf_i+0x28>
 8006e80:	2f62      	cmp	r7, #98	@ 0x62
 8006e82:	d80a      	bhi.n	8006e9a <_printf_i+0x32>
 8006e84:	2f00      	cmp	r7, #0
 8006e86:	f000 80d2 	beq.w	800702e <_printf_i+0x1c6>
 8006e8a:	2f58      	cmp	r7, #88	@ 0x58
 8006e8c:	f000 80b9 	beq.w	8007002 <_printf_i+0x19a>
 8006e90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e98:	e03a      	b.n	8006f10 <_printf_i+0xa8>
 8006e9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e9e:	2b15      	cmp	r3, #21
 8006ea0:	d8f6      	bhi.n	8006e90 <_printf_i+0x28>
 8006ea2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ea8 <_printf_i+0x40>)
 8006ea4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ea8:	08006f01 	.word	0x08006f01
 8006eac:	08006f15 	.word	0x08006f15
 8006eb0:	08006e91 	.word	0x08006e91
 8006eb4:	08006e91 	.word	0x08006e91
 8006eb8:	08006e91 	.word	0x08006e91
 8006ebc:	08006e91 	.word	0x08006e91
 8006ec0:	08006f15 	.word	0x08006f15
 8006ec4:	08006e91 	.word	0x08006e91
 8006ec8:	08006e91 	.word	0x08006e91
 8006ecc:	08006e91 	.word	0x08006e91
 8006ed0:	08006e91 	.word	0x08006e91
 8006ed4:	08007015 	.word	0x08007015
 8006ed8:	08006f3f 	.word	0x08006f3f
 8006edc:	08006fcf 	.word	0x08006fcf
 8006ee0:	08006e91 	.word	0x08006e91
 8006ee4:	08006e91 	.word	0x08006e91
 8006ee8:	08007037 	.word	0x08007037
 8006eec:	08006e91 	.word	0x08006e91
 8006ef0:	08006f3f 	.word	0x08006f3f
 8006ef4:	08006e91 	.word	0x08006e91
 8006ef8:	08006e91 	.word	0x08006e91
 8006efc:	08006fd7 	.word	0x08006fd7
 8006f00:	6833      	ldr	r3, [r6, #0]
 8006f02:	1d1a      	adds	r2, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6032      	str	r2, [r6, #0]
 8006f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f10:	2301      	movs	r3, #1
 8006f12:	e09d      	b.n	8007050 <_printf_i+0x1e8>
 8006f14:	6833      	ldr	r3, [r6, #0]
 8006f16:	6820      	ldr	r0, [r4, #0]
 8006f18:	1d19      	adds	r1, r3, #4
 8006f1a:	6031      	str	r1, [r6, #0]
 8006f1c:	0606      	lsls	r6, r0, #24
 8006f1e:	d501      	bpl.n	8006f24 <_printf_i+0xbc>
 8006f20:	681d      	ldr	r5, [r3, #0]
 8006f22:	e003      	b.n	8006f2c <_printf_i+0xc4>
 8006f24:	0645      	lsls	r5, r0, #25
 8006f26:	d5fb      	bpl.n	8006f20 <_printf_i+0xb8>
 8006f28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f2c:	2d00      	cmp	r5, #0
 8006f2e:	da03      	bge.n	8006f38 <_printf_i+0xd0>
 8006f30:	232d      	movs	r3, #45	@ 0x2d
 8006f32:	426d      	negs	r5, r5
 8006f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f38:	4859      	ldr	r0, [pc, #356]	@ (80070a0 <_printf_i+0x238>)
 8006f3a:	230a      	movs	r3, #10
 8006f3c:	e011      	b.n	8006f62 <_printf_i+0xfa>
 8006f3e:	6821      	ldr	r1, [r4, #0]
 8006f40:	6833      	ldr	r3, [r6, #0]
 8006f42:	0608      	lsls	r0, r1, #24
 8006f44:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f48:	d402      	bmi.n	8006f50 <_printf_i+0xe8>
 8006f4a:	0649      	lsls	r1, r1, #25
 8006f4c:	bf48      	it	mi
 8006f4e:	b2ad      	uxthmi	r5, r5
 8006f50:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f52:	4853      	ldr	r0, [pc, #332]	@ (80070a0 <_printf_i+0x238>)
 8006f54:	6033      	str	r3, [r6, #0]
 8006f56:	bf14      	ite	ne
 8006f58:	230a      	movne	r3, #10
 8006f5a:	2308      	moveq	r3, #8
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f62:	6866      	ldr	r6, [r4, #4]
 8006f64:	60a6      	str	r6, [r4, #8]
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	bfa2      	ittt	ge
 8006f6a:	6821      	ldrge	r1, [r4, #0]
 8006f6c:	f021 0104 	bicge.w	r1, r1, #4
 8006f70:	6021      	strge	r1, [r4, #0]
 8006f72:	b90d      	cbnz	r5, 8006f78 <_printf_i+0x110>
 8006f74:	2e00      	cmp	r6, #0
 8006f76:	d04b      	beq.n	8007010 <_printf_i+0x1a8>
 8006f78:	4616      	mov	r6, r2
 8006f7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f7e:	fb03 5711 	mls	r7, r3, r1, r5
 8006f82:	5dc7      	ldrb	r7, [r0, r7]
 8006f84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f88:	462f      	mov	r7, r5
 8006f8a:	42bb      	cmp	r3, r7
 8006f8c:	460d      	mov	r5, r1
 8006f8e:	d9f4      	bls.n	8006f7a <_printf_i+0x112>
 8006f90:	2b08      	cmp	r3, #8
 8006f92:	d10b      	bne.n	8006fac <_printf_i+0x144>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	07df      	lsls	r7, r3, #31
 8006f98:	d508      	bpl.n	8006fac <_printf_i+0x144>
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	6861      	ldr	r1, [r4, #4]
 8006f9e:	4299      	cmp	r1, r3
 8006fa0:	bfde      	ittt	le
 8006fa2:	2330      	movle	r3, #48	@ 0x30
 8006fa4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fac:	1b92      	subs	r2, r2, r6
 8006fae:	6122      	str	r2, [r4, #16]
 8006fb0:	f8cd a000 	str.w	sl, [sp]
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	aa03      	add	r2, sp, #12
 8006fb8:	4621      	mov	r1, r4
 8006fba:	4640      	mov	r0, r8
 8006fbc:	f7ff fee6 	bl	8006d8c <_printf_common>
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	d14a      	bne.n	800705a <_printf_i+0x1f2>
 8006fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc8:	b004      	add	sp, #16
 8006fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fce:	6823      	ldr	r3, [r4, #0]
 8006fd0:	f043 0320 	orr.w	r3, r3, #32
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	4833      	ldr	r0, [pc, #204]	@ (80070a4 <_printf_i+0x23c>)
 8006fd8:	2778      	movs	r7, #120	@ 0x78
 8006fda:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	6831      	ldr	r1, [r6, #0]
 8006fe2:	061f      	lsls	r7, r3, #24
 8006fe4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fe8:	d402      	bmi.n	8006ff0 <_printf_i+0x188>
 8006fea:	065f      	lsls	r7, r3, #25
 8006fec:	bf48      	it	mi
 8006fee:	b2ad      	uxthmi	r5, r5
 8006ff0:	6031      	str	r1, [r6, #0]
 8006ff2:	07d9      	lsls	r1, r3, #31
 8006ff4:	bf44      	itt	mi
 8006ff6:	f043 0320 	orrmi.w	r3, r3, #32
 8006ffa:	6023      	strmi	r3, [r4, #0]
 8006ffc:	b11d      	cbz	r5, 8007006 <_printf_i+0x19e>
 8006ffe:	2310      	movs	r3, #16
 8007000:	e7ac      	b.n	8006f5c <_printf_i+0xf4>
 8007002:	4827      	ldr	r0, [pc, #156]	@ (80070a0 <_printf_i+0x238>)
 8007004:	e7e9      	b.n	8006fda <_printf_i+0x172>
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	f023 0320 	bic.w	r3, r3, #32
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	e7f6      	b.n	8006ffe <_printf_i+0x196>
 8007010:	4616      	mov	r6, r2
 8007012:	e7bd      	b.n	8006f90 <_printf_i+0x128>
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	6825      	ldr	r5, [r4, #0]
 8007018:	6961      	ldr	r1, [r4, #20]
 800701a:	1d18      	adds	r0, r3, #4
 800701c:	6030      	str	r0, [r6, #0]
 800701e:	062e      	lsls	r6, r5, #24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	d501      	bpl.n	8007028 <_printf_i+0x1c0>
 8007024:	6019      	str	r1, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0x1c6>
 8007028:	0668      	lsls	r0, r5, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0x1bc>
 800702c:	8019      	strh	r1, [r3, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	4616      	mov	r6, r2
 8007034:	e7bc      	b.n	8006fb0 <_printf_i+0x148>
 8007036:	6833      	ldr	r3, [r6, #0]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	6032      	str	r2, [r6, #0]
 800703c:	681e      	ldr	r6, [r3, #0]
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	2100      	movs	r1, #0
 8007042:	4630      	mov	r0, r6
 8007044:	f7f9 f8cc 	bl	80001e0 <memchr>
 8007048:	b108      	cbz	r0, 800704e <_printf_i+0x1e6>
 800704a:	1b80      	subs	r0, r0, r6
 800704c:	6060      	str	r0, [r4, #4]
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	6123      	str	r3, [r4, #16]
 8007052:	2300      	movs	r3, #0
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007058:	e7aa      	b.n	8006fb0 <_printf_i+0x148>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	4632      	mov	r2, r6
 800705e:	4649      	mov	r1, r9
 8007060:	4640      	mov	r0, r8
 8007062:	47d0      	blx	sl
 8007064:	3001      	adds	r0, #1
 8007066:	d0ad      	beq.n	8006fc4 <_printf_i+0x15c>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	079b      	lsls	r3, r3, #30
 800706c:	d413      	bmi.n	8007096 <_printf_i+0x22e>
 800706e:	68e0      	ldr	r0, [r4, #12]
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	4298      	cmp	r0, r3
 8007074:	bfb8      	it	lt
 8007076:	4618      	movlt	r0, r3
 8007078:	e7a6      	b.n	8006fc8 <_printf_i+0x160>
 800707a:	2301      	movs	r3, #1
 800707c:	4632      	mov	r2, r6
 800707e:	4649      	mov	r1, r9
 8007080:	4640      	mov	r0, r8
 8007082:	47d0      	blx	sl
 8007084:	3001      	adds	r0, #1
 8007086:	d09d      	beq.n	8006fc4 <_printf_i+0x15c>
 8007088:	3501      	adds	r5, #1
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	9903      	ldr	r1, [sp, #12]
 800708e:	1a5b      	subs	r3, r3, r1
 8007090:	42ab      	cmp	r3, r5
 8007092:	dcf2      	bgt.n	800707a <_printf_i+0x212>
 8007094:	e7eb      	b.n	800706e <_printf_i+0x206>
 8007096:	2500      	movs	r5, #0
 8007098:	f104 0619 	add.w	r6, r4, #25
 800709c:	e7f5      	b.n	800708a <_printf_i+0x222>
 800709e:	bf00      	nop
 80070a0:	08007d6a 	.word	0x08007d6a
 80070a4:	08007d7b 	.word	0x08007d7b

080070a8 <_scanf_chars>:
 80070a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070ac:	4615      	mov	r5, r2
 80070ae:	688a      	ldr	r2, [r1, #8]
 80070b0:	4680      	mov	r8, r0
 80070b2:	460c      	mov	r4, r1
 80070b4:	b932      	cbnz	r2, 80070c4 <_scanf_chars+0x1c>
 80070b6:	698a      	ldr	r2, [r1, #24]
 80070b8:	2a00      	cmp	r2, #0
 80070ba:	bf14      	ite	ne
 80070bc:	f04f 32ff 	movne.w	r2, #4294967295
 80070c0:	2201      	moveq	r2, #1
 80070c2:	608a      	str	r2, [r1, #8]
 80070c4:	6822      	ldr	r2, [r4, #0]
 80070c6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007158 <_scanf_chars+0xb0>
 80070ca:	06d1      	lsls	r1, r2, #27
 80070cc:	bf5f      	itttt	pl
 80070ce:	681a      	ldrpl	r2, [r3, #0]
 80070d0:	1d11      	addpl	r1, r2, #4
 80070d2:	6019      	strpl	r1, [r3, #0]
 80070d4:	6816      	ldrpl	r6, [r2, #0]
 80070d6:	2700      	movs	r7, #0
 80070d8:	69a0      	ldr	r0, [r4, #24]
 80070da:	b188      	cbz	r0, 8007100 <_scanf_chars+0x58>
 80070dc:	2801      	cmp	r0, #1
 80070de:	d107      	bne.n	80070f0 <_scanf_chars+0x48>
 80070e0:	682b      	ldr	r3, [r5, #0]
 80070e2:	781a      	ldrb	r2, [r3, #0]
 80070e4:	6963      	ldr	r3, [r4, #20]
 80070e6:	5c9b      	ldrb	r3, [r3, r2]
 80070e8:	b953      	cbnz	r3, 8007100 <_scanf_chars+0x58>
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	d031      	beq.n	8007152 <_scanf_chars+0xaa>
 80070ee:	e022      	b.n	8007136 <_scanf_chars+0x8e>
 80070f0:	2802      	cmp	r0, #2
 80070f2:	d120      	bne.n	8007136 <_scanf_chars+0x8e>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80070fc:	071b      	lsls	r3, r3, #28
 80070fe:	d41a      	bmi.n	8007136 <_scanf_chars+0x8e>
 8007100:	6823      	ldr	r3, [r4, #0]
 8007102:	06da      	lsls	r2, r3, #27
 8007104:	bf5e      	ittt	pl
 8007106:	682b      	ldrpl	r3, [r5, #0]
 8007108:	781b      	ldrbpl	r3, [r3, #0]
 800710a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800710e:	682a      	ldr	r2, [r5, #0]
 8007110:	686b      	ldr	r3, [r5, #4]
 8007112:	3201      	adds	r2, #1
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	68a2      	ldr	r2, [r4, #8]
 8007118:	3b01      	subs	r3, #1
 800711a:	3a01      	subs	r2, #1
 800711c:	606b      	str	r3, [r5, #4]
 800711e:	3701      	adds	r7, #1
 8007120:	60a2      	str	r2, [r4, #8]
 8007122:	b142      	cbz	r2, 8007136 <_scanf_chars+0x8e>
 8007124:	2b00      	cmp	r3, #0
 8007126:	dcd7      	bgt.n	80070d8 <_scanf_chars+0x30>
 8007128:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800712c:	4629      	mov	r1, r5
 800712e:	4640      	mov	r0, r8
 8007130:	4798      	blx	r3
 8007132:	2800      	cmp	r0, #0
 8007134:	d0d0      	beq.n	80070d8 <_scanf_chars+0x30>
 8007136:	6823      	ldr	r3, [r4, #0]
 8007138:	f013 0310 	ands.w	r3, r3, #16
 800713c:	d105      	bne.n	800714a <_scanf_chars+0xa2>
 800713e:	68e2      	ldr	r2, [r4, #12]
 8007140:	3201      	adds	r2, #1
 8007142:	60e2      	str	r2, [r4, #12]
 8007144:	69a2      	ldr	r2, [r4, #24]
 8007146:	b102      	cbz	r2, 800714a <_scanf_chars+0xa2>
 8007148:	7033      	strb	r3, [r6, #0]
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	443b      	add	r3, r7
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	2000      	movs	r0, #0
 8007152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007156:	bf00      	nop
 8007158:	08007c59 	.word	0x08007c59

0800715c <_scanf_i>:
 800715c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	4698      	mov	r8, r3
 8007162:	4b74      	ldr	r3, [pc, #464]	@ (8007334 <_scanf_i+0x1d8>)
 8007164:	460c      	mov	r4, r1
 8007166:	4682      	mov	sl, r0
 8007168:	4616      	mov	r6, r2
 800716a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800716e:	b087      	sub	sp, #28
 8007170:	ab03      	add	r3, sp, #12
 8007172:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007176:	4b70      	ldr	r3, [pc, #448]	@ (8007338 <_scanf_i+0x1dc>)
 8007178:	69a1      	ldr	r1, [r4, #24]
 800717a:	4a70      	ldr	r2, [pc, #448]	@ (800733c <_scanf_i+0x1e0>)
 800717c:	2903      	cmp	r1, #3
 800717e:	bf08      	it	eq
 8007180:	461a      	moveq	r2, r3
 8007182:	68a3      	ldr	r3, [r4, #8]
 8007184:	9201      	str	r2, [sp, #4]
 8007186:	1e5a      	subs	r2, r3, #1
 8007188:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800718c:	bf88      	it	hi
 800718e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007192:	4627      	mov	r7, r4
 8007194:	bf82      	ittt	hi
 8007196:	eb03 0905 	addhi.w	r9, r3, r5
 800719a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800719e:	60a3      	strhi	r3, [r4, #8]
 80071a0:	f857 3b1c 	ldr.w	r3, [r7], #28
 80071a4:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80071a8:	bf98      	it	ls
 80071aa:	f04f 0900 	movls.w	r9, #0
 80071ae:	6023      	str	r3, [r4, #0]
 80071b0:	463d      	mov	r5, r7
 80071b2:	f04f 0b00 	mov.w	fp, #0
 80071b6:	6831      	ldr	r1, [r6, #0]
 80071b8:	ab03      	add	r3, sp, #12
 80071ba:	7809      	ldrb	r1, [r1, #0]
 80071bc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80071c0:	2202      	movs	r2, #2
 80071c2:	f7f9 f80d 	bl	80001e0 <memchr>
 80071c6:	b328      	cbz	r0, 8007214 <_scanf_i+0xb8>
 80071c8:	f1bb 0f01 	cmp.w	fp, #1
 80071cc:	d159      	bne.n	8007282 <_scanf_i+0x126>
 80071ce:	6862      	ldr	r2, [r4, #4]
 80071d0:	b92a      	cbnz	r2, 80071de <_scanf_i+0x82>
 80071d2:	6822      	ldr	r2, [r4, #0]
 80071d4:	2108      	movs	r1, #8
 80071d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071da:	6061      	str	r1, [r4, #4]
 80071dc:	6022      	str	r2, [r4, #0]
 80071de:	6822      	ldr	r2, [r4, #0]
 80071e0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80071e4:	6022      	str	r2, [r4, #0]
 80071e6:	68a2      	ldr	r2, [r4, #8]
 80071e8:	1e51      	subs	r1, r2, #1
 80071ea:	60a1      	str	r1, [r4, #8]
 80071ec:	b192      	cbz	r2, 8007214 <_scanf_i+0xb8>
 80071ee:	6832      	ldr	r2, [r6, #0]
 80071f0:	1c51      	adds	r1, r2, #1
 80071f2:	6031      	str	r1, [r6, #0]
 80071f4:	7812      	ldrb	r2, [r2, #0]
 80071f6:	f805 2b01 	strb.w	r2, [r5], #1
 80071fa:	6872      	ldr	r2, [r6, #4]
 80071fc:	3a01      	subs	r2, #1
 80071fe:	2a00      	cmp	r2, #0
 8007200:	6072      	str	r2, [r6, #4]
 8007202:	dc07      	bgt.n	8007214 <_scanf_i+0xb8>
 8007204:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007208:	4631      	mov	r1, r6
 800720a:	4650      	mov	r0, sl
 800720c:	4790      	blx	r2
 800720e:	2800      	cmp	r0, #0
 8007210:	f040 8085 	bne.w	800731e <_scanf_i+0x1c2>
 8007214:	f10b 0b01 	add.w	fp, fp, #1
 8007218:	f1bb 0f03 	cmp.w	fp, #3
 800721c:	d1cb      	bne.n	80071b6 <_scanf_i+0x5a>
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	b90b      	cbnz	r3, 8007226 <_scanf_i+0xca>
 8007222:	230a      	movs	r3, #10
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	6863      	ldr	r3, [r4, #4]
 8007228:	4945      	ldr	r1, [pc, #276]	@ (8007340 <_scanf_i+0x1e4>)
 800722a:	6960      	ldr	r0, [r4, #20]
 800722c:	1ac9      	subs	r1, r1, r3
 800722e:	f000 f997 	bl	8007560 <__sccl>
 8007232:	f04f 0b00 	mov.w	fp, #0
 8007236:	68a3      	ldr	r3, [r4, #8]
 8007238:	6822      	ldr	r2, [r4, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d03d      	beq.n	80072ba <_scanf_i+0x15e>
 800723e:	6831      	ldr	r1, [r6, #0]
 8007240:	6960      	ldr	r0, [r4, #20]
 8007242:	f891 c000 	ldrb.w	ip, [r1]
 8007246:	f810 000c 	ldrb.w	r0, [r0, ip]
 800724a:	2800      	cmp	r0, #0
 800724c:	d035      	beq.n	80072ba <_scanf_i+0x15e>
 800724e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007252:	d124      	bne.n	800729e <_scanf_i+0x142>
 8007254:	0510      	lsls	r0, r2, #20
 8007256:	d522      	bpl.n	800729e <_scanf_i+0x142>
 8007258:	f10b 0b01 	add.w	fp, fp, #1
 800725c:	f1b9 0f00 	cmp.w	r9, #0
 8007260:	d003      	beq.n	800726a <_scanf_i+0x10e>
 8007262:	3301      	adds	r3, #1
 8007264:	f109 39ff 	add.w	r9, r9, #4294967295
 8007268:	60a3      	str	r3, [r4, #8]
 800726a:	6873      	ldr	r3, [r6, #4]
 800726c:	3b01      	subs	r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	6073      	str	r3, [r6, #4]
 8007272:	dd1b      	ble.n	80072ac <_scanf_i+0x150>
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	68a3      	ldr	r3, [r4, #8]
 800727c:	3b01      	subs	r3, #1
 800727e:	60a3      	str	r3, [r4, #8]
 8007280:	e7d9      	b.n	8007236 <_scanf_i+0xda>
 8007282:	f1bb 0f02 	cmp.w	fp, #2
 8007286:	d1ae      	bne.n	80071e6 <_scanf_i+0x8a>
 8007288:	6822      	ldr	r2, [r4, #0]
 800728a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800728e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007292:	d1bf      	bne.n	8007214 <_scanf_i+0xb8>
 8007294:	2110      	movs	r1, #16
 8007296:	6061      	str	r1, [r4, #4]
 8007298:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800729c:	e7a2      	b.n	80071e4 <_scanf_i+0x88>
 800729e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80072a2:	6022      	str	r2, [r4, #0]
 80072a4:	780b      	ldrb	r3, [r1, #0]
 80072a6:	f805 3b01 	strb.w	r3, [r5], #1
 80072aa:	e7de      	b.n	800726a <_scanf_i+0x10e>
 80072ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80072b0:	4631      	mov	r1, r6
 80072b2:	4650      	mov	r0, sl
 80072b4:	4798      	blx	r3
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d0df      	beq.n	800727a <_scanf_i+0x11e>
 80072ba:	6823      	ldr	r3, [r4, #0]
 80072bc:	05d9      	lsls	r1, r3, #23
 80072be:	d50d      	bpl.n	80072dc <_scanf_i+0x180>
 80072c0:	42bd      	cmp	r5, r7
 80072c2:	d909      	bls.n	80072d8 <_scanf_i+0x17c>
 80072c4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80072c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072cc:	4632      	mov	r2, r6
 80072ce:	4650      	mov	r0, sl
 80072d0:	4798      	blx	r3
 80072d2:	f105 39ff 	add.w	r9, r5, #4294967295
 80072d6:	464d      	mov	r5, r9
 80072d8:	42bd      	cmp	r5, r7
 80072da:	d028      	beq.n	800732e <_scanf_i+0x1d2>
 80072dc:	6822      	ldr	r2, [r4, #0]
 80072de:	f012 0210 	ands.w	r2, r2, #16
 80072e2:	d113      	bne.n	800730c <_scanf_i+0x1b0>
 80072e4:	702a      	strb	r2, [r5, #0]
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	9e01      	ldr	r6, [sp, #4]
 80072ea:	4639      	mov	r1, r7
 80072ec:	4650      	mov	r0, sl
 80072ee:	47b0      	blx	r6
 80072f0:	f8d8 3000 	ldr.w	r3, [r8]
 80072f4:	6821      	ldr	r1, [r4, #0]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	f8c8 2000 	str.w	r2, [r8]
 80072fc:	f011 0f20 	tst.w	r1, #32
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	d00f      	beq.n	8007324 <_scanf_i+0x1c8>
 8007304:	6018      	str	r0, [r3, #0]
 8007306:	68e3      	ldr	r3, [r4, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60e3      	str	r3, [r4, #12]
 800730c:	6923      	ldr	r3, [r4, #16]
 800730e:	1bed      	subs	r5, r5, r7
 8007310:	445d      	add	r5, fp
 8007312:	442b      	add	r3, r5
 8007314:	6123      	str	r3, [r4, #16]
 8007316:	2000      	movs	r0, #0
 8007318:	b007      	add	sp, #28
 800731a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800731e:	f04f 0b00 	mov.w	fp, #0
 8007322:	e7ca      	b.n	80072ba <_scanf_i+0x15e>
 8007324:	07ca      	lsls	r2, r1, #31
 8007326:	bf4c      	ite	mi
 8007328:	8018      	strhmi	r0, [r3, #0]
 800732a:	6018      	strpl	r0, [r3, #0]
 800732c:	e7eb      	b.n	8007306 <_scanf_i+0x1aa>
 800732e:	2001      	movs	r0, #1
 8007330:	e7f2      	b.n	8007318 <_scanf_i+0x1bc>
 8007332:	bf00      	nop
 8007334:	08007c04 	.word	0x08007c04
 8007338:	0800784d 	.word	0x0800784d
 800733c:	0800792d 	.word	0x0800792d
 8007340:	08007d9c 	.word	0x08007d9c

08007344 <__sflush_r>:
 8007344:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800734c:	0716      	lsls	r6, r2, #28
 800734e:	4605      	mov	r5, r0
 8007350:	460c      	mov	r4, r1
 8007352:	d454      	bmi.n	80073fe <__sflush_r+0xba>
 8007354:	684b      	ldr	r3, [r1, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	dc02      	bgt.n	8007360 <__sflush_r+0x1c>
 800735a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800735c:	2b00      	cmp	r3, #0
 800735e:	dd48      	ble.n	80073f2 <__sflush_r+0xae>
 8007360:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007362:	2e00      	cmp	r6, #0
 8007364:	d045      	beq.n	80073f2 <__sflush_r+0xae>
 8007366:	2300      	movs	r3, #0
 8007368:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800736c:	682f      	ldr	r7, [r5, #0]
 800736e:	6a21      	ldr	r1, [r4, #32]
 8007370:	602b      	str	r3, [r5, #0]
 8007372:	d030      	beq.n	80073d6 <__sflush_r+0x92>
 8007374:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007376:	89a3      	ldrh	r3, [r4, #12]
 8007378:	0759      	lsls	r1, r3, #29
 800737a:	d505      	bpl.n	8007388 <__sflush_r+0x44>
 800737c:	6863      	ldr	r3, [r4, #4]
 800737e:	1ad2      	subs	r2, r2, r3
 8007380:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007382:	b10b      	cbz	r3, 8007388 <__sflush_r+0x44>
 8007384:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	2300      	movs	r3, #0
 800738a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	4628      	mov	r0, r5
 8007390:	47b0      	blx	r6
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	d106      	bne.n	80073a6 <__sflush_r+0x62>
 8007398:	6829      	ldr	r1, [r5, #0]
 800739a:	291d      	cmp	r1, #29
 800739c:	d82b      	bhi.n	80073f6 <__sflush_r+0xb2>
 800739e:	4a2a      	ldr	r2, [pc, #168]	@ (8007448 <__sflush_r+0x104>)
 80073a0:	410a      	asrs	r2, r1
 80073a2:	07d6      	lsls	r6, r2, #31
 80073a4:	d427      	bmi.n	80073f6 <__sflush_r+0xb2>
 80073a6:	2200      	movs	r2, #0
 80073a8:	6062      	str	r2, [r4, #4]
 80073aa:	04d9      	lsls	r1, r3, #19
 80073ac:	6922      	ldr	r2, [r4, #16]
 80073ae:	6022      	str	r2, [r4, #0]
 80073b0:	d504      	bpl.n	80073bc <__sflush_r+0x78>
 80073b2:	1c42      	adds	r2, r0, #1
 80073b4:	d101      	bne.n	80073ba <__sflush_r+0x76>
 80073b6:	682b      	ldr	r3, [r5, #0]
 80073b8:	b903      	cbnz	r3, 80073bc <__sflush_r+0x78>
 80073ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80073bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073be:	602f      	str	r7, [r5, #0]
 80073c0:	b1b9      	cbz	r1, 80073f2 <__sflush_r+0xae>
 80073c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073c6:	4299      	cmp	r1, r3
 80073c8:	d002      	beq.n	80073d0 <__sflush_r+0x8c>
 80073ca:	4628      	mov	r0, r5
 80073cc:	f7fe ff80 	bl	80062d0 <_free_r>
 80073d0:	2300      	movs	r3, #0
 80073d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80073d4:	e00d      	b.n	80073f2 <__sflush_r+0xae>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4628      	mov	r0, r5
 80073da:	47b0      	blx	r6
 80073dc:	4602      	mov	r2, r0
 80073de:	1c50      	adds	r0, r2, #1
 80073e0:	d1c9      	bne.n	8007376 <__sflush_r+0x32>
 80073e2:	682b      	ldr	r3, [r5, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0c6      	beq.n	8007376 <__sflush_r+0x32>
 80073e8:	2b1d      	cmp	r3, #29
 80073ea:	d001      	beq.n	80073f0 <__sflush_r+0xac>
 80073ec:	2b16      	cmp	r3, #22
 80073ee:	d11e      	bne.n	800742e <__sflush_r+0xea>
 80073f0:	602f      	str	r7, [r5, #0]
 80073f2:	2000      	movs	r0, #0
 80073f4:	e022      	b.n	800743c <__sflush_r+0xf8>
 80073f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073fa:	b21b      	sxth	r3, r3
 80073fc:	e01b      	b.n	8007436 <__sflush_r+0xf2>
 80073fe:	690f      	ldr	r7, [r1, #16]
 8007400:	2f00      	cmp	r7, #0
 8007402:	d0f6      	beq.n	80073f2 <__sflush_r+0xae>
 8007404:	0793      	lsls	r3, r2, #30
 8007406:	680e      	ldr	r6, [r1, #0]
 8007408:	bf08      	it	eq
 800740a:	694b      	ldreq	r3, [r1, #20]
 800740c:	600f      	str	r7, [r1, #0]
 800740e:	bf18      	it	ne
 8007410:	2300      	movne	r3, #0
 8007412:	eba6 0807 	sub.w	r8, r6, r7
 8007416:	608b      	str	r3, [r1, #8]
 8007418:	f1b8 0f00 	cmp.w	r8, #0
 800741c:	dde9      	ble.n	80073f2 <__sflush_r+0xae>
 800741e:	6a21      	ldr	r1, [r4, #32]
 8007420:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007422:	4643      	mov	r3, r8
 8007424:	463a      	mov	r2, r7
 8007426:	4628      	mov	r0, r5
 8007428:	47b0      	blx	r6
 800742a:	2800      	cmp	r0, #0
 800742c:	dc08      	bgt.n	8007440 <__sflush_r+0xfc>
 800742e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007432:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007436:	81a3      	strh	r3, [r4, #12]
 8007438:	f04f 30ff 	mov.w	r0, #4294967295
 800743c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007440:	4407      	add	r7, r0
 8007442:	eba8 0800 	sub.w	r8, r8, r0
 8007446:	e7e7      	b.n	8007418 <__sflush_r+0xd4>
 8007448:	dfbffffe 	.word	0xdfbffffe

0800744c <_fflush_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	690b      	ldr	r3, [r1, #16]
 8007450:	4605      	mov	r5, r0
 8007452:	460c      	mov	r4, r1
 8007454:	b913      	cbnz	r3, 800745c <_fflush_r+0x10>
 8007456:	2500      	movs	r5, #0
 8007458:	4628      	mov	r0, r5
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	b118      	cbz	r0, 8007466 <_fflush_r+0x1a>
 800745e:	6a03      	ldr	r3, [r0, #32]
 8007460:	b90b      	cbnz	r3, 8007466 <_fflush_r+0x1a>
 8007462:	f7fe fcef 	bl	8005e44 <__sinit>
 8007466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d0f3      	beq.n	8007456 <_fflush_r+0xa>
 800746e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007470:	07d0      	lsls	r0, r2, #31
 8007472:	d404      	bmi.n	800747e <_fflush_r+0x32>
 8007474:	0599      	lsls	r1, r3, #22
 8007476:	d402      	bmi.n	800747e <_fflush_r+0x32>
 8007478:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800747a:	f7fe ff26 	bl	80062ca <__retarget_lock_acquire_recursive>
 800747e:	4628      	mov	r0, r5
 8007480:	4621      	mov	r1, r4
 8007482:	f7ff ff5f 	bl	8007344 <__sflush_r>
 8007486:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007488:	07da      	lsls	r2, r3, #31
 800748a:	4605      	mov	r5, r0
 800748c:	d4e4      	bmi.n	8007458 <_fflush_r+0xc>
 800748e:	89a3      	ldrh	r3, [r4, #12]
 8007490:	059b      	lsls	r3, r3, #22
 8007492:	d4e1      	bmi.n	8007458 <_fflush_r+0xc>
 8007494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007496:	f7fe ff19 	bl	80062cc <__retarget_lock_release_recursive>
 800749a:	e7dd      	b.n	8007458 <_fflush_r+0xc>

0800749c <__swhatbuf_r>:
 800749c:	b570      	push	{r4, r5, r6, lr}
 800749e:	460c      	mov	r4, r1
 80074a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074a4:	2900      	cmp	r1, #0
 80074a6:	b096      	sub	sp, #88	@ 0x58
 80074a8:	4615      	mov	r5, r2
 80074aa:	461e      	mov	r6, r3
 80074ac:	da0d      	bge.n	80074ca <__swhatbuf_r+0x2e>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80074b4:	f04f 0100 	mov.w	r1, #0
 80074b8:	bf14      	ite	ne
 80074ba:	2340      	movne	r3, #64	@ 0x40
 80074bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80074c0:	2000      	movs	r0, #0
 80074c2:	6031      	str	r1, [r6, #0]
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	b016      	add	sp, #88	@ 0x58
 80074c8:	bd70      	pop	{r4, r5, r6, pc}
 80074ca:	466a      	mov	r2, sp
 80074cc:	f000 f8d6 	bl	800767c <_fstat_r>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	dbec      	blt.n	80074ae <__swhatbuf_r+0x12>
 80074d4:	9901      	ldr	r1, [sp, #4]
 80074d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80074da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80074de:	4259      	negs	r1, r3
 80074e0:	4159      	adcs	r1, r3
 80074e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074e6:	e7eb      	b.n	80074c0 <__swhatbuf_r+0x24>

080074e8 <__smakebuf_r>:
 80074e8:	898b      	ldrh	r3, [r1, #12]
 80074ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ec:	079d      	lsls	r5, r3, #30
 80074ee:	4606      	mov	r6, r0
 80074f0:	460c      	mov	r4, r1
 80074f2:	d507      	bpl.n	8007504 <__smakebuf_r+0x1c>
 80074f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	2301      	movs	r3, #1
 80074fe:	6163      	str	r3, [r4, #20]
 8007500:	b003      	add	sp, #12
 8007502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007504:	ab01      	add	r3, sp, #4
 8007506:	466a      	mov	r2, sp
 8007508:	f7ff ffc8 	bl	800749c <__swhatbuf_r>
 800750c:	9f00      	ldr	r7, [sp, #0]
 800750e:	4605      	mov	r5, r0
 8007510:	4639      	mov	r1, r7
 8007512:	4630      	mov	r0, r6
 8007514:	f7fe ff48 	bl	80063a8 <_malloc_r>
 8007518:	b948      	cbnz	r0, 800752e <__smakebuf_r+0x46>
 800751a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800751e:	059a      	lsls	r2, r3, #22
 8007520:	d4ee      	bmi.n	8007500 <__smakebuf_r+0x18>
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	f043 0302 	orr.w	r3, r3, #2
 800752a:	81a3      	strh	r3, [r4, #12]
 800752c:	e7e2      	b.n	80074f4 <__smakebuf_r+0xc>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	6020      	str	r0, [r4, #0]
 8007532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007536:	81a3      	strh	r3, [r4, #12]
 8007538:	9b01      	ldr	r3, [sp, #4]
 800753a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800753e:	b15b      	cbz	r3, 8007558 <__smakebuf_r+0x70>
 8007540:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007544:	4630      	mov	r0, r6
 8007546:	f000 f8ab 	bl	80076a0 <_isatty_r>
 800754a:	b128      	cbz	r0, 8007558 <__smakebuf_r+0x70>
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	f023 0303 	bic.w	r3, r3, #3
 8007552:	f043 0301 	orr.w	r3, r3, #1
 8007556:	81a3      	strh	r3, [r4, #12]
 8007558:	89a3      	ldrh	r3, [r4, #12]
 800755a:	431d      	orrs	r5, r3
 800755c:	81a5      	strh	r5, [r4, #12]
 800755e:	e7cf      	b.n	8007500 <__smakebuf_r+0x18>

08007560 <__sccl>:
 8007560:	b570      	push	{r4, r5, r6, lr}
 8007562:	780b      	ldrb	r3, [r1, #0]
 8007564:	4604      	mov	r4, r0
 8007566:	2b5e      	cmp	r3, #94	@ 0x5e
 8007568:	bf0b      	itete	eq
 800756a:	784b      	ldrbeq	r3, [r1, #1]
 800756c:	1c4a      	addne	r2, r1, #1
 800756e:	1c8a      	addeq	r2, r1, #2
 8007570:	2100      	movne	r1, #0
 8007572:	bf08      	it	eq
 8007574:	2101      	moveq	r1, #1
 8007576:	3801      	subs	r0, #1
 8007578:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800757c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8007580:	42a8      	cmp	r0, r5
 8007582:	d1fb      	bne.n	800757c <__sccl+0x1c>
 8007584:	b90b      	cbnz	r3, 800758a <__sccl+0x2a>
 8007586:	1e50      	subs	r0, r2, #1
 8007588:	bd70      	pop	{r4, r5, r6, pc}
 800758a:	f081 0101 	eor.w	r1, r1, #1
 800758e:	54e1      	strb	r1, [r4, r3]
 8007590:	4610      	mov	r0, r2
 8007592:	4602      	mov	r2, r0
 8007594:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007598:	2d2d      	cmp	r5, #45	@ 0x2d
 800759a:	d005      	beq.n	80075a8 <__sccl+0x48>
 800759c:	2d5d      	cmp	r5, #93	@ 0x5d
 800759e:	d016      	beq.n	80075ce <__sccl+0x6e>
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	d0f1      	beq.n	8007588 <__sccl+0x28>
 80075a4:	462b      	mov	r3, r5
 80075a6:	e7f2      	b.n	800758e <__sccl+0x2e>
 80075a8:	7846      	ldrb	r6, [r0, #1]
 80075aa:	2e5d      	cmp	r6, #93	@ 0x5d
 80075ac:	d0fa      	beq.n	80075a4 <__sccl+0x44>
 80075ae:	42b3      	cmp	r3, r6
 80075b0:	dcf8      	bgt.n	80075a4 <__sccl+0x44>
 80075b2:	3002      	adds	r0, #2
 80075b4:	461a      	mov	r2, r3
 80075b6:	3201      	adds	r2, #1
 80075b8:	4296      	cmp	r6, r2
 80075ba:	54a1      	strb	r1, [r4, r2]
 80075bc:	dcfb      	bgt.n	80075b6 <__sccl+0x56>
 80075be:	1af2      	subs	r2, r6, r3
 80075c0:	3a01      	subs	r2, #1
 80075c2:	1c5d      	adds	r5, r3, #1
 80075c4:	42b3      	cmp	r3, r6
 80075c6:	bfa8      	it	ge
 80075c8:	2200      	movge	r2, #0
 80075ca:	18ab      	adds	r3, r5, r2
 80075cc:	e7e1      	b.n	8007592 <__sccl+0x32>
 80075ce:	4610      	mov	r0, r2
 80075d0:	e7da      	b.n	8007588 <__sccl+0x28>

080075d2 <__submore>:
 80075d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d6:	460c      	mov	r4, r1
 80075d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80075da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075de:	4299      	cmp	r1, r3
 80075e0:	d11d      	bne.n	800761e <__submore+0x4c>
 80075e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075e6:	f7fe fedf 	bl	80063a8 <_malloc_r>
 80075ea:	b918      	cbnz	r0, 80075f4 <__submore+0x22>
 80075ec:	f04f 30ff 	mov.w	r0, #4294967295
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80075fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80075fe:	6360      	str	r0, [r4, #52]	@ 0x34
 8007600:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007604:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007608:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800760c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8007610:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007614:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007618:	6020      	str	r0, [r4, #0]
 800761a:	2000      	movs	r0, #0
 800761c:	e7e8      	b.n	80075f0 <__submore+0x1e>
 800761e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007620:	0077      	lsls	r7, r6, #1
 8007622:	463a      	mov	r2, r7
 8007624:	f000 f86a 	bl	80076fc <_realloc_r>
 8007628:	4605      	mov	r5, r0
 800762a:	2800      	cmp	r0, #0
 800762c:	d0de      	beq.n	80075ec <__submore+0x1a>
 800762e:	eb00 0806 	add.w	r8, r0, r6
 8007632:	4601      	mov	r1, r0
 8007634:	4632      	mov	r2, r6
 8007636:	4640      	mov	r0, r8
 8007638:	f000 f852 	bl	80076e0 <memcpy>
 800763c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007640:	f8c4 8000 	str.w	r8, [r4]
 8007644:	e7e9      	b.n	800761a <__submore+0x48>

08007646 <memmove>:
 8007646:	4288      	cmp	r0, r1
 8007648:	b510      	push	{r4, lr}
 800764a:	eb01 0402 	add.w	r4, r1, r2
 800764e:	d902      	bls.n	8007656 <memmove+0x10>
 8007650:	4284      	cmp	r4, r0
 8007652:	4623      	mov	r3, r4
 8007654:	d807      	bhi.n	8007666 <memmove+0x20>
 8007656:	1e43      	subs	r3, r0, #1
 8007658:	42a1      	cmp	r1, r4
 800765a:	d008      	beq.n	800766e <memmove+0x28>
 800765c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007660:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007664:	e7f8      	b.n	8007658 <memmove+0x12>
 8007666:	4402      	add	r2, r0
 8007668:	4601      	mov	r1, r0
 800766a:	428a      	cmp	r2, r1
 800766c:	d100      	bne.n	8007670 <memmove+0x2a>
 800766e:	bd10      	pop	{r4, pc}
 8007670:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007674:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007678:	e7f7      	b.n	800766a <memmove+0x24>
	...

0800767c <_fstat_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d07      	ldr	r5, [pc, #28]	@ (800769c <_fstat_r+0x20>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	4611      	mov	r1, r2
 8007688:	602b      	str	r3, [r5, #0]
 800768a:	f7f9 ffca 	bl	8001622 <_fstat>
 800768e:	1c43      	adds	r3, r0, #1
 8007690:	d102      	bne.n	8007698 <_fstat_r+0x1c>
 8007692:	682b      	ldr	r3, [r5, #0]
 8007694:	b103      	cbz	r3, 8007698 <_fstat_r+0x1c>
 8007696:	6023      	str	r3, [r4, #0]
 8007698:	bd38      	pop	{r3, r4, r5, pc}
 800769a:	bf00      	nop
 800769c:	20000478 	.word	0x20000478

080076a0 <_isatty_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d06      	ldr	r5, [pc, #24]	@ (80076bc <_isatty_r+0x1c>)
 80076a4:	2300      	movs	r3, #0
 80076a6:	4604      	mov	r4, r0
 80076a8:	4608      	mov	r0, r1
 80076aa:	602b      	str	r3, [r5, #0]
 80076ac:	f7f9 ffc9 	bl	8001642 <_isatty>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_isatty_r+0x1a>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_isatty_r+0x1a>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	20000478 	.word	0x20000478

080076c0 <_sbrk_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d06      	ldr	r5, [pc, #24]	@ (80076dc <_sbrk_r+0x1c>)
 80076c4:	2300      	movs	r3, #0
 80076c6:	4604      	mov	r4, r0
 80076c8:	4608      	mov	r0, r1
 80076ca:	602b      	str	r3, [r5, #0]
 80076cc:	f7f9 ffd2 	bl	8001674 <_sbrk>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_sbrk_r+0x1a>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_sbrk_r+0x1a>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	20000478 	.word	0x20000478

080076e0 <memcpy>:
 80076e0:	440a      	add	r2, r1
 80076e2:	4291      	cmp	r1, r2
 80076e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80076e8:	d100      	bne.n	80076ec <memcpy+0xc>
 80076ea:	4770      	bx	lr
 80076ec:	b510      	push	{r4, lr}
 80076ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076f6:	4291      	cmp	r1, r2
 80076f8:	d1f9      	bne.n	80076ee <memcpy+0xe>
 80076fa:	bd10      	pop	{r4, pc}

080076fc <_realloc_r>:
 80076fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007700:	4680      	mov	r8, r0
 8007702:	4615      	mov	r5, r2
 8007704:	460c      	mov	r4, r1
 8007706:	b921      	cbnz	r1, 8007712 <_realloc_r+0x16>
 8007708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800770c:	4611      	mov	r1, r2
 800770e:	f7fe be4b 	b.w	80063a8 <_malloc_r>
 8007712:	b92a      	cbnz	r2, 8007720 <_realloc_r+0x24>
 8007714:	f7fe fddc 	bl	80062d0 <_free_r>
 8007718:	2400      	movs	r4, #0
 800771a:	4620      	mov	r0, r4
 800771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007720:	f000 f906 	bl	8007930 <_malloc_usable_size_r>
 8007724:	4285      	cmp	r5, r0
 8007726:	4606      	mov	r6, r0
 8007728:	d802      	bhi.n	8007730 <_realloc_r+0x34>
 800772a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800772e:	d8f4      	bhi.n	800771a <_realloc_r+0x1e>
 8007730:	4629      	mov	r1, r5
 8007732:	4640      	mov	r0, r8
 8007734:	f7fe fe38 	bl	80063a8 <_malloc_r>
 8007738:	4607      	mov	r7, r0
 800773a:	2800      	cmp	r0, #0
 800773c:	d0ec      	beq.n	8007718 <_realloc_r+0x1c>
 800773e:	42b5      	cmp	r5, r6
 8007740:	462a      	mov	r2, r5
 8007742:	4621      	mov	r1, r4
 8007744:	bf28      	it	cs
 8007746:	4632      	movcs	r2, r6
 8007748:	f7ff ffca 	bl	80076e0 <memcpy>
 800774c:	4621      	mov	r1, r4
 800774e:	4640      	mov	r0, r8
 8007750:	f7fe fdbe 	bl	80062d0 <_free_r>
 8007754:	463c      	mov	r4, r7
 8007756:	e7e0      	b.n	800771a <_realloc_r+0x1e>

08007758 <_strtol_l.constprop.0>:
 8007758:	2b24      	cmp	r3, #36	@ 0x24
 800775a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775e:	4686      	mov	lr, r0
 8007760:	4690      	mov	r8, r2
 8007762:	d801      	bhi.n	8007768 <_strtol_l.constprop.0+0x10>
 8007764:	2b01      	cmp	r3, #1
 8007766:	d106      	bne.n	8007776 <_strtol_l.constprop.0+0x1e>
 8007768:	f7fe fd84 	bl	8006274 <__errno>
 800776c:	2316      	movs	r3, #22
 800776e:	6003      	str	r3, [r0, #0]
 8007770:	2000      	movs	r0, #0
 8007772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007776:	4834      	ldr	r0, [pc, #208]	@ (8007848 <_strtol_l.constprop.0+0xf0>)
 8007778:	460d      	mov	r5, r1
 800777a:	462a      	mov	r2, r5
 800777c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007780:	5d06      	ldrb	r6, [r0, r4]
 8007782:	f016 0608 	ands.w	r6, r6, #8
 8007786:	d1f8      	bne.n	800777a <_strtol_l.constprop.0+0x22>
 8007788:	2c2d      	cmp	r4, #45	@ 0x2d
 800778a:	d12d      	bne.n	80077e8 <_strtol_l.constprop.0+0x90>
 800778c:	782c      	ldrb	r4, [r5, #0]
 800778e:	2601      	movs	r6, #1
 8007790:	1c95      	adds	r5, r2, #2
 8007792:	f033 0210 	bics.w	r2, r3, #16
 8007796:	d109      	bne.n	80077ac <_strtol_l.constprop.0+0x54>
 8007798:	2c30      	cmp	r4, #48	@ 0x30
 800779a:	d12a      	bne.n	80077f2 <_strtol_l.constprop.0+0x9a>
 800779c:	782a      	ldrb	r2, [r5, #0]
 800779e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80077a2:	2a58      	cmp	r2, #88	@ 0x58
 80077a4:	d125      	bne.n	80077f2 <_strtol_l.constprop.0+0x9a>
 80077a6:	786c      	ldrb	r4, [r5, #1]
 80077a8:	2310      	movs	r3, #16
 80077aa:	3502      	adds	r5, #2
 80077ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80077b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80077b4:	2200      	movs	r2, #0
 80077b6:	fbbc f9f3 	udiv	r9, ip, r3
 80077ba:	4610      	mov	r0, r2
 80077bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80077c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80077c4:	2f09      	cmp	r7, #9
 80077c6:	d81b      	bhi.n	8007800 <_strtol_l.constprop.0+0xa8>
 80077c8:	463c      	mov	r4, r7
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	dd27      	ble.n	800781e <_strtol_l.constprop.0+0xc6>
 80077ce:	1c57      	adds	r7, r2, #1
 80077d0:	d007      	beq.n	80077e2 <_strtol_l.constprop.0+0x8a>
 80077d2:	4581      	cmp	r9, r0
 80077d4:	d320      	bcc.n	8007818 <_strtol_l.constprop.0+0xc0>
 80077d6:	d101      	bne.n	80077dc <_strtol_l.constprop.0+0x84>
 80077d8:	45a2      	cmp	sl, r4
 80077da:	db1d      	blt.n	8007818 <_strtol_l.constprop.0+0xc0>
 80077dc:	fb00 4003 	mla	r0, r0, r3, r4
 80077e0:	2201      	movs	r2, #1
 80077e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077e6:	e7eb      	b.n	80077c0 <_strtol_l.constprop.0+0x68>
 80077e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80077ea:	bf04      	itt	eq
 80077ec:	782c      	ldrbeq	r4, [r5, #0]
 80077ee:	1c95      	addeq	r5, r2, #2
 80077f0:	e7cf      	b.n	8007792 <_strtol_l.constprop.0+0x3a>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1da      	bne.n	80077ac <_strtol_l.constprop.0+0x54>
 80077f6:	2c30      	cmp	r4, #48	@ 0x30
 80077f8:	bf0c      	ite	eq
 80077fa:	2308      	moveq	r3, #8
 80077fc:	230a      	movne	r3, #10
 80077fe:	e7d5      	b.n	80077ac <_strtol_l.constprop.0+0x54>
 8007800:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007804:	2f19      	cmp	r7, #25
 8007806:	d801      	bhi.n	800780c <_strtol_l.constprop.0+0xb4>
 8007808:	3c37      	subs	r4, #55	@ 0x37
 800780a:	e7de      	b.n	80077ca <_strtol_l.constprop.0+0x72>
 800780c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007810:	2f19      	cmp	r7, #25
 8007812:	d804      	bhi.n	800781e <_strtol_l.constprop.0+0xc6>
 8007814:	3c57      	subs	r4, #87	@ 0x57
 8007816:	e7d8      	b.n	80077ca <_strtol_l.constprop.0+0x72>
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	e7e1      	b.n	80077e2 <_strtol_l.constprop.0+0x8a>
 800781e:	1c53      	adds	r3, r2, #1
 8007820:	d108      	bne.n	8007834 <_strtol_l.constprop.0+0xdc>
 8007822:	2322      	movs	r3, #34	@ 0x22
 8007824:	f8ce 3000 	str.w	r3, [lr]
 8007828:	4660      	mov	r0, ip
 800782a:	f1b8 0f00 	cmp.w	r8, #0
 800782e:	d0a0      	beq.n	8007772 <_strtol_l.constprop.0+0x1a>
 8007830:	1e69      	subs	r1, r5, #1
 8007832:	e006      	b.n	8007842 <_strtol_l.constprop.0+0xea>
 8007834:	b106      	cbz	r6, 8007838 <_strtol_l.constprop.0+0xe0>
 8007836:	4240      	negs	r0, r0
 8007838:	f1b8 0f00 	cmp.w	r8, #0
 800783c:	d099      	beq.n	8007772 <_strtol_l.constprop.0+0x1a>
 800783e:	2a00      	cmp	r2, #0
 8007840:	d1f6      	bne.n	8007830 <_strtol_l.constprop.0+0xd8>
 8007842:	f8c8 1000 	str.w	r1, [r8]
 8007846:	e794      	b.n	8007772 <_strtol_l.constprop.0+0x1a>
 8007848:	08007c59 	.word	0x08007c59

0800784c <_strtol_r>:
 800784c:	f7ff bf84 	b.w	8007758 <_strtol_l.constprop.0>

08007850 <_strtoul_l.constprop.0>:
 8007850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007854:	4e34      	ldr	r6, [pc, #208]	@ (8007928 <_strtoul_l.constprop.0+0xd8>)
 8007856:	4686      	mov	lr, r0
 8007858:	460d      	mov	r5, r1
 800785a:	4628      	mov	r0, r5
 800785c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007860:	5d37      	ldrb	r7, [r6, r4]
 8007862:	f017 0708 	ands.w	r7, r7, #8
 8007866:	d1f8      	bne.n	800785a <_strtoul_l.constprop.0+0xa>
 8007868:	2c2d      	cmp	r4, #45	@ 0x2d
 800786a:	d12f      	bne.n	80078cc <_strtoul_l.constprop.0+0x7c>
 800786c:	782c      	ldrb	r4, [r5, #0]
 800786e:	2701      	movs	r7, #1
 8007870:	1c85      	adds	r5, r0, #2
 8007872:	f033 0010 	bics.w	r0, r3, #16
 8007876:	d109      	bne.n	800788c <_strtoul_l.constprop.0+0x3c>
 8007878:	2c30      	cmp	r4, #48	@ 0x30
 800787a:	d12c      	bne.n	80078d6 <_strtoul_l.constprop.0+0x86>
 800787c:	7828      	ldrb	r0, [r5, #0]
 800787e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007882:	2858      	cmp	r0, #88	@ 0x58
 8007884:	d127      	bne.n	80078d6 <_strtoul_l.constprop.0+0x86>
 8007886:	786c      	ldrb	r4, [r5, #1]
 8007888:	2310      	movs	r3, #16
 800788a:	3502      	adds	r5, #2
 800788c:	f04f 38ff 	mov.w	r8, #4294967295
 8007890:	2600      	movs	r6, #0
 8007892:	fbb8 f8f3 	udiv	r8, r8, r3
 8007896:	fb03 f908 	mul.w	r9, r3, r8
 800789a:	ea6f 0909 	mvn.w	r9, r9
 800789e:	4630      	mov	r0, r6
 80078a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80078a4:	f1bc 0f09 	cmp.w	ip, #9
 80078a8:	d81c      	bhi.n	80078e4 <_strtoul_l.constprop.0+0x94>
 80078aa:	4664      	mov	r4, ip
 80078ac:	42a3      	cmp	r3, r4
 80078ae:	dd2a      	ble.n	8007906 <_strtoul_l.constprop.0+0xb6>
 80078b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80078b4:	d007      	beq.n	80078c6 <_strtoul_l.constprop.0+0x76>
 80078b6:	4580      	cmp	r8, r0
 80078b8:	d322      	bcc.n	8007900 <_strtoul_l.constprop.0+0xb0>
 80078ba:	d101      	bne.n	80078c0 <_strtoul_l.constprop.0+0x70>
 80078bc:	45a1      	cmp	r9, r4
 80078be:	db1f      	blt.n	8007900 <_strtoul_l.constprop.0+0xb0>
 80078c0:	fb00 4003 	mla	r0, r0, r3, r4
 80078c4:	2601      	movs	r6, #1
 80078c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ca:	e7e9      	b.n	80078a0 <_strtoul_l.constprop.0+0x50>
 80078cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80078ce:	bf04      	itt	eq
 80078d0:	782c      	ldrbeq	r4, [r5, #0]
 80078d2:	1c85      	addeq	r5, r0, #2
 80078d4:	e7cd      	b.n	8007872 <_strtoul_l.constprop.0+0x22>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1d8      	bne.n	800788c <_strtoul_l.constprop.0+0x3c>
 80078da:	2c30      	cmp	r4, #48	@ 0x30
 80078dc:	bf0c      	ite	eq
 80078de:	2308      	moveq	r3, #8
 80078e0:	230a      	movne	r3, #10
 80078e2:	e7d3      	b.n	800788c <_strtoul_l.constprop.0+0x3c>
 80078e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80078e8:	f1bc 0f19 	cmp.w	ip, #25
 80078ec:	d801      	bhi.n	80078f2 <_strtoul_l.constprop.0+0xa2>
 80078ee:	3c37      	subs	r4, #55	@ 0x37
 80078f0:	e7dc      	b.n	80078ac <_strtoul_l.constprop.0+0x5c>
 80078f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80078f6:	f1bc 0f19 	cmp.w	ip, #25
 80078fa:	d804      	bhi.n	8007906 <_strtoul_l.constprop.0+0xb6>
 80078fc:	3c57      	subs	r4, #87	@ 0x57
 80078fe:	e7d5      	b.n	80078ac <_strtoul_l.constprop.0+0x5c>
 8007900:	f04f 36ff 	mov.w	r6, #4294967295
 8007904:	e7df      	b.n	80078c6 <_strtoul_l.constprop.0+0x76>
 8007906:	1c73      	adds	r3, r6, #1
 8007908:	d106      	bne.n	8007918 <_strtoul_l.constprop.0+0xc8>
 800790a:	2322      	movs	r3, #34	@ 0x22
 800790c:	f8ce 3000 	str.w	r3, [lr]
 8007910:	4630      	mov	r0, r6
 8007912:	b932      	cbnz	r2, 8007922 <_strtoul_l.constprop.0+0xd2>
 8007914:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007918:	b107      	cbz	r7, 800791c <_strtoul_l.constprop.0+0xcc>
 800791a:	4240      	negs	r0, r0
 800791c:	2a00      	cmp	r2, #0
 800791e:	d0f9      	beq.n	8007914 <_strtoul_l.constprop.0+0xc4>
 8007920:	b106      	cbz	r6, 8007924 <_strtoul_l.constprop.0+0xd4>
 8007922:	1e69      	subs	r1, r5, #1
 8007924:	6011      	str	r1, [r2, #0]
 8007926:	e7f5      	b.n	8007914 <_strtoul_l.constprop.0+0xc4>
 8007928:	08007c59 	.word	0x08007c59

0800792c <_strtoul_r>:
 800792c:	f7ff bf90 	b.w	8007850 <_strtoul_l.constprop.0>

08007930 <_malloc_usable_size_r>:
 8007930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007934:	1f18      	subs	r0, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	bfbc      	itt	lt
 800793a:	580b      	ldrlt	r3, [r1, r0]
 800793c:	18c0      	addlt	r0, r0, r3
 800793e:	4770      	bx	lr

08007940 <_init>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr

0800794c <_fini>:
 800794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794e:	bf00      	nop
 8007950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007952:	bc08      	pop	{r3}
 8007954:	469e      	mov	lr, r3
 8007956:	4770      	bx	lr
