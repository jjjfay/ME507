/*
 * cailbrate.c
 *
 *  Created on: Jun 10, 2024
 *      Author: julia
 */

#include "calibrate.h"

uint32_t find_average(controller_t*p_cali){

	//initialize the sum to be zero
	uint32_t sum = 0;

	//collect the data
	for(int i = 0 ; i<calibrate_t->length; i++){

		int curr = read_current(calibrate->p_myo);
		sum = sum + curr;

	}

	//return the average
	return sum/(calibrate_t->length);
}


// Function to compare two integers (for qsort)
uint32_t compare(const void *a, const void *b) {
    return (*(uint32_t *)a - *(uint32_t *)b);
}



// Function to find the median of an array
double find_median(int arr[], int n) {
    if (n == 0) {
        fprintf(stderr, "The array should not be empty\n");
        exit(EXIT_FAILURE);
    }

    // Sort the array
    qsort(arr, n, sizeof(int), compare);

    // Calculate median
    if (n % 2 == 0) {
        // If even, return the average of the middle two values
        return (arr[n/2 - 1] + arr[n/2]) / 2.0;
    } else {
        // If odd, return the middle value
        return arr[n/2];
    }
}



int32_t find_median(uint16_t arr[]){

		//initialize the array for data collection
		uint16_t myo_arr[calibrate_t->length] = {0};

		//collect the data
		for(int i = 0 ; i<calibrate_t->length; i++){

			int curr = read_current(calibrate->p_myo);

			myo_arr[i] = curr;}

		// Sort the array
		uint32_t n = calibrate_t->length;

		qsort(arr, n, sizeof(uint32_t), compare);

		    // Calculate median
		    if (n % 2 == 0) {

		    	// If even, return the average of the middle two values
		        return (arr[n/2 - 1] + arr[n/2]) / 2.0;

		    } else {
		        // If odd, return the middle value
		        return arr[n/2];
		    }

}
