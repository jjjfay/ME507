
Term_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ac  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08008a3c  08008a3c  00009a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d8c  08008d8c  0000a100  2**0
                  CONTENTS
  4 .ARM          00000008  08008d8c  08008d8c  00009d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d94  08008d94  0000a100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d94  08008d94  00009d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d98  08008d98  00009d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  08008d9c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007d4  20000100  08008e9c  0000a100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08008e9c  0000a8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d97  00000000  00000000  0000a130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dee  00000000  00000000  00020ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  00023cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb1  00000000  00000000  000250e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a698  00000000  00000000  00026099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000183c8  00000000  00000000  00050731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001081c2  00000000  00000000  00068af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170cbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  00170d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00176b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a24 	.word	0x08008a24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08008a24 	.word	0x08008a24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_init>:
/**
 * @brief A function to initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_init(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize the motor driver channels
	start_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 ff09 	bl	8001384 <start_PWM>

	//initialize the encoder reader channels
	init_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f816 	bl	80005a8 <init_channels>
}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <controller_deinit>:
/**
 * @brief A function to de-initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_deinit(controller_t* p_cont){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//de-initialize the motor driver channels
	stop_PWM(p_cont->p_mot);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 ff08 	bl	80013a6 <stop_PWM>

	//de-initialize the encoder reader channels
	deinit_channels(p_cont->p_enc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f812 	bl	80005c4 <deinit_channels>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <init_channels>:
/**
 * @brief A function to initialize the channels for reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void init_channels(encoder_t* p_enc){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	213c      	movs	r1, #60	@ 0x3c
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 f9d4 	bl	8005964 <HAL_TIM_Encoder_Start>
	//HAL_TIM_Encoder_Start(p_enc->hal_tim,  p_enc->channel2);
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <deinit_channels>:
/**
 * @brief A function to stop the channels from reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void deinit_channels(encoder_t* p_enc){
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Stop(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	213c      	movs	r1, #60	@ 0x3c
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 fa54 	bl	8005a80 <HAL_TIM_Encoder_Stop>
	//HAL_TIM_Encoder_Stop(p_enc->hal_tim,  p_enc->channel2);
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <get_pos>:
 * @param p_enc The encoder object to perform the function on.
 *
 * @return count The encoder count to be returned.
 */

uint16_t get_pos(encoder_t* p_enc){
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

	p_enc->prev_count = p_enc->curr_count;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	821a      	strh	r2, [r3, #16]
	p_enc->curr_count = __HAL_TIM_GET_COUNTER(p_enc->hal_tim);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	81da      	strh	r2, [r3, #14]

	p_enc->delta = p_enc->curr_count - p_enc->prev_count;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000606:	b29a      	uxth	r2, r3
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800060e:	b29b      	uxth	r3, r3
 8000610:	1ad3      	subs	r3, r2, r3
 8000612:	b29b      	uxth	r3, r3
 8000614:	b21a      	sxth	r2, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	825a      	strh	r2, [r3, #18]
	//address overflow issues
	if(p_enc->delta >= 32768){

		p_enc->delta -= 65536;
	}
	else if(p_enc->delta <= -32768){
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000620:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8000624:	d104      	bne.n	8000630 <get_pos+0x50>

		p_enc->delta += 65536;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	825a      	strh	r2, [r3, #18]
	}

	p_enc->mot_pos += p_enc->delta;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000636:	b29a      	uxth	r2, r3
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800063e:	b29b      	uxth	r3, r3
 8000640:	4413      	add	r3, r2
 8000642:	b29b      	uxth	r3, r3
 8000644:	b21a      	sxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	819a      	strh	r2, [r3, #12]


	return p_enc->mot_pos;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000650:	b29b      	uxth	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
	...

08000660 <task1>:
/**
 * @brief Task 1, the hand task, is responsible for moving the prosthetic hand fingers based on the
 * 		  set point determined by the myoelectric sensor and feedback given from the pressure sensor.
 */
// Task 1 - HAND TASK
void task1(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 8000664:	4b38      	ldr	r3, [pc, #224]	@ (8000748 <task1+0xe8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d116      	bne.n	800069a <task1+0x3a>

		n = sprintf(print_buff,"\n\rTask 1, State 0\n");
 800066c:	4937      	ldr	r1, [pc, #220]	@ (800074c <task1+0xec>)
 800066e:	4838      	ldr	r0, [pc, #224]	@ (8000750 <task1+0xf0>)
 8000670:	f007 f9a6 	bl	80079c0 <siprintf>
 8000674:	4603      	mov	r3, r0
 8000676:	4a37      	ldr	r2, [pc, #220]	@ (8000754 <task1+0xf4>)
 8000678:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 800067a:	4b36      	ldr	r3, [pc, #216]	@ (8000754 <task1+0xf4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	b29a      	uxth	r2, r3
 8000680:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000684:	4932      	ldr	r1, [pc, #200]	@ (8000750 <task1+0xf0>)
 8000686:	4834      	ldr	r0, [pc, #208]	@ (8000758 <task1+0xf8>)
 8000688:	f006 fb6e 	bl	8006d68 <HAL_UART_Transmit>

		controller_init(&hand_mot);
 800068c:	4833      	ldr	r0, [pc, #204]	@ (800075c <task1+0xfc>)
 800068e:	f7ff ff67 	bl	8000560 <controller_init>

		currentState = 1;}
 8000692:	4b2d      	ldr	r3, [pc, #180]	@ (8000748 <task1+0xe8>)
 8000694:	2201      	movs	r2, #1
 8000696:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);

		currentState = 1;}
}
 8000698:	e054      	b.n	8000744 <task1+0xe4>
	else if (currentState == 1) {
 800069a:	4b2b      	ldr	r3, [pc, #172]	@ (8000748 <task1+0xe8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10a      	bne.n	80006b8 <task1+0x58>
		n = sprintf(print_buff,"\n\rTask 1, State 1\n");
 80006a2:	492f      	ldr	r1, [pc, #188]	@ (8000760 <task1+0x100>)
 80006a4:	482a      	ldr	r0, [pc, #168]	@ (8000750 <task1+0xf0>)
 80006a6:	f007 f98b 	bl	80079c0 <siprintf>
 80006aa:	4603      	mov	r3, r0
 80006ac:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <task1+0xf4>)
 80006ae:	6013      	str	r3, [r2, #0]
		currentState = 2;}
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <task1+0xe8>)
 80006b2:	2202      	movs	r2, #2
 80006b4:	601a      	str	r2, [r3, #0]
}
 80006b6:	e045      	b.n	8000744 <task1+0xe4>
	else if (currentState == 2) {
 80006b8:	4b23      	ldr	r3, [pc, #140]	@ (8000748 <task1+0xe8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	d10a      	bne.n	80006d6 <task1+0x76>
		n = sprintf(print_buff,"\n\rTask 1, State 2\n");
 80006c0:	4928      	ldr	r1, [pc, #160]	@ (8000764 <task1+0x104>)
 80006c2:	4823      	ldr	r0, [pc, #140]	@ (8000750 <task1+0xf0>)
 80006c4:	f007 f97c 	bl	80079c0 <siprintf>
 80006c8:	4603      	mov	r3, r0
 80006ca:	4a22      	ldr	r2, [pc, #136]	@ (8000754 <task1+0xf4>)
 80006cc:	6013      	str	r3, [r2, #0]
		currentState = 3;}
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <task1+0xe8>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	e036      	b.n	8000744 <task1+0xe4>
	else if (currentState == 3) {
 80006d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000748 <task1+0xe8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d10a      	bne.n	80006f4 <task1+0x94>
		n = sprintf(print_buff,"\n\rTask 1, State 3\n");
 80006de:	4922      	ldr	r1, [pc, #136]	@ (8000768 <task1+0x108>)
 80006e0:	481b      	ldr	r0, [pc, #108]	@ (8000750 <task1+0xf0>)
 80006e2:	f007 f96d 	bl	80079c0 <siprintf>
 80006e6:	4603      	mov	r3, r0
 80006e8:	4a1a      	ldr	r2, [pc, #104]	@ (8000754 <task1+0xf4>)
 80006ea:	6013      	str	r3, [r2, #0]
		currentState = 4;}
 80006ec:	4b16      	ldr	r3, [pc, #88]	@ (8000748 <task1+0xe8>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	601a      	str	r2, [r3, #0]
}
 80006f2:	e027      	b.n	8000744 <task1+0xe4>
	else if (currentState == 4) {
 80006f4:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <task1+0xe8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b04      	cmp	r3, #4
 80006fa:	d10a      	bne.n	8000712 <task1+0xb2>
		n = sprintf(print_buff,"\n\rTask 1, State 4\n");
 80006fc:	491b      	ldr	r1, [pc, #108]	@ (800076c <task1+0x10c>)
 80006fe:	4814      	ldr	r0, [pc, #80]	@ (8000750 <task1+0xf0>)
 8000700:	f007 f95e 	bl	80079c0 <siprintf>
 8000704:	4603      	mov	r3, r0
 8000706:	4a13      	ldr	r2, [pc, #76]	@ (8000754 <task1+0xf4>)
 8000708:	6013      	str	r3, [r2, #0]
		currentState = 5;}
 800070a:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <task1+0xe8>)
 800070c:	2205      	movs	r2, #5
 800070e:	601a      	str	r2, [r3, #0]
}
 8000710:	e018      	b.n	8000744 <task1+0xe4>
	else if (currentState == 5) {
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <task1+0xe8>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b05      	cmp	r3, #5
 8000718:	d10a      	bne.n	8000730 <task1+0xd0>
		n = sprintf(print_buff,"\n\rTask 1, State 5\n");
 800071a:	4915      	ldr	r1, [pc, #84]	@ (8000770 <task1+0x110>)
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <task1+0xf0>)
 800071e:	f007 f94f 	bl	80079c0 <siprintf>
 8000722:	4603      	mov	r3, r0
 8000724:	4a0b      	ldr	r2, [pc, #44]	@ (8000754 <task1+0xf4>)
 8000726:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 8000728:	4b07      	ldr	r3, [pc, #28]	@ (8000748 <task1+0xe8>)
 800072a:	2201      	movs	r2, #1
 800072c:	601a      	str	r2, [r3, #0]
}
 800072e:	e009      	b.n	8000744 <task1+0xe4>
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
 8000730:	4910      	ldr	r1, [pc, #64]	@ (8000774 <task1+0x114>)
 8000732:	4807      	ldr	r0, [pc, #28]	@ (8000750 <task1+0xf0>)
 8000734:	f007 f944 	bl	80079c0 <siprintf>
 8000738:	4603      	mov	r3, r0
 800073a:	4a06      	ldr	r2, [pc, #24]	@ (8000754 <task1+0xf4>)
 800073c:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800073e:	4b02      	ldr	r3, [pc, #8]	@ (8000748 <task1+0xe8>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
}
 8000744:	bf00      	nop
 8000746:	bd80      	pop	{r7, pc}
 8000748:	2000045c 	.word	0x2000045c
 800074c:	08008a3c 	.word	0x08008a3c
 8000750:	20000460 	.word	0x20000460
 8000754:	200004f8 	.word	0x200004f8
 8000758:	2000032c 	.word	0x2000032c
 800075c:	20000000 	.word	0x20000000
 8000760:	08008a50 	.word	0x08008a50
 8000764:	08008a64 	.word	0x08008a64
 8000768:	08008a78 	.word	0x08008a78
 800076c:	08008a8c 	.word	0x08008a8c
 8000770:	08008aa0 	.word	0x08008aa0
 8000774:	08008ab4 	.word	0x08008ab4

08000778 <task2>:
/**
 * @brief Task 2, the motor task, is responsible for rotating the prosthetic hand based
 * 		  on the set point determined by the myoelectric sensor alone.
 */
// Task 2 - MOTOR TASK
void task2(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 800077c:	4b29      	ldr	r3, [pc, #164]	@ (8000824 <task2+0xac>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d116      	bne.n	80007b2 <task2+0x3a>

		n = sprintf(print_buff,"\n\rTask 2, State 0\n");
 8000784:	4928      	ldr	r1, [pc, #160]	@ (8000828 <task2+0xb0>)
 8000786:	4829      	ldr	r0, [pc, #164]	@ (800082c <task2+0xb4>)
 8000788:	f007 f91a 	bl	80079c0 <siprintf>
 800078c:	4603      	mov	r3, r0
 800078e:	4a28      	ldr	r2, [pc, #160]	@ (8000830 <task2+0xb8>)
 8000790:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 8000792:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <task2+0xb8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	b29a      	uxth	r2, r3
 8000798:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800079c:	4923      	ldr	r1, [pc, #140]	@ (800082c <task2+0xb4>)
 800079e:	4825      	ldr	r0, [pc, #148]	@ (8000834 <task2+0xbc>)
 80007a0:	f006 fae2 	bl	8006d68 <HAL_UART_Transmit>

		controller_init(&spin_mot);
 80007a4:	4824      	ldr	r0, [pc, #144]	@ (8000838 <task2+0xc0>)
 80007a6:	f7ff fedb 	bl	8000560 <controller_init>

		currentState = 1;}
 80007aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <task2+0xac>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	601a      	str	r2, [r3, #0]

	else {
		n = sprintf(print_buff,"\n\rTask 2, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;}
}
 80007b0:	e036      	b.n	8000820 <task2+0xa8>
	else if (currentState == 1) {
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <task2+0xac>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	d10a      	bne.n	80007d0 <task2+0x58>
		n = sprintf(print_buff,"\n\rTask 2, State 1\n");
 80007ba:	4920      	ldr	r1, [pc, #128]	@ (800083c <task2+0xc4>)
 80007bc:	481b      	ldr	r0, [pc, #108]	@ (800082c <task2+0xb4>)
 80007be:	f007 f8ff 	bl	80079c0 <siprintf>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000830 <task2+0xb8>)
 80007c6:	6013      	str	r3, [r2, #0]
		currentState = 2;}
 80007c8:	4b16      	ldr	r3, [pc, #88]	@ (8000824 <task2+0xac>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	601a      	str	r2, [r3, #0]
}
 80007ce:	e027      	b.n	8000820 <task2+0xa8>
	else if (currentState == 2) {
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <task2+0xac>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d10a      	bne.n	80007ee <task2+0x76>
		n = sprintf(print_buff,"\n\rTask 2, State 2\n");
 80007d8:	4919      	ldr	r1, [pc, #100]	@ (8000840 <task2+0xc8>)
 80007da:	4814      	ldr	r0, [pc, #80]	@ (800082c <task2+0xb4>)
 80007dc:	f007 f8f0 	bl	80079c0 <siprintf>
 80007e0:	4603      	mov	r3, r0
 80007e2:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <task2+0xb8>)
 80007e4:	6013      	str	r3, [r2, #0]
		currentState = 3;}
 80007e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000824 <task2+0xac>)
 80007e8:	2203      	movs	r2, #3
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	e018      	b.n	8000820 <task2+0xa8>
	else if (currentState == 3) {
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <task2+0xac>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d10a      	bne.n	800080c <task2+0x94>
		n = sprintf(print_buff,"\n\rTask 2, State 3\n");
 80007f6:	4913      	ldr	r1, [pc, #76]	@ (8000844 <task2+0xcc>)
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <task2+0xb4>)
 80007fa:	f007 f8e1 	bl	80079c0 <siprintf>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a0b      	ldr	r2, [pc, #44]	@ (8000830 <task2+0xb8>)
 8000802:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <task2+0xac>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
}
 800080a:	e009      	b.n	8000820 <task2+0xa8>
		n = sprintf(print_buff,"\n\rTask 2, Invalid State. Reset to State 1\n");
 800080c:	490e      	ldr	r1, [pc, #56]	@ (8000848 <task2+0xd0>)
 800080e:	4807      	ldr	r0, [pc, #28]	@ (800082c <task2+0xb4>)
 8000810:	f007 f8d6 	bl	80079c0 <siprintf>
 8000814:	4603      	mov	r3, r0
 8000816:	4a06      	ldr	r2, [pc, #24]	@ (8000830 <task2+0xb8>)
 8000818:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800081a:	4b02      	ldr	r3, [pc, #8]	@ (8000824 <task2+0xac>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004fc 	.word	0x200004fc
 8000828:	08008ae0 	.word	0x08008ae0
 800082c:	20000500 	.word	0x20000500
 8000830:	20000598 	.word	0x20000598
 8000834:	2000032c 	.word	0x2000032c
 8000838:	20000024 	.word	0x20000024
 800083c:	08008af4 	.word	0x08008af4
 8000840:	08008b08 	.word	0x08008b08
 8000844:	08008b1c 	.word	0x08008b1c
 8000848:	08008b30 	.word	0x08008b30

0800084c <task3>:
/**
 * @brief Task 3, the myo task, is responsible for gathering, interpreting, and sharing the
 * 		  output of the myoelectric sensor signals to both motors.
 */
// Task 3 - MYO TASK
void task3(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 8000850:	4b28      	ldr	r3, [pc, #160]	@ (80008f4 <task3+0xa8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d113      	bne.n	8000880 <task3+0x34>

		n = sprintf(print_buff,"\n\rTask 3, State 0\n");
 8000858:	4927      	ldr	r1, [pc, #156]	@ (80008f8 <task3+0xac>)
 800085a:	4828      	ldr	r0, [pc, #160]	@ (80008fc <task3+0xb0>)
 800085c:	f007 f8b0 	bl	80079c0 <siprintf>
 8000860:	4603      	mov	r3, r0
 8000862:	4a27      	ldr	r2, [pc, #156]	@ (8000900 <task3+0xb4>)
 8000864:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 8000866:	4b26      	ldr	r3, [pc, #152]	@ (8000900 <task3+0xb4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	b29a      	uxth	r2, r3
 800086c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000870:	4922      	ldr	r1, [pc, #136]	@ (80008fc <task3+0xb0>)
 8000872:	4824      	ldr	r0, [pc, #144]	@ (8000904 <task3+0xb8>)
 8000874:	f006 fa78 	bl	8006d68 <HAL_UART_Transmit>

		currentState = 1;}
 8000878:	4b1e      	ldr	r3, [pc, #120]	@ (80008f4 <task3+0xa8>)
 800087a:	2201      	movs	r2, #1
 800087c:	601a      	str	r2, [r3, #0]

	else {
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;}
}
 800087e:	e036      	b.n	80008ee <task3+0xa2>
	else if (currentState == 1) {
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <task3+0xa8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b01      	cmp	r3, #1
 8000886:	d10a      	bne.n	800089e <task3+0x52>
		n = sprintf(print_buff,"\n\rTask 3, State 1\n");
 8000888:	491f      	ldr	r1, [pc, #124]	@ (8000908 <task3+0xbc>)
 800088a:	481c      	ldr	r0, [pc, #112]	@ (80008fc <task3+0xb0>)
 800088c:	f007 f898 	bl	80079c0 <siprintf>
 8000890:	4603      	mov	r3, r0
 8000892:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <task3+0xb4>)
 8000894:	6013      	str	r3, [r2, #0]
		currentState = 2;}
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <task3+0xa8>)
 8000898:	2202      	movs	r2, #2
 800089a:	601a      	str	r2, [r3, #0]
}
 800089c:	e027      	b.n	80008ee <task3+0xa2>
	else if (currentState == 2) {
 800089e:	4b15      	ldr	r3, [pc, #84]	@ (80008f4 <task3+0xa8>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d10a      	bne.n	80008bc <task3+0x70>
		n = sprintf(print_buff,"\n\rTask 3, State 2\n");
 80008a6:	4919      	ldr	r1, [pc, #100]	@ (800090c <task3+0xc0>)
 80008a8:	4814      	ldr	r0, [pc, #80]	@ (80008fc <task3+0xb0>)
 80008aa:	f007 f889 	bl	80079c0 <siprintf>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a13      	ldr	r2, [pc, #76]	@ (8000900 <task3+0xb4>)
 80008b2:	6013      	str	r3, [r2, #0]
		currentState = 3;}
 80008b4:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <task3+0xa8>)
 80008b6:	2203      	movs	r2, #3
 80008b8:	601a      	str	r2, [r3, #0]
}
 80008ba:	e018      	b.n	80008ee <task3+0xa2>
	else if (currentState == 3) {
 80008bc:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <task3+0xa8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d10a      	bne.n	80008da <task3+0x8e>
		n = sprintf(print_buff,"\n\rTask 3, State 3\n");
 80008c4:	4912      	ldr	r1, [pc, #72]	@ (8000910 <task3+0xc4>)
 80008c6:	480d      	ldr	r0, [pc, #52]	@ (80008fc <task3+0xb0>)
 80008c8:	f007 f87a 	bl	80079c0 <siprintf>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a0c      	ldr	r2, [pc, #48]	@ (8000900 <task3+0xb4>)
 80008d0:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 80008d2:	4b08      	ldr	r3, [pc, #32]	@ (80008f4 <task3+0xa8>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	e009      	b.n	80008ee <task3+0xa2>
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
 80008da:	490e      	ldr	r1, [pc, #56]	@ (8000914 <task3+0xc8>)
 80008dc:	4807      	ldr	r0, [pc, #28]	@ (80008fc <task3+0xb0>)
 80008de:	f007 f86f 	bl	80079c0 <siprintf>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <task3+0xb4>)
 80008e6:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <task3+0xa8>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	601a      	str	r2, [r3, #0]
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000059c 	.word	0x2000059c
 80008f8:	08008b5c 	.word	0x08008b5c
 80008fc:	200005a0 	.word	0x200005a0
 8000900:	20000638 	.word	0x20000638
 8000904:	2000032c 	.word	0x2000032c
 8000908:	08008b70 	.word	0x08008b70
 800090c:	08008b84 	.word	0x08008b84
 8000910:	08008b98 	.word	0x08008b98
 8000914:	08008bac 	.word	0x08008bac

08000918 <task4>:
/**
 * @brief Task 4, the pressure sensor task, is responsible for gathering, interpreting, and sharing the
 * 		  output of the pressure sensor signals to the hand rotation motor.
 */
// Task 4 - PRESSURE SENSOR TASK
void task4(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 800091c:	4b28      	ldr	r3, [pc, #160]	@ (80009c0 <task4+0xa8>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d113      	bne.n	800094c <task4+0x34>

		n = sprintf(print_buff,"\n\rTask 4, State 0\n");
 8000924:	4927      	ldr	r1, [pc, #156]	@ (80009c4 <task4+0xac>)
 8000926:	4828      	ldr	r0, [pc, #160]	@ (80009c8 <task4+0xb0>)
 8000928:	f007 f84a 	bl	80079c0 <siprintf>
 800092c:	4603      	mov	r3, r0
 800092e:	4a27      	ldr	r2, [pc, #156]	@ (80009cc <task4+0xb4>)
 8000930:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 8000932:	4b26      	ldr	r3, [pc, #152]	@ (80009cc <task4+0xb4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	b29a      	uxth	r2, r3
 8000938:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800093c:	4922      	ldr	r1, [pc, #136]	@ (80009c8 <task4+0xb0>)
 800093e:	4824      	ldr	r0, [pc, #144]	@ (80009d0 <task4+0xb8>)
 8000940:	f006 fa12 	bl	8006d68 <HAL_UART_Transmit>

		currentState = 1;}
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <task4+0xa8>)
 8000946:	2201      	movs	r2, #1
 8000948:	601a      	str	r2, [r3, #0]

	else {
		n = sprintf(print_buff,"\n\rTask 4, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;}
}
 800094a:	e036      	b.n	80009ba <task4+0xa2>
	else if (currentState == 1) {
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <task4+0xa8>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d10a      	bne.n	800096a <task4+0x52>
		n = sprintf(print_buff,"\n\rTask 4, State 1\n");
 8000954:	491f      	ldr	r1, [pc, #124]	@ (80009d4 <task4+0xbc>)
 8000956:	481c      	ldr	r0, [pc, #112]	@ (80009c8 <task4+0xb0>)
 8000958:	f007 f832 	bl	80079c0 <siprintf>
 800095c:	4603      	mov	r3, r0
 800095e:	4a1b      	ldr	r2, [pc, #108]	@ (80009cc <task4+0xb4>)
 8000960:	6013      	str	r3, [r2, #0]
		currentState = 2;}
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <task4+0xa8>)
 8000964:	2202      	movs	r2, #2
 8000966:	601a      	str	r2, [r3, #0]
}
 8000968:	e027      	b.n	80009ba <task4+0xa2>
	else if (currentState == 2) {
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <task4+0xa8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d10a      	bne.n	8000988 <task4+0x70>
		n = sprintf(print_buff,"\n\rTask 4, State 2\n");
 8000972:	4919      	ldr	r1, [pc, #100]	@ (80009d8 <task4+0xc0>)
 8000974:	4814      	ldr	r0, [pc, #80]	@ (80009c8 <task4+0xb0>)
 8000976:	f007 f823 	bl	80079c0 <siprintf>
 800097a:	4603      	mov	r3, r0
 800097c:	4a13      	ldr	r2, [pc, #76]	@ (80009cc <task4+0xb4>)
 800097e:	6013      	str	r3, [r2, #0]
		currentState = 3;}
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <task4+0xa8>)
 8000982:	2203      	movs	r2, #3
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	e018      	b.n	80009ba <task4+0xa2>
	else if (currentState == 3) {
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <task4+0xa8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d10a      	bne.n	80009a6 <task4+0x8e>
		n = sprintf(print_buff,"\n\rTask 4, State 3\n");
 8000990:	4912      	ldr	r1, [pc, #72]	@ (80009dc <task4+0xc4>)
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <task4+0xb0>)
 8000994:	f007 f814 	bl	80079c0 <siprintf>
 8000998:	4603      	mov	r3, r0
 800099a:	4a0c      	ldr	r2, [pc, #48]	@ (80009cc <task4+0xb4>)
 800099c:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <task4+0xa8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	601a      	str	r2, [r3, #0]
}
 80009a4:	e009      	b.n	80009ba <task4+0xa2>
		n = sprintf(print_buff,"\n\rTask 4, Invalid State. Reset to State 1\n");
 80009a6:	490e      	ldr	r1, [pc, #56]	@ (80009e0 <task4+0xc8>)
 80009a8:	4807      	ldr	r0, [pc, #28]	@ (80009c8 <task4+0xb0>)
 80009aa:	f007 f809 	bl	80079c0 <siprintf>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a06      	ldr	r2, [pc, #24]	@ (80009cc <task4+0xb4>)
 80009b2:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 80009b4:	4b02      	ldr	r3, [pc, #8]	@ (80009c0 <task4+0xa8>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	601a      	str	r2, [r3, #0]
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000063c 	.word	0x2000063c
 80009c4:	08008bd8 	.word	0x08008bd8
 80009c8:	20000640 	.word	0x20000640
 80009cc:	200006d8 	.word	0x200006d8
 80009d0:	2000032c 	.word	0x2000032c
 80009d4:	08008bec 	.word	0x08008bec
 80009d8:	08008c00 	.word	0x08008c00
 80009dc:	08008c14 	.word	0x08008c14
 80009e0:	08008c28 	.word	0x08008c28

080009e4 <task5>:
/**
 * @brief Task 5, the wireless emergency stop task, is responsible for monitoring for a change in the
 * 	      PWM signal from a radio transmitter. If a change is detected, this task will end the program.
 */
// Task 5 - WIRELESS E STOP TASK
void task5(void) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <task5+0xb0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d11b      	bne.n	8000a28 <task5+0x44>

		n = sprintf(print_buff,"\n\rTask 5, State 0\n");
 80009f0:	4929      	ldr	r1, [pc, #164]	@ (8000a98 <task5+0xb4>)
 80009f2:	482a      	ldr	r0, [pc, #168]	@ (8000a9c <task5+0xb8>)
 80009f4:	f006 ffe4 	bl	80079c0 <siprintf>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a29      	ldr	r2, [pc, #164]	@ (8000aa0 <task5+0xbc>)
 80009fc:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <task5+0xbc>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a08:	4924      	ldr	r1, [pc, #144]	@ (8000a9c <task5+0xb8>)
 8000a0a:	4826      	ldr	r0, [pc, #152]	@ (8000aa4 <task5+0xc0>)
 8000a0c:	f006 f9ac 	bl	8006d68 <HAL_UART_Transmit>

		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_3);
 8000a10:	2108      	movs	r1, #8
 8000a12:	4825      	ldr	r0, [pc, #148]	@ (8000aa8 <task5+0xc4>)
 8000a14:	f004 fdb6 	bl	8005584 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_4);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4823      	ldr	r0, [pc, #140]	@ (8000aa8 <task5+0xc4>)
 8000a1c:	f004 fdb2 	bl	8005584 <HAL_TIM_IC_Start_IT>


		currentState = 1;}
 8000a20:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <task5+0xb0>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 5, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;
	}
}
 8000a26:	e033      	b.n	8000a90 <task5+0xac>
	else if (currentState == 1) {
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <task5+0xb0>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d113      	bne.n	8000a58 <task5+0x74>
		n = sprintf(print_buff,"\n\rTask 5, State 1\n");
 8000a30:	491e      	ldr	r1, [pc, #120]	@ (8000aac <task5+0xc8>)
 8000a32:	481a      	ldr	r0, [pc, #104]	@ (8000a9c <task5+0xb8>)
 8000a34:	f006 ffc4 	bl	80079c0 <siprintf>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a19      	ldr	r2, [pc, #100]	@ (8000aa0 <task5+0xbc>)
 8000a3c:	6013      	str	r3, [r2, #0]
		if(check_delta(radio_pulse) == 1)
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <task5+0xcc>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4618      	mov	r0, r3
 8000a46:	f000 fdae 	bl	80015a6 <check_delta>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d11f      	bne.n	8000a90 <task5+0xac>
				currentState = 2;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <task5+0xb0>)
 8000a52:	2202      	movs	r2, #2
 8000a54:	601a      	str	r2, [r3, #0]
}
 8000a56:	e01b      	b.n	8000a90 <task5+0xac>
	else if (currentState == 2) {
 8000a58:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <task5+0xb0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d10d      	bne.n	8000a7c <task5+0x98>
		n = sprintf(print_buff,"\n\rTask 5, State 2\n");
 8000a60:	4914      	ldr	r1, [pc, #80]	@ (8000ab4 <task5+0xd0>)
 8000a62:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <task5+0xb8>)
 8000a64:	f006 ffac 	bl	80079c0 <siprintf>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa0 <task5+0xbc>)
 8000a6c:	6013      	str	r3, [r2, #0]
		controller_deinit(&hand_cont);
 8000a6e:	4812      	ldr	r0, [pc, #72]	@ (8000ab8 <task5+0xd4>)
 8000a70:	f7ff fd88 	bl	8000584 <controller_deinit>
		controller_deinit(&spin_cont);
 8000a74:	4811      	ldr	r0, [pc, #68]	@ (8000abc <task5+0xd8>)
 8000a76:	f7ff fd85 	bl	8000584 <controller_deinit>
}
 8000a7a:	e009      	b.n	8000a90 <task5+0xac>
		n = sprintf(print_buff,"\n\rTask 5, Invalid State. Reset to State 1\n");
 8000a7c:	4910      	ldr	r1, [pc, #64]	@ (8000ac0 <task5+0xdc>)
 8000a7e:	4807      	ldr	r0, [pc, #28]	@ (8000a9c <task5+0xb8>)
 8000a80:	f006 ff9e 	bl	80079c0 <siprintf>
 8000a84:	4603      	mov	r3, r0
 8000a86:	4a06      	ldr	r2, [pc, #24]	@ (8000aa0 <task5+0xbc>)
 8000a88:	6013      	str	r3, [r2, #0]
		currentState = 1;
 8000a8a:	4b02      	ldr	r3, [pc, #8]	@ (8000a94 <task5+0xb0>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200006dc 	.word	0x200006dc
 8000a98:	08008c54 	.word	0x08008c54
 8000a9c:	200006e0 	.word	0x200006e0
 8000aa0:	20000778 	.word	0x20000778
 8000aa4:	2000032c 	.word	0x2000032c
 8000aa8:	20000248 	.word	0x20000248
 8000aac:	08008c68 	.word	0x08008c68
 8000ab0:	200003b8 	.word	0x200003b8
 8000ab4:	08008c7c 	.word	0x08008c7c
 8000ab8:	20000070 	.word	0x20000070
 8000abc:	20000080 	.word	0x20000080
 8000ac0:	08008c90 	.word	0x08008c90

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac8:	f001 f8c3 	bl	8001c52 <HAL_Init>
  //HAL_TIM_Encoder_Start(&htim4,  TIM_CHANNEL_ALL);

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000acc:	f000 f876 	bl	8000bbc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ad0:	f000 f8c3 	bl	8000c5a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f000 fba2 	bl	800121c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ad8:	f000 f8ea 	bl	8000cb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000adc:	f000 f95e 	bl	8000d9c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ae0:	f000 f9c0 	bl	8000e64 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000ae4:	f000 faae 	bl	8001044 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ae8:	f000 fa20 	bl	8000f2c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000aec:	f000 fb10 	bl	8001110 <MX_TIM4_Init>
  MX_UART4_Init();
 8000af0:	f000 fb64 	bl	80011bc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Encoder_Start(&htim4,  TIM_CHANNEL_ALL);
  init_channels(&spin_enc);
 8000af4:	4827      	ldr	r0, [pc, #156]	@ (8000b94 <main+0xd0>)
 8000af6:	f7ff fd57 	bl	80005a8 <init_channels>

  //Init motors and set duty
  start_PWM(&spin_mot);
 8000afa:	4827      	ldr	r0, [pc, #156]	@ (8000b98 <main+0xd4>)
 8000afc:	f000 fc42 	bl	8001384 <start_PWM>
  set_duty(&spin_mot,7000);
 8000b00:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8000b04:	4824      	ldr	r0, [pc, #144]	@ (8000b98 <main+0xd4>)
 8000b06:	f000 fc5f 	bl	80013c8 <set_duty>
  while (1)
  {
	  //Continuously run the FSM

	 	  // Execute task 1
	 	  task1();
 8000b0a:	f7ff fda9 	bl	8000660 <task1>

	 	  // Execute task 2
	 	  task2();
 8000b0e:	f7ff fe33 	bl	8000778 <task2>

	 	  // Execute task 3
	 	  task3();
 8000b12:	f7ff fe9b 	bl	800084c <task3>

	 	  // Execute task 4
	 	  task4();
 8000b16:	f7ff feff 	bl	8000918 <task4>

	 	  // Execute task 5
	 	  task5();
 8000b1a:	f7ff ff63 	bl	80009e4 <task5>




	 	  //spin_mot_count = __HAL_TIM_GET_COUNTER(&htim4);
	 	  spin_mot_count = get_pos(&spin_enc);
 8000b1e:	481d      	ldr	r0, [pc, #116]	@ (8000b94 <main+0xd0>)
 8000b20:	f7ff fd5e 	bl	80005e0 <get_pos>
 8000b24:	4603      	mov	r3, r0
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	4b1c      	ldr	r3, [pc, #112]	@ (8000b9c <main+0xd8>)
 8000b2a:	801a      	strh	r2, [r3, #0]
	 	  m = sprintf(tst_buff,"\n\rThe encoder count is %d\n",spin_mot_count);
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <main+0xd8>)
 8000b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b32:	461a      	mov	r2, r3
 8000b34:	491a      	ldr	r1, [pc, #104]	@ (8000ba0 <main+0xdc>)
 8000b36:	481b      	ldr	r0, [pc, #108]	@ (8000ba4 <main+0xe0>)
 8000b38:	f006 ff42 	bl	80079c0 <siprintf>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba8 <main+0xe4>)
 8000b40:	6013      	str	r3, [r2, #0]
	 	  HAL_UART_Transmit(&huart4,tst_buff,m,400);
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <main+0xe4>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	b29a      	uxth	r2, r3
 8000b48:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b4c:	4915      	ldr	r1, [pc, #84]	@ (8000ba4 <main+0xe0>)
 8000b4e:	4817      	ldr	r0, [pc, #92]	@ (8000bac <main+0xe8>)
 8000b50:	f006 f90a 	bl	8006d68 <HAL_UART_Transmit>

	 	  //test muscle sensor
	 	  myo_val = read_current(&myo1);
 8000b54:	4816      	ldr	r0, [pc, #88]	@ (8000bb0 <main+0xec>)
 8000b56:	f000 fd01 	bl	800155c <read_current>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <main+0xf0>)
 8000b60:	801a      	strh	r2, [r3, #0]
	 	  m = sprintf(tst_buff,"\n\rThe myo output is %d\n",myo_val);
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <main+0xf0>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	4913      	ldr	r1, [pc, #76]	@ (8000bb8 <main+0xf4>)
 8000b6a:	480e      	ldr	r0, [pc, #56]	@ (8000ba4 <main+0xe0>)
 8000b6c:	f006 ff28 	bl	80079c0 <siprintf>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <main+0xe4>)
 8000b74:	6013      	str	r3, [r2, #0]
	 	  HAL_UART_Transmit(&huart4,tst_buff,m,400);
 8000b76:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba8 <main+0xe4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b80:	4908      	ldr	r1, [pc, #32]	@ (8000ba4 <main+0xe0>)
 8000b82:	480a      	ldr	r0, [pc, #40]	@ (8000bac <main+0xe8>)
 8000b84:	f006 f8f0 	bl	8006d68 <HAL_UART_Transmit>

	 	  HAL_Delay(1000);
 8000b88:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8c:	f001 f8d6 	bl	8001d3c <HAL_Delay>
  {
 8000b90:	bf00      	nop
 8000b92:	e7ba      	b.n	8000b0a <main+0x46>
 8000b94:	2000005c 	.word	0x2000005c
 8000b98:	20000024 	.word	0x20000024
 8000b9c:	200003ba 	.word	0x200003ba
 8000ba0:	08008cbc 	.word	0x08008cbc
 8000ba4:	200003c0 	.word	0x200003c0
 8000ba8:	20000458 	.word	0x20000458
 8000bac:	2000032c 	.word	0x2000032c
 8000bb0:	20000090 	.word	0x20000090
 8000bb4:	200003bc 	.word	0x200003bc
 8000bb8:	08008cd8 	.word	0x08008cd8

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b096      	sub	sp, #88	@ 0x58
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	2244      	movs	r2, #68	@ 0x44
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f006 ff5b 	bl	8007a86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	463b      	mov	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
 8000bda:	60da      	str	r2, [r3, #12]
 8000bdc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000be2:	f002 ff71 	bl	8003ac8 <HAL_PWREx_ControlVoltageScaling>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bec:	f000 fbc4 	bl	8001378 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000c06:	2314      	movs	r3, #20
 8000c08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	f107 0314 	add.w	r3, r7, #20
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 ffaa 	bl	8003b74 <HAL_RCC_OscConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c26:	f000 fba7 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2a:	230f      	movs	r3, #15
 8000c2c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2104      	movs	r1, #4
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fb72 	bl	800432c <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c4e:	f000 fb93 	bl	8001378 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3758      	adds	r7, #88	@ 0x58
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b0a2      	sub	sp, #136	@ 0x88
 8000c5e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2288      	movs	r2, #136	@ 0x88
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f006 ff0d 	bl	8007a86 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c70:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000c72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c76:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000c80:	2308      	movs	r3, #8
 8000c82:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000c84:	2307      	movs	r3, #7
 8000c86:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c94:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fd6b 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000ca4:	f000 fb68 	bl	8001378 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3788      	adds	r7, #136	@ 0x88
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08a      	sub	sp, #40	@ 0x28
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
 8000cd0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000cd4:	4a2f      	ldr	r2, [pc, #188]	@ (8000d94 <MX_ADC1_Init+0xe4>)
 8000cd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cde:	4b2c      	ldr	r3, [pc, #176]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cea:	4b29      	ldr	r3, [pc, #164]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf0:	4b27      	ldr	r3, [pc, #156]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cf6:	4b26      	ldr	r3, [pc, #152]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cfc:	4b24      	ldr	r3, [pc, #144]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000d02:	4b23      	ldr	r3, [pc, #140]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d16:	4b1e      	ldr	r3, [pc, #120]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d32:	4817      	ldr	r0, [pc, #92]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d34:	f001 fa58 	bl	80021e8 <HAL_ADC_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000d3e:	f000 fb1b 	bl	8001378 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4810      	ldr	r0, [pc, #64]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d4e:	f002 fb29 	bl	80033a4 <HAL_ADCEx_MultiModeConfigChannel>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d58:	f000 fb0e 	bl	8001378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <MX_ADC1_Init+0xe8>)
 8000d5e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d60:	2306      	movs	r3, #6
 8000d62:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d68:	237f      	movs	r3, #127	@ 0x7f
 8000d6a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_ADC1_Init+0xe0>)
 8000d7a:	f001 fd59 	bl	8002830 <HAL_ADC_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000d84:	f000 faf8 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	3728      	adds	r7, #40	@ 0x28
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000011c 	.word	0x2000011c
 8000d94:	50040000 	.word	0x50040000
 8000d98:	04300002 	.word	0x04300002

08000d9c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	463b      	mov	r3, r7
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000db2:	4b29      	ldr	r3, [pc, #164]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000db4:	4a29      	ldr	r2, [pc, #164]	@ (8000e5c <MX_ADC2_Init+0xc0>)
 8000db6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000dbe:	4b26      	ldr	r3, [pc, #152]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dc4:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dca:	4b23      	ldr	r3, [pc, #140]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000dd6:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df0:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e04:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e12:	4811      	ldr	r0, [pc, #68]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000e14:	f001 f9e8 	bl	80021e8 <HAL_ADC_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000e1e:	f000 faab 	bl	8001378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_ADC2_Init+0xc4>)
 8000e24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e26:	2306      	movs	r3, #6
 8000e28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e2e:	237f      	movs	r3, #127	@ 0x7f
 8000e30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e32:	2304      	movs	r3, #4
 8000e34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	@ (8000e58 <MX_ADC2_Init+0xbc>)
 8000e40:	f001 fcf6 	bl	8002830 <HAL_ADC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000e4a:	f000 fa95 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000180 	.word	0x20000180
 8000e5c:	50040100 	.word	0x50040100
 8000e60:	08600004 	.word	0x08600004

08000e64 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
 8000e78:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000e7a:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000e7c:	4a29      	ldr	r2, [pc, #164]	@ (8000f24 <MX_ADC3_Init+0xc0>)
 8000e7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e80:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e86:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e98:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000eb8:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000eda:	4811      	ldr	r0, [pc, #68]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000edc:	f001 f984 	bl	80021e8 <HAL_ADC_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000ee6:	f000 fa47 	bl	8001378 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <MX_ADC3_Init+0xc4>)
 8000eec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eee:	2306      	movs	r3, #6
 8000ef0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ef6:	237f      	movs	r3, #127	@ 0x7f
 8000ef8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000efa:	2304      	movs	r3, #4
 8000efc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <MX_ADC3_Init+0xbc>)
 8000f08:	f001 fc92 	bl	8002830 <HAL_ADC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000f12:	f000 fa31 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001e4 	.word	0x200001e4
 8000f24:	50040200 	.word	0x50040200
 8000f28:	10c00010 	.word	0x10c00010

08000f2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b090      	sub	sp, #64	@ 0x40
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2224      	movs	r2, #36	@ 0x24
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f006 fda3 	bl	8007a86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000f58:	4b38      	ldr	r3, [pc, #224]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f5a:	4a39      	ldr	r2, [pc, #228]	@ (8001040 <MX_TIM1_Init+0x114>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000f5e:	4b37      	ldr	r3, [pc, #220]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f60:	224f      	movs	r2, #79	@ 0x4f
 8000f62:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b35      	ldr	r3, [pc, #212]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f6a:	4b34      	ldr	r3, [pc, #208]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f78:	4b30      	ldr	r3, [pc, #192]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b2f      	ldr	r3, [pc, #188]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000f84:	482d      	ldr	r0, [pc, #180]	@ (800103c <MX_TIM1_Init+0x110>)
 8000f86:	f004 faa5 	bl	80054d4 <HAL_TIM_IC_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000f90:	f000 f9f2 	bl	8001378 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fac:	2301      	movs	r3, #1
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	481f      	ldr	r0, [pc, #124]	@ (800103c <MX_TIM1_Init+0x110>)
 8000fc0:	f004 fc2a 	bl	8005818 <HAL_TIM_Encoder_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000fca:	f000 f9d5 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000fda:	f107 0310 	add.w	r3, r7, #16
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4816      	ldr	r0, [pc, #88]	@ (800103c <MX_TIM1_Init+0x110>)
 8000fe2:	f005 fdcd 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000fec:	f000 f9c4 	bl	8001378 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001000:	463b      	mov	r3, r7
 8001002:	2208      	movs	r2, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	@ (800103c <MX_TIM1_Init+0x110>)
 8001008:	f004 fee3 	bl	8005dd2 <HAL_TIM_IC_ConfigChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8001012:	f000 f9b1 	bl	8001378 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001016:	2302      	movs	r3, #2
 8001018:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800101a:	2302      	movs	r3, #2
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	220c      	movs	r2, #12
 8001022:	4619      	mov	r1, r3
 8001024:	4805      	ldr	r0, [pc, #20]	@ (800103c <MX_TIM1_Init+0x110>)
 8001026:	f004 fed4 	bl	8005dd2 <HAL_TIM_IC_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001030:	f000 f9a2 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001034:	bf00      	nop
 8001036:	3740      	adds	r7, #64	@ 0x40
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000248 	.word	0x20000248
 8001040:	40012c00 	.word	0x40012c00

08001044 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08a      	sub	sp, #40	@ 0x28
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
 8001064:	615a      	str	r2, [r3, #20]
 8001066:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001068:	4b27      	ldr	r3, [pc, #156]	@ (8001108 <MX_TIM2_Init+0xc4>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001070:	4b25      	ldr	r3, [pc, #148]	@ (8001108 <MX_TIM2_Init+0xc4>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <MX_TIM2_Init+0xc4>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <MX_TIM2_Init+0xc4>)
 800107e:	4a23      	ldr	r2, [pc, #140]	@ (800110c <MX_TIM2_Init+0xc8>)
 8001080:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001082:	4b21      	ldr	r3, [pc, #132]	@ (8001108 <MX_TIM2_Init+0xc4>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001088:	4b1f      	ldr	r3, [pc, #124]	@ (8001108 <MX_TIM2_Init+0xc4>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800108e:	481e      	ldr	r0, [pc, #120]	@ (8001108 <MX_TIM2_Init+0xc4>)
 8001090:	f004 f82c 	bl	80050ec <HAL_TIM_PWM_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800109a:	f000 f96d 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	@ (8001108 <MX_TIM2_Init+0xc4>)
 80010ae:	f005 fd67 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80010b8:	f000 f95e 	bl	8001378 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010bc:	2360      	movs	r3, #96	@ 0x60
 80010be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	2200      	movs	r2, #0
 80010d0:	4619      	mov	r1, r3
 80010d2:	480d      	ldr	r0, [pc, #52]	@ (8001108 <MX_TIM2_Init+0xc4>)
 80010d4:	f004 ff1a 	bl	8005f0c <HAL_TIM_PWM_ConfigChannel>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80010de:	f000 f94b 	bl	8001378 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e2:	463b      	mov	r3, r7
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4807      	ldr	r0, [pc, #28]	@ (8001108 <MX_TIM2_Init+0xc4>)
 80010ea:	f004 ff0f 	bl	8005f0c <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010f4:	f000 f940 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010f8:	4803      	ldr	r0, [pc, #12]	@ (8001108 <MX_TIM2_Init+0xc4>)
 80010fa:	f000 fc01 	bl	8001900 <HAL_TIM_MspPostInit>

}
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	@ 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000294 	.word	0x20000294
 800110c:	000c34ff 	.word	0x000c34ff

08001110 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08c      	sub	sp, #48	@ 0x30
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001116:	f107 030c 	add.w	r3, r7, #12
 800111a:	2224      	movs	r2, #36	@ 0x24
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f006 fcb1 	bl	8007a86 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 8001130:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <MX_TIM4_Init+0xa8>)
 8001132:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 8001142:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001146:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001154:	2301      	movs	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800116c:	2301      	movs	r3, #1
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 8001180:	f004 fb4a 	bl	8005818 <HAL_TIM_Encoder_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800118a:	f000 f8f5 	bl	8001378 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001196:	463b      	mov	r3, r7
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	@ (80011b4 <MX_TIM4_Init+0xa4>)
 800119c:	f005 fcf0 	bl	8006b80 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80011a6:	f000 f8e7 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3730      	adds	r7, #48	@ 0x30
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002e0 	.word	0x200002e0
 80011b8:	40000800 	.word	0x40000800

080011bc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_UART4_Init+0x58>)
 80011c2:	4a15      	ldr	r2, [pc, #84]	@ (8001218 <MX_UART4_Init+0x5c>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011c6:	4b13      	ldr	r3, [pc, #76]	@ (8001214 <MX_UART4_Init+0x58>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_UART4_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_UART4_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_UART4_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_UART4_Init+0x58>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_UART4_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_UART4_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_UART4_Init+0x58>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_UART4_Init+0x58>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_UART4_Init+0x58>)
 8001200:	f005 fd64 	bl	8006ccc <HAL_UART_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800120a:	f000 f8b5 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	2000032c 	.word	0x2000032c
 8001218:	40004c00 	.word	0x40004c00

0800121c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	@ 0x28
 8001220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001232:	4b39      	ldr	r3, [pc, #228]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a38      	ldr	r2, [pc, #224]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b36      	ldr	r3, [pc, #216]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	4b33      	ldr	r3, [pc, #204]	@ (8001318 <MX_GPIO_Init+0xfc>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a32      	ldr	r2, [pc, #200]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b30      	ldr	r3, [pc, #192]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	4b2d      	ldr	r3, [pc, #180]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001266:	4a2c      	ldr	r2, [pc, #176]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800126e:	4b2a      	ldr	r3, [pc, #168]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b27      	ldr	r3, [pc, #156]	@ (8001318 <MX_GPIO_Init+0xfc>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800127e:	4a26      	ldr	r2, [pc, #152]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001286:	4b24      	ldr	r3, [pc, #144]	@ (8001318 <MX_GPIO_Init+0xfc>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STBY_Pin|AIN1_Pin|GPIO_1_Pin, GPIO_PIN_RESET);
 8001292:	2200      	movs	r2, #0
 8001294:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8001298:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129c:	f002 fbee 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|BIN1_Pin|GPIO_2_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 80012a6:	481d      	ldr	r0, [pc, #116]	@ (800131c <MX_GPIO_Init+0x100>)
 80012a8:	f002 fbe8 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2101      	movs	r1, #1
 80012b0:	481b      	ldr	r0, [pc, #108]	@ (8001320 <MX_GPIO_Init+0x104>)
 80012b2:	f002 fbe3 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STBY_Pin AIN1_Pin GPIO_1_Pin */
  GPIO_InitStruct.Pin = STBY_Pin|AIN1_Pin|GPIO_1_Pin;
 80012b6:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012d2:	f002 fa29 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin BIN1_Pin GPIO_2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|BIN1_Pin|GPIO_2_Pin;
 80012d6:	f44f 6303 	mov.w	r3, #2096	@ 0x830
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <MX_GPIO_Init+0x100>)
 80012f0:	f002 fa1a 	bl	8003728 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4805      	ldr	r0, [pc, #20]	@ (8001320 <MX_GPIO_Init+0x104>)
 800130c:	f002 fa0c 	bl	8003728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001310:	bf00      	nop
 8001312:	3728      	adds	r7, #40	@ 0x28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	40021000 	.word	0x40021000
 800131c:	48000800 	.word	0x48000800
 8001320:	48000400 	.word	0x48000400

08001324 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	      //ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     // radio_pulse = ch1_val - ch1_p;
  //}
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7f1b      	ldrb	r3, [r3, #28]
 8001330:	2b08      	cmp	r3, #8
 8001332:	d117      	bne.n	8001364 <HAL_TIM_IC_CaptureCallback+0x40>
	      //store the previous value and read the captured value from the input capture register
	  	  ch2_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001334:	2108      	movs	r1, #8
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f004 fefc 	bl	8006134 <HAL_TIM_ReadCapturedValue>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_TIM_IC_CaptureCallback+0x48>)
 8001342:	801a      	strh	r2, [r3, #0]
	      ch2_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001344:	210c      	movs	r1, #12
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f004 fef4 	bl	8006134 <HAL_TIM_ReadCapturedValue>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001352:	801a      	strh	r2, [r3, #0]

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     radio_pulse = ch2_val - ch2_p;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001356:	881a      	ldrh	r2, [r3, #0]
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <HAL_TIM_IC_CaptureCallback+0x48>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <HAL_TIM_IC_CaptureCallback+0x50>)
 8001362:	801a      	strh	r2, [r3, #0]
  }

}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003b6 	.word	0x200003b6
 8001370:	200003b4 	.word	0x200003b4
 8001374:	200003b8 	.word	0x200003b8

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <Error_Handler+0x8>

08001384 <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(&p_mot->hal_tim, &p_mot->pwm_channel);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f103 0208 	add.w	r2, r3, #8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3304      	adds	r3, #4
 8001396:	4619      	mov	r1, r3
 8001398:	4610      	mov	r0, r2
 800139a:	f003 feff 	bl	800519c <HAL_TIM_PWM_Start>
}
 800139e:	bf00      	nop
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <stop_PWM>:


void stop_PWM(motor_t* p_mot)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 */

			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->pwm_channel);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f003 fff5 	bl	80053a8 <HAL_TIM_PWM_Stop>

}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
	...

080013c8 <set_duty>:

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 80013d2:	6839      	ldr	r1, [r7, #0]
 80013d4:	4860      	ldr	r0, [pc, #384]	@ (8001558 <set_duty+0x190>)
 80013d6:	f006 fae1 	bl	800799c <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->pwm_val = pwm_sig;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	601a      	str	r2, [r3, #0]
    // dereferencing and accessing struct fields
    // p_mot->duty = duty;
    // is shorthand for
    // (*p_mot).duty = duty;

    if (pwm_sig > 0) {
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dd49      	ble.n	800147a <set_duty+0xb2>

    	//forwards
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,pwm_sig);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d105      	bne.n	80013fa <set_duty+0x32>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34
 80013f8:	e02c      	b.n	8001454 <set_duty+0x8c>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b04      	cmp	r3, #4
 8001400:	d105      	bne.n	800140e <set_duty+0x46>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	6393      	str	r3, [r2, #56]	@ 0x38
 800140c:	e022      	b.n	8001454 <set_duty+0x8c>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b08      	cmp	r3, #8
 8001414:	d105      	bne.n	8001422 <set_duty+0x5a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001420:	e018      	b.n	8001454 <set_duty+0x8c>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	d105      	bne.n	8001436 <set_duty+0x6e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6413      	str	r3, [r2, #64]	@ 0x40
 8001434:	e00e      	b.n	8001454 <set_duty+0x8c>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b10      	cmp	r3, #16
 800143c:	d105      	bne.n	800144a <set_duty+0x82>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	6593      	str	r3, [r2, #88]	@ 0x58
 8001448:	e004      	b.n	8001454 <set_duty+0x8c>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	65d3      	str	r3, [r2, #92]	@ 0x5c

    	//set GPIO PINS
    	// GPIO_PIN_RESET: to clear the port pin
    	 //GPIO_PIN_SET: to set the port pin

    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_SET);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6998      	ldr	r0, [r3, #24]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	b29b      	uxth	r3, r3
 800145e:	2201      	movs	r2, #1
 8001460:	4619      	mov	r1, r3
 8001462:	f002 fb0b 	bl	8003a7c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69d8      	ldr	r0, [r3, #28]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	691b      	ldr	r3, [r3, #16]
 800146e:	b29b      	uxth	r3, r3
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	f002 fb02 	bl	8003a7c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);

    }


}
 8001478:	e069      	b.n	800154e <set_duty+0x186>
    else if(pwm_sig == 0){
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d112      	bne.n	80014a6 <set_duty+0xde>
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6998      	ldr	r0, [r3, #24]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	b29b      	uxth	r3, r3
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	f002 faf5 	bl	8003a7c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69d8      	ldr	r0, [r3, #28]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	b29b      	uxth	r3, r3
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	f002 faec 	bl	8003a7c <HAL_GPIO_WritePin>
}
 80014a4:	e053      	b.n	800154e <set_duty+0x186>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,-pwm_sig);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <set_duty+0xf4>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	425a      	negs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ba:	e036      	b.n	800152a <set_duty+0x162>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d107      	bne.n	80014d4 <set_duty+0x10c>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	4259      	negs	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	460b      	mov	r3, r1
 80014d0:	6393      	str	r3, [r2, #56]	@ 0x38
 80014d2:	e02a      	b.n	800152a <set_duty+0x162>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d107      	bne.n	80014ec <set_duty+0x124>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	4259      	negs	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	460b      	mov	r3, r1
 80014e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80014ea:	e01e      	b.n	800152a <set_duty+0x162>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	2b0c      	cmp	r3, #12
 80014f2:	d107      	bne.n	8001504 <set_duty+0x13c>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4259      	negs	r1, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	460b      	mov	r3, r1
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	e012      	b.n	800152a <set_duty+0x162>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b10      	cmp	r3, #16
 800150a:	d107      	bne.n	800151c <set_duty+0x154>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	4259      	negs	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	460b      	mov	r3, r1
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	e006      	b.n	800152a <set_duty+0x162>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	4259      	negs	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	460b      	mov	r3, r1
 8001528:	65d3      	str	r3, [r2, #92]	@ 0x5c
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6998      	ldr	r0, [r3, #24]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	b29b      	uxth	r3, r3
 8001534:	2200      	movs	r2, #0
 8001536:	4619      	mov	r1, r3
 8001538:	f002 faa0 	bl	8003a7c <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	69d8      	ldr	r0, [r3, #28]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691b      	ldr	r3, [r3, #16]
 8001544:	b29b      	uxth	r3, r3
 8001546:	2201      	movs	r2, #1
 8001548:	4619      	mov	r1, r3
 800154a:	f002 fa97 	bl	8003a7c <HAL_GPIO_WritePin>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	08008cf0 	.word	0x08008cf0

0800155c <read_current>:
/**
 * @brief A function to get the ADC value for the myoelectric sensor.
 *
 * @param p_myo The myoelectric sensor object to perform the function on.
 */
uint16_t read_current(myo_t *p_myo){
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(p_myo->hal_adc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f000 ff8d 	bl	8002488 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(p_myo->hal_adc,100);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2164      	movs	r1, #100	@ 0x64
 8001574:	4618      	mov	r0, r3
 8001576:	f001 f875 	bl	8002664 <HAL_ADC_PollForConversion>
	p_myo->current_value = HAL_ADC_GetValue(p_myo->hal_adc);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f001 f948 	bl	8002814 <HAL_ADC_GetValue>
 8001584:	4603      	mov	r3, r0
 8001586:	b21a      	sxth	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(p_myo->hal_adc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4618      	mov	r0, r3
 8001592:	f001 f833 	bl	80025fc <HAL_ADC_Stop>
	//stop ADC?

	//now convert results to a desired output style


	return p_myo->current_value;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800159c:	b29b      	uxth	r3, r3

}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <check_delta>:
 */

#include "radio.h"

int check_delta(int16_t pulse_width)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	80fb      	strh	r3, [r7, #6]
	//if the delta value is invalid, or is at the 1.5 ms base width return 0. If it is not at the
	//base value return a 1.
	if (900 < pulse_width && pulse_width < 1450)
 80015b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015b4:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80015b8:	dd07      	ble.n	80015ca <check_delta+0x24>
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 80015c2:	4293      	cmp	r3, r2
 80015c4:	dc01      	bgt.n	80015ca <check_delta+0x24>
	{
	    return 1;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <check_delta+0x42>
	}
	else if (1550 < pulse_width && pulse_width < 2500)
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	f240 620e 	movw	r2, #1550	@ 0x60e
 80015d2:	4293      	cmp	r3, r2
 80015d4:	dd07      	ble.n	80015e6 <check_delta+0x40>
 80015d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015da:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015de:	4293      	cmp	r3, r2
 80015e0:	dc01      	bgt.n	80015e6 <check_delta+0x40>
	{
	    return 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <check_delta+0x42>
	}
	else
	{
			return 0;
 80015e6:	2300      	movs	r3, #0
	}
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <HAL_MspInit+0x44>)
 80015fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <HAL_MspInit+0x44>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6613      	str	r3, [r2, #96]	@ 0x60
 8001606:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <HAL_MspInit+0x44>)
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
 8001610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <HAL_MspInit+0x44>)
 8001614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001616:	4a08      	ldr	r2, [pc, #32]	@ (8001638 <HAL_MspInit+0x44>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161c:	6593      	str	r3, [r2, #88]	@ 0x58
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_MspInit+0x44>)
 8001620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	603b      	str	r3, [r7, #0]
 8001628:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40021000 	.word	0x40021000

0800163c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08e      	sub	sp, #56	@ 0x38
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a4c      	ldr	r2, [pc, #304]	@ (800178c <HAL_ADC_MspInit+0x150>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d12d      	bne.n	80016ba <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 800165e:	4b4c      	ldr	r3, [pc, #304]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	4a4a      	ldr	r2, [pc, #296]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 8001666:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001668:	4b49      	ldr	r3, [pc, #292]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d10b      	bne.n	8001688 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001670:	4b48      	ldr	r3, [pc, #288]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 8001672:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001674:	4a47      	ldr	r2, [pc, #284]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 8001676:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800167a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800167c:	4b45      	ldr	r3, [pc, #276]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 800167e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b42      	ldr	r3, [pc, #264]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 800168a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800168c:	4a41      	ldr	r2, [pc, #260]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001694:	4b3f      	ldr	r3, [pc, #252]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 8001696:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	61fb      	str	r3, [r7, #28]
 800169e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MYO1_Pin;
 80016a0:	2301      	movs	r3, #1
 80016a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016a4:	230b      	movs	r3, #11
 80016a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MYO1_GPIO_Port, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	4839      	ldr	r0, [pc, #228]	@ (8001798 <HAL_ADC_MspInit+0x15c>)
 80016b4:	f002 f838 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80016b8:	e064      	b.n	8001784 <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a37      	ldr	r2, [pc, #220]	@ (800179c <HAL_ADC_MspInit+0x160>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d12d      	bne.n	8001720 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 80016c4:	4b32      	ldr	r3, [pc, #200]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	3301      	adds	r3, #1
 80016ca:	4a31      	ldr	r2, [pc, #196]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 80016cc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016ce:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d10b      	bne.n	80016ee <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a2e      	ldr	r2, [pc, #184]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 80016dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f2:	4a28      	ldr	r2, [pc, #160]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MYO2_Pin;
 8001706:	2302      	movs	r3, #2
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800170a:	230b      	movs	r3, #11
 800170c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MYO2_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001716:	4619      	mov	r1, r3
 8001718:	481f      	ldr	r0, [pc, #124]	@ (8001798 <HAL_ADC_MspInit+0x15c>)
 800171a:	f002 f805 	bl	8003728 <HAL_GPIO_Init>
}
 800171e:	e031      	b.n	8001784 <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC3)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1e      	ldr	r2, [pc, #120]	@ (80017a0 <HAL_ADC_MspInit+0x164>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d12c      	bne.n	8001784 <HAL_ADC_MspInit+0x148>
    HAL_RCC_ADC_CLK_ENABLED++;
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	3301      	adds	r3, #1
 8001730:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 8001732:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001734:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_ADC_MspInit+0x154>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10b      	bne.n	8001754 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 800173c:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 8001742:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001748:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 8001756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001758:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_ADC_MspInit+0x158>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PRS_Pin|V_BAT_Pin;
 800176c:	230c      	movs	r3, #12
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001770:	230b      	movs	r3, #11
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001778:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <HAL_ADC_MspInit+0x15c>)
 8001780:	f001 ffd2 	bl	8003728 <HAL_GPIO_Init>
}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	@ 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	50040000 	.word	0x50040000
 8001790:	2000077c 	.word	0x2000077c
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800
 800179c:	50040100 	.word	0x50040100
 80017a0:	50040200 	.word	0x50040200

080017a4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	@ 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001834 <HAL_TIM_IC_MspInit+0x90>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d131      	bne.n	800182a <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a15      	ldr	r2, [pc, #84]	@ (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <HAL_TIM_IC_MspInit+0x94>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAND_ENC_A_Pin|HAND_ENC_B_Pin|RADIO_Pin;
 80017f6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001808:	2301      	movs	r3, #1
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001816:	f001 ff87 	bl	8003728 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	201b      	movs	r0, #27
 8001820:	f001 ff4b 	bl	80036ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001824:	201b      	movs	r0, #27
 8001826:	f001 ff64 	bl	80036f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40012c00 	.word	0x40012c00
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800183c:	b480      	push	{r7}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800184c:	d10b      	bne.n	8001866 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800184e:	4b09      	ldr	r3, [pc, #36]	@ (8001874 <HAL_TIM_PWM_MspInit+0x38>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001852:	4a08      	ldr	r2, [pc, #32]	@ (8001874 <HAL_TIM_PWM_MspInit+0x38>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6593      	str	r3, [r2, #88]	@ 0x58
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_TIM_PWM_MspInit+0x38>)
 800185c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a17      	ldr	r2, [pc, #92]	@ (80018f4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d127      	bne.n	80018ea <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x80>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189e:	4a16      	ldr	r2, [pc, #88]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a6:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b2:	4b11      	ldr	r3, [pc, #68]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	4a10      	ldr	r2, [pc, #64]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018be:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <HAL_TIM_Encoder_MspInit+0x80>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_ENC_A_Pin|MOTOR_ENC_B_Pin;
 80018ca:	23c0      	movs	r3, #192	@ 0xc0
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018da:	2302      	movs	r3, #2
 80018dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <HAL_TIM_Encoder_MspInit+0x84>)
 80018e6:	f001 ff1f 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3728      	adds	r7, #40	@ 0x28
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40000800 	.word	0x40000800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	48000400 	.word	0x48000400

08001900 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b088      	sub	sp, #32
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001920:	d11c      	bne.n	800195c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	4b10      	ldr	r3, [pc, #64]	@ (8001964 <HAL_TIM_MspPostInit+0x64>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	4a0f      	ldr	r2, [pc, #60]	@ (8001964 <HAL_TIM_MspPostInit+0x64>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <HAL_TIM_MspPostInit+0x64>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMB_Pin|PWMA_Pin;
 800193a:	2324      	movs	r3, #36	@ 0x24
 800193c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800194a:	2301      	movs	r3, #1
 800194c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f001 fee6 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800195c:	bf00      	nop
 800195e:	3720      	adds	r7, #32
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000

08001968 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b0ac      	sub	sp, #176	@ 0xb0
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2288      	movs	r2, #136	@ 0x88
 8001986:	2100      	movs	r1, #0
 8001988:	4618      	mov	r0, r3
 800198a:	f006 f87c 	bl	8007a86 <memset>
  if(huart->Instance==UART4)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a21      	ldr	r2, [pc, #132]	@ (8001a18 <HAL_UART_MspInit+0xb0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d13b      	bne.n	8001a10 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001998:	2308      	movs	r3, #8
 800199a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800199c:	2300      	movs	r3, #0
 800199e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 fee5 	bl	8004774 <HAL_RCCEx_PeriphCLKConfig>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019b0:	f7ff fce2 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80019b4:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b8:	4a18      	ldr	r2, [pc, #96]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80019be:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c0:	4b16      	ldr	r3, [pc, #88]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d0:	4a12      	ldr	r2, [pc, #72]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d8:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <HAL_UART_MspInit+0xb4>)
 80019da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019e4:	2303      	movs	r3, #3
 80019e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f6:	2303      	movs	r3, #3
 80019f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019fc:	2308      	movs	r3, #8
 80019fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a02:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a06:	4619      	mov	r1, r3
 8001a08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a0c:	f001 fe8c 	bl	8003728 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001a10:	bf00      	nop
 8001a12:	37b0      	adds	r7, #176	@ 0xb0
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40004c00 	.word	0x40004c00
 8001a1c:	40021000 	.word	0x40021000

08001a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <NMI_Handler+0x4>

08001a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <HardFault_Handler+0x4>

08001a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <BusFault_Handler+0x4>

08001a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <UsageFault_Handler+0x4>

08001a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a76:	f000 f941 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a84:	4802      	ldr	r0, [pc, #8]	@ (8001a90 <TIM1_CC_IRQHandler+0x10>)
 8001a86:	f004 f8a2 	bl	8005bce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000248 	.word	0x20000248

08001a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aa6:	f3af 8000 	nop.w
 8001aaa:	4601      	mov	r1, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbf0      	blt.n	8001aa6 <_read+0x12>
  }

  return len;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b086      	sub	sp, #24
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	60f8      	str	r0, [r7, #12]
 8001ad6:	60b9      	str	r1, [r7, #8]
 8001ad8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	e009      	b.n	8001af4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	60ba      	str	r2, [r7, #8]
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3301      	adds	r3, #1
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	dbf1      	blt.n	8001ae0 <_write+0x12>
  }
  return len;
 8001afc:	687b      	ldr	r3, [r7, #4]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <_close>:

int _close(int file)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <_isatty>:

int _isatty(int file)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b46:	2301      	movs	r3, #1
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
	...

08001b70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b78:	4a14      	ldr	r2, [pc, #80]	@ (8001bcc <_sbrk+0x5c>)
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <_sbrk+0x60>)
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	@ (8001bd4 <_sbrk+0x64>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <_sbrk+0x68>)
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b92:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d207      	bcs.n	8001bb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ba0:	f005 ffc0 	bl	8007b24 <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	220c      	movs	r2, #12
 8001ba8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	e009      	b.n	8001bc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bb0:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <_sbrk+0x64>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb6:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <_sbrk+0x64>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <_sbrk+0x64>)
 8001bc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20018000 	.word	0x20018000
 8001bd0:	00000400 	.word	0x00000400
 8001bd4:	20000780 	.word	0x20000780
 8001bd8:	200008d8 	.word	0x200008d8

08001bdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001be0:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <SystemInit+0x20>)
 8001be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001be6:	4a05      	ldr	r2, [pc, #20]	@ (8001bfc <SystemInit+0x20>)
 8001be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff ffea 	bl	8001bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f005 ff7f 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7fe ff47 	bl	8000ac4 <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001c44:	08008d9c 	.word	0x08008d9c
  ldr r2, =_sbss
 8001c48:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001c4c:	200008d4 	.word	0x200008d4

08001c50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_2_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f001 fd21 	bl	80036a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fcbe 	bl	80015f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 fd2d 	bl	800370e <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f001 fcf7 	bl	80036ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200000a0 	.word	0x200000a0
 8001cf4:	20000098 	.word	0x20000098
 8001cf8:	2000009c 	.word	0x2000009c

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	200000a0 	.word	0x200000a0
 8001d20:	20000784 	.word	0x20000784

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000784 	.word	0x20000784

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200000a0 	.word	0x200000a0

08001d84 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
 8001db2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
 8001df8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3360      	adds	r3, #96	@ 0x60
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	@ (8001e30 <LL_ADC_SetOffset+0x44>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	03fff000 	.word	0x03fff000

08001e34 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3360      	adds	r3, #96	@ 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3360      	adds	r3, #96	@ 0x60
 8001e70:	461a      	mov	r2, r3
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4413      	add	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001e8a:	bf00      	nop
 8001e8c:	371c      	adds	r7, #28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e000      	b.n	8001eb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3330      	adds	r3, #48	@ 0x30
 8001ecc:	461a      	mov	r2, r3
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	4413      	add	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	211f      	movs	r1, #31
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	0e9b      	lsrs	r3, r3, #26
 8001ef4:	f003 011f 	and.w	r1, r3, #31
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	fa01 f303 	lsl.w	r3, r1, r3
 8001f02:	431a      	orrs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f08:	bf00      	nop
 8001f0a:	371c      	adds	r7, #28
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3314      	adds	r3, #20
 8001f24:	461a      	mov	r2, r3
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	0e5b      	lsrs	r3, r3, #25
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	0d1b      	lsrs	r3, r3, #20
 8001f3c:	f003 031f 	and.w	r3, r3, #31
 8001f40:	2107      	movs	r1, #7
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43db      	mvns	r3, r3
 8001f48:	401a      	ands	r2, r3
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0d1b      	lsrs	r3, r3, #20
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	fa01 f303 	lsl.w	r3, r1, r3
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
	...

08001f6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f003 0318 	and.w	r3, r3, #24
 8001f8e:	4908      	ldr	r1, [pc, #32]	@ (8001fb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f90:	40d9      	lsrs	r1, r3
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	400b      	ands	r3, r1
 8001f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	0007ffff 	.word	0x0007ffff

08001fb4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ffc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6093      	str	r3, [r2, #8]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002024:	d101      	bne.n	800202a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002026:	2301      	movs	r3, #1
 8002028:	e000      	b.n	800202c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002048:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800204c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002070:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002074:	d101      	bne.n	800207a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002076:	2301      	movs	r3, #1
 8002078:	e000      	b.n	800207c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002098:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800209c:	f043 0201 	orr.w	r2, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020c4:	f043 0202 	orr.w	r2, r3, #2
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <LL_ADC_IsEnabled+0x18>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <LL_ADC_IsEnabled+0x1a>
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80020fe:	b480      	push	{r7}
 8002100:	b083      	sub	sp, #12
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d101      	bne.n	8002116 <LL_ADC_IsDisableOngoing+0x18>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <LL_ADC_IsDisableOngoing+0x1a>
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002134:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800215c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002160:	f043 0210 	orr.w	r2, r3, #16
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b04      	cmp	r3, #4
 8002186:	d101      	bne.n	800218c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021aa:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ae:	f043 0220 	orr.w	r2, r3, #32
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d101      	bne.n	80021da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021e8:	b590      	push	{r4, r7, lr}
 80021ea:	b089      	sub	sp, #36	@ 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e130      	b.n	8002464 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	2b00      	cmp	r3, #0
 800220e:	d109      	bne.n	8002224 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff fa13 	bl	800163c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fef1 	bl	8002010 <LL_ADC_IsDeepPowerDownEnabled>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d004      	beq.n	800223e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff fed7 	bl	8001fec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff ff0c 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d115      	bne.n	800227a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff fef0 	bl	8002038 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002258:	4b84      	ldr	r3, [pc, #528]	@ (800246c <HAL_ADC_Init+0x284>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	099b      	lsrs	r3, r3, #6
 800225e:	4a84      	ldr	r2, [pc, #528]	@ (8002470 <HAL_ADC_Init+0x288>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	3301      	adds	r3, #1
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800226c:	e002      	b.n	8002274 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3b01      	subs	r3, #1
 8002272:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f9      	bne.n	800226e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff feee 	bl	8002060 <LL_ADC_IsInternalRegulatorEnabled>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff ff62 	bl	8002174 <LL_ADC_REG_IsConversionOngoing>
 80022b0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	f003 0310 	and.w	r3, r3, #16
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 80c9 	bne.w	8002452 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f040 80c5 	bne.w	8002452 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80022d0:	f043 0202 	orr.w	r2, r3, #2
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fefb 	bl	80020d8 <LL_ADC_IsEnabled>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d115      	bne.n	8002314 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80022e8:	4862      	ldr	r0, [pc, #392]	@ (8002474 <HAL_ADC_Init+0x28c>)
 80022ea:	f7ff fef5 	bl	80020d8 <LL_ADC_IsEnabled>
 80022ee:	4604      	mov	r4, r0
 80022f0:	4861      	ldr	r0, [pc, #388]	@ (8002478 <HAL_ADC_Init+0x290>)
 80022f2:	f7ff fef1 	bl	80020d8 <LL_ADC_IsEnabled>
 80022f6:	4603      	mov	r3, r0
 80022f8:	431c      	orrs	r4, r3
 80022fa:	4860      	ldr	r0, [pc, #384]	@ (800247c <HAL_ADC_Init+0x294>)
 80022fc:	f7ff feec 	bl	80020d8 <LL_ADC_IsEnabled>
 8002300:	4603      	mov	r3, r0
 8002302:	4323      	orrs	r3, r4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4619      	mov	r1, r3
 800230e:	485c      	ldr	r0, [pc, #368]	@ (8002480 <HAL_ADC_Init+0x298>)
 8002310:	f7ff fd38 	bl	8001d84 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	7e5b      	ldrb	r3, [r3, #25]
 8002318:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800231e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002324:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800232a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002332:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d106      	bne.n	8002350 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	3b01      	subs	r3, #1
 8002348:	045b      	lsls	r3, r3, #17
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d009      	beq.n	800236c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002364:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	4b44      	ldr	r3, [pc, #272]	@ (8002484 <HAL_ADC_Init+0x29c>)
 8002374:	4013      	ands	r3, r2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6812      	ldr	r2, [r2, #0]
 800237a:	69b9      	ldr	r1, [r7, #24]
 800237c:	430b      	orrs	r3, r1
 800237e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff1c 	bl	80021c2 <LL_ADC_INJ_IsConversionOngoing>
 800238a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d13d      	bne.n	800240e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d13a      	bne.n	800240e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800239c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80023a4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023b4:	f023 0302 	bic.w	r3, r3, #2
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	69b9      	ldr	r1, [r7, #24]
 80023be:	430b      	orrs	r3, r1
 80023c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d118      	bne.n	80023fe <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023e2:	4311      	orrs	r1, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ee:	430a      	orrs	r2, r1
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	611a      	str	r2, [r3, #16]
 80023fc:	e007      	b.n	800240e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d10c      	bne.n	8002430 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	f023 010f 	bic.w	r1, r3, #15
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	631a      	str	r2, [r3, #48]	@ 0x30
 800242e:	e007      	b.n	8002440 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 020f 	bic.w	r2, r2, #15
 800243e:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	f023 0303 	bic.w	r3, r3, #3
 8002448:	f043 0201 	orr.w	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002450:	e007      	b.n	8002462 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002456:	f043 0210 	orr.w	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002462:	7ffb      	ldrb	r3, [r7, #31]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3724      	adds	r7, #36	@ 0x24
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	20000098 	.word	0x20000098
 8002470:	053e2d63 	.word	0x053e2d63
 8002474:	50040000 	.word	0x50040000
 8002478:	50040100 	.word	0x50040100
 800247c:	50040200 	.word	0x50040200
 8002480:	50040300 	.word	0x50040300
 8002484:	fff0c007 	.word	0xfff0c007

08002488 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002490:	4857      	ldr	r0, [pc, #348]	@ (80025f0 <HAL_ADC_Start+0x168>)
 8002492:	f7ff fd8f 	bl	8001fb4 <LL_ADC_GetMultimode>
 8002496:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fe69 	bl	8002174 <LL_ADC_REG_IsConversionOngoing>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f040 809c 	bne.w	80025e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_Start+0x30>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e097      	b.n	80025e8 <HAL_ADC_Start+0x160>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fe63 	bl	800318c <ADC_Enable>
 80024c6:	4603      	mov	r3, r0
 80024c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024ca:	7dfb      	ldrb	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f040 8083 	bne.w	80025d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80024da:	f023 0301 	bic.w	r3, r3, #1
 80024de:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a42      	ldr	r2, [pc, #264]	@ (80025f4 <HAL_ADC_Start+0x16c>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d002      	beq.n	80024f6 <HAL_ADC_Start+0x6e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_Start+0x70>
 80024f6:	4b40      	ldr	r3, [pc, #256]	@ (80025f8 <HAL_ADC_Start+0x170>)
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6812      	ldr	r2, [r2, #0]
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251e:	d106      	bne.n	800252e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002524:	f023 0206 	bic.w	r2, r3, #6
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	659a      	str	r2, [r3, #88]	@ 0x58
 800252c:	e002      	b.n	8002534 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	221c      	movs	r2, #28
 800253a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a2a      	ldr	r2, [pc, #168]	@ (80025f4 <HAL_ADC_Start+0x16c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d002      	beq.n	8002554 <HAL_ADC_Start+0xcc>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	e000      	b.n	8002556 <HAL_ADC_Start+0xce>
 8002554:	4b28      	ldr	r3, [pc, #160]	@ (80025f8 <HAL_ADC_Start+0x170>)
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	4293      	cmp	r3, r2
 800255c:	d008      	beq.n	8002570 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b05      	cmp	r3, #5
 8002568:	d002      	beq.n	8002570 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d114      	bne.n	800259a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002582:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002586:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff fdc6 	bl	8002124 <LL_ADC_REG_StartConversion>
 8002598:	e025      	b.n	80025e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800259e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a12      	ldr	r2, [pc, #72]	@ (80025f4 <HAL_ADC_Start+0x16c>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d002      	beq.n	80025b6 <HAL_ADC_Start+0x12e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	e000      	b.n	80025b8 <HAL_ADC_Start+0x130>
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_ADC_Start+0x170>)
 80025b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00f      	beq.n	80025e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025ce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	655a      	str	r2, [r3, #84]	@ 0x54
 80025d6:	e006      	b.n	80025e6 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80025e0:	e001      	b.n	80025e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	50040300 	.word	0x50040300
 80025f4:	50040100 	.word	0x50040100
 80025f8:	50040000 	.word	0x50040000

080025fc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_ADC_Stop+0x16>
 800260e:	2302      	movs	r3, #2
 8002610:	e023      	b.n	800265a <HAL_ADC_Stop+0x5e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800261a:	2103      	movs	r1, #3
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fcf9 	bl	8003014 <ADC_ConversionStop>
 8002622:	4603      	mov	r3, r0
 8002624:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d111      	bne.n	8002650 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 fe33 	bl	8003298 <ADC_Disable>
 8002632:	4603      	mov	r3, r0
 8002634:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d109      	bne.n	8002650 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002640:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002644:	f023 0301 	bic.w	r3, r3, #1
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b088      	sub	sp, #32
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800266e:	4866      	ldr	r0, [pc, #408]	@ (8002808 <HAL_ADC_PollForConversion+0x1a4>)
 8002670:	f7ff fca0 	bl	8001fb4 <LL_ADC_GetMultimode>
 8002674:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	2b08      	cmp	r3, #8
 800267c:	d102      	bne.n	8002684 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800267e:	2308      	movs	r3, #8
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	e02a      	b.n	80026da <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d002      	beq.n	8002696 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b09      	cmp	r3, #9
 8002694:	d111      	bne.n	80026ba <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d007      	beq.n	80026b4 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f043 0220 	orr.w	r2, r3, #32
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0a4      	b.n	80027fe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026b4:	2304      	movs	r3, #4
 80026b6:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026b8:	e00f      	b.n	80026da <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026ba:	4853      	ldr	r0, [pc, #332]	@ (8002808 <HAL_ADC_PollForConversion+0x1a4>)
 80026bc:	f7ff fc88 	bl	8001fd0 <LL_ADC_GetMultiDMATransfer>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e093      	b.n	80027fe <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026d6:	2304      	movs	r3, #4
 80026d8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80026da:	f7ff fb23 	bl	8001d24 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80026e0:	e021      	b.n	8002726 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e8:	d01d      	beq.n	8002726 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80026ea:	f7ff fb1b 	bl	8001d24 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d302      	bcc.n	8002700 <HAL_ADC_PollForConversion+0x9c>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d112      	bne.n	8002726 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	4013      	ands	r3, r2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f043 0204 	orr.w	r2, r3, #4
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e06b      	b.n	80027fe <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0d6      	beq.n	80026e2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002738:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fba6 	bl	8001e96 <LL_ADC_REG_IsTriggerSourceSWStart>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01c      	beq.n	800278a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	7e5b      	ldrb	r3, [r3, #25]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d118      	bne.n	800278a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d111      	bne.n	800278a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800276a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d105      	bne.n	800278a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002782:	f043 0201 	orr.w	r2, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <HAL_ADC_PollForConversion+0x1a8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d002      	beq.n	800279a <HAL_ADC_PollForConversion+0x136>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	e000      	b.n	800279c <HAL_ADC_PollForConversion+0x138>
 800279a:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_ADC_PollForConversion+0x1ac>)
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d008      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	2b05      	cmp	r3, #5
 80027ae:	d002      	beq.n	80027b6 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	2b09      	cmp	r3, #9
 80027b4:	d104      	bne.n	80027c0 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	e00c      	b.n	80027da <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a11      	ldr	r2, [pc, #68]	@ (800280c <HAL_ADC_PollForConversion+0x1a8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d002      	beq.n	80027d0 <HAL_ADC_PollForConversion+0x16c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	e000      	b.n	80027d2 <HAL_ADC_PollForConversion+0x16e>
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_ADC_PollForConversion+0x1ac>)
 80027d2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d104      	bne.n	80027ea <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2208      	movs	r2, #8
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e008      	b.n	80027fc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	220c      	movs	r2, #12
 80027fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	50040300 	.word	0x50040300
 800280c:	50040100 	.word	0x50040100
 8002810:	50040000 	.word	0x50040000

08002814 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
	...

08002830 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0b6      	sub	sp, #216	@ 0xd8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002840:	2300      	movs	r3, #0
 8002842:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_ADC_ConfigChannel+0x22>
 800284e:	2302      	movs	r3, #2
 8002850:	e3c9      	b.n	8002fe6 <HAL_ADC_ConfigChannel+0x7b6>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fc88 	bl	8002174 <LL_ADC_REG_IsConversionOngoing>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	f040 83aa 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d824      	bhi.n	80028c6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	3b02      	subs	r3, #2
 8002882:	2b03      	cmp	r3, #3
 8002884:	d81b      	bhi.n	80028be <HAL_ADC_ConfigChannel+0x8e>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_ADC_ConfigChannel+0x5c>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800289d 	.word	0x0800289d
 8002890:	080028a5 	.word	0x080028a5
 8002894:	080028ad 	.word	0x080028ad
 8002898:	080028b5 	.word	0x080028b5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800289c:	230c      	movs	r3, #12
 800289e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028a2:	e010      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80028a4:	2312      	movs	r3, #18
 80028a6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028aa:	e00c      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028ac:	2318      	movs	r3, #24
 80028ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028b2:	e008      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028bc:	e003      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028be:	2306      	movs	r3, #6
 80028c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80028c4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6818      	ldr	r0, [r3, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	461a      	mov	r2, r3
 80028d0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80028d4:	f7ff faf2 	bl	8001ebc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fc49 	bl	8002174 <LL_ADC_REG_IsConversionOngoing>
 80028e2:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff fc69 	bl	80021c2 <LL_ADC_INJ_IsConversionOngoing>
 80028f0:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f040 81a4 	bne.w	8002c46 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 819f 	bne.w	8002c46 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6818      	ldr	r0, [r3, #0]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	461a      	mov	r2, r3
 8002916:	f7ff fafd 	bl	8001f14 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695a      	ldr	r2, [r3, #20]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	2b04      	cmp	r3, #4
 800293a:	d00a      	beq.n	8002952 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	6919      	ldr	r1, [r3, #16]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800294c:	f7ff fa4e 	bl	8001dec <LL_ADC_SetOffset>
 8002950:	e179      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff fa6b 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	2b00      	cmp	r3, #0
 8002966:	d10a      	bne.n	800297e <HAL_ADC_ConfigChannel+0x14e>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2100      	movs	r1, #0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fa60 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	0e9b      	lsrs	r3, r3, #26
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	e01e      	b.n	80029bc <HAL_ADC_ConfigChannel+0x18c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fa55 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002994:	fa93 f3a3 	rbit	r3, r3
 8002998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800299c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80029a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80029ac:	2320      	movs	r3, #32
 80029ae:	e004      	b.n	80029ba <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80029b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <HAL_ADC_ConfigChannel+0x1a4>
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	0e9b      	lsrs	r3, r3, #26
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	e018      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x1d6>
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029e0:	fa93 f3a3 	rbit	r3, r3
 80029e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80029e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80029f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80029f8:	2320      	movs	r3, #32
 80029fa:	e004      	b.n	8002a06 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80029fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a00:	fab3 f383 	clz	r3, r3
 8002a04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d106      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fa24 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fa08 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10a      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x214>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f9fd 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	0e9b      	lsrs	r3, r3, #26
 8002a3e:	f003 021f 	and.w	r2, r3, #31
 8002a42:	e01e      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x252>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff f9f2 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002a62:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002a6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d105      	bne.n	8002a9a <HAL_ADC_ConfigChannel+0x26a>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	f003 031f 	and.w	r3, r3, #31
 8002a98:	e018      	b.n	8002acc <HAL_ADC_ConfigChannel+0x29c>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002aae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002ab2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002ab6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002abe:	2320      	movs	r3, #32
 8002ac0:	e004      	b.n	8002acc <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d106      	bne.n	8002ade <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff f9c1 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff f9a5 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x2da>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2102      	movs	r1, #2
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff f99a 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0e9b      	lsrs	r3, r3, #26
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	e01e      	b.n	8002b48 <HAL_ADC_ConfigChannel+0x318>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2102      	movs	r1, #2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f98f 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b2c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b38:	2320      	movs	r3, #32
 8002b3a:	e004      	b.n	8002b46 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b40:	fab3 f383 	clz	r3, r3
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d105      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x330>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	f003 031f 	and.w	r3, r3, #31
 8002b5e:	e014      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x35a>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002b6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002b74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e004      	b.n	8002b8a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002b80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d106      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2200      	movs	r2, #0
 8002b94:	2102      	movs	r1, #2
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff f962 	bl	8001e60 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2103      	movs	r1, #3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f946 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x398>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2103      	movs	r1, #3
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff f93b 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	0e9b      	lsrs	r3, r3, #26
 8002bc2:	f003 021f 	and.w	r2, r3, #31
 8002bc6:	e017      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x3c8>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2103      	movs	r1, #3
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff f930 	bl	8001e34 <LL_ADC_GetOffsetChannel>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002bda:	fa93 f3a3 	rbit	r3, r3
 8002bde:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002be2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002be4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e003      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002bf0:	fab3 f383 	clz	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x3e0>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	e011      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x404>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002c1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c20:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002c22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e003      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d106      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2103      	movs	r1, #3
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff f90d 	bl	8001e60 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fa44 	bl	80020d8 <LL_ADC_IsEnabled>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8140 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	461a      	mov	r2, r3
 8002c66:	f7ff f981 	bl	8001f6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a8f      	ldr	r2, [pc, #572]	@ (8002eac <HAL_ADC_ConfigChannel+0x67c>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	f040 8131 	bne.w	8002ed8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10b      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x46e>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	0e9b      	lsrs	r3, r3, #26
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	2b09      	cmp	r3, #9
 8002c94:	bf94      	ite	ls
 8002c96:	2301      	movls	r3, #1
 8002c98:	2300      	movhi	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	e019      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x4a2>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002cb6:	2320      	movs	r3, #32
 8002cb8:	e003      	b.n	8002cc2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cbc:	fab3 f383 	clz	r3, r3
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	bf94      	ite	ls
 8002ccc:	2301      	movls	r3, #1
 8002cce:	2300      	movhi	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d079      	beq.n	8002dca <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d107      	bne.n	8002cf2 <HAL_ADC_ConfigChannel+0x4c2>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	3301      	adds	r3, #1
 8002cea:	069b      	lsls	r3, r3, #26
 8002cec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002cf0:	e015      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x4ee>
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfa:	fa93 f3a3 	rbit	r3, r3
 8002cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d02:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002d0a:	2320      	movs	r3, #32
 8002d0c:	e003      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002d0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d10:	fab3 f383 	clz	r3, r3
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3301      	adds	r3, #1
 8002d18:	069b      	lsls	r3, r3, #26
 8002d1a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x50e>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	3301      	adds	r3, #1
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	2101      	movs	r1, #1
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	e017      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x53e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d46:	fa93 f3a3 	rbit	r3, r3
 8002d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002d50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d56:	2320      	movs	r3, #32
 8002d58:	e003      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6e:	ea42 0103 	orr.w	r1, r2, r3
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10a      	bne.n	8002d94 <HAL_ADC_ConfigChannel+0x564>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	0e9b      	lsrs	r3, r3, #26
 8002d84:	3301      	adds	r3, #1
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	4413      	add	r3, r2
 8002d90:	051b      	lsls	r3, r3, #20
 8002d92:	e018      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x596>
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e003      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	3301      	adds	r3, #1
 8002dba:	f003 021f 	and.w	r2, r3, #31
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	e081      	b.n	8002ece <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d107      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x5b6>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	0e9b      	lsrs	r3, r3, #26
 8002ddc:	3301      	adds	r3, #1
 8002dde:	069b      	lsls	r3, r3, #26
 8002de0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002de4:	e015      	b.n	8002e12 <HAL_ADC_ConfigChannel+0x5e2>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002dfe:	2320      	movs	r3, #32
 8002e00:	e003      	b.n	8002e0a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e04:	fab3 f383 	clz	r3, r3
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	069b      	lsls	r3, r3, #26
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d109      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x602>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	0e9b      	lsrs	r3, r3, #26
 8002e24:	3301      	adds	r3, #1
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	e017      	b.n	8002e62 <HAL_ADC_ConfigChannel+0x632>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	61bb      	str	r3, [r7, #24]
  return result;
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e4a:	2320      	movs	r3, #32
 8002e4c:	e003      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	fab3 f383 	clz	r3, r3
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	3301      	adds	r3, #1
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	ea42 0103 	orr.w	r1, r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10d      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x65e>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 021f 	and.w	r2, r3, #31
 8002e7e:	4613      	mov	r3, r2
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	4413      	add	r3, r2
 8002e84:	3b1e      	subs	r3, #30
 8002e86:	051b      	lsls	r3, r3, #20
 8002e88:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	e01e      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x69c>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d104      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e006      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x688>
 8002eaa:	bf00      	nop
 8002eac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fab3 f383 	clz	r3, r3
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f003 021f 	and.w	r2, r3, #31
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	3b1e      	subs	r3, #30
 8002ec6:	051b      	lsls	r3, r3, #20
 8002ec8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ecc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	f7ff f81e 	bl	8001f14 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4b44      	ldr	r3, [pc, #272]	@ (8002ff0 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d07a      	beq.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ee4:	4843      	ldr	r0, [pc, #268]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ee6:	f7fe ff73 	bl	8001dd0 <LL_ADC_GetCommonPathInternalCh>
 8002eea:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a41      	ldr	r2, [pc, #260]	@ (8002ff8 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d12c      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ef8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002efc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d126      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a3c      	ldr	r2, [pc, #240]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7cc>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d004      	beq.n	8002f18 <HAL_ADC_ConfigChannel+0x6e8>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a3b      	ldr	r2, [pc, #236]	@ (8003000 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d15d      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002f20:	4619      	mov	r1, r3
 8002f22:	4834      	ldr	r0, [pc, #208]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f24:	f7fe ff41 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f28:	4b36      	ldr	r3, [pc, #216]	@ (8003004 <HAL_ADC_ConfigChannel+0x7d4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	4a36      	ldr	r2, [pc, #216]	@ (8003008 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f30:	fba2 2303 	umull	r2, r3, r2, r3
 8002f34:	099b      	lsrs	r3, r3, #6
 8002f36:	1c5a      	adds	r2, r3, #1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f42:	e002      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f9      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f50:	e040      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a2d      	ldr	r2, [pc, #180]	@ (800300c <HAL_ADC_ConfigChannel+0x7dc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d118      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d112      	bne.n	8002f8e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7cc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d004      	beq.n	8002f7c <HAL_ADC_ConfigChannel+0x74c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a22      	ldr	r2, [pc, #136]	@ (8003000 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d12d      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f84:	4619      	mov	r1, r3
 8002f86:	481b      	ldr	r0, [pc, #108]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f88:	f7fe ff0f 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f8c:	e024      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a1f      	ldr	r2, [pc, #124]	@ (8003010 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d120      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d11a      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a14      	ldr	r2, [pc, #80]	@ (8002ffc <HAL_ADC_ConfigChannel+0x7cc>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d115      	bne.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480e      	ldr	r0, [pc, #56]	@ (8002ff4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fba:	f7fe fef6 	bl	8001daa <LL_ADC_SetCommonPathInternalCh>
 8002fbe:	e00c      	b.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002fd2:	e002      	b.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd4:	bf00      	nop
 8002fd6:	e000      	b.n	8002fda <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fe2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	37d8      	adds	r7, #216	@ 0xd8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	80080000 	.word	0x80080000
 8002ff4:	50040300 	.word	0x50040300
 8002ff8:	c7520000 	.word	0xc7520000
 8002ffc:	50040000 	.word	0x50040000
 8003000:	50040200 	.word	0x50040200
 8003004:	20000098 	.word	0x20000098
 8003008:	053e2d63 	.word	0x053e2d63
 800300c:	cb840000 	.word	0xcb840000
 8003010:	80000001 	.word	0x80000001

08003014 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f8a2 	bl	8002174 <LL_ADC_REG_IsConversionOngoing>
 8003030:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f8c3 	bl	80021c2 <LL_ADC_INJ_IsConversionOngoing>
 800303c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d103      	bne.n	800304c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	f000 8098 	beq.w	800317c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02a      	beq.n	80030b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	7e5b      	ldrb	r3, [r3, #25]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d126      	bne.n	80030b0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	7e1b      	ldrb	r3, [r3, #24]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d122      	bne.n	80030b0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800306a:	2301      	movs	r3, #1
 800306c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800306e:	e014      	b.n	800309a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	4a45      	ldr	r2, [pc, #276]	@ (8003188 <ADC_ConversionStop+0x174>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d90d      	bls.n	8003094 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307c:	f043 0210 	orr.w	r2, r3, #16
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	f043 0201 	orr.w	r2, r3, #1
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e074      	b.n	800317e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	3301      	adds	r3, #1
 8003098:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a4:	2b40      	cmp	r3, #64	@ 0x40
 80030a6:	d1e3      	bne.n	8003070 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2240      	movs	r2, #64	@ 0x40
 80030ae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d014      	beq.n	80030e0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff f85a 	bl	8002174 <LL_ADC_REG_IsConversionOngoing>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff f817 	bl	80020fe <LL_ADC_IsDisableOngoing>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d104      	bne.n	80030e0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff f836 	bl	800214c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d014      	beq.n	8003110 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7ff f869 	bl	80021c2 <LL_ADC_INJ_IsConversionOngoing>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00c      	beq.n	8003110 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ffff 	bl	80020fe <LL_ADC_IsDisableOngoing>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7ff f845 	bl	800219a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d005      	beq.n	8003122 <ADC_ConversionStop+0x10e>
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	2b03      	cmp	r3, #3
 800311a:	d105      	bne.n	8003128 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800311c:	230c      	movs	r3, #12
 800311e:	617b      	str	r3, [r7, #20]
        break;
 8003120:	e005      	b.n	800312e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003122:	2308      	movs	r3, #8
 8003124:	617b      	str	r3, [r7, #20]
        break;
 8003126:	e002      	b.n	800312e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003128:	2304      	movs	r3, #4
 800312a:	617b      	str	r3, [r7, #20]
        break;
 800312c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800312e:	f7fe fdf9 	bl	8001d24 <HAL_GetTick>
 8003132:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003134:	e01b      	b.n	800316e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003136:	f7fe fdf5 	bl	8001d24 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b05      	cmp	r3, #5
 8003142:	d914      	bls.n	800316e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	4013      	ands	r3, r2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00d      	beq.n	800316e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003156:	f043 0210 	orr.w	r2, r3, #16
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e007      	b.n	800317e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1dc      	bne.n	8003136 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	a33fffff 	.word	0xa33fffff

0800318c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe ff9b 	bl	80020d8 <LL_ADC_IsEnabled>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d169      	bne.n	800327c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <ADC_Enable+0xfc>)
 80031b0:	4013      	ands	r3, r2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	f043 0210 	orr.w	r2, r3, #16
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e055      	b.n	800327e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fe ff56 	bl	8002088 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031dc:	482b      	ldr	r0, [pc, #172]	@ (800328c <ADC_Enable+0x100>)
 80031de:	f7fe fdf7 	bl	8001dd0 <LL_ADC_GetCommonPathInternalCh>
 80031e2:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d013      	beq.n	8003214 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031ec:	4b28      	ldr	r3, [pc, #160]	@ (8003290 <ADC_Enable+0x104>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	099b      	lsrs	r3, r3, #6
 80031f2:	4a28      	ldr	r2, [pc, #160]	@ (8003294 <ADC_Enable+0x108>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	1c5a      	adds	r2, r3, #1
 80031fc:	4613      	mov	r3, r2
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	4413      	add	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003206:	e002      	b.n	800320e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	3b01      	subs	r3, #1
 800320c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f9      	bne.n	8003208 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003214:	f7fe fd86 	bl	8001d24 <HAL_GetTick>
 8003218:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800321a:	e028      	b.n	800326e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe ff59 	bl	80020d8 <LL_ADC_IsEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d104      	bne.n	8003236 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f7fe ff29 	bl	8002088 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003236:	f7fe fd75 	bl	8001d24 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d914      	bls.n	800326e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d00d      	beq.n	800326e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f043 0210 	orr.w	r2, r3, #16
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e007      	b.n	800327e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d1cf      	bne.n	800321c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	8000003f 	.word	0x8000003f
 800328c:	50040300 	.word	0x50040300
 8003290:	20000098 	.word	0x20000098
 8003294:	053e2d63 	.word	0x053e2d63

08003298 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe ff2a 	bl	80020fe <LL_ADC_IsDisableOngoing>
 80032aa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fe ff11 	bl	80020d8 <LL_ADC_IsEnabled>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d047      	beq.n	800334c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d144      	bne.n	800334c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f003 030d 	and.w	r3, r3, #13
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10c      	bne.n	80032ea <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fe feeb 	bl	80020b0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2203      	movs	r2, #3
 80032e0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032e2:	f7fe fd1f 	bl	8001d24 <HAL_GetTick>
 80032e6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e8:	e029      	b.n	800333e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ee:	f043 0210 	orr.w	r2, r3, #16
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f043 0201 	orr.w	r2, r3, #1
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e023      	b.n	800334e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003306:	f7fe fd0d 	bl	8001d24 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d914      	bls.n	800333e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003326:	f043 0210 	orr.w	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f043 0201 	orr.w	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e007      	b.n	800334e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1dc      	bne.n	8003306 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <LL_ADC_IsEnabled>:
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <LL_ADC_IsEnabled+0x18>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <LL_ADC_IsEnabled+0x1a>
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <LL_ADC_REG_IsConversionOngoing>:
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d101      	bne.n	8003394 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b09f      	sub	sp, #124	@ 0x7c
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033ae:	2300      	movs	r3, #0
 80033b0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d101      	bne.n	80033c2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80033be:	2302      	movs	r3, #2
 80033c0:	e093      	b.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80033ca:	2300      	movs	r3, #0
 80033cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80033ce:	2300      	movs	r3, #0
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a47      	ldr	r2, [pc, #284]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d102      	bne.n	80033e2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80033dc:	4b46      	ldr	r3, [pc, #280]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033de:	60bb      	str	r3, [r7, #8]
 80033e0:	e001      	b.n	80033e6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80033e2:	2300      	movs	r3, #0
 80033e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10b      	bne.n	8003404 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e072      	b.n	80034ea <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ffb8 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 800340c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7ff ffb2 	bl	800337c <LL_ADC_REG_IsConversionOngoing>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d154      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800341e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003420:	2b00      	cmp	r3, #0
 8003422:	d151      	bne.n	80034c8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003424:	4b35      	ldr	r3, [pc, #212]	@ (80034fc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003426:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d02c      	beq.n	800348a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003430:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003442:	035b      	lsls	r3, r3, #13
 8003444:	430b      	orrs	r3, r1
 8003446:	431a      	orrs	r2, r3
 8003448:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800344c:	4829      	ldr	r0, [pc, #164]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800344e:	f7ff ff82 	bl	8003356 <LL_ADC_IsEnabled>
 8003452:	4604      	mov	r4, r0
 8003454:	4828      	ldr	r0, [pc, #160]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003456:	f7ff ff7e 	bl	8003356 <LL_ADC_IsEnabled>
 800345a:	4603      	mov	r3, r0
 800345c:	431c      	orrs	r4, r3
 800345e:	4828      	ldr	r0, [pc, #160]	@ (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003460:	f7ff ff79 	bl	8003356 <LL_ADC_IsEnabled>
 8003464:	4603      	mov	r3, r0
 8003466:	4323      	orrs	r3, r4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d137      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800346c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003474:	f023 030f 	bic.w	r3, r3, #15
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	6811      	ldr	r1, [r2, #0]
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	6892      	ldr	r2, [r2, #8]
 8003480:	430a      	orrs	r2, r1
 8003482:	431a      	orrs	r2, r3
 8003484:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003486:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003488:	e028      	b.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800348a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003494:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003496:	4817      	ldr	r0, [pc, #92]	@ (80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003498:	f7ff ff5d 	bl	8003356 <LL_ADC_IsEnabled>
 800349c:	4604      	mov	r4, r0
 800349e:	4816      	ldr	r0, [pc, #88]	@ (80034f8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034a0:	f7ff ff59 	bl	8003356 <LL_ADC_IsEnabled>
 80034a4:	4603      	mov	r3, r0
 80034a6:	431c      	orrs	r4, r3
 80034a8:	4815      	ldr	r0, [pc, #84]	@ (8003500 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80034aa:	f7ff ff54 	bl	8003356 <LL_ADC_IsEnabled>
 80034ae:	4603      	mov	r3, r0
 80034b0:	4323      	orrs	r3, r4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80034b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80034be:	f023 030f 	bic.w	r3, r3, #15
 80034c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034c6:	e009      	b.n	80034dc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f043 0220 	orr.w	r2, r3, #32
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80034da:	e000      	b.n	80034de <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80034e6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	377c      	adds	r7, #124	@ 0x7c
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd90      	pop	{r4, r7, pc}
 80034f2:	bf00      	nop
 80034f4:	50040000 	.word	0x50040000
 80034f8:	50040100 	.word	0x50040100
 80034fc:	50040300 	.word	0x50040300
 8003500:	50040200 	.word	0x50040200

08003504 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003514:	4b0c      	ldr	r3, [pc, #48]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003520:	4013      	ands	r3, r2
 8003522:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800352c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003536:	4a04      	ldr	r2, [pc, #16]	@ (8003548 <__NVIC_SetPriorityGrouping+0x44>)
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	60d3      	str	r3, [r2, #12]
}
 800353c:	bf00      	nop
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003550:	4b04      	ldr	r3, [pc, #16]	@ (8003564 <__NVIC_GetPriorityGrouping+0x18>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	0a1b      	lsrs	r3, r3, #8
 8003556:	f003 0307 	and.w	r3, r3, #7
}
 800355a:	4618      	mov	r0, r3
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	2b00      	cmp	r3, #0
 8003578:	db0b      	blt.n	8003592 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	f003 021f 	and.w	r2, r3, #31
 8003580:	4907      	ldr	r1, [pc, #28]	@ (80035a0 <__NVIC_EnableIRQ+0x38>)
 8003582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	2001      	movs	r0, #1
 800358a:	fa00 f202 	lsl.w	r2, r0, r2
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000e100 	.word	0xe000e100

080035a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db0a      	blt.n	80035ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	490c      	ldr	r1, [pc, #48]	@ (80035f0 <__NVIC_SetPriority+0x4c>)
 80035be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	440b      	add	r3, r1
 80035c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035cc:	e00a      	b.n	80035e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <__NVIC_SetPriority+0x50>)
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	3b04      	subs	r3, #4
 80035dc:	0112      	lsls	r2, r2, #4
 80035de:	b2d2      	uxtb	r2, r2
 80035e0:	440b      	add	r3, r1
 80035e2:	761a      	strb	r2, [r3, #24]
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	e000e100 	.word	0xe000e100
 80035f4:	e000ed00 	.word	0xe000ed00

080035f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	@ 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 0307 	and.w	r3, r3, #7
 800360a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	f1c3 0307 	rsb	r3, r3, #7
 8003612:	2b04      	cmp	r3, #4
 8003614:	bf28      	it	cs
 8003616:	2304      	movcs	r3, #4
 8003618:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3304      	adds	r3, #4
 800361e:	2b06      	cmp	r3, #6
 8003620:	d902      	bls.n	8003628 <NVIC_EncodePriority+0x30>
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	3b03      	subs	r3, #3
 8003626:	e000      	b.n	800362a <NVIC_EncodePriority+0x32>
 8003628:	2300      	movs	r3, #0
 800362a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800362c:	f04f 32ff 	mov.w	r2, #4294967295
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	fa02 f303 	lsl.w	r3, r2, r3
 8003636:	43da      	mvns	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	401a      	ands	r2, r3
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003640:	f04f 31ff 	mov.w	r1, #4294967295
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fa01 f303 	lsl.w	r3, r1, r3
 800364a:	43d9      	mvns	r1, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	4313      	orrs	r3, r2
         );
}
 8003652:	4618      	mov	r0, r3
 8003654:	3724      	adds	r7, #36	@ 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3b01      	subs	r3, #1
 800366c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003670:	d301      	bcc.n	8003676 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003672:	2301      	movs	r3, #1
 8003674:	e00f      	b.n	8003696 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003676:	4a0a      	ldr	r2, [pc, #40]	@ (80036a0 <SysTick_Config+0x40>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800367e:	210f      	movs	r1, #15
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	f7ff ff8e 	bl	80035a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003688:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <SysTick_Config+0x40>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800368e:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <SysTick_Config+0x40>)
 8003690:	2207      	movs	r2, #7
 8003692:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	e000e010 	.word	0xe000e010

080036a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b082      	sub	sp, #8
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7ff ff29 	bl	8003504 <__NVIC_SetPriorityGrouping>
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b086      	sub	sp, #24
 80036be:	af00      	add	r7, sp, #0
 80036c0:	4603      	mov	r3, r0
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036c8:	2300      	movs	r3, #0
 80036ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80036cc:	f7ff ff3e 	bl	800354c <__NVIC_GetPriorityGrouping>
 80036d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	68b9      	ldr	r1, [r7, #8]
 80036d6:	6978      	ldr	r0, [r7, #20]
 80036d8:	f7ff ff8e 	bl	80035f8 <NVIC_EncodePriority>
 80036dc:	4602      	mov	r2, r0
 80036de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e2:	4611      	mov	r1, r2
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff ff5d 	bl	80035a4 <__NVIC_SetPriority>
}
 80036ea:	bf00      	nop
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b082      	sub	sp, #8
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	4603      	mov	r3, r0
 80036fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff ff31 	bl	8003568 <__NVIC_EnableIRQ>
}
 8003706:	bf00      	nop
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800370e:	b580      	push	{r7, lr}
 8003710:	b082      	sub	sp, #8
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7ff ffa2 	bl	8003660 <SysTick_Config>
 800371c:	4603      	mov	r3, r0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003736:	e17f      	b.n	8003a38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	2101      	movs	r1, #1
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	fa01 f303 	lsl.w	r3, r1, r3
 8003744:	4013      	ands	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	f000 8171 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d005      	beq.n	8003768 <HAL_GPIO_Init+0x40>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d130      	bne.n	80037ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4013      	ands	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68da      	ldr	r2, [r3, #12]
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800379e:	2201      	movs	r2, #1
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	f003 0201 	and.w	r2, r3, #1
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	d118      	bne.n	8003808 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80037dc:	2201      	movs	r2, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	4013      	ands	r3, r2
 80037ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0201 	and.w	r2, r3, #1
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	2b03      	cmp	r3, #3
 8003812:	d017      	beq.n	8003844 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	2203      	movs	r2, #3
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	4013      	ands	r3, r2
 800382a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d123      	bne.n	8003898 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800385c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	220f      	movs	r2, #15
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	43db      	mvns	r3, r3
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4013      	ands	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	691a      	ldr	r2, [r3, #16]
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	6939      	ldr	r1, [r7, #16]
 8003894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 0203 	and.w	r2, r3, #3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80ac 	beq.w	8003a32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038da:	4b5f      	ldr	r3, [pc, #380]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038de:	4a5e      	ldr	r2, [pc, #376]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e0:	f043 0301 	orr.w	r3, r3, #1
 80038e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80038e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003a58 <HAL_GPIO_Init+0x330>)
 80038e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038f2:	4a5a      	ldr	r2, [pc, #360]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	089b      	lsrs	r3, r3, #2
 80038f8:	3302      	adds	r3, #2
 80038fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	220f      	movs	r2, #15
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	43db      	mvns	r3, r3
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4013      	ands	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800391c:	d025      	beq.n	800396a <HAL_GPIO_Init+0x242>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a4f      	ldr	r2, [pc, #316]	@ (8003a60 <HAL_GPIO_Init+0x338>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d01f      	beq.n	8003966 <HAL_GPIO_Init+0x23e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4e      	ldr	r2, [pc, #312]	@ (8003a64 <HAL_GPIO_Init+0x33c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d019      	beq.n	8003962 <HAL_GPIO_Init+0x23a>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4d      	ldr	r2, [pc, #308]	@ (8003a68 <HAL_GPIO_Init+0x340>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d013      	beq.n	800395e <HAL_GPIO_Init+0x236>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a4c      	ldr	r2, [pc, #304]	@ (8003a6c <HAL_GPIO_Init+0x344>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00d      	beq.n	800395a <HAL_GPIO_Init+0x232>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a4b      	ldr	r2, [pc, #300]	@ (8003a70 <HAL_GPIO_Init+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x22e>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a4a      	ldr	r2, [pc, #296]	@ (8003a74 <HAL_GPIO_Init+0x34c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_GPIO_Init+0x22a>
 800394e:	2306      	movs	r3, #6
 8003950:	e00c      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003952:	2307      	movs	r3, #7
 8003954:	e00a      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003956:	2305      	movs	r3, #5
 8003958:	e008      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395a:	2304      	movs	r3, #4
 800395c:	e006      	b.n	800396c <HAL_GPIO_Init+0x244>
 800395e:	2303      	movs	r3, #3
 8003960:	e004      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003962:	2302      	movs	r3, #2
 8003964:	e002      	b.n	800396c <HAL_GPIO_Init+0x244>
 8003966:	2301      	movs	r3, #1
 8003968:	e000      	b.n	800396c <HAL_GPIO_Init+0x244>
 800396a:	2300      	movs	r3, #0
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	f002 0203 	and.w	r2, r2, #3
 8003972:	0092      	lsls	r2, r2, #2
 8003974:	4093      	lsls	r3, r2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800397c:	4937      	ldr	r1, [pc, #220]	@ (8003a5c <HAL_GPIO_Init+0x334>)
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	089b      	lsrs	r3, r3, #2
 8003982:	3302      	adds	r3, #2
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800398a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ae:	4a32      	ldr	r2, [pc, #200]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039b4:	4b30      	ldr	r3, [pc, #192]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039d8:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039de:	4b26      	ldr	r3, [pc, #152]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a08:	4b1b      	ldr	r3, [pc, #108]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a2c:	4a12      	ldr	r2, [pc, #72]	@ (8003a78 <HAL_GPIO_Init+0x350>)
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	3301      	adds	r3, #1
 8003a36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f47f ae78 	bne.w	8003738 <HAL_GPIO_Init+0x10>
  }
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	48000400 	.word	0x48000400
 8003a64:	48000800 	.word	0x48000800
 8003a68:	48000c00 	.word	0x48000c00
 8003a6c:	48001000 	.word	0x48001000
 8003a70:	48001400 	.word	0x48001400
 8003a74:	48001800 	.word	0x48001800
 8003a78:	40010400 	.word	0x40010400

08003a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a8c:	787b      	ldrb	r3, [r7, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a98:	e002      	b.n	8003aa0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ab0:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40007000 	.word	0x40007000

08003ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ad6:	d130      	bne.n	8003b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ad8:	4b23      	ldr	r3, [pc, #140]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae4:	d038      	beq.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003aee:	4a1e      	ldr	r2, [pc, #120]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003af0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003af6:	4b1d      	ldr	r3, [pc, #116]	@ (8003b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2232      	movs	r2, #50	@ 0x32
 8003afc:	fb02 f303 	mul.w	r3, r2, r3
 8003b00:	4a1b      	ldr	r2, [pc, #108]	@ (8003b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	0c9b      	lsrs	r3, r3, #18
 8003b08:	3301      	adds	r3, #1
 8003b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b0c:	e002      	b.n	8003b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b14:	4b14      	ldr	r3, [pc, #80]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b20:	d102      	bne.n	8003b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f2      	bne.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b28:	4b0f      	ldr	r3, [pc, #60]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b34:	d110      	bne.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e00f      	b.n	8003b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b46:	d007      	beq.n	8003b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b50:	4a05      	ldr	r2, [pc, #20]	@ (8003b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40007000 	.word	0x40007000
 8003b6c:	20000098 	.word	0x20000098
 8003b70:	431bde83 	.word	0x431bde83

08003b74 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e3ca      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b86:	4b97      	ldr	r3, [pc, #604]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
 8003b8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b90:	4b94      	ldr	r3, [pc, #592]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f000 80e4 	beq.w	8003d70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_RCC_OscConfig+0x4a>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	f040 808b 	bne.w	8003ccc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	f040 8087 	bne.w	8003ccc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bbe:	4b89      	ldr	r3, [pc, #548]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d005      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x62>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e3a2      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	4b82      	ldr	r3, [pc, #520]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0308 	and.w	r3, r3, #8
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d004      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x7c>
 8003be6:	4b7f      	ldr	r3, [pc, #508]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bee:	e005      	b.n	8003bfc <HAL_RCC_OscConfig+0x88>
 8003bf0:	4b7c      	ldr	r3, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	091b      	lsrs	r3, r3, #4
 8003bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d223      	bcs.n	8003c48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fd55 	bl	80046b4 <RCC_SetFlashLatencyFromMSIRange>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e383      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c14:	4b73      	ldr	r3, [pc, #460]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a72      	ldr	r2, [pc, #456]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c1a:	f043 0308 	orr.w	r3, r3, #8
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	4b70      	ldr	r3, [pc, #448]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	496d      	ldr	r1, [pc, #436]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c32:	4b6c      	ldr	r3, [pc, #432]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	021b      	lsls	r3, r3, #8
 8003c40:	4968      	ldr	r1, [pc, #416]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]
 8003c46:	e025      	b.n	8003c94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c48:	4b66      	ldr	r3, [pc, #408]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a65      	ldr	r2, [pc, #404]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	f043 0308 	orr.w	r3, r3, #8
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	4b63      	ldr	r3, [pc, #396]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4960      	ldr	r1, [pc, #384]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c66:	4b5f      	ldr	r3, [pc, #380]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	495b      	ldr	r1, [pc, #364]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fd15 	bl	80046b4 <RCC_SetFlashLatencyFromMSIRange>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e343      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c94:	f000 fc4a 	bl	800452c <HAL_RCC_GetSysClockFreq>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	4b52      	ldr	r3, [pc, #328]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	091b      	lsrs	r3, r3, #4
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	4950      	ldr	r1, [pc, #320]	@ (8003de8 <HAL_RCC_OscConfig+0x274>)
 8003ca6:	5ccb      	ldrb	r3, [r1, r3]
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8003dec <HAL_RCC_OscConfig+0x278>)
 8003cb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003cb4:	4b4e      	ldr	r3, [pc, #312]	@ (8003df0 <HAL_RCC_OscConfig+0x27c>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fd ffe3 	bl	8001c84 <HAL_InitTick>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d052      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
 8003cca:	e327      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d032      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cd4:	4b43      	ldr	r3, [pc, #268]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a42      	ldr	r2, [pc, #264]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ce0:	f7fe f820 	bl	8001d24 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ce8:	f7fe f81c 	bl	8001d24 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e310      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d06:	4b37      	ldr	r3, [pc, #220]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a36      	ldr	r2, [pc, #216]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b34      	ldr	r3, [pc, #208]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4931      	ldr	r1, [pc, #196]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d24:	4b2f      	ldr	r3, [pc, #188]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	492c      	ldr	r1, [pc, #176]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	e01a      	b.n	8003d70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a29      	ldr	r2, [pc, #164]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d46:	f7fd ffed 	bl	8001d24 <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d4e:	f7fd ffe9 	bl	8001d24 <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e2dd      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x1da>
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d074      	beq.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2b08      	cmp	r3, #8
 8003d80:	d005      	beq.n	8003d8e <HAL_RCC_OscConfig+0x21a>
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b0c      	cmp	r3, #12
 8003d86:	d10e      	bne.n	8003da6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	2b03      	cmp	r3, #3
 8003d8c:	d10b      	bne.n	8003da6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8e:	4b15      	ldr	r3, [pc, #84]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d064      	beq.n	8003e64 <HAL_RCC_OscConfig+0x2f0>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d160      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e2ba      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dae:	d106      	bne.n	8003dbe <HAL_RCC_OscConfig+0x24a>
 8003db0:	4b0c      	ldr	r3, [pc, #48]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0b      	ldr	r2, [pc, #44]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e026      	b.n	8003e0c <HAL_RCC_OscConfig+0x298>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dc6:	d115      	bne.n	8003df4 <HAL_RCC_OscConfig+0x280>
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a05      	ldr	r2, [pc, #20]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003dce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b03      	ldr	r3, [pc, #12]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a02      	ldr	r2, [pc, #8]	@ (8003de4 <HAL_RCC_OscConfig+0x270>)
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	e014      	b.n	8003e0c <HAL_RCC_OscConfig+0x298>
 8003de2:	bf00      	nop
 8003de4:	40021000 	.word	0x40021000
 8003de8:	08008d10 	.word	0x08008d10
 8003dec:	20000098 	.word	0x20000098
 8003df0:	2000009c 	.word	0x2000009c
 8003df4:	4ba0      	ldr	r3, [pc, #640]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a9f      	ldr	r2, [pc, #636]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b9d      	ldr	r3, [pc, #628]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a9c      	ldr	r2, [pc, #624]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e14:	f7fd ff86 	bl	8001d24 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7fd ff82 	bl	8001d24 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	@ 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e276      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e2e:	4b92      	ldr	r3, [pc, #584]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x2a8>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd ff72 	bl	8001d24 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7fd ff6e 	bl	8001d24 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	@ 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e262      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e56:	4b88      	ldr	r3, [pc, #544]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x2d0>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d060      	beq.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d005      	beq.n	8003e84 <HAL_RCC_OscConfig+0x310>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d119      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d116      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e84:	4b7c      	ldr	r3, [pc, #496]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x328>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e23f      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9c:	4b76      	ldr	r3, [pc, #472]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	4973      	ldr	r1, [pc, #460]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb0:	e040      	b.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d023      	beq.n	8003f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eba:	4b6f      	ldr	r3, [pc, #444]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a6e      	ldr	r2, [pc, #440]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec6:	f7fd ff2d 	bl	8001d24 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ece:	f7fd ff29 	bl	8001d24 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e21d      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee0:	4b65      	ldr	r3, [pc, #404]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0f0      	beq.n	8003ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eec:	4b62      	ldr	r3, [pc, #392]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	061b      	lsls	r3, r3, #24
 8003efa:	495f      	ldr	r1, [pc, #380]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	604b      	str	r3, [r1, #4]
 8003f00:	e018      	b.n	8003f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f02:	4b5d      	ldr	r3, [pc, #372]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a5c      	ldr	r2, [pc, #368]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0e:	f7fd ff09 	bl	8001d24 <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f16:	f7fd ff05 	bl	8001d24 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1f9      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f28:	4b53      	ldr	r3, [pc, #332]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f0      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d03c      	beq.n	8003fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	695b      	ldr	r3, [r3, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01c      	beq.n	8003f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f48:	4b4b      	ldr	r3, [pc, #300]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f58:	f7fd fee4 	bl	8001d24 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f60:	f7fd fee0 	bl	8001d24 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e1d4      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f72:	4b41      	ldr	r3, [pc, #260]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0ef      	beq.n	8003f60 <HAL_RCC_OscConfig+0x3ec>
 8003f80:	e01b      	b.n	8003fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f82:	4b3d      	ldr	r3, [pc, #244]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f88:	4a3b      	ldr	r2, [pc, #236]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003f8a:	f023 0301 	bic.w	r3, r3, #1
 8003f8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fd fec7 	bl	8001d24 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9a:	f7fd fec3 	bl	8001d24 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e1b7      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fac:	4b32      	ldr	r3, [pc, #200]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ef      	bne.n	8003f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0304 	and.w	r3, r3, #4
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 80a6 	beq.w	8004114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fcc:	4b2a      	ldr	r3, [pc, #168]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10d      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd8:	4b27      	ldr	r3, [pc, #156]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	4a26      	ldr	r2, [pc, #152]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003fde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fe2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe4:	4b24      	ldr	r3, [pc, #144]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fe8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ff4:	4b21      	ldr	r3, [pc, #132]	@ (800407c <HAL_RCC_OscConfig+0x508>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d118      	bne.n	8004032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004000:	4b1e      	ldr	r3, [pc, #120]	@ (800407c <HAL_RCC_OscConfig+0x508>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1d      	ldr	r2, [pc, #116]	@ (800407c <HAL_RCC_OscConfig+0x508>)
 8004006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800400a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400c:	f7fd fe8a 	bl	8001d24 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004014:	f7fd fe86 	bl	8001d24 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e17a      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004026:	4b15      	ldr	r3, [pc, #84]	@ (800407c <HAL_RCC_OscConfig+0x508>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d108      	bne.n	800404c <HAL_RCC_OscConfig+0x4d8>
 800403a:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	4a0d      	ldr	r2, [pc, #52]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800404a:	e029      	b.n	80040a0 <HAL_RCC_OscConfig+0x52c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d115      	bne.n	8004080 <HAL_RCC_OscConfig+0x50c>
 8004054:	4b08      	ldr	r3, [pc, #32]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	4a07      	ldr	r2, [pc, #28]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 800405c:	f043 0304 	orr.w	r3, r3, #4
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004064:	4b04      	ldr	r3, [pc, #16]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	4a03      	ldr	r2, [pc, #12]	@ (8004078 <HAL_RCC_OscConfig+0x504>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004074:	e014      	b.n	80040a0 <HAL_RCC_OscConfig+0x52c>
 8004076:	bf00      	nop
 8004078:	40021000 	.word	0x40021000
 800407c:	40007000 	.word	0x40007000
 8004080:	4b9c      	ldr	r3, [pc, #624]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	4a9b      	ldr	r2, [pc, #620]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004090:	4b98      	ldr	r3, [pc, #608]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004096:	4a97      	ldr	r2, [pc, #604]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004098:	f023 0304 	bic.w	r3, r3, #4
 800409c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d016      	beq.n	80040d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a8:	f7fd fe3c 	bl	8001d24 <HAL_GetTick>
 80040ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b0:	f7fd fe38 	bl	8001d24 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e12a      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c6:	4b8b      	ldr	r3, [pc, #556]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ed      	beq.n	80040b0 <HAL_RCC_OscConfig+0x53c>
 80040d4:	e015      	b.n	8004102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fd fe25 	bl	8001d24 <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fd fe21 	bl	8001d24 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e113      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040f4:	4b7f      	ldr	r3, [pc, #508]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1ed      	bne.n	80040de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004102:	7ffb      	ldrb	r3, [r7, #31]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d105      	bne.n	8004114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004108:	4b7a      	ldr	r3, [pc, #488]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410c:	4a79      	ldr	r2, [pc, #484]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800410e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004112:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80fe 	beq.w	800431a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	2b02      	cmp	r3, #2
 8004124:	f040 80d0 	bne.w	80042c8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004128:	4b72      	ldr	r3, [pc, #456]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	f003 0203 	and.w	r2, r3, #3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004138:	429a      	cmp	r2, r3
 800413a:	d130      	bne.n	800419e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	3b01      	subs	r3, #1
 8004148:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	429a      	cmp	r2, r3
 800414c:	d127      	bne.n	800419e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004158:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d11f      	bne.n	800419e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004168:	2a07      	cmp	r2, #7
 800416a:	bf14      	ite	ne
 800416c:	2201      	movne	r2, #1
 800416e:	2200      	moveq	r2, #0
 8004170:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004172:	4293      	cmp	r3, r2
 8004174:	d113      	bne.n	800419e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	085b      	lsrs	r3, r3, #1
 8004182:	3b01      	subs	r3, #1
 8004184:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d109      	bne.n	800419e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419a:	429a      	cmp	r2, r3
 800419c:	d06e      	beq.n	800427c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	d069      	beq.n	8004278 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041a4:	4b53      	ldr	r3, [pc, #332]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d105      	bne.n	80041bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80041b0:	4b50      	ldr	r3, [pc, #320]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0ad      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041c0:	4b4c      	ldr	r3, [pc, #304]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a4b      	ldr	r2, [pc, #300]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80041c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041cc:	f7fd fdaa 	bl	8001d24 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d4:	f7fd fda6 	bl	8001d24 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e09a      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e6:	4b43      	ldr	r3, [pc, #268]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041f2:	4b40      	ldr	r3, [pc, #256]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	4b40      	ldr	r3, [pc, #256]	@ (80042f8 <HAL_RCC_OscConfig+0x784>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004202:	3a01      	subs	r2, #1
 8004204:	0112      	lsls	r2, r2, #4
 8004206:	4311      	orrs	r1, r2
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800420c:	0212      	lsls	r2, r2, #8
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004214:	0852      	lsrs	r2, r2, #1
 8004216:	3a01      	subs	r2, #1
 8004218:	0552      	lsls	r2, r2, #21
 800421a:	4311      	orrs	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004220:	0852      	lsrs	r2, r2, #1
 8004222:	3a01      	subs	r2, #1
 8004224:	0652      	lsls	r2, r2, #25
 8004226:	4311      	orrs	r1, r2
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800422c:	0912      	lsrs	r2, r2, #4
 800422e:	0452      	lsls	r2, r2, #17
 8004230:	430a      	orrs	r2, r1
 8004232:	4930      	ldr	r1, [pc, #192]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004234:	4313      	orrs	r3, r2
 8004236:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004238:	4b2e      	ldr	r3, [pc, #184]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a2d      	ldr	r2, [pc, #180]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800423e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004242:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004244:	4b2b      	ldr	r3, [pc, #172]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4a2a      	ldr	r2, [pc, #168]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800424a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800424e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004250:	f7fd fd68 	bl	8001d24 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd fd64 	bl	8001d24 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e058      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426a:	4b22      	ldr	r3, [pc, #136]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004276:	e050      	b.n	800431a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e04f      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427c:	4b1d      	ldr	r3, [pc, #116]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d148      	bne.n	800431a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004288:	4b1a      	ldr	r3, [pc, #104]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800428e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004292:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004294:	4b17      	ldr	r3, [pc, #92]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a16      	ldr	r2, [pc, #88]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 800429a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800429e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042a0:	f7fd fd40 	bl	8001d24 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a8:	f7fd fd3c 	bl	8001d24 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e030      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ba:	4b0e      	ldr	r3, [pc, #56]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0x734>
 80042c6:	e028      	b.n	800431a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d023      	beq.n	8004316 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ce:	4b09      	ldr	r3, [pc, #36]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a08      	ldr	r2, [pc, #32]	@ (80042f4 <HAL_RCC_OscConfig+0x780>)
 80042d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fd fd23 	bl	8001d24 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e0:	e00c      	b.n	80042fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e2:	f7fd fd1f 	bl	8001d24 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d905      	bls.n	80042fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e013      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
 80042f4:	40021000 	.word	0x40021000
 80042f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fc:	4b09      	ldr	r3, [pc, #36]	@ (8004324 <HAL_RCC_OscConfig+0x7b0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1ec      	bne.n	80042e2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004308:	4b06      	ldr	r3, [pc, #24]	@ (8004324 <HAL_RCC_OscConfig+0x7b0>)
 800430a:	68da      	ldr	r2, [r3, #12]
 800430c:	4905      	ldr	r1, [pc, #20]	@ (8004324 <HAL_RCC_OscConfig+0x7b0>)
 800430e:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <HAL_RCC_OscConfig+0x7b4>)
 8004310:	4013      	ands	r3, r2
 8004312:	60cb      	str	r3, [r1, #12]
 8004314:	e001      	b.n	800431a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e000      	b.n	800431c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3720      	adds	r7, #32
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	40021000 	.word	0x40021000
 8004328:	feeefffc 	.word	0xfeeefffc

0800432c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e0e7      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004340:	4b75      	ldr	r3, [pc, #468]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d910      	bls.n	8004370 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b72      	ldr	r3, [pc, #456]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 0207 	bic.w	r2, r3, #7
 8004356:	4970      	ldr	r1, [pc, #448]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b6e      	ldr	r3, [pc, #440]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e0cf      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	4b66      	ldr	r3, [pc, #408]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004388:	429a      	cmp	r2, r3
 800438a:	d908      	bls.n	800439e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b63      	ldr	r3, [pc, #396]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4960      	ldr	r1, [pc, #384]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d04c      	beq.n	8004444 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b2:	4b5a      	ldr	r3, [pc, #360]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d121      	bne.n	8004402 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0a6      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043ca:	4b54      	ldr	r3, [pc, #336]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d115      	bne.n	8004402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e09a      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d107      	bne.n	80043f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043e2:	4b4e      	ldr	r3, [pc, #312]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e08e      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043f2:	4b4a      	ldr	r3, [pc, #296]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e086      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004402:	4b46      	ldr	r3, [pc, #280]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f023 0203 	bic.w	r2, r3, #3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	4943      	ldr	r1, [pc, #268]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004414:	f7fd fc86 	bl	8001d24 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	e00a      	b.n	8004432 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800441c:	f7fd fc82 	bl	8001d24 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f241 3288 	movw	r2, #5000	@ 0x1388
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e06e      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004432:	4b3a      	ldr	r3, [pc, #232]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 020c 	and.w	r2, r3, #12
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	429a      	cmp	r2, r3
 8004442:	d1eb      	bne.n	800441c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d010      	beq.n	8004472 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	4b31      	ldr	r3, [pc, #196]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800445c:	429a      	cmp	r2, r3
 800445e:	d208      	bcs.n	8004472 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004460:	4b2e      	ldr	r3, [pc, #184]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	492b      	ldr	r1, [pc, #172]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 800446e:	4313      	orrs	r3, r2
 8004470:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004472:	4b29      	ldr	r3, [pc, #164]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0307 	and.w	r3, r3, #7
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d210      	bcs.n	80044a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004480:	4b25      	ldr	r3, [pc, #148]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 0207 	bic.w	r2, r3, #7
 8004488:	4923      	ldr	r1, [pc, #140]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004490:	4b21      	ldr	r3, [pc, #132]	@ (8004518 <HAL_RCC_ClockConfig+0x1ec>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e036      	b.n	8004510 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d008      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ae:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	4918      	ldr	r1, [pc, #96]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0308 	and.w	r3, r3, #8
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044cc:	4b13      	ldr	r3, [pc, #76]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4910      	ldr	r1, [pc, #64]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044e0:	f000 f824 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80044e4:	4602      	mov	r2, r0
 80044e6:	4b0d      	ldr	r3, [pc, #52]	@ (800451c <HAL_RCC_ClockConfig+0x1f0>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	490b      	ldr	r1, [pc, #44]	@ (8004520 <HAL_RCC_ClockConfig+0x1f4>)
 80044f2:	5ccb      	ldrb	r3, [r1, r3]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
 80044fc:	4a09      	ldr	r2, [pc, #36]	@ (8004524 <HAL_RCC_ClockConfig+0x1f8>)
 80044fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004500:	4b09      	ldr	r3, [pc, #36]	@ (8004528 <HAL_RCC_ClockConfig+0x1fc>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7fd fbbd 	bl	8001c84 <HAL_InitTick>
 800450a:	4603      	mov	r3, r0
 800450c:	72fb      	strb	r3, [r7, #11]

  return status;
 800450e:	7afb      	ldrb	r3, [r7, #11]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	40022000 	.word	0x40022000
 800451c:	40021000 	.word	0x40021000
 8004520:	08008d10 	.word	0x08008d10
 8004524:	20000098 	.word	0x20000098
 8004528:	2000009c 	.word	0x2000009c

0800452c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	@ 0x24
 8004530:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	2300      	movs	r3, #0
 8004538:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800453a:	4b3e      	ldr	r3, [pc, #248]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
 8004542:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004544:	4b3b      	ldr	r3, [pc, #236]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f003 0303 	and.w	r3, r3, #3
 800454c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_GetSysClockFreq+0x34>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d121      	bne.n	800459e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d11e      	bne.n	800459e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004560:	4b34      	ldr	r3, [pc, #208]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0308 	and.w	r3, r3, #8
 8004568:	2b00      	cmp	r3, #0
 800456a:	d107      	bne.n	800457c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800456c:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 800456e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	e005      	b.n	8004588 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800457c:	4b2d      	ldr	r3, [pc, #180]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	091b      	lsrs	r3, r3, #4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004588:	4a2b      	ldr	r2, [pc, #172]	@ (8004638 <HAL_RCC_GetSysClockFreq+0x10c>)
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10d      	bne.n	80045b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b04      	cmp	r3, #4
 80045a2:	d102      	bne.n	80045aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045a4:	4b25      	ldr	r3, [pc, #148]	@ (800463c <HAL_RCC_GetSysClockFreq+0x110>)
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e004      	b.n	80045b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045b0:	4b23      	ldr	r3, [pc, #140]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x114>)
 80045b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d134      	bne.n	8004624 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b02      	cmp	r3, #2
 80045c8:	d003      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d003      	beq.n	80045d8 <HAL_RCC_GetSysClockFreq+0xac>
 80045d0:	e005      	b.n	80045de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80045d2:	4b1a      	ldr	r3, [pc, #104]	@ (800463c <HAL_RCC_GetSysClockFreq+0x110>)
 80045d4:	617b      	str	r3, [r7, #20]
      break;
 80045d6:	e005      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80045d8:	4b19      	ldr	r3, [pc, #100]	@ (8004640 <HAL_RCC_GetSysClockFreq+0x114>)
 80045da:	617b      	str	r3, [r7, #20]
      break;
 80045dc:	e002      	b.n	80045e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	617b      	str	r3, [r7, #20]
      break;
 80045e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045e4:	4b13      	ldr	r3, [pc, #76]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	3301      	adds	r3, #1
 80045f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045f2:	4b10      	ldr	r3, [pc, #64]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	fb03 f202 	mul.w	r2, r3, r2
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	fbb2 f3f3 	udiv	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800460a:	4b0a      	ldr	r3, [pc, #40]	@ (8004634 <HAL_RCC_GetSysClockFreq+0x108>)
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	0e5b      	lsrs	r3, r3, #25
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	3301      	adds	r3, #1
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004624:	69bb      	ldr	r3, [r7, #24]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	@ 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	08008d28 	.word	0x08008d28
 800463c:	00f42400 	.word	0x00f42400
 8004640:	007a1200 	.word	0x007a1200

08004644 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004648:	4b03      	ldr	r3, [pc, #12]	@ (8004658 <HAL_RCC_GetHCLKFreq+0x14>)
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000098 	.word	0x20000098

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004660:	f7ff fff0 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b06      	ldr	r3, [pc, #24]	@ (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4904      	ldr	r1, [pc, #16]	@ (8004684 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	f003 031f 	and.w	r3, r3, #31
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800467c:	4618      	mov	r0, r3
 800467e:	bd80      	pop	{r7, pc}
 8004680:	40021000 	.word	0x40021000
 8004684:	08008d20 	.word	0x08008d20

08004688 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800468c:	f7ff ffda 	bl	8004644 <HAL_RCC_GetHCLKFreq>
 8004690:	4602      	mov	r2, r0
 8004692:	4b06      	ldr	r3, [pc, #24]	@ (80046ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	0adb      	lsrs	r3, r3, #11
 8004698:	f003 0307 	and.w	r3, r3, #7
 800469c:	4904      	ldr	r1, [pc, #16]	@ (80046b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800469e:	5ccb      	ldrb	r3, [r1, r3]
 80046a0:	f003 031f 	and.w	r3, r3, #31
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40021000 	.word	0x40021000
 80046b0:	08008d20 	.word	0x08008d20

080046b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80046bc:	2300      	movs	r3, #0
 80046be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80046c0:	4b2a      	ldr	r3, [pc, #168]	@ (800476c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046cc:	f7ff f9ee 	bl	8003aac <HAL_PWREx_GetVoltageRange>
 80046d0:	6178      	str	r0, [r7, #20]
 80046d2:	e014      	b.n	80046fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046d4:	4b25      	ldr	r3, [pc, #148]	@ (800476c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d8:	4a24      	ldr	r2, [pc, #144]	@ (800476c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046de:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e0:	4b22      	ldr	r3, [pc, #136]	@ (800476c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046ec:	f7ff f9de 	bl	8003aac <HAL_PWREx_GetVoltageRange>
 80046f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046f2:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046f6:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004704:	d10b      	bne.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b80      	cmp	r3, #128	@ 0x80
 800470a:	d919      	bls.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004710:	d902      	bls.n	8004718 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004712:	2302      	movs	r3, #2
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	e013      	b.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004718:	2301      	movs	r3, #1
 800471a:	613b      	str	r3, [r7, #16]
 800471c:	e010      	b.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b80      	cmp	r3, #128	@ 0x80
 8004722:	d902      	bls.n	800472a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004724:	2303      	movs	r3, #3
 8004726:	613b      	str	r3, [r7, #16]
 8004728:	e00a      	b.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b80      	cmp	r3, #128	@ 0x80
 800472e:	d102      	bne.n	8004736 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004730:	2302      	movs	r3, #2
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	e004      	b.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2b70      	cmp	r3, #112	@ 0x70
 800473a:	d101      	bne.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800473c:	2301      	movs	r3, #1
 800473e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004740:	4b0b      	ldr	r3, [pc, #44]	@ (8004770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f023 0207 	bic.w	r2, r3, #7
 8004748:	4909      	ldr	r1, [pc, #36]	@ (8004770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4313      	orrs	r3, r2
 800474e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004750:	4b07      	ldr	r3, [pc, #28]	@ (8004770 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0307 	and.w	r3, r3, #7
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	429a      	cmp	r2, r3
 800475c:	d001      	beq.n	8004762 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e000      	b.n	8004764 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000
 8004770:	40022000 	.word	0x40022000

08004774 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800477c:	2300      	movs	r3, #0
 800477e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004780:	2300      	movs	r3, #0
 8004782:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800478c:	2b00      	cmp	r3, #0
 800478e:	d041      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004794:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004798:	d02a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800479a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800479e:	d824      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80047a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047aa:	d81e      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80047b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047b4:	d010      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80047b6:	e018      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047b8:	4b86      	ldr	r3, [pc, #536]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a85      	ldr	r2, [pc, #532]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047c4:	e015      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fabb 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047d6:	e00c      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3320      	adds	r3, #32
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fba6 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047e8:	e003      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	74fb      	strb	r3, [r7, #19]
      break;
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047f8:	4b76      	ldr	r3, [pc, #472]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004806:	4973      	ldr	r1, [pc, #460]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800480e:	e001      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d041      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004824:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004828:	d02a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800482a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800482e:	d824      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004830:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004834:	d008      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800483a:	d81e      	bhi.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004844:	d010      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004846:	e018      	b.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004848:	4b62      	ldr	r3, [pc, #392]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a61      	ldr	r2, [pc, #388]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004852:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004854:	e015      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	2100      	movs	r1, #0
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fa73 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004862:	4603      	mov	r3, r0
 8004864:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004866:	e00c      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3320      	adds	r3, #32
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f000 fb5e 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 8004874:	4603      	mov	r3, r0
 8004876:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004878:	e003      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	74fb      	strb	r3, [r7, #19]
      break;
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004882:	7cfb      	ldrb	r3, [r7, #19]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10b      	bne.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004888:	4b52      	ldr	r3, [pc, #328]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800488e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004896:	494f      	ldr	r1, [pc, #316]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800489e:	e001      	b.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a0:	7cfb      	ldrb	r3, [r7, #19]
 80048a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 80a0 	beq.w	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b2:	2300      	movs	r3, #0
 80048b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80048b6:	4b47      	ldr	r3, [pc, #284]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048cc:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d0:	4a40      	ldr	r2, [pc, #256]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048d8:	4b3e      	ldr	r3, [pc, #248]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048e0:	60bb      	str	r3, [r7, #8]
 80048e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048e4:	2301      	movs	r3, #1
 80048e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b3b      	ldr	r3, [pc, #236]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3a      	ldr	r2, [pc, #232]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048f4:	f7fd fa16 	bl	8001d24 <HAL_GetTick>
 80048f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048fa:	e009      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048fc:	f7fd fa12 	bl	8001d24 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b02      	cmp	r3, #2
 8004908:	d902      	bls.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	74fb      	strb	r3, [r7, #19]
        break;
 800490e:	e005      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004910:	4b31      	ldr	r3, [pc, #196]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ef      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d15c      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004922:	4b2c      	ldr	r3, [pc, #176]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004928:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01f      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	429a      	cmp	r2, r3
 800493e:	d019      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004940:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800494c:	4b21      	ldr	r3, [pc, #132]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004952:	4a20      	ldr	r2, [pc, #128]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004958:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800495c:	4b1d      	ldr	r3, [pc, #116]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004962:	4a1c      	ldr	r2, [pc, #112]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004964:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004968:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800496c:	4a19      	ldr	r2, [pc, #100]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497e:	f7fd f9d1 	bl	8001d24 <HAL_GetTick>
 8004982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004984:	e00b      	b.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fd f9cd 	bl	8001d24 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d902      	bls.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	74fb      	strb	r3, [r7, #19]
            break;
 800499c:	e006      	b.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800499e:	4b0d      	ldr	r3, [pc, #52]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ec      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80049ac:	7cfb      	ldrb	r3, [r7, #19]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10c      	bne.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049b2:	4b08      	ldr	r3, [pc, #32]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c2:	4904      	ldr	r1, [pc, #16]	@ (80049d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80049ca:	e009      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	74bb      	strb	r3, [r7, #18]
 80049d0:	e006      	b.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80049d2:	bf00      	nop
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	7cfb      	ldrb	r3, [r7, #19]
 80049de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049e0:	7c7b      	ldrb	r3, [r7, #17]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d105      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049e6:	4b9e      	ldr	r3, [pc, #632]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ea:	4a9d      	ldr	r2, [pc, #628]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049fe:	4b98      	ldr	r3, [pc, #608]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a04:	f023 0203 	bic.w	r2, r3, #3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0c:	4994      	ldr	r1, [pc, #592]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a20:	4b8f      	ldr	r3, [pc, #572]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a26:	f023 020c 	bic.w	r2, r3, #12
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2e:	498c      	ldr	r1, [pc, #560]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0304 	and.w	r3, r3, #4
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a42:	4b87      	ldr	r3, [pc, #540]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a48:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	4983      	ldr	r1, [pc, #524]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a64:	4b7e      	ldr	r3, [pc, #504]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a72:	497b      	ldr	r1, [pc, #492]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a86:	4b76      	ldr	r3, [pc, #472]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a94:	4972      	ldr	r1, [pc, #456]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004aa8:	4b6d      	ldr	r3, [pc, #436]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	496a      	ldr	r1, [pc, #424]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aca:	4b65      	ldr	r3, [pc, #404]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ad8:	4961      	ldr	r1, [pc, #388]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aec:	4b5c      	ldr	r3, [pc, #368]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afa:	4959      	ldr	r1, [pc, #356]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b0e:	4b54      	ldr	r3, [pc, #336]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b14:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b1c:	4950      	ldr	r1, [pc, #320]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00a      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b30:	4b4b      	ldr	r3, [pc, #300]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	4948      	ldr	r1, [pc, #288]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00a      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b52:	4b43      	ldr	r3, [pc, #268]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b58:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b60:	493f      	ldr	r1, [pc, #252]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d028      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b74:	4b3a      	ldr	r3, [pc, #232]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b82:	4937      	ldr	r1, [pc, #220]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b92:	d106      	bne.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b94:	4b32      	ldr	r3, [pc, #200]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a31      	ldr	r2, [pc, #196]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	60d3      	str	r3, [r2, #12]
 8004ba0:	e011      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ba6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	2101      	movs	r1, #1
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f8c8 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004bc2:	7cfb      	ldrb	r3, [r7, #19]
 8004bc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d028      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004bd2:	4b23      	ldr	r3, [pc, #140]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be0:	491f      	ldr	r1, [pc, #124]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bfc:	60d3      	str	r3, [r2, #12]
 8004bfe:	e011      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	2101      	movs	r1, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f899 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d02b      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c30:	4b0b      	ldr	r3, [pc, #44]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3e:	4908      	ldr	r1, [pc, #32]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c4e:	d109      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c50:	4b03      	ldr	r3, [pc, #12]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	4a02      	ldr	r2, [pc, #8]	@ (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c5a:	60d3      	str	r3, [r2, #12]
 8004c5c:	e014      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c6c:	d10c      	bne.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	3304      	adds	r3, #4
 8004c72:	2101      	movs	r1, #1
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 f867 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02f      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c94:	4b2b      	ldr	r3, [pc, #172]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ca2:	4928      	ldr	r1, [pc, #160]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cb2:	d10d      	bne.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	2102      	movs	r1, #2
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 f844 	bl	8004d48 <RCCEx_PLLSAI1_Config>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cc4:	7cfb      	ldrb	r3, [r7, #19]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d014      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	74bb      	strb	r3, [r7, #18]
 8004cce:	e011      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cd8:	d10c      	bne.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3320      	adds	r3, #32
 8004cde:	2102      	movs	r1, #2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 f925 	bl	8004f30 <RCCEx_PLLSAI2_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cea:	7cfb      	ldrb	r3, [r7, #19]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cf0:	7cfb      	ldrb	r3, [r7, #19]
 8004cf2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d00:	4b10      	ldr	r3, [pc, #64]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d06:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d0e:	490d      	ldr	r1, [pc, #52]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d22:	4b08      	ldr	r3, [pc, #32]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d32:	4904      	ldr	r1, [pc, #16]	@ (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000

08004d48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d56:	4b75      	ldr	r3, [pc, #468]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d018      	beq.n	8004d94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d62:	4b72      	ldr	r3, [pc, #456]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0203 	and.w	r2, r3, #3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
       ||
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d009      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
       ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d047      	beq.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	73fb      	strb	r3, [r7, #15]
 8004d92:	e044      	b.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b03      	cmp	r3, #3
 8004d9a:	d018      	beq.n	8004dce <RCCEx_PLLSAI1_Config+0x86>
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d825      	bhi.n	8004dec <RCCEx_PLLSAI1_Config+0xa4>
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d002      	beq.n	8004daa <RCCEx_PLLSAI1_Config+0x62>
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d009      	beq.n	8004dbc <RCCEx_PLLSAI1_Config+0x74>
 8004da8:	e020      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004daa:	4b60      	ldr	r3, [pc, #384]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d11d      	bne.n	8004df2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dba:	e01a      	b.n	8004df2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dcc:	e013      	b.n	8004df6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dce:	4b57      	ldr	r3, [pc, #348]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10f      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dda:	4b54      	ldr	r3, [pc, #336]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dea:	e006      	b.n	8004dfa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	73fb      	strb	r3, [r7, #15]
      break;
 8004df0:	e004      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df2:	bf00      	nop
 8004df4:	e002      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004df6:	bf00      	nop
 8004df8:	e000      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e02:	4b4a      	ldr	r3, [pc, #296]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6819      	ldr	r1, [r3, #0]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	430b      	orrs	r3, r1
 8004e18:	4944      	ldr	r1, [pc, #272]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e1e:	7bfb      	ldrb	r3, [r7, #15]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d17d      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e24:	4b41      	ldr	r3, [pc, #260]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a40      	ldr	r2, [pc, #256]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e30:	f7fc ff78 	bl	8001d24 <HAL_GetTick>
 8004e34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e36:	e009      	b.n	8004e4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e38:	f7fc ff74 	bl	8001d24 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d902      	bls.n	8004e4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	73fb      	strb	r3, [r7, #15]
        break;
 8004e4a:	e005      	b.n	8004e58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e4c:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1ef      	bne.n	8004e38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d160      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d111      	bne.n	8004e88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e64:	4b31      	ldr	r3, [pc, #196]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6892      	ldr	r2, [r2, #8]
 8004e74:	0211      	lsls	r1, r2, #8
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	0912      	lsrs	r2, r2, #4
 8004e7c:	0452      	lsls	r2, r2, #17
 8004e7e:	430a      	orrs	r2, r1
 8004e80:	492a      	ldr	r1, [pc, #168]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	610b      	str	r3, [r1, #16]
 8004e86:	e027      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d112      	bne.n	8004eb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e8e:	4b27      	ldr	r3, [pc, #156]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6892      	ldr	r2, [r2, #8]
 8004e9e:	0211      	lsls	r1, r2, #8
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6912      	ldr	r2, [r2, #16]
 8004ea4:	0852      	lsrs	r2, r2, #1
 8004ea6:	3a01      	subs	r2, #1
 8004ea8:	0552      	lsls	r2, r2, #21
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	491f      	ldr	r1, [pc, #124]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]
 8004eb2:	e011      	b.n	8004ed8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004ebc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	0211      	lsls	r1, r2, #8
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6952      	ldr	r2, [r2, #20]
 8004eca:	0852      	lsrs	r2, r2, #1
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	0652      	lsls	r2, r2, #25
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	4916      	ldr	r1, [pc, #88]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed8:	4b14      	ldr	r3, [pc, #80]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a13      	ldr	r2, [pc, #76]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ede:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee4:	f7fc ff1e 	bl	8001d24 <HAL_GetTick>
 8004ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eea:	e009      	b.n	8004f00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eec:	f7fc ff1a 	bl	8001d24 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d902      	bls.n	8004f00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	73fb      	strb	r3, [r7, #15]
          break;
 8004efe:	e005      	b.n	8004f0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0ef      	beq.n	8004eec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f12:	4b06      	ldr	r3, [pc, #24]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	4904      	ldr	r1, [pc, #16]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40021000 	.word	0x40021000

08004f30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d018      	beq.n	8004f7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f4a:	4b67      	ldr	r3, [pc, #412]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f003 0203 	and.w	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d10d      	bne.n	8004f76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f62:	4b61      	ldr	r3, [pc, #388]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	091b      	lsrs	r3, r3, #4
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
       ||
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d047      	beq.n	8005006 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
 8004f7a:	e044      	b.n	8005006 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d018      	beq.n	8004fb6 <RCCEx_PLLSAI2_Config+0x86>
 8004f84:	2b03      	cmp	r3, #3
 8004f86:	d825      	bhi.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa4>
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d002      	beq.n	8004f92 <RCCEx_PLLSAI2_Config+0x62>
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d009      	beq.n	8004fa4 <RCCEx_PLLSAI2_Config+0x74>
 8004f90:	e020      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f92:	4b55      	ldr	r3, [pc, #340]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0302 	and.w	r3, r3, #2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d11d      	bne.n	8004fda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa2:	e01a      	b.n	8004fda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fa4:	4b50      	ldr	r3, [pc, #320]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d116      	bne.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb4:	e013      	b.n	8004fde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10f      	bne.n	8004fe2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fc2:	4b49      	ldr	r3, [pc, #292]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fd2:	e006      	b.n	8004fe2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd8:	e004      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fda:	bf00      	nop
 8004fdc:	e002      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fde:	bf00      	nop
 8004fe0:	e000      	b.n	8004fe4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004fe2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10d      	bne.n	8005006 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fea:	4b3f      	ldr	r3, [pc, #252]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6819      	ldr	r1, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	430b      	orrs	r3, r1
 8005000:	4939      	ldr	r1, [pc, #228]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005002:	4313      	orrs	r3, r2
 8005004:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d167      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800500c:	4b36      	ldr	r3, [pc, #216]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a35      	ldr	r2, [pc, #212]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005016:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fc fe84 	bl	8001d24 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005020:	f7fc fe80 	bl	8001d24 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
        break;
 8005032:	e005      	b.n	8005040 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005034:	4b2c      	ldr	r3, [pc, #176]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ef      	bne.n	8005020 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d14a      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d111      	bne.n	8005070 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800504c:	4b26      	ldr	r3, [pc, #152]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005054:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6892      	ldr	r2, [r2, #8]
 800505c:	0211      	lsls	r1, r2, #8
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	68d2      	ldr	r2, [r2, #12]
 8005062:	0912      	lsrs	r2, r2, #4
 8005064:	0452      	lsls	r2, r2, #17
 8005066:	430a      	orrs	r2, r1
 8005068:	491f      	ldr	r1, [pc, #124]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800506a:	4313      	orrs	r3, r2
 800506c:	614b      	str	r3, [r1, #20]
 800506e:	e011      	b.n	8005094 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005070:	4b1d      	ldr	r3, [pc, #116]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005078:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6892      	ldr	r2, [r2, #8]
 8005080:	0211      	lsls	r1, r2, #8
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6912      	ldr	r2, [r2, #16]
 8005086:	0852      	lsrs	r2, r2, #1
 8005088:	3a01      	subs	r2, #1
 800508a:	0652      	lsls	r2, r2, #25
 800508c:	430a      	orrs	r2, r1
 800508e:	4916      	ldr	r1, [pc, #88]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005090:	4313      	orrs	r3, r2
 8005092:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005094:	4b14      	ldr	r3, [pc, #80]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a13      	ldr	r2, [pc, #76]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800509e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7fc fe40 	bl	8001d24 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050a8:	f7fc fe3c 	bl	8001d24 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
          break;
 80050ba:	e005      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050bc:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0ef      	beq.n	80050a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050ce:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d0:	695a      	ldr	r2, [r3, #20]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695b      	ldr	r3, [r3, #20]
 80050d6:	4904      	ldr	r1, [pc, #16]	@ (80050e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3710      	adds	r7, #16
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40021000 	.word	0x40021000

080050ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e049      	b.n	8005192 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fc fb92 	bl	800183c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	4619      	mov	r1, r3
 800512a:	4610      	mov	r0, r2
 800512c:	f001 f86e 	bl	800620c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_TIM_PWM_Start+0x24>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	e03c      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d109      	bne.n	80051da <HAL_TIM_PWM_Start+0x3e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	bf14      	ite	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	2300      	moveq	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	e02f      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d109      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x58>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e022      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b0c      	cmp	r3, #12
 80051f8:	d109      	bne.n	800520e <HAL_TIM_PWM_Start+0x72>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e015      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b10      	cmp	r3, #16
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x8c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e008      	b.n	800523a <HAL_TIM_PWM_Start+0x9e>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b01      	cmp	r3, #1
 8005232:	bf14      	ite	ne
 8005234:	2301      	movne	r3, #1
 8005236:	2300      	moveq	r3, #0
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d001      	beq.n	8005242 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e09c      	b.n	800537c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d104      	bne.n	8005252 <HAL_TIM_PWM_Start+0xb6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005250:	e023      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b04      	cmp	r3, #4
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xc6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005260:	e01b      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b08      	cmp	r3, #8
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xd6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005270:	e013      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xe6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005280:	e00b      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b10      	cmp	r3, #16
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xf6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005290:	e003      	b.n	800529a <HAL_TIM_PWM_Start+0xfe>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	2201      	movs	r2, #1
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fc46 	bl	8006b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a35      	ldr	r2, [pc, #212]	@ (8005384 <HAL_TIM_PWM_Start+0x1e8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_TIM_PWM_Start+0x13e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a34      	ldr	r2, [pc, #208]	@ (8005388 <HAL_TIM_PWM_Start+0x1ec>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00e      	beq.n	80052da <HAL_TIM_PWM_Start+0x13e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a32      	ldr	r2, [pc, #200]	@ (800538c <HAL_TIM_PWM_Start+0x1f0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d009      	beq.n	80052da <HAL_TIM_PWM_Start+0x13e>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a31      	ldr	r2, [pc, #196]	@ (8005390 <HAL_TIM_PWM_Start+0x1f4>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <HAL_TIM_PWM_Start+0x13e>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a2f      	ldr	r2, [pc, #188]	@ (8005394 <HAL_TIM_PWM_Start+0x1f8>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_TIM_PWM_Start+0x142>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_TIM_PWM_Start+0x144>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d007      	beq.n	80052f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a22      	ldr	r2, [pc, #136]	@ (8005384 <HAL_TIM_PWM_Start+0x1e8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01d      	beq.n	800533a <HAL_TIM_PWM_Start+0x19e>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005306:	d018      	beq.n	800533a <HAL_TIM_PWM_Start+0x19e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a22      	ldr	r2, [pc, #136]	@ (8005398 <HAL_TIM_PWM_Start+0x1fc>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIM_PWM_Start+0x19e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a21      	ldr	r2, [pc, #132]	@ (800539c <HAL_TIM_PWM_Start+0x200>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIM_PWM_Start+0x19e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1f      	ldr	r2, [pc, #124]	@ (80053a0 <HAL_TIM_PWM_Start+0x204>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIM_PWM_Start+0x19e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a17      	ldr	r2, [pc, #92]	@ (8005388 <HAL_TIM_PWM_Start+0x1ec>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIM_PWM_Start+0x19e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a15      	ldr	r2, [pc, #84]	@ (800538c <HAL_TIM_PWM_Start+0x1f0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d115      	bne.n	8005366 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689a      	ldr	r2, [r3, #8]
 8005340:	4b18      	ldr	r3, [pc, #96]	@ (80053a4 <HAL_TIM_PWM_Start+0x208>)
 8005342:	4013      	ands	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b06      	cmp	r3, #6
 800534a:	d015      	beq.n	8005378 <HAL_TIM_PWM_Start+0x1dc>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005352:	d011      	beq.n	8005378 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	e008      	b.n	8005378 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e000      	b.n	800537a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005378:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800537a:	2300      	movs	r3, #0
}
 800537c:	4618      	mov	r0, r3
 800537e:	3710      	adds	r7, #16
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40012c00 	.word	0x40012c00
 8005388:	40013400 	.word	0x40013400
 800538c:	40014000 	.word	0x40014000
 8005390:	40014400 	.word	0x40014400
 8005394:	40014800 	.word	0x40014800
 8005398:	40000400 	.word	0x40000400
 800539c:	40000800 	.word	0x40000800
 80053a0:	40000c00 	.word	0x40000c00
 80053a4:	00010007 	.word	0x00010007

080053a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
 80053b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2200      	movs	r2, #0
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fbba 	bl	8006b34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a3e      	ldr	r2, [pc, #248]	@ (80054c0 <HAL_TIM_PWM_Stop+0x118>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_TIM_PWM_Stop+0x4a>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a3d      	ldr	r2, [pc, #244]	@ (80054c4 <HAL_TIM_PWM_Stop+0x11c>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_TIM_PWM_Stop+0x4a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3b      	ldr	r2, [pc, #236]	@ (80054c8 <HAL_TIM_PWM_Stop+0x120>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_TIM_PWM_Stop+0x4a>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a3a      	ldr	r2, [pc, #232]	@ (80054cc <HAL_TIM_PWM_Stop+0x124>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_TIM_PWM_Stop+0x4a>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a38      	ldr	r2, [pc, #224]	@ (80054d0 <HAL_TIM_PWM_Stop+0x128>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d101      	bne.n	80053f6 <HAL_TIM_PWM_Stop+0x4e>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e000      	b.n	80053f8 <HAL_TIM_PWM_Stop+0x50>
 80053f6:	2300      	movs	r3, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d017      	beq.n	800542c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6a1a      	ldr	r2, [r3, #32]
 8005402:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005406:	4013      	ands	r3, r2
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10f      	bne.n	800542c <HAL_TIM_PWM_Stop+0x84>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6a1a      	ldr	r2, [r3, #32]
 8005412:	f240 4344 	movw	r3, #1092	@ 0x444
 8005416:	4013      	ands	r3, r2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d107      	bne.n	800542c <HAL_TIM_PWM_Stop+0x84>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800542a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6a1a      	ldr	r2, [r3, #32]
 8005432:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005436:	4013      	ands	r3, r2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10f      	bne.n	800545c <HAL_TIM_PWM_Stop+0xb4>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6a1a      	ldr	r2, [r3, #32]
 8005442:	f240 4344 	movw	r3, #1092	@ 0x444
 8005446:	4013      	ands	r3, r2
 8005448:	2b00      	cmp	r3, #0
 800544a:	d107      	bne.n	800545c <HAL_TIM_PWM_Stop+0xb4>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f022 0201 	bic.w	r2, r2, #1
 800545a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <HAL_TIM_PWM_Stop+0xc4>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800546a:	e023      	b.n	80054b4 <HAL_TIM_PWM_Stop+0x10c>
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b04      	cmp	r3, #4
 8005470:	d104      	bne.n	800547c <HAL_TIM_PWM_Stop+0xd4>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800547a:	e01b      	b.n	80054b4 <HAL_TIM_PWM_Stop+0x10c>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d104      	bne.n	800548c <HAL_TIM_PWM_Stop+0xe4>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800548a:	e013      	b.n	80054b4 <HAL_TIM_PWM_Stop+0x10c>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d104      	bne.n	800549c <HAL_TIM_PWM_Stop+0xf4>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800549a:	e00b      	b.n	80054b4 <HAL_TIM_PWM_Stop+0x10c>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d104      	bne.n	80054ac <HAL_TIM_PWM_Stop+0x104>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054aa:	e003      	b.n	80054b4 <HAL_TIM_PWM_Stop+0x10c>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	40012c00 	.word	0x40012c00
 80054c4:	40013400 	.word	0x40013400
 80054c8:	40014000 	.word	0x40014000
 80054cc:	40014400 	.word	0x40014400
 80054d0:	40014800 	.word	0x40014800

080054d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e049      	b.n	800557a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc f952 	bl	80017a4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3304      	adds	r3, #4
 8005510:	4619      	mov	r1, r3
 8005512:	4610      	mov	r0, r2
 8005514:	f000 fe7a 	bl	800620c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800558e:	2300      	movs	r3, #0
 8005590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_TIM_IC_Start_IT+0x1e>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e023      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x66>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d104      	bne.n	80055b2 <HAL_TIM_IC_Start_IT+0x2e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	e01b      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x66>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_IC_Start_IT+0x3e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	e013      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x66>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b0c      	cmp	r3, #12
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_IC_Start_IT+0x4e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	e00b      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x66>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IC_Start_IT+0x5e>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	e003      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x66>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d104      	bne.n	80055fc <HAL_TIM_IC_Start_IT+0x78>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	e013      	b.n	8005624 <HAL_TIM_IC_Start_IT+0xa0>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d104      	bne.n	800560c <HAL_TIM_IC_Start_IT+0x88>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005608:	b2db      	uxtb	r3, r3
 800560a:	e00b      	b.n	8005624 <HAL_TIM_IC_Start_IT+0xa0>
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2b08      	cmp	r3, #8
 8005610:	d104      	bne.n	800561c <HAL_TIM_IC_Start_IT+0x98>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005618:	b2db      	uxtb	r3, r3
 800561a:	e003      	b.n	8005624 <HAL_TIM_IC_Start_IT+0xa0>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005622:	b2db      	uxtb	r3, r3
 8005624:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005626:	7bbb      	ldrb	r3, [r7, #14]
 8005628:	2b01      	cmp	r3, #1
 800562a:	d102      	bne.n	8005632 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800562c:	7b7b      	ldrb	r3, [r7, #13]
 800562e:	2b01      	cmp	r3, #1
 8005630:	d001      	beq.n	8005636 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0dd      	b.n	80057f2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d104      	bne.n	8005646 <HAL_TIM_IC_Start_IT+0xc2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005644:	e023      	b.n	800568e <HAL_TIM_IC_Start_IT+0x10a>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b04      	cmp	r3, #4
 800564a:	d104      	bne.n	8005656 <HAL_TIM_IC_Start_IT+0xd2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005654:	e01b      	b.n	800568e <HAL_TIM_IC_Start_IT+0x10a>
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b08      	cmp	r3, #8
 800565a:	d104      	bne.n	8005666 <HAL_TIM_IC_Start_IT+0xe2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005664:	e013      	b.n	800568e <HAL_TIM_IC_Start_IT+0x10a>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	2b0c      	cmp	r3, #12
 800566a:	d104      	bne.n	8005676 <HAL_TIM_IC_Start_IT+0xf2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005674:	e00b      	b.n	800568e <HAL_TIM_IC_Start_IT+0x10a>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b10      	cmp	r3, #16
 800567a:	d104      	bne.n	8005686 <HAL_TIM_IC_Start_IT+0x102>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005684:	e003      	b.n	800568e <HAL_TIM_IC_Start_IT+0x10a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2202      	movs	r2, #2
 800568a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <HAL_TIM_IC_Start_IT+0x11a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800569c:	e013      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x142>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b04      	cmp	r3, #4
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_IC_Start_IT+0x12a>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x142>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d104      	bne.n	80056be <HAL_TIM_IC_Start_IT+0x13a>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80056bc:	e003      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x142>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b0c      	cmp	r3, #12
 80056ca:	d841      	bhi.n	8005750 <HAL_TIM_IC_Start_IT+0x1cc>
 80056cc:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_TIM_IC_Start_IT+0x150>)
 80056ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d2:	bf00      	nop
 80056d4:	08005709 	.word	0x08005709
 80056d8:	08005751 	.word	0x08005751
 80056dc:	08005751 	.word	0x08005751
 80056e0:	08005751 	.word	0x08005751
 80056e4:	0800571b 	.word	0x0800571b
 80056e8:	08005751 	.word	0x08005751
 80056ec:	08005751 	.word	0x08005751
 80056f0:	08005751 	.word	0x08005751
 80056f4:	0800572d 	.word	0x0800572d
 80056f8:	08005751 	.word	0x08005751
 80056fc:	08005751 	.word	0x08005751
 8005700:	08005751 	.word	0x08005751
 8005704:	0800573f 	.word	0x0800573f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68da      	ldr	r2, [r3, #12]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f042 0202 	orr.w	r2, r2, #2
 8005716:	60da      	str	r2, [r3, #12]
      break;
 8005718:	e01d      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0204 	orr.w	r2, r2, #4
 8005728:	60da      	str	r2, [r3, #12]
      break;
 800572a:	e014      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f042 0208 	orr.w	r2, r2, #8
 800573a:	60da      	str	r2, [r3, #12]
      break;
 800573c:	e00b      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0210 	orr.w	r2, r2, #16
 800574c:	60da      	str	r2, [r3, #12]
      break;
 800574e:	e002      	b.n	8005756 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
      break;
 8005754:	bf00      	nop
  }

  if (status == HAL_OK)
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d149      	bne.n	80057f0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	6839      	ldr	r1, [r7, #0]
 8005764:	4618      	mov	r0, r3
 8005766:	f001 f9e5 	bl	8006b34 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a23      	ldr	r2, [pc, #140]	@ (80057fc <HAL_TIM_IC_Start_IT+0x278>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d01d      	beq.n	80057b0 <HAL_TIM_IC_Start_IT+0x22c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577c:	d018      	beq.n	80057b0 <HAL_TIM_IC_Start_IT+0x22c>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1f      	ldr	r2, [pc, #124]	@ (8005800 <HAL_TIM_IC_Start_IT+0x27c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d013      	beq.n	80057b0 <HAL_TIM_IC_Start_IT+0x22c>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	@ (8005804 <HAL_TIM_IC_Start_IT+0x280>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d00e      	beq.n	80057b0 <HAL_TIM_IC_Start_IT+0x22c>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1c      	ldr	r2, [pc, #112]	@ (8005808 <HAL_TIM_IC_Start_IT+0x284>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d009      	beq.n	80057b0 <HAL_TIM_IC_Start_IT+0x22c>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1a      	ldr	r2, [pc, #104]	@ (800580c <HAL_TIM_IC_Start_IT+0x288>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d004      	beq.n	80057b0 <HAL_TIM_IC_Start_IT+0x22c>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a19      	ldr	r2, [pc, #100]	@ (8005810 <HAL_TIM_IC_Start_IT+0x28c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d115      	bne.n	80057dc <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689a      	ldr	r2, [r3, #8]
 80057b6:	4b17      	ldr	r3, [pc, #92]	@ (8005814 <HAL_TIM_IC_Start_IT+0x290>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b06      	cmp	r3, #6
 80057c0:	d015      	beq.n	80057ee <HAL_TIM_IC_Start_IT+0x26a>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c8:	d011      	beq.n	80057ee <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f042 0201 	orr.w	r2, r2, #1
 80057d8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057da:	e008      	b.n	80057ee <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
 80057ec:	e000      	b.n	80057f0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ee:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40013400 	.word	0x40013400
 8005810:	40014000 	.word	0x40014000
 8005814:	00010007 	.word	0x00010007

08005818 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e097      	b.n	800595c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	d106      	bne.n	8005846 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7fc f819 	bl	8001878 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2202      	movs	r2, #2
 800584a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800585c:	f023 0307 	bic.w	r3, r3, #7
 8005860:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3304      	adds	r3, #4
 800586a:	4619      	mov	r1, r3
 800586c:	4610      	mov	r0, r2
 800586e:	f000 fccd 	bl	800620c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	021b      	lsls	r3, r3, #8
 80058aa:	4313      	orrs	r3, r2
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80058b8:	f023 030c 	bic.w	r3, r3, #12
 80058bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	4313      	orrs	r3, r2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	011a      	lsls	r2, r3, #4
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6a1b      	ldr	r3, [r3, #32]
 80058e6:	031b      	lsls	r3, r3, #12
 80058e8:	4313      	orrs	r3, r2
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80058f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	011b      	lsls	r3, r3, #4
 800590a:	4313      	orrs	r3, r2
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005974:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800597c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005984:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800598c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d110      	bne.n	80059b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005994:	7bfb      	ldrb	r3, [r7, #15]
 8005996:	2b01      	cmp	r3, #1
 8005998:	d102      	bne.n	80059a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800599a:	7b7b      	ldrb	r3, [r7, #13]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d001      	beq.n	80059a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e069      	b.n	8005a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b4:	e031      	b.n	8005a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d110      	bne.n	80059de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059bc:	7bbb      	ldrb	r3, [r7, #14]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059c2:	7b3b      	ldrb	r3, [r7, #12]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e055      	b.n	8005a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059dc:	e01d      	b.n	8005a1a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059de:	7bfb      	ldrb	r3, [r7, #15]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d108      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ea:	7b7b      	ldrb	r3, [r7, #13]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d102      	bne.n	80059f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059f0:	7b3b      	ldrb	r3, [r7, #12]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d001      	beq.n	80059fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e03e      	b.n	8005a78 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <HAL_TIM_Encoder_Start+0xc4>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d008      	beq.n	8005a38 <HAL_TIM_Encoder_Start+0xd4>
 8005a26:	e00f      	b.n	8005a48 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f87f 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005a36:	e016      	b.n	8005a66 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	2104      	movs	r1, #4
 8005a40:	4618      	mov	r0, r3
 8005a42:	f001 f877 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005a46:	e00e      	b.n	8005a66 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	2100      	movs	r1, #0
 8005a50:	4618      	mov	r0, r3
 8005a52:	f001 f86f 	bl	8006b34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2104      	movs	r1, #4
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f001 f868 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005a64:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <HAL_TIM_Encoder_Stop+0x18>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d008      	beq.n	8005aa8 <HAL_TIM_Encoder_Stop+0x28>
 8005a96:	e00f      	b.n	8005ab8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 f847 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005aa6:	e016      	b.n	8005ad6 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2200      	movs	r2, #0
 8005aae:	2104      	movs	r1, #4
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f001 f83f 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005ab6:	e00e      	b.n	8005ad6 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2100      	movs	r1, #0
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f001 f837 	bl	8006b34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2200      	movs	r2, #0
 8005acc:	2104      	movs	r1, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f830 	bl	8006b34 <TIM_CCxChannelCmd>
      break;
 8005ad4:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6a1a      	ldr	r2, [r3, #32]
 8005adc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10f      	bne.n	8005b06 <HAL_TIM_Encoder_Stop+0x86>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6a1a      	ldr	r2, [r3, #32]
 8005aec:	f240 4344 	movw	r3, #1092	@ 0x444
 8005af0:	4013      	ands	r3, r2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d107      	bne.n	8005b06 <HAL_TIM_Encoder_Stop+0x86>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f022 0201 	bic.w	r2, r2, #1
 8005b04:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_TIM_Encoder_Stop+0x92>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d148      	bne.n	8005ba4 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_Encoder_Stop+0xa2>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b20:	e023      	b.n	8005b6a <HAL_TIM_Encoder_Stop+0xea>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	d104      	bne.n	8005b32 <HAL_TIM_Encoder_Stop+0xb2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b30:	e01b      	b.n	8005b6a <HAL_TIM_Encoder_Stop+0xea>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d104      	bne.n	8005b42 <HAL_TIM_Encoder_Stop+0xc2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b40:	e013      	b.n	8005b6a <HAL_TIM_Encoder_Stop+0xea>
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b0c      	cmp	r3, #12
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_Encoder_Stop+0xd2>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005b50:	e00b      	b.n	8005b6a <HAL_TIM_Encoder_Stop+0xea>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_Encoder_Stop+0xe2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b60:	e003      	b.n	8005b6a <HAL_TIM_Encoder_Stop+0xea>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d104      	bne.n	8005b7a <HAL_TIM_Encoder_Stop+0xfa>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b78:	e024      	b.n	8005bc4 <HAL_TIM_Encoder_Stop+0x144>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_Encoder_Stop+0x10a>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b88:	e01c      	b.n	8005bc4 <HAL_TIM_Encoder_Stop+0x144>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_Encoder_Stop+0x11a>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b98:	e014      	b.n	8005bc4 <HAL_TIM_Encoder_Stop+0x144>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005ba2:	e00f      	b.n	8005bc4 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d020      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d01b      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f06f 0202 	mvn.w	r2, #2
 8005c02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	f003 0303 	and.w	r3, r3, #3
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fb fb83 	bl	8001324 <HAL_TIM_IC_CaptureCallback>
 8005c1e:	e005      	b.n	8005c2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fad5 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 fadc 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d020      	beq.n	8005c7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d01b      	beq.n	8005c7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0204 	mvn.w	r2, #4
 8005c4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7fb fb5d 	bl	8001324 <HAL_TIM_IC_CaptureCallback>
 8005c6a:	e005      	b.n	8005c78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 faaf 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fab6 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f003 0308 	and.w	r3, r3, #8
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d020      	beq.n	8005cca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d01b      	beq.n	8005cca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f06f 0208 	mvn.w	r2, #8
 8005c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d003      	beq.n	8005cb8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7fb fb37 	bl	8001324 <HAL_TIM_IC_CaptureCallback>
 8005cb6:	e005      	b.n	8005cc4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fa89 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fa90 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d01b      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0210 	mvn.w	r2, #16
 8005ce6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2208      	movs	r2, #8
 8005cec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69db      	ldr	r3, [r3, #28]
 8005cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7fb fb11 	bl	8001324 <HAL_TIM_IC_CaptureCallback>
 8005d02:	e005      	b.n	8005d10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fa63 	bl	80061d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa6a 	bl	80061e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0201 	mvn.w	r2, #1
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 fa41 	bl	80061bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d007      	beq.n	8005d5e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 ffa3 	bl	8006ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00c      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d007      	beq.n	8005d82 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 ff9b 	bl	8006cb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00c      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa29 	bl	80061f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00c      	beq.n	8005dca <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d007      	beq.n	8005dca <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f06f 0220 	mvn.w	r2, #32
 8005dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 ff63 	bl	8006c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b086      	sub	sp, #24
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e088      	b.n	8005f02 <HAL_TIM_IC_ConfigChannel+0x130>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11b      	bne.n	8005e36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005e0e:	f000 fd6d 	bl	80068ec <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	699a      	ldr	r2, [r3, #24]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 020c 	bic.w	r2, r2, #12
 8005e20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6999      	ldr	r1, [r3, #24]
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
 8005e34:	e060      	b.n	8005ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d11c      	bne.n	8005e76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005e4c:	f000 fdbc 	bl	80069c8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6999      	ldr	r1, [r3, #24]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
 8005e74:	e040      	b.n	8005ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d11b      	bne.n	8005eb4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005e8c:	f000 fdd9 	bl	8006a42 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 020c 	bic.w	r2, r2, #12
 8005e9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	69d9      	ldr	r1, [r3, #28]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	689a      	ldr	r2, [r3, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	61da      	str	r2, [r3, #28]
 8005eb2:	e021      	b.n	8005ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b0c      	cmp	r3, #12
 8005eb8:	d11c      	bne.n	8005ef4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005eca:	f000 fdf6 	bl	8006aba <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69da      	ldr	r2, [r3, #28]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005edc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69d9      	ldr	r1, [r3, #28]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	021a      	lsls	r2, r3, #8
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	61da      	str	r2, [r3, #28]
 8005ef2:	e001      	b.n	8005ef8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3718      	adds	r7, #24
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
	...

08005f0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b086      	sub	sp, #24
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d101      	bne.n	8005f2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f26:	2302      	movs	r3, #2
 8005f28:	e0ff      	b.n	800612a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b14      	cmp	r3, #20
 8005f36:	f200 80f0 	bhi.w	800611a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f40:	08005f95 	.word	0x08005f95
 8005f44:	0800611b 	.word	0x0800611b
 8005f48:	0800611b 	.word	0x0800611b
 8005f4c:	0800611b 	.word	0x0800611b
 8005f50:	08005fd5 	.word	0x08005fd5
 8005f54:	0800611b 	.word	0x0800611b
 8005f58:	0800611b 	.word	0x0800611b
 8005f5c:	0800611b 	.word	0x0800611b
 8005f60:	08006017 	.word	0x08006017
 8005f64:	0800611b 	.word	0x0800611b
 8005f68:	0800611b 	.word	0x0800611b
 8005f6c:	0800611b 	.word	0x0800611b
 8005f70:	08006057 	.word	0x08006057
 8005f74:	0800611b 	.word	0x0800611b
 8005f78:	0800611b 	.word	0x0800611b
 8005f7c:	0800611b 	.word	0x0800611b
 8005f80:	08006099 	.word	0x08006099
 8005f84:	0800611b 	.word	0x0800611b
 8005f88:	0800611b 	.word	0x0800611b
 8005f8c:	0800611b 	.word	0x0800611b
 8005f90:	080060d9 	.word	0x080060d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f9d0 	bl	8006340 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699a      	ldr	r2, [r3, #24]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0208 	orr.w	r2, r2, #8
 8005fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	699a      	ldr	r2, [r3, #24]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f022 0204 	bic.w	r2, r2, #4
 8005fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6999      	ldr	r1, [r3, #24]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	691a      	ldr	r2, [r3, #16]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	619a      	str	r2, [r3, #24]
      break;
 8005fd2:	e0a5      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 fa40 	bl	8006460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	619a      	str	r2, [r3, #24]
      break;
 8006014:	e084      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68b9      	ldr	r1, [r7, #8]
 800601c:	4618      	mov	r0, r3
 800601e:	f000 faa9 	bl	8006574 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f042 0208 	orr.w	r2, r2, #8
 8006030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	69da      	ldr	r2, [r3, #28]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0204 	bic.w	r2, r2, #4
 8006040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69d9      	ldr	r1, [r3, #28]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	61da      	str	r2, [r3, #28]
      break;
 8006054:	e064      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fb11 	bl	8006684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69d9      	ldr	r1, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	021a      	lsls	r2, r3, #8
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	61da      	str	r2, [r3, #28]
      break;
 8006096:	e043      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	4618      	mov	r0, r3
 80060a0:	f000 fb5a 	bl	8006758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f042 0208 	orr.w	r2, r2, #8
 80060b2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0204 	bic.w	r2, r2, #4
 80060c2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	691a      	ldr	r2, [r3, #16]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80060d6:	e023      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fb9e 	bl	8006820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006102:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	021a      	lsls	r2, r3, #8
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006118:	e002      	b.n	8006120 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
      break;
 800611e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006128:	7dfb      	ldrb	r3, [r7, #23]
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop

08006134 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b0c      	cmp	r3, #12
 8006146:	d831      	bhi.n	80061ac <HAL_TIM_ReadCapturedValue+0x78>
 8006148:	a201      	add	r2, pc, #4	@ (adr r2, 8006150 <HAL_TIM_ReadCapturedValue+0x1c>)
 800614a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614e:	bf00      	nop
 8006150:	08006185 	.word	0x08006185
 8006154:	080061ad 	.word	0x080061ad
 8006158:	080061ad 	.word	0x080061ad
 800615c:	080061ad 	.word	0x080061ad
 8006160:	0800618f 	.word	0x0800618f
 8006164:	080061ad 	.word	0x080061ad
 8006168:	080061ad 	.word	0x080061ad
 800616c:	080061ad 	.word	0x080061ad
 8006170:	08006199 	.word	0x08006199
 8006174:	080061ad 	.word	0x080061ad
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080061ad 	.word	0x080061ad
 8006180:	080061a3 	.word	0x080061a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800618a:	60fb      	str	r3, [r7, #12]

      break;
 800618c:	e00f      	b.n	80061ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006194:	60fb      	str	r3, [r7, #12]

      break;
 8006196:	e00a      	b.n	80061ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800619e:	60fb      	str	r3, [r7, #12]

      break;
 80061a0:	e005      	b.n	80061ae <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a8:	60fb      	str	r3, [r7, #12]

      break;
 80061aa:	e000      	b.n	80061ae <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80061ac:	bf00      	nop
  }

  return tmpreg;
 80061ae:	68fb      	ldr	r3, [r7, #12]
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a40      	ldr	r2, [pc, #256]	@ (8006320 <TIM_Base_SetConfig+0x114>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800622a:	d00f      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3d      	ldr	r2, [pc, #244]	@ (8006324 <TIM_Base_SetConfig+0x118>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d00b      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3c      	ldr	r2, [pc, #240]	@ (8006328 <TIM_Base_SetConfig+0x11c>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d007      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3b      	ldr	r2, [pc, #236]	@ (800632c <TIM_Base_SetConfig+0x120>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d003      	beq.n	800624c <TIM_Base_SetConfig+0x40>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a3a      	ldr	r2, [pc, #232]	@ (8006330 <TIM_Base_SetConfig+0x124>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d108      	bne.n	800625e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a2f      	ldr	r2, [pc, #188]	@ (8006320 <TIM_Base_SetConfig+0x114>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d01f      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800626c:	d01b      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2c      	ldr	r2, [pc, #176]	@ (8006324 <TIM_Base_SetConfig+0x118>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d017      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2b      	ldr	r2, [pc, #172]	@ (8006328 <TIM_Base_SetConfig+0x11c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a2a      	ldr	r2, [pc, #168]	@ (800632c <TIM_Base_SetConfig+0x120>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00f      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a29      	ldr	r2, [pc, #164]	@ (8006330 <TIM_Base_SetConfig+0x124>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00b      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a28      	ldr	r2, [pc, #160]	@ (8006334 <TIM_Base_SetConfig+0x128>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a27      	ldr	r2, [pc, #156]	@ (8006338 <TIM_Base_SetConfig+0x12c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_Base_SetConfig+0x9a>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a26      	ldr	r2, [pc, #152]	@ (800633c <TIM_Base_SetConfig+0x130>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d108      	bne.n	80062b8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a10      	ldr	r2, [pc, #64]	@ (8006320 <TIM_Base_SetConfig+0x114>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00f      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <TIM_Base_SetConfig+0x124>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00b      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a11      	ldr	r2, [pc, #68]	@ (8006334 <TIM_Base_SetConfig+0x128>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a10      	ldr	r2, [pc, #64]	@ (8006338 <TIM_Base_SetConfig+0x12c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_Base_SetConfig+0xf8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a0f      	ldr	r2, [pc, #60]	@ (800633c <TIM_Base_SetConfig+0x130>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d103      	bne.n	800630c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	691a      	ldr	r2, [r3, #16]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	615a      	str	r2, [r3, #20]
}
 8006312:	bf00      	nop
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40013400 	.word	0x40013400
 8006334:	40014000 	.word	0x40014000
 8006338:	40014400 	.word	0x40014400
 800633c:	40014800 	.word	0x40014800

08006340 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a1b      	ldr	r3, [r3, #32]
 8006354:	f023 0201 	bic.w	r2, r3, #1
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800636e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f023 0303 	bic.w	r3, r3, #3
 800637a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	f023 0302 	bic.w	r3, r3, #2
 800638c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a2c      	ldr	r2, [pc, #176]	@ (800644c <TIM_OC1_SetConfig+0x10c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d00f      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a2b      	ldr	r2, [pc, #172]	@ (8006450 <TIM_OC1_SetConfig+0x110>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00b      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a2a      	ldr	r2, [pc, #168]	@ (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d007      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a29      	ldr	r2, [pc, #164]	@ (8006458 <TIM_OC1_SetConfig+0x118>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d003      	beq.n	80063c0 <TIM_OC1_SetConfig+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a28      	ldr	r2, [pc, #160]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d10c      	bne.n	80063da <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f023 0308 	bic.w	r3, r3, #8
 80063c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 0304 	bic.w	r3, r3, #4
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	@ (800644c <TIM_OC1_SetConfig+0x10c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00f      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006450 <TIM_OC1_SetConfig+0x110>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d00b      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	@ (8006454 <TIM_OC1_SetConfig+0x114>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d007      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	@ (8006458 <TIM_OC1_SetConfig+0x118>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d003      	beq.n	8006402 <TIM_OC1_SetConfig+0xc2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a17      	ldr	r2, [pc, #92]	@ (800645c <TIM_OC1_SetConfig+0x11c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d111      	bne.n	8006426 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	4313      	orrs	r3, r2
 8006424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	621a      	str	r2, [r3, #32]
}
 8006440:	bf00      	nop
 8006442:	371c      	adds	r7, #28
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40013400 	.word	0x40013400
 8006454:	40014000 	.word	0x40014000
 8006458:	40014400 	.word	0x40014400
 800645c:	40014800 	.word	0x40014800

08006460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a1b      	ldr	r3, [r3, #32]
 800646e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f023 0210 	bic.w	r2, r3, #16
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800648e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800649a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	021b      	lsls	r3, r3, #8
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0320 	bic.w	r3, r3, #32
 80064ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a28      	ldr	r2, [pc, #160]	@ (8006560 <TIM_OC2_SetConfig+0x100>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d003      	beq.n	80064cc <TIM_OC2_SetConfig+0x6c>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a27      	ldr	r2, [pc, #156]	@ (8006564 <TIM_OC2_SetConfig+0x104>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d10d      	bne.n	80064e8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	68db      	ldr	r3, [r3, #12]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006560 <TIM_OC2_SetConfig+0x100>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a1c      	ldr	r2, [pc, #112]	@ (8006564 <TIM_OC2_SetConfig+0x104>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <TIM_OC2_SetConfig+0x108>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a1a      	ldr	r2, [pc, #104]	@ (800656c <TIM_OC2_SetConfig+0x10c>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC2_SetConfig+0xb0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a19      	ldr	r2, [pc, #100]	@ (8006570 <TIM_OC2_SetConfig+0x110>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d113      	bne.n	8006538 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006516:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	695b      	ldr	r3, [r3, #20]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	699b      	ldr	r3, [r3, #24]
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	621a      	str	r2, [r3, #32]
}
 8006552:	bf00      	nop
 8006554:	371c      	adds	r7, #28
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40012c00 	.word	0x40012c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a1b      	ldr	r3, [r3, #32]
 8006588:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0303 	bic.w	r3, r3, #3
 80065ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	021b      	lsls	r3, r3, #8
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	@ (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d003      	beq.n	80065de <TIM_OC3_SetConfig+0x6a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <TIM_OC3_SetConfig+0x100>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d10d      	bne.n	80065fa <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	021b      	lsls	r3, r3, #8
 80065ec:	697a      	ldr	r2, [r7, #20]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006670 <TIM_OC3_SetConfig+0xfc>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00f      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a1b      	ldr	r2, [pc, #108]	@ (8006674 <TIM_OC3_SetConfig+0x100>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d00b      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a1a      	ldr	r2, [pc, #104]	@ (8006678 <TIM_OC3_SetConfig+0x104>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d007      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a19      	ldr	r2, [pc, #100]	@ (800667c <TIM_OC3_SetConfig+0x108>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d003      	beq.n	8006622 <TIM_OC3_SetConfig+0xae>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a18      	ldr	r2, [pc, #96]	@ (8006680 <TIM_OC3_SetConfig+0x10c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d113      	bne.n	800664a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	693a      	ldr	r2, [r7, #16]
 800664e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	621a      	str	r2, [r3, #32]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	40012c00 	.word	0x40012c00
 8006674:	40013400 	.word	0x40013400
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	031b      	lsls	r3, r3, #12
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4313      	orrs	r3, r2
 80066de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a18      	ldr	r2, [pc, #96]	@ (8006744 <TIM_OC4_SetConfig+0xc0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00f      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a17      	ldr	r2, [pc, #92]	@ (8006748 <TIM_OC4_SetConfig+0xc4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00b      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a16      	ldr	r2, [pc, #88]	@ (800674c <TIM_OC4_SetConfig+0xc8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d007      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a15      	ldr	r2, [pc, #84]	@ (8006750 <TIM_OC4_SetConfig+0xcc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d003      	beq.n	8006708 <TIM_OC4_SetConfig+0x84>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a14      	ldr	r2, [pc, #80]	@ (8006754 <TIM_OC4_SetConfig+0xd0>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d109      	bne.n	800671c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800670e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	695b      	ldr	r3, [r3, #20]
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	693a      	ldr	r2, [r7, #16]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	40012c00 	.word	0x40012c00
 8006748:	40013400 	.word	0x40013400
 800674c:	40014000 	.word	0x40014000
 8006750:	40014400 	.word	0x40014400
 8006754:	40014800 	.word	0x40014800

08006758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006758:	b480      	push	{r7}
 800675a:	b087      	sub	sp, #28
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800678a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800679c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	041b      	lsls	r3, r3, #16
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4a17      	ldr	r2, [pc, #92]	@ (800680c <TIM_OC5_SetConfig+0xb4>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00f      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <TIM_OC5_SetConfig+0xb8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d00b      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <TIM_OC5_SetConfig+0xbc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d007      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a14      	ldr	r2, [pc, #80]	@ (8006818 <TIM_OC5_SetConfig+0xc0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d003      	beq.n	80067d2 <TIM_OC5_SetConfig+0x7a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a13      	ldr	r2, [pc, #76]	@ (800681c <TIM_OC5_SetConfig+0xc4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d109      	bne.n	80067e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40012c00 	.word	0x40012c00
 8006810:	40013400 	.word	0x40013400
 8006814:	40014000 	.word	0x40014000
 8006818:	40014400 	.word	0x40014400
 800681c:	40014800 	.word	0x40014800

08006820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	021b      	lsls	r3, r3, #8
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	4313      	orrs	r3, r2
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	051b      	lsls	r3, r3, #20
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a18      	ldr	r2, [pc, #96]	@ (80068d8 <TIM_OC6_SetConfig+0xb8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00f      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a17      	ldr	r2, [pc, #92]	@ (80068dc <TIM_OC6_SetConfig+0xbc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d00b      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a16      	ldr	r2, [pc, #88]	@ (80068e0 <TIM_OC6_SetConfig+0xc0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d007      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a15      	ldr	r2, [pc, #84]	@ (80068e4 <TIM_OC6_SetConfig+0xc4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC6_SetConfig+0x7c>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a14      	ldr	r2, [pc, #80]	@ (80068e8 <TIM_OC6_SetConfig+0xc8>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d109      	bne.n	80068b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	029b      	lsls	r3, r3, #10
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40012c00 	.word	0x40012c00
 80068dc:	40013400 	.word	0x40013400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f023 0201 	bic.w	r2, r3, #1
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	4a26      	ldr	r2, [pc, #152]	@ (80069b0 <TIM_TI1_SetConfig+0xc4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d017      	beq.n	800694a <TIM_TI1_SetConfig+0x5e>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006920:	d013      	beq.n	800694a <TIM_TI1_SetConfig+0x5e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4a23      	ldr	r2, [pc, #140]	@ (80069b4 <TIM_TI1_SetConfig+0xc8>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_TI1_SetConfig+0x5e>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a22      	ldr	r2, [pc, #136]	@ (80069b8 <TIM_TI1_SetConfig+0xcc>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_TI1_SetConfig+0x5e>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	4a21      	ldr	r2, [pc, #132]	@ (80069bc <TIM_TI1_SetConfig+0xd0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_TI1_SetConfig+0x5e>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	4a20      	ldr	r2, [pc, #128]	@ (80069c0 <TIM_TI1_SetConfig+0xd4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_TI1_SetConfig+0x5e>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4a1f      	ldr	r2, [pc, #124]	@ (80069c4 <TIM_TI1_SetConfig+0xd8>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <TIM_TI1_SetConfig+0x62>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <TIM_TI1_SetConfig+0x64>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0303 	bic.w	r3, r3, #3
 800695a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800695c:	697a      	ldr	r2, [r7, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e003      	b.n	800696e <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f043 0301 	orr.w	r3, r3, #1
 800696c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	011b      	lsls	r3, r3, #4
 800697a:	b2db      	uxtb	r3, r3
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	4313      	orrs	r3, r2
 8006980:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f023 030a 	bic.w	r3, r3, #10
 8006988:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f003 030a 	and.w	r3, r3, #10
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	bf00      	nop
 80069a4:	371c      	adds	r7, #28
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40012c00 	.word	0x40012c00
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40013400 	.word	0x40013400
 80069c4:	40014000 	.word	0x40014000

080069c8 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
 80069d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6a1b      	ldr	r3, [r3, #32]
 80069e0:	f023 0210 	bic.w	r2, r3, #16
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	693a      	ldr	r2, [r7, #16]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	031b      	lsls	r3, r3, #12
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a1a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	011b      	lsls	r3, r3, #4
 8006a20:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	621a      	str	r2, [r3, #32]
}
 8006a36:	bf00      	nop
 8006a38:	371c      	adds	r7, #28
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b087      	sub	sp, #28
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	60f8      	str	r0, [r7, #12]
 8006a4a:	60b9      	str	r1, [r7, #8]
 8006a4c:	607a      	str	r2, [r7, #4]
 8006a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f023 0303 	bic.w	r3, r3, #3
 8006a6e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006a92:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	021b      	lsls	r3, r3, #8
 8006a98:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	621a      	str	r2, [r3, #32]
}
 8006aae:	bf00      	nop
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aba:	b480      	push	{r7}
 8006abc:	b087      	sub	sp, #28
 8006abe:	af00      	add	r7, sp, #0
 8006ac0:	60f8      	str	r0, [r7, #12]
 8006ac2:	60b9      	str	r1, [r7, #8]
 8006ac4:	607a      	str	r2, [r7, #4]
 8006ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	69db      	ldr	r3, [r3, #28]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006af8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	031b      	lsls	r3, r3, #12
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	031b      	lsls	r3, r3, #12
 8006b12:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006b16:	697a      	ldr	r2, [r7, #20]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	697a      	ldr	r2, [r7, #20]
 8006b26:	621a      	str	r2, [r3, #32]
}
 8006b28:	bf00      	nop
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b087      	sub	sp, #28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	2201      	movs	r2, #1
 8006b48:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	43db      	mvns	r3, r3
 8006b56:	401a      	ands	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a1a      	ldr	r2, [r3, #32]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f003 031f 	and.w	r3, r3, #31
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	fa01 f303 	lsl.w	r3, r1, r3
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	621a      	str	r2, [r3, #32]
}
 8006b72:	bf00      	nop
 8006b74:	371c      	adds	r7, #28
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b94:	2302      	movs	r3, #2
 8006b96:	e068      	b.n	8006c6a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2202      	movs	r2, #2
 8006ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d004      	beq.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2d      	ldr	r2, [pc, #180]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d108      	bne.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006be4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	@ (8006c78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d01d      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c0a:	d018      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1b      	ldr	r2, [pc, #108]	@ (8006c80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d00e      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a18      	ldr	r2, [pc, #96]	@ (8006c88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d009      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a13      	ldr	r2, [pc, #76]	@ (8006c7c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d004      	beq.n	8006c3e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a14      	ldr	r2, [pc, #80]	@ (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10c      	bne.n	8006c58 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40012c00 	.word	0x40012c00
 8006c7c:	40013400 	.word	0x40013400
 8006c80:	40000400 	.word	0x40000400
 8006c84:	40000800 	.word	0x40000800
 8006c88:	40000c00 	.word	0x40000c00
 8006c8c:	40014000 	.word	0x40014000

08006c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d101      	bne.n	8006cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e040      	b.n	8006d60 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d106      	bne.n	8006cf4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7fa fe3a 	bl	8001968 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2224      	movs	r2, #36	@ 0x24
 8006cf8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0201 	bic.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 fb6a 	bl	80073ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f8af 	bl	8006e7c <UART_SetConfig>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e01b      	b.n	8006d60 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fbe9 	bl	8007530 <UART_CheckIdleState>
 8006d5e:	4603      	mov	r3, r0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08a      	sub	sp, #40	@ 0x28
 8006d6c:	af02      	add	r7, sp, #8
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006d7c:	2b20      	cmp	r3, #32
 8006d7e:	d177      	bne.n	8006e70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <HAL_UART_Transmit+0x24>
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e070      	b.n	8006e72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2221      	movs	r2, #33	@ 0x21
 8006d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d9e:	f7fa ffc1 	bl	8001d24 <HAL_GetTick>
 8006da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	88fa      	ldrh	r2, [r7, #6]
 8006da8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	88fa      	ldrh	r2, [r7, #6]
 8006db0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dbc:	d108      	bne.n	8006dd0 <HAL_UART_Transmit+0x68>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d104      	bne.n	8006dd0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	61bb      	str	r3, [r7, #24]
 8006dce:	e003      	b.n	8006dd8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006dd8:	e02f      	b.n	8006e3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	2200      	movs	r2, #0
 8006de2:	2180      	movs	r1, #128	@ 0x80
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fc4b 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2220      	movs	r2, #32
 8006df4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e03b      	b.n	8006e72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d10b      	bne.n	8006e18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	881a      	ldrh	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e0c:	b292      	uxth	r2, r2
 8006e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	3302      	adds	r3, #2
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e007      	b.n	8006e28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	781a      	ldrb	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	3301      	adds	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	3b01      	subs	r3, #1
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1c9      	bne.n	8006dda <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	9300      	str	r3, [sp, #0]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2140      	movs	r1, #64	@ 0x40
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fc15 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d004      	beq.n	8006e66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2220      	movs	r2, #32
 8006e60:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e005      	b.n	8006e72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e000      	b.n	8006e72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006e70:	2302      	movs	r3, #2
  }
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
	...

08006e7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e80:	b08a      	sub	sp, #40	@ 0x28
 8006e82:	af00      	add	r7, sp, #0
 8006e84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4ba4      	ldr	r3, [pc, #656]	@ (800713c <UART_SetConfig+0x2c0>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a99      	ldr	r2, [pc, #612]	@ (8007140 <UART_SetConfig+0x2c4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d004      	beq.n	8006ee8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a90      	ldr	r2, [pc, #576]	@ (8007144 <UART_SetConfig+0x2c8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d126      	bne.n	8006f54 <UART_SetConfig+0xd8>
 8006f06:	4b90      	ldr	r3, [pc, #576]	@ (8007148 <UART_SetConfig+0x2cc>)
 8006f08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f0c:	f003 0303 	and.w	r3, r3, #3
 8006f10:	2b03      	cmp	r3, #3
 8006f12:	d81b      	bhi.n	8006f4c <UART_SetConfig+0xd0>
 8006f14:	a201      	add	r2, pc, #4	@ (adr r2, 8006f1c <UART_SetConfig+0xa0>)
 8006f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f1a:	bf00      	nop
 8006f1c:	08006f2d 	.word	0x08006f2d
 8006f20:	08006f3d 	.word	0x08006f3d
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f32:	e116      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006f34:	2302      	movs	r3, #2
 8006f36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f3a:	e112      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f42:	e10e      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f4a:	e10a      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f52:	e106      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a7c      	ldr	r2, [pc, #496]	@ (800714c <UART_SetConfig+0x2d0>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d138      	bne.n	8006fd0 <UART_SetConfig+0x154>
 8006f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8007148 <UART_SetConfig+0x2cc>)
 8006f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f64:	f003 030c 	and.w	r3, r3, #12
 8006f68:	2b0c      	cmp	r3, #12
 8006f6a:	d82d      	bhi.n	8006fc8 <UART_SetConfig+0x14c>
 8006f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f74 <UART_SetConfig+0xf8>)
 8006f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f72:	bf00      	nop
 8006f74:	08006fa9 	.word	0x08006fa9
 8006f78:	08006fc9 	.word	0x08006fc9
 8006f7c:	08006fc9 	.word	0x08006fc9
 8006f80:	08006fc9 	.word	0x08006fc9
 8006f84:	08006fb9 	.word	0x08006fb9
 8006f88:	08006fc9 	.word	0x08006fc9
 8006f8c:	08006fc9 	.word	0x08006fc9
 8006f90:	08006fc9 	.word	0x08006fc9
 8006f94:	08006fb1 	.word	0x08006fb1
 8006f98:	08006fc9 	.word	0x08006fc9
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	08006fc9 	.word	0x08006fc9
 8006fa4:	08006fc1 	.word	0x08006fc1
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fae:	e0d8      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fb6:	e0d4      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006fb8:	2304      	movs	r3, #4
 8006fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fbe:	e0d0      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006fc0:	2308      	movs	r3, #8
 8006fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fc6:	e0cc      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006fc8:	2310      	movs	r3, #16
 8006fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fce:	e0c8      	b.n	8007162 <UART_SetConfig+0x2e6>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a5e      	ldr	r2, [pc, #376]	@ (8007150 <UART_SetConfig+0x2d4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d125      	bne.n	8007026 <UART_SetConfig+0x1aa>
 8006fda:	4b5b      	ldr	r3, [pc, #364]	@ (8007148 <UART_SetConfig+0x2cc>)
 8006fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fe0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006fe4:	2b30      	cmp	r3, #48	@ 0x30
 8006fe6:	d016      	beq.n	8007016 <UART_SetConfig+0x19a>
 8006fe8:	2b30      	cmp	r3, #48	@ 0x30
 8006fea:	d818      	bhi.n	800701e <UART_SetConfig+0x1a2>
 8006fec:	2b20      	cmp	r3, #32
 8006fee:	d00a      	beq.n	8007006 <UART_SetConfig+0x18a>
 8006ff0:	2b20      	cmp	r3, #32
 8006ff2:	d814      	bhi.n	800701e <UART_SetConfig+0x1a2>
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <UART_SetConfig+0x182>
 8006ff8:	2b10      	cmp	r3, #16
 8006ffa:	d008      	beq.n	800700e <UART_SetConfig+0x192>
 8006ffc:	e00f      	b.n	800701e <UART_SetConfig+0x1a2>
 8006ffe:	2300      	movs	r3, #0
 8007000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007004:	e0ad      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007006:	2302      	movs	r3, #2
 8007008:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800700c:	e0a9      	b.n	8007162 <UART_SetConfig+0x2e6>
 800700e:	2304      	movs	r3, #4
 8007010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007014:	e0a5      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007016:	2308      	movs	r3, #8
 8007018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800701c:	e0a1      	b.n	8007162 <UART_SetConfig+0x2e6>
 800701e:	2310      	movs	r3, #16
 8007020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007024:	e09d      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a4a      	ldr	r2, [pc, #296]	@ (8007154 <UART_SetConfig+0x2d8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d125      	bne.n	800707c <UART_SetConfig+0x200>
 8007030:	4b45      	ldr	r3, [pc, #276]	@ (8007148 <UART_SetConfig+0x2cc>)
 8007032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007036:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800703a:	2bc0      	cmp	r3, #192	@ 0xc0
 800703c:	d016      	beq.n	800706c <UART_SetConfig+0x1f0>
 800703e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007040:	d818      	bhi.n	8007074 <UART_SetConfig+0x1f8>
 8007042:	2b80      	cmp	r3, #128	@ 0x80
 8007044:	d00a      	beq.n	800705c <UART_SetConfig+0x1e0>
 8007046:	2b80      	cmp	r3, #128	@ 0x80
 8007048:	d814      	bhi.n	8007074 <UART_SetConfig+0x1f8>
 800704a:	2b00      	cmp	r3, #0
 800704c:	d002      	beq.n	8007054 <UART_SetConfig+0x1d8>
 800704e:	2b40      	cmp	r3, #64	@ 0x40
 8007050:	d008      	beq.n	8007064 <UART_SetConfig+0x1e8>
 8007052:	e00f      	b.n	8007074 <UART_SetConfig+0x1f8>
 8007054:	2300      	movs	r3, #0
 8007056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705a:	e082      	b.n	8007162 <UART_SetConfig+0x2e6>
 800705c:	2302      	movs	r3, #2
 800705e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007062:	e07e      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007064:	2304      	movs	r3, #4
 8007066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800706a:	e07a      	b.n	8007162 <UART_SetConfig+0x2e6>
 800706c:	2308      	movs	r3, #8
 800706e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007072:	e076      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007074:	2310      	movs	r3, #16
 8007076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800707a:	e072      	b.n	8007162 <UART_SetConfig+0x2e6>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a35      	ldr	r2, [pc, #212]	@ (8007158 <UART_SetConfig+0x2dc>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d12a      	bne.n	80070dc <UART_SetConfig+0x260>
 8007086:	4b30      	ldr	r3, [pc, #192]	@ (8007148 <UART_SetConfig+0x2cc>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007094:	d01a      	beq.n	80070cc <UART_SetConfig+0x250>
 8007096:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800709a:	d81b      	bhi.n	80070d4 <UART_SetConfig+0x258>
 800709c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a0:	d00c      	beq.n	80070bc <UART_SetConfig+0x240>
 80070a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070a6:	d815      	bhi.n	80070d4 <UART_SetConfig+0x258>
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <UART_SetConfig+0x238>
 80070ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070b0:	d008      	beq.n	80070c4 <UART_SetConfig+0x248>
 80070b2:	e00f      	b.n	80070d4 <UART_SetConfig+0x258>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ba:	e052      	b.n	8007162 <UART_SetConfig+0x2e6>
 80070bc:	2302      	movs	r3, #2
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070c2:	e04e      	b.n	8007162 <UART_SetConfig+0x2e6>
 80070c4:	2304      	movs	r3, #4
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070ca:	e04a      	b.n	8007162 <UART_SetConfig+0x2e6>
 80070cc:	2308      	movs	r3, #8
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070d2:	e046      	b.n	8007162 <UART_SetConfig+0x2e6>
 80070d4:	2310      	movs	r3, #16
 80070d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070da:	e042      	b.n	8007162 <UART_SetConfig+0x2e6>
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a17      	ldr	r2, [pc, #92]	@ (8007140 <UART_SetConfig+0x2c4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d13a      	bne.n	800715c <UART_SetConfig+0x2e0>
 80070e6:	4b18      	ldr	r3, [pc, #96]	@ (8007148 <UART_SetConfig+0x2cc>)
 80070e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80070f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070f4:	d01a      	beq.n	800712c <UART_SetConfig+0x2b0>
 80070f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80070fa:	d81b      	bhi.n	8007134 <UART_SetConfig+0x2b8>
 80070fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007100:	d00c      	beq.n	800711c <UART_SetConfig+0x2a0>
 8007102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007106:	d815      	bhi.n	8007134 <UART_SetConfig+0x2b8>
 8007108:	2b00      	cmp	r3, #0
 800710a:	d003      	beq.n	8007114 <UART_SetConfig+0x298>
 800710c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007110:	d008      	beq.n	8007124 <UART_SetConfig+0x2a8>
 8007112:	e00f      	b.n	8007134 <UART_SetConfig+0x2b8>
 8007114:	2300      	movs	r3, #0
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800711a:	e022      	b.n	8007162 <UART_SetConfig+0x2e6>
 800711c:	2302      	movs	r3, #2
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007122:	e01e      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007124:	2304      	movs	r3, #4
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800712a:	e01a      	b.n	8007162 <UART_SetConfig+0x2e6>
 800712c:	2308      	movs	r3, #8
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007132:	e016      	b.n	8007162 <UART_SetConfig+0x2e6>
 8007134:	2310      	movs	r3, #16
 8007136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800713a:	e012      	b.n	8007162 <UART_SetConfig+0x2e6>
 800713c:	efff69f3 	.word	0xefff69f3
 8007140:	40008000 	.word	0x40008000
 8007144:	40013800 	.word	0x40013800
 8007148:	40021000 	.word	0x40021000
 800714c:	40004400 	.word	0x40004400
 8007150:	40004800 	.word	0x40004800
 8007154:	40004c00 	.word	0x40004c00
 8007158:	40005000 	.word	0x40005000
 800715c:	2310      	movs	r3, #16
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a9f      	ldr	r2, [pc, #636]	@ (80073e4 <UART_SetConfig+0x568>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d17a      	bne.n	8007262 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800716c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007170:	2b08      	cmp	r3, #8
 8007172:	d824      	bhi.n	80071be <UART_SetConfig+0x342>
 8007174:	a201      	add	r2, pc, #4	@ (adr r2, 800717c <UART_SetConfig+0x300>)
 8007176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717a:	bf00      	nop
 800717c:	080071a1 	.word	0x080071a1
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071af 	.word	0x080071af
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071bf 	.word	0x080071bf
 8007198:	080071bf 	.word	0x080071bf
 800719c:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a0:	f7fd fa5c 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 80071a4:	61f8      	str	r0, [r7, #28]
        break;
 80071a6:	e010      	b.n	80071ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b8f      	ldr	r3, [pc, #572]	@ (80073e8 <UART_SetConfig+0x56c>)
 80071aa:	61fb      	str	r3, [r7, #28]
        break;
 80071ac:	e00d      	b.n	80071ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fd f9bd 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80071b2:	61f8      	str	r0, [r7, #28]
        break;
 80071b4:	e009      	b.n	80071ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071ba:	61fb      	str	r3, [r7, #28]
        break;
 80071bc:	e005      	b.n	80071ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 80fb 	beq.w	80073c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	4613      	mov	r3, r2
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	4413      	add	r3, r2
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d305      	bcc.n	80071ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d903      	bls.n	80071f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071f4:	e0e8      	b.n	80073c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2200      	movs	r2, #0
 80071fa:	461c      	mov	r4, r3
 80071fc:	4615      	mov	r5, r2
 80071fe:	f04f 0200 	mov.w	r2, #0
 8007202:	f04f 0300 	mov.w	r3, #0
 8007206:	022b      	lsls	r3, r5, #8
 8007208:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800720c:	0222      	lsls	r2, r4, #8
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	6849      	ldr	r1, [r1, #4]
 8007212:	0849      	lsrs	r1, r1, #1
 8007214:	2000      	movs	r0, #0
 8007216:	4688      	mov	r8, r1
 8007218:	4681      	mov	r9, r0
 800721a:	eb12 0a08 	adds.w	sl, r2, r8
 800721e:	eb43 0b09 	adc.w	fp, r3, r9
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007230:	4650      	mov	r0, sl
 8007232:	4659      	mov	r1, fp
 8007234:	f7f9 f81c 	bl	8000270 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4613      	mov	r3, r2
 800723e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007246:	d308      	bcc.n	800725a <UART_SetConfig+0x3de>
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800724e:	d204      	bcs.n	800725a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	60da      	str	r2, [r3, #12]
 8007258:	e0b6      	b.n	80073c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007260:	e0b2      	b.n	80073c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	69db      	ldr	r3, [r3, #28]
 8007266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800726a:	d15e      	bne.n	800732a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800726c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007270:	2b08      	cmp	r3, #8
 8007272:	d828      	bhi.n	80072c6 <UART_SetConfig+0x44a>
 8007274:	a201      	add	r2, pc, #4	@ (adr r2, 800727c <UART_SetConfig+0x400>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	080072a1 	.word	0x080072a1
 8007280:	080072a9 	.word	0x080072a9
 8007284:	080072b1 	.word	0x080072b1
 8007288:	080072c7 	.word	0x080072c7
 800728c:	080072b7 	.word	0x080072b7
 8007290:	080072c7 	.word	0x080072c7
 8007294:	080072c7 	.word	0x080072c7
 8007298:	080072c7 	.word	0x080072c7
 800729c:	080072bf 	.word	0x080072bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072a0:	f7fd f9dc 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 80072a4:	61f8      	str	r0, [r7, #28]
        break;
 80072a6:	e014      	b.n	80072d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072a8:	f7fd f9ee 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 80072ac:	61f8      	str	r0, [r7, #28]
        break;
 80072ae:	e010      	b.n	80072d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072b0:	4b4d      	ldr	r3, [pc, #308]	@ (80073e8 <UART_SetConfig+0x56c>)
 80072b2:	61fb      	str	r3, [r7, #28]
        break;
 80072b4:	e00d      	b.n	80072d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072b6:	f7fd f939 	bl	800452c <HAL_RCC_GetSysClockFreq>
 80072ba:	61f8      	str	r0, [r7, #28]
        break;
 80072bc:	e009      	b.n	80072d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072c2:	61fb      	str	r3, [r7, #28]
        break;
 80072c4:	e005      	b.n	80072d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d077      	beq.n	80073c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	005a      	lsls	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	085b      	lsrs	r3, r3, #1
 80072e2:	441a      	add	r2, r3
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b0f      	cmp	r3, #15
 80072f2:	d916      	bls.n	8007322 <UART_SetConfig+0x4a6>
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072fa:	d212      	bcs.n	8007322 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	b29b      	uxth	r3, r3
 8007300:	f023 030f 	bic.w	r3, r3, #15
 8007304:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	b29b      	uxth	r3, r3
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	b29a      	uxth	r2, r3
 8007312:	8afb      	ldrh	r3, [r7, #22]
 8007314:	4313      	orrs	r3, r2
 8007316:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	8afa      	ldrh	r2, [r7, #22]
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	e052      	b.n	80073c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007328:	e04e      	b.n	80073c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800732a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800732e:	2b08      	cmp	r3, #8
 8007330:	d827      	bhi.n	8007382 <UART_SetConfig+0x506>
 8007332:	a201      	add	r2, pc, #4	@ (adr r2, 8007338 <UART_SetConfig+0x4bc>)
 8007334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007365 	.word	0x08007365
 8007340:	0800736d 	.word	0x0800736d
 8007344:	08007383 	.word	0x08007383
 8007348:	08007373 	.word	0x08007373
 800734c:	08007383 	.word	0x08007383
 8007350:	08007383 	.word	0x08007383
 8007354:	08007383 	.word	0x08007383
 8007358:	0800737b 	.word	0x0800737b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800735c:	f7fd f97e 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8007360:	61f8      	str	r0, [r7, #28]
        break;
 8007362:	e014      	b.n	800738e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007364:	f7fd f990 	bl	8004688 <HAL_RCC_GetPCLK2Freq>
 8007368:	61f8      	str	r0, [r7, #28]
        break;
 800736a:	e010      	b.n	800738e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800736c:	4b1e      	ldr	r3, [pc, #120]	@ (80073e8 <UART_SetConfig+0x56c>)
 800736e:	61fb      	str	r3, [r7, #28]
        break;
 8007370:	e00d      	b.n	800738e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007372:	f7fd f8db 	bl	800452c <HAL_RCC_GetSysClockFreq>
 8007376:	61f8      	str	r0, [r7, #28]
        break;
 8007378:	e009      	b.n	800738e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800737e:	61fb      	str	r3, [r7, #28]
        break;
 8007380:	e005      	b.n	800738e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800738c:	bf00      	nop
    }

    if (pclk != 0U)
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d019      	beq.n	80073c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	085a      	lsrs	r2, r3, #1
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	441a      	add	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	2b0f      	cmp	r3, #15
 80073ac:	d909      	bls.n	80073c2 <UART_SetConfig+0x546>
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073b4:	d205      	bcs.n	80073c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	60da      	str	r2, [r3, #12]
 80073c0:	e002      	b.n	80073c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2200      	movs	r2, #0
 80073cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3728      	adds	r7, #40	@ 0x28
 80073dc:	46bd      	mov	sp, r7
 80073de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073e2:	bf00      	nop
 80073e4:	40008000 	.word	0x40008000
 80073e8:	00f42400 	.word	0x00f42400

080073ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f8:	f003 0308 	and.w	r3, r3, #8
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800745e:	f003 0304 	and.w	r3, r3, #4
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	430a      	orrs	r2, r1
 800747a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	430a      	orrs	r2, r1
 80074be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01a      	beq.n	8007502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	430a      	orrs	r2, r1
 80074e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ea:	d10a      	bne.n	8007502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00a      	beq.n	8007524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	430a      	orrs	r2, r1
 8007522:	605a      	str	r2, [r3, #4]
  }
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b098      	sub	sp, #96	@ 0x60
 8007534:	af02      	add	r7, sp, #8
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007540:	f7fa fbf0 	bl	8001d24 <HAL_GetTick>
 8007544:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0308 	and.w	r3, r3, #8
 8007550:	2b08      	cmp	r3, #8
 8007552:	d12e      	bne.n	80075b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007554:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800755c:	2200      	movs	r2, #0
 800755e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f000 f88c 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d021      	beq.n	80075b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007576:	e853 3f00 	ldrex	r3, [r3]
 800757a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800757c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800757e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007582:	653b      	str	r3, [r7, #80]	@ 0x50
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	461a      	mov	r2, r3
 800758a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800758c:	647b      	str	r3, [r7, #68]	@ 0x44
 800758e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007590:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007592:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007594:	e841 2300 	strex	r3, r2, [r1]
 8007598:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800759a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e6      	bne.n	800756e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2220      	movs	r2, #32
 80075a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e062      	b.n	8007678 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d149      	bne.n	8007654 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075c8:	2200      	movs	r2, #0
 80075ca:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f856 	bl	8007680 <UART_WaitOnFlagUntilTimeout>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d03c      	beq.n	8007654 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	623b      	str	r3, [r7, #32]
   return(result);
 80075e8:	6a3b      	ldr	r3, [r7, #32]
 80075ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e6      	bne.n	80075da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	3308      	adds	r3, #8
 8007612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	60fb      	str	r3, [r7, #12]
   return(result);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f023 0301 	bic.w	r3, r3, #1
 8007622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3308      	adds	r3, #8
 800762a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	69b9      	ldr	r1, [r7, #24]
 8007632:	69fa      	ldr	r2, [r7, #28]
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	617b      	str	r3, [r7, #20]
   return(result);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e5      	bne.n	800760c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e011      	b.n	8007678 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2220      	movs	r2, #32
 8007658:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2220      	movs	r2, #32
 800765e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007676:	2300      	movs	r3, #0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3758      	adds	r7, #88	@ 0x58
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	4613      	mov	r3, r2
 800768e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007690:	e049      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007698:	d045      	beq.n	8007726 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800769a:	f7fa fb43 	bl	8001d24 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d302      	bcc.n	80076b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e048      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d031      	beq.n	8007726 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f003 0308 	and.w	r3, r3, #8
 80076cc:	2b08      	cmp	r3, #8
 80076ce:	d110      	bne.n	80076f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2208      	movs	r2, #8
 80076d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 f838 	bl	800774e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2208      	movs	r2, #8
 80076e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e029      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	69db      	ldr	r3, [r3, #28]
 80076f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007700:	d111      	bne.n	8007726 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800770a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	f000 f81e 	bl	800774e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2220      	movs	r2, #32
 8007716:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e00f      	b.n	8007746 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69da      	ldr	r2, [r3, #28]
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	4013      	ands	r3, r2
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	429a      	cmp	r2, r3
 8007734:	bf0c      	ite	eq
 8007736:	2301      	moveq	r3, #1
 8007738:	2300      	movne	r3, #0
 800773a:	b2db      	uxtb	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	79fb      	ldrb	r3, [r7, #7]
 8007740:	429a      	cmp	r2, r3
 8007742:	d0a6      	beq.n	8007692 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800774e:	b480      	push	{r7}
 8007750:	b095      	sub	sp, #84	@ 0x54
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007766:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800776a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007774:	643b      	str	r3, [r7, #64]	@ 0x40
 8007776:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800777a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3308      	adds	r3, #8
 800778e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	61fb      	str	r3, [r7, #28]
   return(result);
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f023 0301 	bic.w	r3, r3, #1
 800779e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3308      	adds	r3, #8
 80077a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80077a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e5      	bne.n	8007788 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d118      	bne.n	80077f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	e853 3f00 	ldrex	r3, [r3]
 80077d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	f023 0310 	bic.w	r3, r3, #16
 80077d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e2:	61bb      	str	r3, [r7, #24]
 80077e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6979      	ldr	r1, [r7, #20]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	613b      	str	r3, [r7, #16]
   return(result);
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e6      	bne.n	80077c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800780a:	bf00      	nop
 800780c:	3754      	adds	r7, #84	@ 0x54
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
	...

08007818 <std>:
 8007818:	2300      	movs	r3, #0
 800781a:	b510      	push	{r4, lr}
 800781c:	4604      	mov	r4, r0
 800781e:	e9c0 3300 	strd	r3, r3, [r0]
 8007822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007826:	6083      	str	r3, [r0, #8]
 8007828:	8181      	strh	r1, [r0, #12]
 800782a:	6643      	str	r3, [r0, #100]	@ 0x64
 800782c:	81c2      	strh	r2, [r0, #14]
 800782e:	6183      	str	r3, [r0, #24]
 8007830:	4619      	mov	r1, r3
 8007832:	2208      	movs	r2, #8
 8007834:	305c      	adds	r0, #92	@ 0x5c
 8007836:	f000 f926 	bl	8007a86 <memset>
 800783a:	4b0d      	ldr	r3, [pc, #52]	@ (8007870 <std+0x58>)
 800783c:	6263      	str	r3, [r4, #36]	@ 0x24
 800783e:	4b0d      	ldr	r3, [pc, #52]	@ (8007874 <std+0x5c>)
 8007840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007842:	4b0d      	ldr	r3, [pc, #52]	@ (8007878 <std+0x60>)
 8007844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007846:	4b0d      	ldr	r3, [pc, #52]	@ (800787c <std+0x64>)
 8007848:	6323      	str	r3, [r4, #48]	@ 0x30
 800784a:	4b0d      	ldr	r3, [pc, #52]	@ (8007880 <std+0x68>)
 800784c:	6224      	str	r4, [r4, #32]
 800784e:	429c      	cmp	r4, r3
 8007850:	d006      	beq.n	8007860 <std+0x48>
 8007852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007856:	4294      	cmp	r4, r2
 8007858:	d002      	beq.n	8007860 <std+0x48>
 800785a:	33d0      	adds	r3, #208	@ 0xd0
 800785c:	429c      	cmp	r4, r3
 800785e:	d105      	bne.n	800786c <std+0x54>
 8007860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007868:	f000 b986 	b.w	8007b78 <__retarget_lock_init_recursive>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	08007a01 	.word	0x08007a01
 8007874:	08007a23 	.word	0x08007a23
 8007878:	08007a5b 	.word	0x08007a5b
 800787c:	08007a7f 	.word	0x08007a7f
 8007880:	20000788 	.word	0x20000788

08007884 <stdio_exit_handler>:
 8007884:	4a02      	ldr	r2, [pc, #8]	@ (8007890 <stdio_exit_handler+0xc>)
 8007886:	4903      	ldr	r1, [pc, #12]	@ (8007894 <stdio_exit_handler+0x10>)
 8007888:	4803      	ldr	r0, [pc, #12]	@ (8007898 <stdio_exit_handler+0x14>)
 800788a:	f000 b869 	b.w	8007960 <_fwalk_sglue>
 800788e:	bf00      	nop
 8007890:	200000a4 	.word	0x200000a4
 8007894:	080086c9 	.word	0x080086c9
 8007898:	200000b4 	.word	0x200000b4

0800789c <cleanup_stdio>:
 800789c:	6841      	ldr	r1, [r0, #4]
 800789e:	4b0c      	ldr	r3, [pc, #48]	@ (80078d0 <cleanup_stdio+0x34>)
 80078a0:	4299      	cmp	r1, r3
 80078a2:	b510      	push	{r4, lr}
 80078a4:	4604      	mov	r4, r0
 80078a6:	d001      	beq.n	80078ac <cleanup_stdio+0x10>
 80078a8:	f000 ff0e 	bl	80086c8 <_fflush_r>
 80078ac:	68a1      	ldr	r1, [r4, #8]
 80078ae:	4b09      	ldr	r3, [pc, #36]	@ (80078d4 <cleanup_stdio+0x38>)
 80078b0:	4299      	cmp	r1, r3
 80078b2:	d002      	beq.n	80078ba <cleanup_stdio+0x1e>
 80078b4:	4620      	mov	r0, r4
 80078b6:	f000 ff07 	bl	80086c8 <_fflush_r>
 80078ba:	68e1      	ldr	r1, [r4, #12]
 80078bc:	4b06      	ldr	r3, [pc, #24]	@ (80078d8 <cleanup_stdio+0x3c>)
 80078be:	4299      	cmp	r1, r3
 80078c0:	d004      	beq.n	80078cc <cleanup_stdio+0x30>
 80078c2:	4620      	mov	r0, r4
 80078c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078c8:	f000 befe 	b.w	80086c8 <_fflush_r>
 80078cc:	bd10      	pop	{r4, pc}
 80078ce:	bf00      	nop
 80078d0:	20000788 	.word	0x20000788
 80078d4:	200007f0 	.word	0x200007f0
 80078d8:	20000858 	.word	0x20000858

080078dc <global_stdio_init.part.0>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	4b0b      	ldr	r3, [pc, #44]	@ (800790c <global_stdio_init.part.0+0x30>)
 80078e0:	4c0b      	ldr	r4, [pc, #44]	@ (8007910 <global_stdio_init.part.0+0x34>)
 80078e2:	4a0c      	ldr	r2, [pc, #48]	@ (8007914 <global_stdio_init.part.0+0x38>)
 80078e4:	601a      	str	r2, [r3, #0]
 80078e6:	4620      	mov	r0, r4
 80078e8:	2200      	movs	r2, #0
 80078ea:	2104      	movs	r1, #4
 80078ec:	f7ff ff94 	bl	8007818 <std>
 80078f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80078f4:	2201      	movs	r2, #1
 80078f6:	2109      	movs	r1, #9
 80078f8:	f7ff ff8e 	bl	8007818 <std>
 80078fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007900:	2202      	movs	r2, #2
 8007902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007906:	2112      	movs	r1, #18
 8007908:	f7ff bf86 	b.w	8007818 <std>
 800790c:	200008c0 	.word	0x200008c0
 8007910:	20000788 	.word	0x20000788
 8007914:	08007885 	.word	0x08007885

08007918 <__sfp_lock_acquire>:
 8007918:	4801      	ldr	r0, [pc, #4]	@ (8007920 <__sfp_lock_acquire+0x8>)
 800791a:	f000 b92e 	b.w	8007b7a <__retarget_lock_acquire_recursive>
 800791e:	bf00      	nop
 8007920:	200008c9 	.word	0x200008c9

08007924 <__sfp_lock_release>:
 8007924:	4801      	ldr	r0, [pc, #4]	@ (800792c <__sfp_lock_release+0x8>)
 8007926:	f000 b929 	b.w	8007b7c <__retarget_lock_release_recursive>
 800792a:	bf00      	nop
 800792c:	200008c9 	.word	0x200008c9

08007930 <__sinit>:
 8007930:	b510      	push	{r4, lr}
 8007932:	4604      	mov	r4, r0
 8007934:	f7ff fff0 	bl	8007918 <__sfp_lock_acquire>
 8007938:	6a23      	ldr	r3, [r4, #32]
 800793a:	b11b      	cbz	r3, 8007944 <__sinit+0x14>
 800793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007940:	f7ff bff0 	b.w	8007924 <__sfp_lock_release>
 8007944:	4b04      	ldr	r3, [pc, #16]	@ (8007958 <__sinit+0x28>)
 8007946:	6223      	str	r3, [r4, #32]
 8007948:	4b04      	ldr	r3, [pc, #16]	@ (800795c <__sinit+0x2c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1f5      	bne.n	800793c <__sinit+0xc>
 8007950:	f7ff ffc4 	bl	80078dc <global_stdio_init.part.0>
 8007954:	e7f2      	b.n	800793c <__sinit+0xc>
 8007956:	bf00      	nop
 8007958:	0800789d 	.word	0x0800789d
 800795c:	200008c0 	.word	0x200008c0

08007960 <_fwalk_sglue>:
 8007960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007964:	4607      	mov	r7, r0
 8007966:	4688      	mov	r8, r1
 8007968:	4614      	mov	r4, r2
 800796a:	2600      	movs	r6, #0
 800796c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007970:	f1b9 0901 	subs.w	r9, r9, #1
 8007974:	d505      	bpl.n	8007982 <_fwalk_sglue+0x22>
 8007976:	6824      	ldr	r4, [r4, #0]
 8007978:	2c00      	cmp	r4, #0
 800797a:	d1f7      	bne.n	800796c <_fwalk_sglue+0xc>
 800797c:	4630      	mov	r0, r6
 800797e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007982:	89ab      	ldrh	r3, [r5, #12]
 8007984:	2b01      	cmp	r3, #1
 8007986:	d907      	bls.n	8007998 <_fwalk_sglue+0x38>
 8007988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800798c:	3301      	adds	r3, #1
 800798e:	d003      	beq.n	8007998 <_fwalk_sglue+0x38>
 8007990:	4629      	mov	r1, r5
 8007992:	4638      	mov	r0, r7
 8007994:	47c0      	blx	r8
 8007996:	4306      	orrs	r6, r0
 8007998:	3568      	adds	r5, #104	@ 0x68
 800799a:	e7e9      	b.n	8007970 <_fwalk_sglue+0x10>

0800799c <iprintf>:
 800799c:	b40f      	push	{r0, r1, r2, r3}
 800799e:	b507      	push	{r0, r1, r2, lr}
 80079a0:	4906      	ldr	r1, [pc, #24]	@ (80079bc <iprintf+0x20>)
 80079a2:	ab04      	add	r3, sp, #16
 80079a4:	6808      	ldr	r0, [r1, #0]
 80079a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80079aa:	6881      	ldr	r1, [r0, #8]
 80079ac:	9301      	str	r3, [sp, #4]
 80079ae:	f000 fb61 	bl	8008074 <_vfiprintf_r>
 80079b2:	b003      	add	sp, #12
 80079b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80079b8:	b004      	add	sp, #16
 80079ba:	4770      	bx	lr
 80079bc:	200000b0 	.word	0x200000b0

080079c0 <siprintf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b500      	push	{lr}
 80079c4:	b09c      	sub	sp, #112	@ 0x70
 80079c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80079c8:	9002      	str	r0, [sp, #8]
 80079ca:	9006      	str	r0, [sp, #24]
 80079cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079d0:	4809      	ldr	r0, [pc, #36]	@ (80079f8 <siprintf+0x38>)
 80079d2:	9107      	str	r1, [sp, #28]
 80079d4:	9104      	str	r1, [sp, #16]
 80079d6:	4909      	ldr	r1, [pc, #36]	@ (80079fc <siprintf+0x3c>)
 80079d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079dc:	9105      	str	r1, [sp, #20]
 80079de:	6800      	ldr	r0, [r0, #0]
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	a902      	add	r1, sp, #8
 80079e4:	f000 fa20 	bl	8007e28 <_svfiprintf_r>
 80079e8:	9b02      	ldr	r3, [sp, #8]
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]
 80079ee:	b01c      	add	sp, #112	@ 0x70
 80079f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80079f4:	b003      	add	sp, #12
 80079f6:	4770      	bx	lr
 80079f8:	200000b0 	.word	0x200000b0
 80079fc:	ffff0208 	.word	0xffff0208

08007a00 <__sread>:
 8007a00:	b510      	push	{r4, lr}
 8007a02:	460c      	mov	r4, r1
 8007a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a08:	f000 f868 	bl	8007adc <_read_r>
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	bfab      	itete	ge
 8007a10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a12:	89a3      	ldrhlt	r3, [r4, #12]
 8007a14:	181b      	addge	r3, r3, r0
 8007a16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a1a:	bfac      	ite	ge
 8007a1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a1e:	81a3      	strhlt	r3, [r4, #12]
 8007a20:	bd10      	pop	{r4, pc}

08007a22 <__swrite>:
 8007a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a26:	461f      	mov	r7, r3
 8007a28:	898b      	ldrh	r3, [r1, #12]
 8007a2a:	05db      	lsls	r3, r3, #23
 8007a2c:	4605      	mov	r5, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	4616      	mov	r6, r2
 8007a32:	d505      	bpl.n	8007a40 <__swrite+0x1e>
 8007a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a38:	2302      	movs	r3, #2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f000 f83c 	bl	8007ab8 <_lseek_r>
 8007a40:	89a3      	ldrh	r3, [r4, #12]
 8007a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	4632      	mov	r2, r6
 8007a4e:	463b      	mov	r3, r7
 8007a50:	4628      	mov	r0, r5
 8007a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a56:	f000 b853 	b.w	8007b00 <_write_r>

08007a5a <__sseek>:
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a62:	f000 f829 	bl	8007ab8 <_lseek_r>
 8007a66:	1c43      	adds	r3, r0, #1
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	bf15      	itete	ne
 8007a6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a76:	81a3      	strheq	r3, [r4, #12]
 8007a78:	bf18      	it	ne
 8007a7a:	81a3      	strhne	r3, [r4, #12]
 8007a7c:	bd10      	pop	{r4, pc}

08007a7e <__sclose>:
 8007a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a82:	f000 b809 	b.w	8007a98 <_close_r>

08007a86 <memset>:
 8007a86:	4402      	add	r2, r0
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d100      	bne.n	8007a90 <memset+0xa>
 8007a8e:	4770      	bx	lr
 8007a90:	f803 1b01 	strb.w	r1, [r3], #1
 8007a94:	e7f9      	b.n	8007a8a <memset+0x4>
	...

08007a98 <_close_r>:
 8007a98:	b538      	push	{r3, r4, r5, lr}
 8007a9a:	4d06      	ldr	r5, [pc, #24]	@ (8007ab4 <_close_r+0x1c>)
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	602b      	str	r3, [r5, #0]
 8007aa4:	f7fa f82f 	bl	8001b06 <_close>
 8007aa8:	1c43      	adds	r3, r0, #1
 8007aaa:	d102      	bne.n	8007ab2 <_close_r+0x1a>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	b103      	cbz	r3, 8007ab2 <_close_r+0x1a>
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	bd38      	pop	{r3, r4, r5, pc}
 8007ab4:	200008c4 	.word	0x200008c4

08007ab8 <_lseek_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4d07      	ldr	r5, [pc, #28]	@ (8007ad8 <_lseek_r+0x20>)
 8007abc:	4604      	mov	r4, r0
 8007abe:	4608      	mov	r0, r1
 8007ac0:	4611      	mov	r1, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	602a      	str	r2, [r5, #0]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f7fa f844 	bl	8001b54 <_lseek>
 8007acc:	1c43      	adds	r3, r0, #1
 8007ace:	d102      	bne.n	8007ad6 <_lseek_r+0x1e>
 8007ad0:	682b      	ldr	r3, [r5, #0]
 8007ad2:	b103      	cbz	r3, 8007ad6 <_lseek_r+0x1e>
 8007ad4:	6023      	str	r3, [r4, #0]
 8007ad6:	bd38      	pop	{r3, r4, r5, pc}
 8007ad8:	200008c4 	.word	0x200008c4

08007adc <_read_r>:
 8007adc:	b538      	push	{r3, r4, r5, lr}
 8007ade:	4d07      	ldr	r5, [pc, #28]	@ (8007afc <_read_r+0x20>)
 8007ae0:	4604      	mov	r4, r0
 8007ae2:	4608      	mov	r0, r1
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	602a      	str	r2, [r5, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f7f9 ffd2 	bl	8001a94 <_read>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_read_r+0x1e>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_read_r+0x1e>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200008c4 	.word	0x200008c4

08007b00 <_write_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4d07      	ldr	r5, [pc, #28]	@ (8007b20 <_write_r+0x20>)
 8007b04:	4604      	mov	r4, r0
 8007b06:	4608      	mov	r0, r1
 8007b08:	4611      	mov	r1, r2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	602a      	str	r2, [r5, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f7f9 ffdd 	bl	8001ace <_write>
 8007b14:	1c43      	adds	r3, r0, #1
 8007b16:	d102      	bne.n	8007b1e <_write_r+0x1e>
 8007b18:	682b      	ldr	r3, [r5, #0]
 8007b1a:	b103      	cbz	r3, 8007b1e <_write_r+0x1e>
 8007b1c:	6023      	str	r3, [r4, #0]
 8007b1e:	bd38      	pop	{r3, r4, r5, pc}
 8007b20:	200008c4 	.word	0x200008c4

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	@ (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	200000b0 	.word	0x200000b0

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	@ (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	@ (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	@ (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	@ (8007b74 <__libc_init_array+0x44>)
 8007b44:	f000 ff6e 	bl	8008a24 <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	08008d94 	.word	0x08008d94
 8007b6c:	08008d94 	.word	0x08008d94
 8007b70:	08008d94 	.word	0x08008d94
 8007b74:	08008d98 	.word	0x08008d98

08007b78 <__retarget_lock_init_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_acquire_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <__retarget_lock_release_recursive>:
 8007b7c:	4770      	bx	lr
	...

08007b80 <_free_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4605      	mov	r5, r0
 8007b84:	2900      	cmp	r1, #0
 8007b86:	d041      	beq.n	8007c0c <_free_r+0x8c>
 8007b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b8c:	1f0c      	subs	r4, r1, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfb8      	it	lt
 8007b92:	18e4      	addlt	r4, r4, r3
 8007b94:	f000 f8e0 	bl	8007d58 <__malloc_lock>
 8007b98:	4a1d      	ldr	r2, [pc, #116]	@ (8007c10 <_free_r+0x90>)
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	b933      	cbnz	r3, 8007bac <_free_r+0x2c>
 8007b9e:	6063      	str	r3, [r4, #4]
 8007ba0:	6014      	str	r4, [r2, #0]
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ba8:	f000 b8dc 	b.w	8007d64 <__malloc_unlock>
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d908      	bls.n	8007bc2 <_free_r+0x42>
 8007bb0:	6820      	ldr	r0, [r4, #0]
 8007bb2:	1821      	adds	r1, r4, r0
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf01      	itttt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	1809      	addeq	r1, r1, r0
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	e7ed      	b.n	8007b9e <_free_r+0x1e>
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b10b      	cbz	r3, 8007bcc <_free_r+0x4c>
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d9fa      	bls.n	8007bc2 <_free_r+0x42>
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	1850      	adds	r0, r2, r1
 8007bd0:	42a0      	cmp	r0, r4
 8007bd2:	d10b      	bne.n	8007bec <_free_r+0x6c>
 8007bd4:	6820      	ldr	r0, [r4, #0]
 8007bd6:	4401      	add	r1, r0
 8007bd8:	1850      	adds	r0, r2, r1
 8007bda:	4283      	cmp	r3, r0
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	d1e0      	bne.n	8007ba2 <_free_r+0x22>
 8007be0:	6818      	ldr	r0, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	4408      	add	r0, r1
 8007be8:	6010      	str	r0, [r2, #0]
 8007bea:	e7da      	b.n	8007ba2 <_free_r+0x22>
 8007bec:	d902      	bls.n	8007bf4 <_free_r+0x74>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	e7d6      	b.n	8007ba2 <_free_r+0x22>
 8007bf4:	6820      	ldr	r0, [r4, #0]
 8007bf6:	1821      	adds	r1, r4, r0
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf04      	itt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	bf04      	itt	eq
 8007c04:	1809      	addeq	r1, r1, r0
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	6054      	str	r4, [r2, #4]
 8007c0a:	e7ca      	b.n	8007ba2 <_free_r+0x22>
 8007c0c:	bd38      	pop	{r3, r4, r5, pc}
 8007c0e:	bf00      	nop
 8007c10:	200008d0 	.word	0x200008d0

08007c14 <sbrk_aligned>:
 8007c14:	b570      	push	{r4, r5, r6, lr}
 8007c16:	4e0f      	ldr	r6, [pc, #60]	@ (8007c54 <sbrk_aligned+0x40>)
 8007c18:	460c      	mov	r4, r1
 8007c1a:	6831      	ldr	r1, [r6, #0]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	b911      	cbnz	r1, 8007c26 <sbrk_aligned+0x12>
 8007c20:	f000 fe28 	bl	8008874 <_sbrk_r>
 8007c24:	6030      	str	r0, [r6, #0]
 8007c26:	4621      	mov	r1, r4
 8007c28:	4628      	mov	r0, r5
 8007c2a:	f000 fe23 	bl	8008874 <_sbrk_r>
 8007c2e:	1c43      	adds	r3, r0, #1
 8007c30:	d103      	bne.n	8007c3a <sbrk_aligned+0x26>
 8007c32:	f04f 34ff 	mov.w	r4, #4294967295
 8007c36:	4620      	mov	r0, r4
 8007c38:	bd70      	pop	{r4, r5, r6, pc}
 8007c3a:	1cc4      	adds	r4, r0, #3
 8007c3c:	f024 0403 	bic.w	r4, r4, #3
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d0f8      	beq.n	8007c36 <sbrk_aligned+0x22>
 8007c44:	1a21      	subs	r1, r4, r0
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 fe14 	bl	8008874 <_sbrk_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d1f2      	bne.n	8007c36 <sbrk_aligned+0x22>
 8007c50:	e7ef      	b.n	8007c32 <sbrk_aligned+0x1e>
 8007c52:	bf00      	nop
 8007c54:	200008cc 	.word	0x200008cc

08007c58 <_malloc_r>:
 8007c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c5c:	1ccd      	adds	r5, r1, #3
 8007c5e:	f025 0503 	bic.w	r5, r5, #3
 8007c62:	3508      	adds	r5, #8
 8007c64:	2d0c      	cmp	r5, #12
 8007c66:	bf38      	it	cc
 8007c68:	250c      	movcc	r5, #12
 8007c6a:	2d00      	cmp	r5, #0
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	db01      	blt.n	8007c74 <_malloc_r+0x1c>
 8007c70:	42a9      	cmp	r1, r5
 8007c72:	d904      	bls.n	8007c7e <_malloc_r+0x26>
 8007c74:	230c      	movs	r3, #12
 8007c76:	6033      	str	r3, [r6, #0]
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d54 <_malloc_r+0xfc>
 8007c82:	f000 f869 	bl	8007d58 <__malloc_lock>
 8007c86:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8a:	461c      	mov	r4, r3
 8007c8c:	bb44      	cbnz	r4, 8007ce0 <_malloc_r+0x88>
 8007c8e:	4629      	mov	r1, r5
 8007c90:	4630      	mov	r0, r6
 8007c92:	f7ff ffbf 	bl	8007c14 <sbrk_aligned>
 8007c96:	1c43      	adds	r3, r0, #1
 8007c98:	4604      	mov	r4, r0
 8007c9a:	d158      	bne.n	8007d4e <_malloc_r+0xf6>
 8007c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007ca0:	4627      	mov	r7, r4
 8007ca2:	2f00      	cmp	r7, #0
 8007ca4:	d143      	bne.n	8007d2e <_malloc_r+0xd6>
 8007ca6:	2c00      	cmp	r4, #0
 8007ca8:	d04b      	beq.n	8007d42 <_malloc_r+0xea>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	4639      	mov	r1, r7
 8007cae:	4630      	mov	r0, r6
 8007cb0:	eb04 0903 	add.w	r9, r4, r3
 8007cb4:	f000 fdde 	bl	8008874 <_sbrk_r>
 8007cb8:	4581      	cmp	r9, r0
 8007cba:	d142      	bne.n	8007d42 <_malloc_r+0xea>
 8007cbc:	6821      	ldr	r1, [r4, #0]
 8007cbe:	1a6d      	subs	r5, r5, r1
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f7ff ffa6 	bl	8007c14 <sbrk_aligned>
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d03a      	beq.n	8007d42 <_malloc_r+0xea>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	442b      	add	r3, r5
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	bb62      	cbnz	r2, 8007d34 <_malloc_r+0xdc>
 8007cda:	f8c8 7000 	str.w	r7, [r8]
 8007cde:	e00f      	b.n	8007d00 <_malloc_r+0xa8>
 8007ce0:	6822      	ldr	r2, [r4, #0]
 8007ce2:	1b52      	subs	r2, r2, r5
 8007ce4:	d420      	bmi.n	8007d28 <_malloc_r+0xd0>
 8007ce6:	2a0b      	cmp	r2, #11
 8007ce8:	d917      	bls.n	8007d1a <_malloc_r+0xc2>
 8007cea:	1961      	adds	r1, r4, r5
 8007cec:	42a3      	cmp	r3, r4
 8007cee:	6025      	str	r5, [r4, #0]
 8007cf0:	bf18      	it	ne
 8007cf2:	6059      	strne	r1, [r3, #4]
 8007cf4:	6863      	ldr	r3, [r4, #4]
 8007cf6:	bf08      	it	eq
 8007cf8:	f8c8 1000 	streq.w	r1, [r8]
 8007cfc:	5162      	str	r2, [r4, r5]
 8007cfe:	604b      	str	r3, [r1, #4]
 8007d00:	4630      	mov	r0, r6
 8007d02:	f000 f82f 	bl	8007d64 <__malloc_unlock>
 8007d06:	f104 000b 	add.w	r0, r4, #11
 8007d0a:	1d23      	adds	r3, r4, #4
 8007d0c:	f020 0007 	bic.w	r0, r0, #7
 8007d10:	1ac2      	subs	r2, r0, r3
 8007d12:	bf1c      	itt	ne
 8007d14:	1a1b      	subne	r3, r3, r0
 8007d16:	50a3      	strne	r3, [r4, r2]
 8007d18:	e7af      	b.n	8007c7a <_malloc_r+0x22>
 8007d1a:	6862      	ldr	r2, [r4, #4]
 8007d1c:	42a3      	cmp	r3, r4
 8007d1e:	bf0c      	ite	eq
 8007d20:	f8c8 2000 	streq.w	r2, [r8]
 8007d24:	605a      	strne	r2, [r3, #4]
 8007d26:	e7eb      	b.n	8007d00 <_malloc_r+0xa8>
 8007d28:	4623      	mov	r3, r4
 8007d2a:	6864      	ldr	r4, [r4, #4]
 8007d2c:	e7ae      	b.n	8007c8c <_malloc_r+0x34>
 8007d2e:	463c      	mov	r4, r7
 8007d30:	687f      	ldr	r7, [r7, #4]
 8007d32:	e7b6      	b.n	8007ca2 <_malloc_r+0x4a>
 8007d34:	461a      	mov	r2, r3
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d1fb      	bne.n	8007d34 <_malloc_r+0xdc>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	6053      	str	r3, [r2, #4]
 8007d40:	e7de      	b.n	8007d00 <_malloc_r+0xa8>
 8007d42:	230c      	movs	r3, #12
 8007d44:	6033      	str	r3, [r6, #0]
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 f80c 	bl	8007d64 <__malloc_unlock>
 8007d4c:	e794      	b.n	8007c78 <_malloc_r+0x20>
 8007d4e:	6005      	str	r5, [r0, #0]
 8007d50:	e7d6      	b.n	8007d00 <_malloc_r+0xa8>
 8007d52:	bf00      	nop
 8007d54:	200008d0 	.word	0x200008d0

08007d58 <__malloc_lock>:
 8007d58:	4801      	ldr	r0, [pc, #4]	@ (8007d60 <__malloc_lock+0x8>)
 8007d5a:	f7ff bf0e 	b.w	8007b7a <__retarget_lock_acquire_recursive>
 8007d5e:	bf00      	nop
 8007d60:	200008c8 	.word	0x200008c8

08007d64 <__malloc_unlock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	@ (8007d6c <__malloc_unlock+0x8>)
 8007d66:	f7ff bf09 	b.w	8007b7c <__retarget_lock_release_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	200008c8 	.word	0x200008c8

08007d70 <__ssputs_r>:
 8007d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	688e      	ldr	r6, [r1, #8]
 8007d76:	461f      	mov	r7, r3
 8007d78:	42be      	cmp	r6, r7
 8007d7a:	680b      	ldr	r3, [r1, #0]
 8007d7c:	4682      	mov	sl, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	4690      	mov	r8, r2
 8007d82:	d82d      	bhi.n	8007de0 <__ssputs_r+0x70>
 8007d84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d8c:	d026      	beq.n	8007ddc <__ssputs_r+0x6c>
 8007d8e:	6965      	ldr	r5, [r4, #20]
 8007d90:	6909      	ldr	r1, [r1, #16]
 8007d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d96:	eba3 0901 	sub.w	r9, r3, r1
 8007d9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d9e:	1c7b      	adds	r3, r7, #1
 8007da0:	444b      	add	r3, r9
 8007da2:	106d      	asrs	r5, r5, #1
 8007da4:	429d      	cmp	r5, r3
 8007da6:	bf38      	it	cc
 8007da8:	461d      	movcc	r5, r3
 8007daa:	0553      	lsls	r3, r2, #21
 8007dac:	d527      	bpl.n	8007dfe <__ssputs_r+0x8e>
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7ff ff52 	bl	8007c58 <_malloc_r>
 8007db4:	4606      	mov	r6, r0
 8007db6:	b360      	cbz	r0, 8007e12 <__ssputs_r+0xa2>
 8007db8:	6921      	ldr	r1, [r4, #16]
 8007dba:	464a      	mov	r2, r9
 8007dbc:	f000 fd6a 	bl	8008894 <memcpy>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	6126      	str	r6, [r4, #16]
 8007dce:	6165      	str	r5, [r4, #20]
 8007dd0:	444e      	add	r6, r9
 8007dd2:	eba5 0509 	sub.w	r5, r5, r9
 8007dd6:	6026      	str	r6, [r4, #0]
 8007dd8:	60a5      	str	r5, [r4, #8]
 8007dda:	463e      	mov	r6, r7
 8007ddc:	42be      	cmp	r6, r7
 8007dde:	d900      	bls.n	8007de2 <__ssputs_r+0x72>
 8007de0:	463e      	mov	r6, r7
 8007de2:	6820      	ldr	r0, [r4, #0]
 8007de4:	4632      	mov	r2, r6
 8007de6:	4641      	mov	r1, r8
 8007de8:	f000 fd2a 	bl	8008840 <memmove>
 8007dec:	68a3      	ldr	r3, [r4, #8]
 8007dee:	1b9b      	subs	r3, r3, r6
 8007df0:	60a3      	str	r3, [r4, #8]
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	4433      	add	r3, r6
 8007df6:	6023      	str	r3, [r4, #0]
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfe:	462a      	mov	r2, r5
 8007e00:	f000 fd56 	bl	80088b0 <_realloc_r>
 8007e04:	4606      	mov	r6, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	d1e0      	bne.n	8007dcc <__ssputs_r+0x5c>
 8007e0a:	6921      	ldr	r1, [r4, #16]
 8007e0c:	4650      	mov	r0, sl
 8007e0e:	f7ff feb7 	bl	8007b80 <_free_r>
 8007e12:	230c      	movs	r3, #12
 8007e14:	f8ca 3000 	str.w	r3, [sl]
 8007e18:	89a3      	ldrh	r3, [r4, #12]
 8007e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e1e:	81a3      	strh	r3, [r4, #12]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e7e9      	b.n	8007dfa <__ssputs_r+0x8a>
	...

08007e28 <_svfiprintf_r>:
 8007e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2c:	4698      	mov	r8, r3
 8007e2e:	898b      	ldrh	r3, [r1, #12]
 8007e30:	061b      	lsls	r3, r3, #24
 8007e32:	b09d      	sub	sp, #116	@ 0x74
 8007e34:	4607      	mov	r7, r0
 8007e36:	460d      	mov	r5, r1
 8007e38:	4614      	mov	r4, r2
 8007e3a:	d510      	bpl.n	8007e5e <_svfiprintf_r+0x36>
 8007e3c:	690b      	ldr	r3, [r1, #16]
 8007e3e:	b973      	cbnz	r3, 8007e5e <_svfiprintf_r+0x36>
 8007e40:	2140      	movs	r1, #64	@ 0x40
 8007e42:	f7ff ff09 	bl	8007c58 <_malloc_r>
 8007e46:	6028      	str	r0, [r5, #0]
 8007e48:	6128      	str	r0, [r5, #16]
 8007e4a:	b930      	cbnz	r0, 8007e5a <_svfiprintf_r+0x32>
 8007e4c:	230c      	movs	r3, #12
 8007e4e:	603b      	str	r3, [r7, #0]
 8007e50:	f04f 30ff 	mov.w	r0, #4294967295
 8007e54:	b01d      	add	sp, #116	@ 0x74
 8007e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5a:	2340      	movs	r3, #64	@ 0x40
 8007e5c:	616b      	str	r3, [r5, #20]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e62:	2320      	movs	r3, #32
 8007e64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6c:	2330      	movs	r3, #48	@ 0x30
 8007e6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800800c <_svfiprintf_r+0x1e4>
 8007e72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e76:	f04f 0901 	mov.w	r9, #1
 8007e7a:	4623      	mov	r3, r4
 8007e7c:	469a      	mov	sl, r3
 8007e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e82:	b10a      	cbz	r2, 8007e88 <_svfiprintf_r+0x60>
 8007e84:	2a25      	cmp	r2, #37	@ 0x25
 8007e86:	d1f9      	bne.n	8007e7c <_svfiprintf_r+0x54>
 8007e88:	ebba 0b04 	subs.w	fp, sl, r4
 8007e8c:	d00b      	beq.n	8007ea6 <_svfiprintf_r+0x7e>
 8007e8e:	465b      	mov	r3, fp
 8007e90:	4622      	mov	r2, r4
 8007e92:	4629      	mov	r1, r5
 8007e94:	4638      	mov	r0, r7
 8007e96:	f7ff ff6b 	bl	8007d70 <__ssputs_r>
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f000 80a7 	beq.w	8007fee <_svfiprintf_r+0x1c6>
 8007ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ea2:	445a      	add	r2, fp
 8007ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 809f 	beq.w	8007fee <_svfiprintf_r+0x1c6>
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eba:	f10a 0a01 	add.w	sl, sl, #1
 8007ebe:	9304      	str	r3, [sp, #16]
 8007ec0:	9307      	str	r3, [sp, #28]
 8007ec2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ec6:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ec8:	4654      	mov	r4, sl
 8007eca:	2205      	movs	r2, #5
 8007ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ed0:	484e      	ldr	r0, [pc, #312]	@ (800800c <_svfiprintf_r+0x1e4>)
 8007ed2:	f7f8 f97d 	bl	80001d0 <memchr>
 8007ed6:	9a04      	ldr	r2, [sp, #16]
 8007ed8:	b9d8      	cbnz	r0, 8007f12 <_svfiprintf_r+0xea>
 8007eda:	06d0      	lsls	r0, r2, #27
 8007edc:	bf44      	itt	mi
 8007ede:	2320      	movmi	r3, #32
 8007ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ee4:	0711      	lsls	r1, r2, #28
 8007ee6:	bf44      	itt	mi
 8007ee8:	232b      	movmi	r3, #43	@ 0x2b
 8007eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef4:	d015      	beq.n	8007f22 <_svfiprintf_r+0xfa>
 8007ef6:	9a07      	ldr	r2, [sp, #28]
 8007ef8:	4654      	mov	r4, sl
 8007efa:	2000      	movs	r0, #0
 8007efc:	f04f 0c0a 	mov.w	ip, #10
 8007f00:	4621      	mov	r1, r4
 8007f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f06:	3b30      	subs	r3, #48	@ 0x30
 8007f08:	2b09      	cmp	r3, #9
 8007f0a:	d94b      	bls.n	8007fa4 <_svfiprintf_r+0x17c>
 8007f0c:	b1b0      	cbz	r0, 8007f3c <_svfiprintf_r+0x114>
 8007f0e:	9207      	str	r2, [sp, #28]
 8007f10:	e014      	b.n	8007f3c <_svfiprintf_r+0x114>
 8007f12:	eba0 0308 	sub.w	r3, r0, r8
 8007f16:	fa09 f303 	lsl.w	r3, r9, r3
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	9304      	str	r3, [sp, #16]
 8007f1e:	46a2      	mov	sl, r4
 8007f20:	e7d2      	b.n	8007ec8 <_svfiprintf_r+0xa0>
 8007f22:	9b03      	ldr	r3, [sp, #12]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	9103      	str	r1, [sp, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	bfbb      	ittet	lt
 8007f2e:	425b      	neglt	r3, r3
 8007f30:	f042 0202 	orrlt.w	r2, r2, #2
 8007f34:	9307      	strge	r3, [sp, #28]
 8007f36:	9307      	strlt	r3, [sp, #28]
 8007f38:	bfb8      	it	lt
 8007f3a:	9204      	strlt	r2, [sp, #16]
 8007f3c:	7823      	ldrb	r3, [r4, #0]
 8007f3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f40:	d10a      	bne.n	8007f58 <_svfiprintf_r+0x130>
 8007f42:	7863      	ldrb	r3, [r4, #1]
 8007f44:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f46:	d132      	bne.n	8007fae <_svfiprintf_r+0x186>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	1d1a      	adds	r2, r3, #4
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	9203      	str	r2, [sp, #12]
 8007f50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f54:	3402      	adds	r4, #2
 8007f56:	9305      	str	r3, [sp, #20]
 8007f58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800801c <_svfiprintf_r+0x1f4>
 8007f5c:	7821      	ldrb	r1, [r4, #0]
 8007f5e:	2203      	movs	r2, #3
 8007f60:	4650      	mov	r0, sl
 8007f62:	f7f8 f935 	bl	80001d0 <memchr>
 8007f66:	b138      	cbz	r0, 8007f78 <_svfiprintf_r+0x150>
 8007f68:	9b04      	ldr	r3, [sp, #16]
 8007f6a:	eba0 000a 	sub.w	r0, r0, sl
 8007f6e:	2240      	movs	r2, #64	@ 0x40
 8007f70:	4082      	lsls	r2, r0
 8007f72:	4313      	orrs	r3, r2
 8007f74:	3401      	adds	r4, #1
 8007f76:	9304      	str	r3, [sp, #16]
 8007f78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7c:	4824      	ldr	r0, [pc, #144]	@ (8008010 <_svfiprintf_r+0x1e8>)
 8007f7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f82:	2206      	movs	r2, #6
 8007f84:	f7f8 f924 	bl	80001d0 <memchr>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d036      	beq.n	8007ffa <_svfiprintf_r+0x1d2>
 8007f8c:	4b21      	ldr	r3, [pc, #132]	@ (8008014 <_svfiprintf_r+0x1ec>)
 8007f8e:	bb1b      	cbnz	r3, 8007fd8 <_svfiprintf_r+0x1b0>
 8007f90:	9b03      	ldr	r3, [sp, #12]
 8007f92:	3307      	adds	r3, #7
 8007f94:	f023 0307 	bic.w	r3, r3, #7
 8007f98:	3308      	adds	r3, #8
 8007f9a:	9303      	str	r3, [sp, #12]
 8007f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9e:	4433      	add	r3, r6
 8007fa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fa2:	e76a      	b.n	8007e7a <_svfiprintf_r+0x52>
 8007fa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa8:	460c      	mov	r4, r1
 8007faa:	2001      	movs	r0, #1
 8007fac:	e7a8      	b.n	8007f00 <_svfiprintf_r+0xd8>
 8007fae:	2300      	movs	r3, #0
 8007fb0:	3401      	adds	r4, #1
 8007fb2:	9305      	str	r3, [sp, #20]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	f04f 0c0a 	mov.w	ip, #10
 8007fba:	4620      	mov	r0, r4
 8007fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc0:	3a30      	subs	r2, #48	@ 0x30
 8007fc2:	2a09      	cmp	r2, #9
 8007fc4:	d903      	bls.n	8007fce <_svfiprintf_r+0x1a6>
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0c6      	beq.n	8007f58 <_svfiprintf_r+0x130>
 8007fca:	9105      	str	r1, [sp, #20]
 8007fcc:	e7c4      	b.n	8007f58 <_svfiprintf_r+0x130>
 8007fce:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e7f0      	b.n	8007fba <_svfiprintf_r+0x192>
 8007fd8:	ab03      	add	r3, sp, #12
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	462a      	mov	r2, r5
 8007fde:	4b0e      	ldr	r3, [pc, #56]	@ (8008018 <_svfiprintf_r+0x1f0>)
 8007fe0:	a904      	add	r1, sp, #16
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	f3af 8000 	nop.w
 8007fe8:	1c42      	adds	r2, r0, #1
 8007fea:	4606      	mov	r6, r0
 8007fec:	d1d6      	bne.n	8007f9c <_svfiprintf_r+0x174>
 8007fee:	89ab      	ldrh	r3, [r5, #12]
 8007ff0:	065b      	lsls	r3, r3, #25
 8007ff2:	f53f af2d 	bmi.w	8007e50 <_svfiprintf_r+0x28>
 8007ff6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ff8:	e72c      	b.n	8007e54 <_svfiprintf_r+0x2c>
 8007ffa:	ab03      	add	r3, sp, #12
 8007ffc:	9300      	str	r3, [sp, #0]
 8007ffe:	462a      	mov	r2, r5
 8008000:	4b05      	ldr	r3, [pc, #20]	@ (8008018 <_svfiprintf_r+0x1f0>)
 8008002:	a904      	add	r1, sp, #16
 8008004:	4638      	mov	r0, r7
 8008006:	f000 f9bb 	bl	8008380 <_printf_i>
 800800a:	e7ed      	b.n	8007fe8 <_svfiprintf_r+0x1c0>
 800800c:	08008d58 	.word	0x08008d58
 8008010:	08008d62 	.word	0x08008d62
 8008014:	00000000 	.word	0x00000000
 8008018:	08007d71 	.word	0x08007d71
 800801c:	08008d5e 	.word	0x08008d5e

08008020 <__sfputc_r>:
 8008020:	6893      	ldr	r3, [r2, #8]
 8008022:	3b01      	subs	r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	b410      	push	{r4}
 8008028:	6093      	str	r3, [r2, #8]
 800802a:	da08      	bge.n	800803e <__sfputc_r+0x1e>
 800802c:	6994      	ldr	r4, [r2, #24]
 800802e:	42a3      	cmp	r3, r4
 8008030:	db01      	blt.n	8008036 <__sfputc_r+0x16>
 8008032:	290a      	cmp	r1, #10
 8008034:	d103      	bne.n	800803e <__sfputc_r+0x1e>
 8008036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800803a:	f000 bb6d 	b.w	8008718 <__swbuf_r>
 800803e:	6813      	ldr	r3, [r2, #0]
 8008040:	1c58      	adds	r0, r3, #1
 8008042:	6010      	str	r0, [r2, #0]
 8008044:	7019      	strb	r1, [r3, #0]
 8008046:	4608      	mov	r0, r1
 8008048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800804c:	4770      	bx	lr

0800804e <__sfputs_r>:
 800804e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008050:	4606      	mov	r6, r0
 8008052:	460f      	mov	r7, r1
 8008054:	4614      	mov	r4, r2
 8008056:	18d5      	adds	r5, r2, r3
 8008058:	42ac      	cmp	r4, r5
 800805a:	d101      	bne.n	8008060 <__sfputs_r+0x12>
 800805c:	2000      	movs	r0, #0
 800805e:	e007      	b.n	8008070 <__sfputs_r+0x22>
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	463a      	mov	r2, r7
 8008066:	4630      	mov	r0, r6
 8008068:	f7ff ffda 	bl	8008020 <__sfputc_r>
 800806c:	1c43      	adds	r3, r0, #1
 800806e:	d1f3      	bne.n	8008058 <__sfputs_r+0xa>
 8008070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008074 <_vfiprintf_r>:
 8008074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	460d      	mov	r5, r1
 800807a:	b09d      	sub	sp, #116	@ 0x74
 800807c:	4614      	mov	r4, r2
 800807e:	4698      	mov	r8, r3
 8008080:	4606      	mov	r6, r0
 8008082:	b118      	cbz	r0, 800808c <_vfiprintf_r+0x18>
 8008084:	6a03      	ldr	r3, [r0, #32]
 8008086:	b90b      	cbnz	r3, 800808c <_vfiprintf_r+0x18>
 8008088:	f7ff fc52 	bl	8007930 <__sinit>
 800808c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800808e:	07d9      	lsls	r1, r3, #31
 8008090:	d405      	bmi.n	800809e <_vfiprintf_r+0x2a>
 8008092:	89ab      	ldrh	r3, [r5, #12]
 8008094:	059a      	lsls	r2, r3, #22
 8008096:	d402      	bmi.n	800809e <_vfiprintf_r+0x2a>
 8008098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800809a:	f7ff fd6e 	bl	8007b7a <__retarget_lock_acquire_recursive>
 800809e:	89ab      	ldrh	r3, [r5, #12]
 80080a0:	071b      	lsls	r3, r3, #28
 80080a2:	d501      	bpl.n	80080a8 <_vfiprintf_r+0x34>
 80080a4:	692b      	ldr	r3, [r5, #16]
 80080a6:	b99b      	cbnz	r3, 80080d0 <_vfiprintf_r+0x5c>
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f000 fb72 	bl	8008794 <__swsetup_r>
 80080b0:	b170      	cbz	r0, 80080d0 <_vfiprintf_r+0x5c>
 80080b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080b4:	07dc      	lsls	r4, r3, #31
 80080b6:	d504      	bpl.n	80080c2 <_vfiprintf_r+0x4e>
 80080b8:	f04f 30ff 	mov.w	r0, #4294967295
 80080bc:	b01d      	add	sp, #116	@ 0x74
 80080be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	0598      	lsls	r0, r3, #22
 80080c6:	d4f7      	bmi.n	80080b8 <_vfiprintf_r+0x44>
 80080c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080ca:	f7ff fd57 	bl	8007b7c <__retarget_lock_release_recursive>
 80080ce:	e7f3      	b.n	80080b8 <_vfiprintf_r+0x44>
 80080d0:	2300      	movs	r3, #0
 80080d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d4:	2320      	movs	r3, #32
 80080d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80080da:	f8cd 800c 	str.w	r8, [sp, #12]
 80080de:	2330      	movs	r3, #48	@ 0x30
 80080e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008290 <_vfiprintf_r+0x21c>
 80080e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80080e8:	f04f 0901 	mov.w	r9, #1
 80080ec:	4623      	mov	r3, r4
 80080ee:	469a      	mov	sl, r3
 80080f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f4:	b10a      	cbz	r2, 80080fa <_vfiprintf_r+0x86>
 80080f6:	2a25      	cmp	r2, #37	@ 0x25
 80080f8:	d1f9      	bne.n	80080ee <_vfiprintf_r+0x7a>
 80080fa:	ebba 0b04 	subs.w	fp, sl, r4
 80080fe:	d00b      	beq.n	8008118 <_vfiprintf_r+0xa4>
 8008100:	465b      	mov	r3, fp
 8008102:	4622      	mov	r2, r4
 8008104:	4629      	mov	r1, r5
 8008106:	4630      	mov	r0, r6
 8008108:	f7ff ffa1 	bl	800804e <__sfputs_r>
 800810c:	3001      	adds	r0, #1
 800810e:	f000 80a7 	beq.w	8008260 <_vfiprintf_r+0x1ec>
 8008112:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008114:	445a      	add	r2, fp
 8008116:	9209      	str	r2, [sp, #36]	@ 0x24
 8008118:	f89a 3000 	ldrb.w	r3, [sl]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f000 809f 	beq.w	8008260 <_vfiprintf_r+0x1ec>
 8008122:	2300      	movs	r3, #0
 8008124:	f04f 32ff 	mov.w	r2, #4294967295
 8008128:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800812c:	f10a 0a01 	add.w	sl, sl, #1
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	9307      	str	r3, [sp, #28]
 8008134:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008138:	931a      	str	r3, [sp, #104]	@ 0x68
 800813a:	4654      	mov	r4, sl
 800813c:	2205      	movs	r2, #5
 800813e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008142:	4853      	ldr	r0, [pc, #332]	@ (8008290 <_vfiprintf_r+0x21c>)
 8008144:	f7f8 f844 	bl	80001d0 <memchr>
 8008148:	9a04      	ldr	r2, [sp, #16]
 800814a:	b9d8      	cbnz	r0, 8008184 <_vfiprintf_r+0x110>
 800814c:	06d1      	lsls	r1, r2, #27
 800814e:	bf44      	itt	mi
 8008150:	2320      	movmi	r3, #32
 8008152:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008156:	0713      	lsls	r3, r2, #28
 8008158:	bf44      	itt	mi
 800815a:	232b      	movmi	r3, #43	@ 0x2b
 800815c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008160:	f89a 3000 	ldrb.w	r3, [sl]
 8008164:	2b2a      	cmp	r3, #42	@ 0x2a
 8008166:	d015      	beq.n	8008194 <_vfiprintf_r+0x120>
 8008168:	9a07      	ldr	r2, [sp, #28]
 800816a:	4654      	mov	r4, sl
 800816c:	2000      	movs	r0, #0
 800816e:	f04f 0c0a 	mov.w	ip, #10
 8008172:	4621      	mov	r1, r4
 8008174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008178:	3b30      	subs	r3, #48	@ 0x30
 800817a:	2b09      	cmp	r3, #9
 800817c:	d94b      	bls.n	8008216 <_vfiprintf_r+0x1a2>
 800817e:	b1b0      	cbz	r0, 80081ae <_vfiprintf_r+0x13a>
 8008180:	9207      	str	r2, [sp, #28]
 8008182:	e014      	b.n	80081ae <_vfiprintf_r+0x13a>
 8008184:	eba0 0308 	sub.w	r3, r0, r8
 8008188:	fa09 f303 	lsl.w	r3, r9, r3
 800818c:	4313      	orrs	r3, r2
 800818e:	9304      	str	r3, [sp, #16]
 8008190:	46a2      	mov	sl, r4
 8008192:	e7d2      	b.n	800813a <_vfiprintf_r+0xc6>
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	1d19      	adds	r1, r3, #4
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	9103      	str	r1, [sp, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	bfbb      	ittet	lt
 80081a0:	425b      	neglt	r3, r3
 80081a2:	f042 0202 	orrlt.w	r2, r2, #2
 80081a6:	9307      	strge	r3, [sp, #28]
 80081a8:	9307      	strlt	r3, [sp, #28]
 80081aa:	bfb8      	it	lt
 80081ac:	9204      	strlt	r2, [sp, #16]
 80081ae:	7823      	ldrb	r3, [r4, #0]
 80081b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80081b2:	d10a      	bne.n	80081ca <_vfiprintf_r+0x156>
 80081b4:	7863      	ldrb	r3, [r4, #1]
 80081b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80081b8:	d132      	bne.n	8008220 <_vfiprintf_r+0x1ac>
 80081ba:	9b03      	ldr	r3, [sp, #12]
 80081bc:	1d1a      	adds	r2, r3, #4
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	9203      	str	r2, [sp, #12]
 80081c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80081c6:	3402      	adds	r4, #2
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082a0 <_vfiprintf_r+0x22c>
 80081ce:	7821      	ldrb	r1, [r4, #0]
 80081d0:	2203      	movs	r2, #3
 80081d2:	4650      	mov	r0, sl
 80081d4:	f7f7 fffc 	bl	80001d0 <memchr>
 80081d8:	b138      	cbz	r0, 80081ea <_vfiprintf_r+0x176>
 80081da:	9b04      	ldr	r3, [sp, #16]
 80081dc:	eba0 000a 	sub.w	r0, r0, sl
 80081e0:	2240      	movs	r2, #64	@ 0x40
 80081e2:	4082      	lsls	r2, r0
 80081e4:	4313      	orrs	r3, r2
 80081e6:	3401      	adds	r4, #1
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ee:	4829      	ldr	r0, [pc, #164]	@ (8008294 <_vfiprintf_r+0x220>)
 80081f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80081f4:	2206      	movs	r2, #6
 80081f6:	f7f7 ffeb 	bl	80001d0 <memchr>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d03f      	beq.n	800827e <_vfiprintf_r+0x20a>
 80081fe:	4b26      	ldr	r3, [pc, #152]	@ (8008298 <_vfiprintf_r+0x224>)
 8008200:	bb1b      	cbnz	r3, 800824a <_vfiprintf_r+0x1d6>
 8008202:	9b03      	ldr	r3, [sp, #12]
 8008204:	3307      	adds	r3, #7
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	3308      	adds	r3, #8
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008210:	443b      	add	r3, r7
 8008212:	9309      	str	r3, [sp, #36]	@ 0x24
 8008214:	e76a      	b.n	80080ec <_vfiprintf_r+0x78>
 8008216:	fb0c 3202 	mla	r2, ip, r2, r3
 800821a:	460c      	mov	r4, r1
 800821c:	2001      	movs	r0, #1
 800821e:	e7a8      	b.n	8008172 <_vfiprintf_r+0xfe>
 8008220:	2300      	movs	r3, #0
 8008222:	3401      	adds	r4, #1
 8008224:	9305      	str	r3, [sp, #20]
 8008226:	4619      	mov	r1, r3
 8008228:	f04f 0c0a 	mov.w	ip, #10
 800822c:	4620      	mov	r0, r4
 800822e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008232:	3a30      	subs	r2, #48	@ 0x30
 8008234:	2a09      	cmp	r2, #9
 8008236:	d903      	bls.n	8008240 <_vfiprintf_r+0x1cc>
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0c6      	beq.n	80081ca <_vfiprintf_r+0x156>
 800823c:	9105      	str	r1, [sp, #20]
 800823e:	e7c4      	b.n	80081ca <_vfiprintf_r+0x156>
 8008240:	fb0c 2101 	mla	r1, ip, r1, r2
 8008244:	4604      	mov	r4, r0
 8008246:	2301      	movs	r3, #1
 8008248:	e7f0      	b.n	800822c <_vfiprintf_r+0x1b8>
 800824a:	ab03      	add	r3, sp, #12
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	462a      	mov	r2, r5
 8008250:	4b12      	ldr	r3, [pc, #72]	@ (800829c <_vfiprintf_r+0x228>)
 8008252:	a904      	add	r1, sp, #16
 8008254:	4630      	mov	r0, r6
 8008256:	f3af 8000 	nop.w
 800825a:	4607      	mov	r7, r0
 800825c:	1c78      	adds	r0, r7, #1
 800825e:	d1d6      	bne.n	800820e <_vfiprintf_r+0x19a>
 8008260:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008262:	07d9      	lsls	r1, r3, #31
 8008264:	d405      	bmi.n	8008272 <_vfiprintf_r+0x1fe>
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	059a      	lsls	r2, r3, #22
 800826a:	d402      	bmi.n	8008272 <_vfiprintf_r+0x1fe>
 800826c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800826e:	f7ff fc85 	bl	8007b7c <__retarget_lock_release_recursive>
 8008272:	89ab      	ldrh	r3, [r5, #12]
 8008274:	065b      	lsls	r3, r3, #25
 8008276:	f53f af1f 	bmi.w	80080b8 <_vfiprintf_r+0x44>
 800827a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800827c:	e71e      	b.n	80080bc <_vfiprintf_r+0x48>
 800827e:	ab03      	add	r3, sp, #12
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	462a      	mov	r2, r5
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <_vfiprintf_r+0x228>)
 8008286:	a904      	add	r1, sp, #16
 8008288:	4630      	mov	r0, r6
 800828a:	f000 f879 	bl	8008380 <_printf_i>
 800828e:	e7e4      	b.n	800825a <_vfiprintf_r+0x1e6>
 8008290:	08008d58 	.word	0x08008d58
 8008294:	08008d62 	.word	0x08008d62
 8008298:	00000000 	.word	0x00000000
 800829c:	0800804f 	.word	0x0800804f
 80082a0:	08008d5e 	.word	0x08008d5e

080082a4 <_printf_common>:
 80082a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	4616      	mov	r6, r2
 80082aa:	4698      	mov	r8, r3
 80082ac:	688a      	ldr	r2, [r1, #8]
 80082ae:	690b      	ldr	r3, [r1, #16]
 80082b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80082b4:	4293      	cmp	r3, r2
 80082b6:	bfb8      	it	lt
 80082b8:	4613      	movlt	r3, r2
 80082ba:	6033      	str	r3, [r6, #0]
 80082bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80082c0:	4607      	mov	r7, r0
 80082c2:	460c      	mov	r4, r1
 80082c4:	b10a      	cbz	r2, 80082ca <_printf_common+0x26>
 80082c6:	3301      	adds	r3, #1
 80082c8:	6033      	str	r3, [r6, #0]
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	0699      	lsls	r1, r3, #26
 80082ce:	bf42      	ittt	mi
 80082d0:	6833      	ldrmi	r3, [r6, #0]
 80082d2:	3302      	addmi	r3, #2
 80082d4:	6033      	strmi	r3, [r6, #0]
 80082d6:	6825      	ldr	r5, [r4, #0]
 80082d8:	f015 0506 	ands.w	r5, r5, #6
 80082dc:	d106      	bne.n	80082ec <_printf_common+0x48>
 80082de:	f104 0a19 	add.w	sl, r4, #25
 80082e2:	68e3      	ldr	r3, [r4, #12]
 80082e4:	6832      	ldr	r2, [r6, #0]
 80082e6:	1a9b      	subs	r3, r3, r2
 80082e8:	42ab      	cmp	r3, r5
 80082ea:	dc26      	bgt.n	800833a <_printf_common+0x96>
 80082ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80082f0:	6822      	ldr	r2, [r4, #0]
 80082f2:	3b00      	subs	r3, #0
 80082f4:	bf18      	it	ne
 80082f6:	2301      	movne	r3, #1
 80082f8:	0692      	lsls	r2, r2, #26
 80082fa:	d42b      	bmi.n	8008354 <_printf_common+0xb0>
 80082fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008300:	4641      	mov	r1, r8
 8008302:	4638      	mov	r0, r7
 8008304:	47c8      	blx	r9
 8008306:	3001      	adds	r0, #1
 8008308:	d01e      	beq.n	8008348 <_printf_common+0xa4>
 800830a:	6823      	ldr	r3, [r4, #0]
 800830c:	6922      	ldr	r2, [r4, #16]
 800830e:	f003 0306 	and.w	r3, r3, #6
 8008312:	2b04      	cmp	r3, #4
 8008314:	bf02      	ittt	eq
 8008316:	68e5      	ldreq	r5, [r4, #12]
 8008318:	6833      	ldreq	r3, [r6, #0]
 800831a:	1aed      	subeq	r5, r5, r3
 800831c:	68a3      	ldr	r3, [r4, #8]
 800831e:	bf0c      	ite	eq
 8008320:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008324:	2500      	movne	r5, #0
 8008326:	4293      	cmp	r3, r2
 8008328:	bfc4      	itt	gt
 800832a:	1a9b      	subgt	r3, r3, r2
 800832c:	18ed      	addgt	r5, r5, r3
 800832e:	2600      	movs	r6, #0
 8008330:	341a      	adds	r4, #26
 8008332:	42b5      	cmp	r5, r6
 8008334:	d11a      	bne.n	800836c <_printf_common+0xc8>
 8008336:	2000      	movs	r0, #0
 8008338:	e008      	b.n	800834c <_printf_common+0xa8>
 800833a:	2301      	movs	r3, #1
 800833c:	4652      	mov	r2, sl
 800833e:	4641      	mov	r1, r8
 8008340:	4638      	mov	r0, r7
 8008342:	47c8      	blx	r9
 8008344:	3001      	adds	r0, #1
 8008346:	d103      	bne.n	8008350 <_printf_common+0xac>
 8008348:	f04f 30ff 	mov.w	r0, #4294967295
 800834c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008350:	3501      	adds	r5, #1
 8008352:	e7c6      	b.n	80082e2 <_printf_common+0x3e>
 8008354:	18e1      	adds	r1, r4, r3
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	2030      	movs	r0, #48	@ 0x30
 800835a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800835e:	4422      	add	r2, r4
 8008360:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008364:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008368:	3302      	adds	r3, #2
 800836a:	e7c7      	b.n	80082fc <_printf_common+0x58>
 800836c:	2301      	movs	r3, #1
 800836e:	4622      	mov	r2, r4
 8008370:	4641      	mov	r1, r8
 8008372:	4638      	mov	r0, r7
 8008374:	47c8      	blx	r9
 8008376:	3001      	adds	r0, #1
 8008378:	d0e6      	beq.n	8008348 <_printf_common+0xa4>
 800837a:	3601      	adds	r6, #1
 800837c:	e7d9      	b.n	8008332 <_printf_common+0x8e>
	...

08008380 <_printf_i>:
 8008380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	7e0f      	ldrb	r7, [r1, #24]
 8008386:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008388:	2f78      	cmp	r7, #120	@ 0x78
 800838a:	4691      	mov	r9, r2
 800838c:	4680      	mov	r8, r0
 800838e:	460c      	mov	r4, r1
 8008390:	469a      	mov	sl, r3
 8008392:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008396:	d807      	bhi.n	80083a8 <_printf_i+0x28>
 8008398:	2f62      	cmp	r7, #98	@ 0x62
 800839a:	d80a      	bhi.n	80083b2 <_printf_i+0x32>
 800839c:	2f00      	cmp	r7, #0
 800839e:	f000 80d2 	beq.w	8008546 <_printf_i+0x1c6>
 80083a2:	2f58      	cmp	r7, #88	@ 0x58
 80083a4:	f000 80b9 	beq.w	800851a <_printf_i+0x19a>
 80083a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80083ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80083b0:	e03a      	b.n	8008428 <_printf_i+0xa8>
 80083b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80083b6:	2b15      	cmp	r3, #21
 80083b8:	d8f6      	bhi.n	80083a8 <_printf_i+0x28>
 80083ba:	a101      	add	r1, pc, #4	@ (adr r1, 80083c0 <_printf_i+0x40>)
 80083bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083c0:	08008419 	.word	0x08008419
 80083c4:	0800842d 	.word	0x0800842d
 80083c8:	080083a9 	.word	0x080083a9
 80083cc:	080083a9 	.word	0x080083a9
 80083d0:	080083a9 	.word	0x080083a9
 80083d4:	080083a9 	.word	0x080083a9
 80083d8:	0800842d 	.word	0x0800842d
 80083dc:	080083a9 	.word	0x080083a9
 80083e0:	080083a9 	.word	0x080083a9
 80083e4:	080083a9 	.word	0x080083a9
 80083e8:	080083a9 	.word	0x080083a9
 80083ec:	0800852d 	.word	0x0800852d
 80083f0:	08008457 	.word	0x08008457
 80083f4:	080084e7 	.word	0x080084e7
 80083f8:	080083a9 	.word	0x080083a9
 80083fc:	080083a9 	.word	0x080083a9
 8008400:	0800854f 	.word	0x0800854f
 8008404:	080083a9 	.word	0x080083a9
 8008408:	08008457 	.word	0x08008457
 800840c:	080083a9 	.word	0x080083a9
 8008410:	080083a9 	.word	0x080083a9
 8008414:	080084ef 	.word	0x080084ef
 8008418:	6833      	ldr	r3, [r6, #0]
 800841a:	1d1a      	adds	r2, r3, #4
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6032      	str	r2, [r6, #0]
 8008420:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008424:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008428:	2301      	movs	r3, #1
 800842a:	e09d      	b.n	8008568 <_printf_i+0x1e8>
 800842c:	6833      	ldr	r3, [r6, #0]
 800842e:	6820      	ldr	r0, [r4, #0]
 8008430:	1d19      	adds	r1, r3, #4
 8008432:	6031      	str	r1, [r6, #0]
 8008434:	0606      	lsls	r6, r0, #24
 8008436:	d501      	bpl.n	800843c <_printf_i+0xbc>
 8008438:	681d      	ldr	r5, [r3, #0]
 800843a:	e003      	b.n	8008444 <_printf_i+0xc4>
 800843c:	0645      	lsls	r5, r0, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0xb8>
 8008440:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008444:	2d00      	cmp	r5, #0
 8008446:	da03      	bge.n	8008450 <_printf_i+0xd0>
 8008448:	232d      	movs	r3, #45	@ 0x2d
 800844a:	426d      	negs	r5, r5
 800844c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008450:	4859      	ldr	r0, [pc, #356]	@ (80085b8 <_printf_i+0x238>)
 8008452:	230a      	movs	r3, #10
 8008454:	e011      	b.n	800847a <_printf_i+0xfa>
 8008456:	6821      	ldr	r1, [r4, #0]
 8008458:	6833      	ldr	r3, [r6, #0]
 800845a:	0608      	lsls	r0, r1, #24
 800845c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008460:	d402      	bmi.n	8008468 <_printf_i+0xe8>
 8008462:	0649      	lsls	r1, r1, #25
 8008464:	bf48      	it	mi
 8008466:	b2ad      	uxthmi	r5, r5
 8008468:	2f6f      	cmp	r7, #111	@ 0x6f
 800846a:	4853      	ldr	r0, [pc, #332]	@ (80085b8 <_printf_i+0x238>)
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	bf14      	ite	ne
 8008470:	230a      	movne	r3, #10
 8008472:	2308      	moveq	r3, #8
 8008474:	2100      	movs	r1, #0
 8008476:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800847a:	6866      	ldr	r6, [r4, #4]
 800847c:	60a6      	str	r6, [r4, #8]
 800847e:	2e00      	cmp	r6, #0
 8008480:	bfa2      	ittt	ge
 8008482:	6821      	ldrge	r1, [r4, #0]
 8008484:	f021 0104 	bicge.w	r1, r1, #4
 8008488:	6021      	strge	r1, [r4, #0]
 800848a:	b90d      	cbnz	r5, 8008490 <_printf_i+0x110>
 800848c:	2e00      	cmp	r6, #0
 800848e:	d04b      	beq.n	8008528 <_printf_i+0x1a8>
 8008490:	4616      	mov	r6, r2
 8008492:	fbb5 f1f3 	udiv	r1, r5, r3
 8008496:	fb03 5711 	mls	r7, r3, r1, r5
 800849a:	5dc7      	ldrb	r7, [r0, r7]
 800849c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084a0:	462f      	mov	r7, r5
 80084a2:	42bb      	cmp	r3, r7
 80084a4:	460d      	mov	r5, r1
 80084a6:	d9f4      	bls.n	8008492 <_printf_i+0x112>
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d10b      	bne.n	80084c4 <_printf_i+0x144>
 80084ac:	6823      	ldr	r3, [r4, #0]
 80084ae:	07df      	lsls	r7, r3, #31
 80084b0:	d508      	bpl.n	80084c4 <_printf_i+0x144>
 80084b2:	6923      	ldr	r3, [r4, #16]
 80084b4:	6861      	ldr	r1, [r4, #4]
 80084b6:	4299      	cmp	r1, r3
 80084b8:	bfde      	ittt	le
 80084ba:	2330      	movle	r3, #48	@ 0x30
 80084bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80084c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80084c4:	1b92      	subs	r2, r2, r6
 80084c6:	6122      	str	r2, [r4, #16]
 80084c8:	f8cd a000 	str.w	sl, [sp]
 80084cc:	464b      	mov	r3, r9
 80084ce:	aa03      	add	r2, sp, #12
 80084d0:	4621      	mov	r1, r4
 80084d2:	4640      	mov	r0, r8
 80084d4:	f7ff fee6 	bl	80082a4 <_printf_common>
 80084d8:	3001      	adds	r0, #1
 80084da:	d14a      	bne.n	8008572 <_printf_i+0x1f2>
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	b004      	add	sp, #16
 80084e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	f043 0320 	orr.w	r3, r3, #32
 80084ec:	6023      	str	r3, [r4, #0]
 80084ee:	4833      	ldr	r0, [pc, #204]	@ (80085bc <_printf_i+0x23c>)
 80084f0:	2778      	movs	r7, #120	@ 0x78
 80084f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	6831      	ldr	r1, [r6, #0]
 80084fa:	061f      	lsls	r7, r3, #24
 80084fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008500:	d402      	bmi.n	8008508 <_printf_i+0x188>
 8008502:	065f      	lsls	r7, r3, #25
 8008504:	bf48      	it	mi
 8008506:	b2ad      	uxthmi	r5, r5
 8008508:	6031      	str	r1, [r6, #0]
 800850a:	07d9      	lsls	r1, r3, #31
 800850c:	bf44      	itt	mi
 800850e:	f043 0320 	orrmi.w	r3, r3, #32
 8008512:	6023      	strmi	r3, [r4, #0]
 8008514:	b11d      	cbz	r5, 800851e <_printf_i+0x19e>
 8008516:	2310      	movs	r3, #16
 8008518:	e7ac      	b.n	8008474 <_printf_i+0xf4>
 800851a:	4827      	ldr	r0, [pc, #156]	@ (80085b8 <_printf_i+0x238>)
 800851c:	e7e9      	b.n	80084f2 <_printf_i+0x172>
 800851e:	6823      	ldr	r3, [r4, #0]
 8008520:	f023 0320 	bic.w	r3, r3, #32
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	e7f6      	b.n	8008516 <_printf_i+0x196>
 8008528:	4616      	mov	r6, r2
 800852a:	e7bd      	b.n	80084a8 <_printf_i+0x128>
 800852c:	6833      	ldr	r3, [r6, #0]
 800852e:	6825      	ldr	r5, [r4, #0]
 8008530:	6961      	ldr	r1, [r4, #20]
 8008532:	1d18      	adds	r0, r3, #4
 8008534:	6030      	str	r0, [r6, #0]
 8008536:	062e      	lsls	r6, r5, #24
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	d501      	bpl.n	8008540 <_printf_i+0x1c0>
 800853c:	6019      	str	r1, [r3, #0]
 800853e:	e002      	b.n	8008546 <_printf_i+0x1c6>
 8008540:	0668      	lsls	r0, r5, #25
 8008542:	d5fb      	bpl.n	800853c <_printf_i+0x1bc>
 8008544:	8019      	strh	r1, [r3, #0]
 8008546:	2300      	movs	r3, #0
 8008548:	6123      	str	r3, [r4, #16]
 800854a:	4616      	mov	r6, r2
 800854c:	e7bc      	b.n	80084c8 <_printf_i+0x148>
 800854e:	6833      	ldr	r3, [r6, #0]
 8008550:	1d1a      	adds	r2, r3, #4
 8008552:	6032      	str	r2, [r6, #0]
 8008554:	681e      	ldr	r6, [r3, #0]
 8008556:	6862      	ldr	r2, [r4, #4]
 8008558:	2100      	movs	r1, #0
 800855a:	4630      	mov	r0, r6
 800855c:	f7f7 fe38 	bl	80001d0 <memchr>
 8008560:	b108      	cbz	r0, 8008566 <_printf_i+0x1e6>
 8008562:	1b80      	subs	r0, r0, r6
 8008564:	6060      	str	r0, [r4, #4]
 8008566:	6863      	ldr	r3, [r4, #4]
 8008568:	6123      	str	r3, [r4, #16]
 800856a:	2300      	movs	r3, #0
 800856c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008570:	e7aa      	b.n	80084c8 <_printf_i+0x148>
 8008572:	6923      	ldr	r3, [r4, #16]
 8008574:	4632      	mov	r2, r6
 8008576:	4649      	mov	r1, r9
 8008578:	4640      	mov	r0, r8
 800857a:	47d0      	blx	sl
 800857c:	3001      	adds	r0, #1
 800857e:	d0ad      	beq.n	80084dc <_printf_i+0x15c>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	079b      	lsls	r3, r3, #30
 8008584:	d413      	bmi.n	80085ae <_printf_i+0x22e>
 8008586:	68e0      	ldr	r0, [r4, #12]
 8008588:	9b03      	ldr	r3, [sp, #12]
 800858a:	4298      	cmp	r0, r3
 800858c:	bfb8      	it	lt
 800858e:	4618      	movlt	r0, r3
 8008590:	e7a6      	b.n	80084e0 <_printf_i+0x160>
 8008592:	2301      	movs	r3, #1
 8008594:	4632      	mov	r2, r6
 8008596:	4649      	mov	r1, r9
 8008598:	4640      	mov	r0, r8
 800859a:	47d0      	blx	sl
 800859c:	3001      	adds	r0, #1
 800859e:	d09d      	beq.n	80084dc <_printf_i+0x15c>
 80085a0:	3501      	adds	r5, #1
 80085a2:	68e3      	ldr	r3, [r4, #12]
 80085a4:	9903      	ldr	r1, [sp, #12]
 80085a6:	1a5b      	subs	r3, r3, r1
 80085a8:	42ab      	cmp	r3, r5
 80085aa:	dcf2      	bgt.n	8008592 <_printf_i+0x212>
 80085ac:	e7eb      	b.n	8008586 <_printf_i+0x206>
 80085ae:	2500      	movs	r5, #0
 80085b0:	f104 0619 	add.w	r6, r4, #25
 80085b4:	e7f5      	b.n	80085a2 <_printf_i+0x222>
 80085b6:	bf00      	nop
 80085b8:	08008d69 	.word	0x08008d69
 80085bc:	08008d7a 	.word	0x08008d7a

080085c0 <__sflush_r>:
 80085c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085c8:	0716      	lsls	r6, r2, #28
 80085ca:	4605      	mov	r5, r0
 80085cc:	460c      	mov	r4, r1
 80085ce:	d454      	bmi.n	800867a <__sflush_r+0xba>
 80085d0:	684b      	ldr	r3, [r1, #4]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	dc02      	bgt.n	80085dc <__sflush_r+0x1c>
 80085d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80085d8:	2b00      	cmp	r3, #0
 80085da:	dd48      	ble.n	800866e <__sflush_r+0xae>
 80085dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80085de:	2e00      	cmp	r6, #0
 80085e0:	d045      	beq.n	800866e <__sflush_r+0xae>
 80085e2:	2300      	movs	r3, #0
 80085e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80085e8:	682f      	ldr	r7, [r5, #0]
 80085ea:	6a21      	ldr	r1, [r4, #32]
 80085ec:	602b      	str	r3, [r5, #0]
 80085ee:	d030      	beq.n	8008652 <__sflush_r+0x92>
 80085f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	0759      	lsls	r1, r3, #29
 80085f6:	d505      	bpl.n	8008604 <__sflush_r+0x44>
 80085f8:	6863      	ldr	r3, [r4, #4]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80085fe:	b10b      	cbz	r3, 8008604 <__sflush_r+0x44>
 8008600:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008602:	1ad2      	subs	r2, r2, r3
 8008604:	2300      	movs	r3, #0
 8008606:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008608:	6a21      	ldr	r1, [r4, #32]
 800860a:	4628      	mov	r0, r5
 800860c:	47b0      	blx	r6
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	d106      	bne.n	8008622 <__sflush_r+0x62>
 8008614:	6829      	ldr	r1, [r5, #0]
 8008616:	291d      	cmp	r1, #29
 8008618:	d82b      	bhi.n	8008672 <__sflush_r+0xb2>
 800861a:	4a2a      	ldr	r2, [pc, #168]	@ (80086c4 <__sflush_r+0x104>)
 800861c:	410a      	asrs	r2, r1
 800861e:	07d6      	lsls	r6, r2, #31
 8008620:	d427      	bmi.n	8008672 <__sflush_r+0xb2>
 8008622:	2200      	movs	r2, #0
 8008624:	6062      	str	r2, [r4, #4]
 8008626:	04d9      	lsls	r1, r3, #19
 8008628:	6922      	ldr	r2, [r4, #16]
 800862a:	6022      	str	r2, [r4, #0]
 800862c:	d504      	bpl.n	8008638 <__sflush_r+0x78>
 800862e:	1c42      	adds	r2, r0, #1
 8008630:	d101      	bne.n	8008636 <__sflush_r+0x76>
 8008632:	682b      	ldr	r3, [r5, #0]
 8008634:	b903      	cbnz	r3, 8008638 <__sflush_r+0x78>
 8008636:	6560      	str	r0, [r4, #84]	@ 0x54
 8008638:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800863a:	602f      	str	r7, [r5, #0]
 800863c:	b1b9      	cbz	r1, 800866e <__sflush_r+0xae>
 800863e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008642:	4299      	cmp	r1, r3
 8008644:	d002      	beq.n	800864c <__sflush_r+0x8c>
 8008646:	4628      	mov	r0, r5
 8008648:	f7ff fa9a 	bl	8007b80 <_free_r>
 800864c:	2300      	movs	r3, #0
 800864e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008650:	e00d      	b.n	800866e <__sflush_r+0xae>
 8008652:	2301      	movs	r3, #1
 8008654:	4628      	mov	r0, r5
 8008656:	47b0      	blx	r6
 8008658:	4602      	mov	r2, r0
 800865a:	1c50      	adds	r0, r2, #1
 800865c:	d1c9      	bne.n	80085f2 <__sflush_r+0x32>
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0c6      	beq.n	80085f2 <__sflush_r+0x32>
 8008664:	2b1d      	cmp	r3, #29
 8008666:	d001      	beq.n	800866c <__sflush_r+0xac>
 8008668:	2b16      	cmp	r3, #22
 800866a:	d11e      	bne.n	80086aa <__sflush_r+0xea>
 800866c:	602f      	str	r7, [r5, #0]
 800866e:	2000      	movs	r0, #0
 8008670:	e022      	b.n	80086b8 <__sflush_r+0xf8>
 8008672:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008676:	b21b      	sxth	r3, r3
 8008678:	e01b      	b.n	80086b2 <__sflush_r+0xf2>
 800867a:	690f      	ldr	r7, [r1, #16]
 800867c:	2f00      	cmp	r7, #0
 800867e:	d0f6      	beq.n	800866e <__sflush_r+0xae>
 8008680:	0793      	lsls	r3, r2, #30
 8008682:	680e      	ldr	r6, [r1, #0]
 8008684:	bf08      	it	eq
 8008686:	694b      	ldreq	r3, [r1, #20]
 8008688:	600f      	str	r7, [r1, #0]
 800868a:	bf18      	it	ne
 800868c:	2300      	movne	r3, #0
 800868e:	eba6 0807 	sub.w	r8, r6, r7
 8008692:	608b      	str	r3, [r1, #8]
 8008694:	f1b8 0f00 	cmp.w	r8, #0
 8008698:	dde9      	ble.n	800866e <__sflush_r+0xae>
 800869a:	6a21      	ldr	r1, [r4, #32]
 800869c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800869e:	4643      	mov	r3, r8
 80086a0:	463a      	mov	r2, r7
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b0      	blx	r6
 80086a6:	2800      	cmp	r0, #0
 80086a8:	dc08      	bgt.n	80086bc <__sflush_r+0xfc>
 80086aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086bc:	4407      	add	r7, r0
 80086be:	eba8 0800 	sub.w	r8, r8, r0
 80086c2:	e7e7      	b.n	8008694 <__sflush_r+0xd4>
 80086c4:	dfbffffe 	.word	0xdfbffffe

080086c8 <_fflush_r>:
 80086c8:	b538      	push	{r3, r4, r5, lr}
 80086ca:	690b      	ldr	r3, [r1, #16]
 80086cc:	4605      	mov	r5, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	b913      	cbnz	r3, 80086d8 <_fflush_r+0x10>
 80086d2:	2500      	movs	r5, #0
 80086d4:	4628      	mov	r0, r5
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	b118      	cbz	r0, 80086e2 <_fflush_r+0x1a>
 80086da:	6a03      	ldr	r3, [r0, #32]
 80086dc:	b90b      	cbnz	r3, 80086e2 <_fflush_r+0x1a>
 80086de:	f7ff f927 	bl	8007930 <__sinit>
 80086e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d0f3      	beq.n	80086d2 <_fflush_r+0xa>
 80086ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80086ec:	07d0      	lsls	r0, r2, #31
 80086ee:	d404      	bmi.n	80086fa <_fflush_r+0x32>
 80086f0:	0599      	lsls	r1, r3, #22
 80086f2:	d402      	bmi.n	80086fa <_fflush_r+0x32>
 80086f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086f6:	f7ff fa40 	bl	8007b7a <__retarget_lock_acquire_recursive>
 80086fa:	4628      	mov	r0, r5
 80086fc:	4621      	mov	r1, r4
 80086fe:	f7ff ff5f 	bl	80085c0 <__sflush_r>
 8008702:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008704:	07da      	lsls	r2, r3, #31
 8008706:	4605      	mov	r5, r0
 8008708:	d4e4      	bmi.n	80086d4 <_fflush_r+0xc>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	059b      	lsls	r3, r3, #22
 800870e:	d4e1      	bmi.n	80086d4 <_fflush_r+0xc>
 8008710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008712:	f7ff fa33 	bl	8007b7c <__retarget_lock_release_recursive>
 8008716:	e7dd      	b.n	80086d4 <_fflush_r+0xc>

08008718 <__swbuf_r>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	460e      	mov	r6, r1
 800871c:	4614      	mov	r4, r2
 800871e:	4605      	mov	r5, r0
 8008720:	b118      	cbz	r0, 800872a <__swbuf_r+0x12>
 8008722:	6a03      	ldr	r3, [r0, #32]
 8008724:	b90b      	cbnz	r3, 800872a <__swbuf_r+0x12>
 8008726:	f7ff f903 	bl	8007930 <__sinit>
 800872a:	69a3      	ldr	r3, [r4, #24]
 800872c:	60a3      	str	r3, [r4, #8]
 800872e:	89a3      	ldrh	r3, [r4, #12]
 8008730:	071a      	lsls	r2, r3, #28
 8008732:	d501      	bpl.n	8008738 <__swbuf_r+0x20>
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	b943      	cbnz	r3, 800874a <__swbuf_r+0x32>
 8008738:	4621      	mov	r1, r4
 800873a:	4628      	mov	r0, r5
 800873c:	f000 f82a 	bl	8008794 <__swsetup_r>
 8008740:	b118      	cbz	r0, 800874a <__swbuf_r+0x32>
 8008742:	f04f 37ff 	mov.w	r7, #4294967295
 8008746:	4638      	mov	r0, r7
 8008748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800874a:	6823      	ldr	r3, [r4, #0]
 800874c:	6922      	ldr	r2, [r4, #16]
 800874e:	1a98      	subs	r0, r3, r2
 8008750:	6963      	ldr	r3, [r4, #20]
 8008752:	b2f6      	uxtb	r6, r6
 8008754:	4283      	cmp	r3, r0
 8008756:	4637      	mov	r7, r6
 8008758:	dc05      	bgt.n	8008766 <__swbuf_r+0x4e>
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f7ff ffb3 	bl	80086c8 <_fflush_r>
 8008762:	2800      	cmp	r0, #0
 8008764:	d1ed      	bne.n	8008742 <__swbuf_r+0x2a>
 8008766:	68a3      	ldr	r3, [r4, #8]
 8008768:	3b01      	subs	r3, #1
 800876a:	60a3      	str	r3, [r4, #8]
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	701e      	strb	r6, [r3, #0]
 8008774:	6962      	ldr	r2, [r4, #20]
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	429a      	cmp	r2, r3
 800877a:	d004      	beq.n	8008786 <__swbuf_r+0x6e>
 800877c:	89a3      	ldrh	r3, [r4, #12]
 800877e:	07db      	lsls	r3, r3, #31
 8008780:	d5e1      	bpl.n	8008746 <__swbuf_r+0x2e>
 8008782:	2e0a      	cmp	r6, #10
 8008784:	d1df      	bne.n	8008746 <__swbuf_r+0x2e>
 8008786:	4621      	mov	r1, r4
 8008788:	4628      	mov	r0, r5
 800878a:	f7ff ff9d 	bl	80086c8 <_fflush_r>
 800878e:	2800      	cmp	r0, #0
 8008790:	d0d9      	beq.n	8008746 <__swbuf_r+0x2e>
 8008792:	e7d6      	b.n	8008742 <__swbuf_r+0x2a>

08008794 <__swsetup_r>:
 8008794:	b538      	push	{r3, r4, r5, lr}
 8008796:	4b29      	ldr	r3, [pc, #164]	@ (800883c <__swsetup_r+0xa8>)
 8008798:	4605      	mov	r5, r0
 800879a:	6818      	ldr	r0, [r3, #0]
 800879c:	460c      	mov	r4, r1
 800879e:	b118      	cbz	r0, 80087a8 <__swsetup_r+0x14>
 80087a0:	6a03      	ldr	r3, [r0, #32]
 80087a2:	b90b      	cbnz	r3, 80087a8 <__swsetup_r+0x14>
 80087a4:	f7ff f8c4 	bl	8007930 <__sinit>
 80087a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ac:	0719      	lsls	r1, r3, #28
 80087ae:	d422      	bmi.n	80087f6 <__swsetup_r+0x62>
 80087b0:	06da      	lsls	r2, r3, #27
 80087b2:	d407      	bmi.n	80087c4 <__swsetup_r+0x30>
 80087b4:	2209      	movs	r2, #9
 80087b6:	602a      	str	r2, [r5, #0]
 80087b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	f04f 30ff 	mov.w	r0, #4294967295
 80087c2:	e033      	b.n	800882c <__swsetup_r+0x98>
 80087c4:	0758      	lsls	r0, r3, #29
 80087c6:	d512      	bpl.n	80087ee <__swsetup_r+0x5a>
 80087c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087ca:	b141      	cbz	r1, 80087de <__swsetup_r+0x4a>
 80087cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087d0:	4299      	cmp	r1, r3
 80087d2:	d002      	beq.n	80087da <__swsetup_r+0x46>
 80087d4:	4628      	mov	r0, r5
 80087d6:	f7ff f9d3 	bl	8007b80 <_free_r>
 80087da:	2300      	movs	r3, #0
 80087dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80087de:	89a3      	ldrh	r3, [r4, #12]
 80087e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087e4:	81a3      	strh	r3, [r4, #12]
 80087e6:	2300      	movs	r3, #0
 80087e8:	6063      	str	r3, [r4, #4]
 80087ea:	6923      	ldr	r3, [r4, #16]
 80087ec:	6023      	str	r3, [r4, #0]
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	f043 0308 	orr.w	r3, r3, #8
 80087f4:	81a3      	strh	r3, [r4, #12]
 80087f6:	6923      	ldr	r3, [r4, #16]
 80087f8:	b94b      	cbnz	r3, 800880e <__swsetup_r+0x7a>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008804:	d003      	beq.n	800880e <__swsetup_r+0x7a>
 8008806:	4621      	mov	r1, r4
 8008808:	4628      	mov	r0, r5
 800880a:	f000 f8a5 	bl	8008958 <__smakebuf_r>
 800880e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008812:	f013 0201 	ands.w	r2, r3, #1
 8008816:	d00a      	beq.n	800882e <__swsetup_r+0x9a>
 8008818:	2200      	movs	r2, #0
 800881a:	60a2      	str	r2, [r4, #8]
 800881c:	6962      	ldr	r2, [r4, #20]
 800881e:	4252      	negs	r2, r2
 8008820:	61a2      	str	r2, [r4, #24]
 8008822:	6922      	ldr	r2, [r4, #16]
 8008824:	b942      	cbnz	r2, 8008838 <__swsetup_r+0xa4>
 8008826:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800882a:	d1c5      	bne.n	80087b8 <__swsetup_r+0x24>
 800882c:	bd38      	pop	{r3, r4, r5, pc}
 800882e:	0799      	lsls	r1, r3, #30
 8008830:	bf58      	it	pl
 8008832:	6962      	ldrpl	r2, [r4, #20]
 8008834:	60a2      	str	r2, [r4, #8]
 8008836:	e7f4      	b.n	8008822 <__swsetup_r+0x8e>
 8008838:	2000      	movs	r0, #0
 800883a:	e7f7      	b.n	800882c <__swsetup_r+0x98>
 800883c:	200000b0 	.word	0x200000b0

08008840 <memmove>:
 8008840:	4288      	cmp	r0, r1
 8008842:	b510      	push	{r4, lr}
 8008844:	eb01 0402 	add.w	r4, r1, r2
 8008848:	d902      	bls.n	8008850 <memmove+0x10>
 800884a:	4284      	cmp	r4, r0
 800884c:	4623      	mov	r3, r4
 800884e:	d807      	bhi.n	8008860 <memmove+0x20>
 8008850:	1e43      	subs	r3, r0, #1
 8008852:	42a1      	cmp	r1, r4
 8008854:	d008      	beq.n	8008868 <memmove+0x28>
 8008856:	f811 2b01 	ldrb.w	r2, [r1], #1
 800885a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800885e:	e7f8      	b.n	8008852 <memmove+0x12>
 8008860:	4402      	add	r2, r0
 8008862:	4601      	mov	r1, r0
 8008864:	428a      	cmp	r2, r1
 8008866:	d100      	bne.n	800886a <memmove+0x2a>
 8008868:	bd10      	pop	{r4, pc}
 800886a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800886e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008872:	e7f7      	b.n	8008864 <memmove+0x24>

08008874 <_sbrk_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	@ (8008890 <_sbrk_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7f9 f976 	bl	8001b70 <_sbrk>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_sbrk_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_sbrk_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	200008c4 	.word	0x200008c4

08008894 <memcpy>:
 8008894:	440a      	add	r2, r1
 8008896:	4291      	cmp	r1, r2
 8008898:	f100 33ff 	add.w	r3, r0, #4294967295
 800889c:	d100      	bne.n	80088a0 <memcpy+0xc>
 800889e:	4770      	bx	lr
 80088a0:	b510      	push	{r4, lr}
 80088a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088aa:	4291      	cmp	r1, r2
 80088ac:	d1f9      	bne.n	80088a2 <memcpy+0xe>
 80088ae:	bd10      	pop	{r4, pc}

080088b0 <_realloc_r>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	4680      	mov	r8, r0
 80088b6:	4615      	mov	r5, r2
 80088b8:	460c      	mov	r4, r1
 80088ba:	b921      	cbnz	r1, 80088c6 <_realloc_r+0x16>
 80088bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088c0:	4611      	mov	r1, r2
 80088c2:	f7ff b9c9 	b.w	8007c58 <_malloc_r>
 80088c6:	b92a      	cbnz	r2, 80088d4 <_realloc_r+0x24>
 80088c8:	f7ff f95a 	bl	8007b80 <_free_r>
 80088cc:	2400      	movs	r4, #0
 80088ce:	4620      	mov	r0, r4
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	f000 f89e 	bl	8008a14 <_malloc_usable_size_r>
 80088d8:	4285      	cmp	r5, r0
 80088da:	4606      	mov	r6, r0
 80088dc:	d802      	bhi.n	80088e4 <_realloc_r+0x34>
 80088de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80088e2:	d8f4      	bhi.n	80088ce <_realloc_r+0x1e>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4640      	mov	r0, r8
 80088e8:	f7ff f9b6 	bl	8007c58 <_malloc_r>
 80088ec:	4607      	mov	r7, r0
 80088ee:	2800      	cmp	r0, #0
 80088f0:	d0ec      	beq.n	80088cc <_realloc_r+0x1c>
 80088f2:	42b5      	cmp	r5, r6
 80088f4:	462a      	mov	r2, r5
 80088f6:	4621      	mov	r1, r4
 80088f8:	bf28      	it	cs
 80088fa:	4632      	movcs	r2, r6
 80088fc:	f7ff ffca 	bl	8008894 <memcpy>
 8008900:	4621      	mov	r1, r4
 8008902:	4640      	mov	r0, r8
 8008904:	f7ff f93c 	bl	8007b80 <_free_r>
 8008908:	463c      	mov	r4, r7
 800890a:	e7e0      	b.n	80088ce <_realloc_r+0x1e>

0800890c <__swhatbuf_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	460c      	mov	r4, r1
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	2900      	cmp	r1, #0
 8008916:	b096      	sub	sp, #88	@ 0x58
 8008918:	4615      	mov	r5, r2
 800891a:	461e      	mov	r6, r3
 800891c:	da0d      	bge.n	800893a <__swhatbuf_r+0x2e>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008924:	f04f 0100 	mov.w	r1, #0
 8008928:	bf14      	ite	ne
 800892a:	2340      	movne	r3, #64	@ 0x40
 800892c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008930:	2000      	movs	r0, #0
 8008932:	6031      	str	r1, [r6, #0]
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	b016      	add	sp, #88	@ 0x58
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	466a      	mov	r2, sp
 800893c:	f000 f848 	bl	80089d0 <_fstat_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	dbec      	blt.n	800891e <__swhatbuf_r+0x12>
 8008944:	9901      	ldr	r1, [sp, #4]
 8008946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800894a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800894e:	4259      	negs	r1, r3
 8008950:	4159      	adcs	r1, r3
 8008952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008956:	e7eb      	b.n	8008930 <__swhatbuf_r+0x24>

08008958 <__smakebuf_r>:
 8008958:	898b      	ldrh	r3, [r1, #12]
 800895a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895c:	079d      	lsls	r5, r3, #30
 800895e:	4606      	mov	r6, r0
 8008960:	460c      	mov	r4, r1
 8008962:	d507      	bpl.n	8008974 <__smakebuf_r+0x1c>
 8008964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	2301      	movs	r3, #1
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	b003      	add	sp, #12
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	ab01      	add	r3, sp, #4
 8008976:	466a      	mov	r2, sp
 8008978:	f7ff ffc8 	bl	800890c <__swhatbuf_r>
 800897c:	9f00      	ldr	r7, [sp, #0]
 800897e:	4605      	mov	r5, r0
 8008980:	4639      	mov	r1, r7
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff f968 	bl	8007c58 <_malloc_r>
 8008988:	b948      	cbnz	r0, 800899e <__smakebuf_r+0x46>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	059a      	lsls	r2, r3, #22
 8008990:	d4ee      	bmi.n	8008970 <__smakebuf_r+0x18>
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	f043 0302 	orr.w	r3, r3, #2
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	e7e2      	b.n	8008964 <__smakebuf_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	6020      	str	r0, [r4, #0]
 80089a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ae:	b15b      	cbz	r3, 80089c8 <__smakebuf_r+0x70>
 80089b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089b4:	4630      	mov	r0, r6
 80089b6:	f000 f81d 	bl	80089f4 <_isatty_r>
 80089ba:	b128      	cbz	r0, 80089c8 <__smakebuf_r+0x70>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	431d      	orrs	r5, r3
 80089cc:	81a5      	strh	r5, [r4, #12]
 80089ce:	e7cf      	b.n	8008970 <__smakebuf_r+0x18>

080089d0 <_fstat_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d07      	ldr	r5, [pc, #28]	@ (80089f0 <_fstat_r+0x20>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	f7f9 f89e 	bl	8001b1e <_fstat>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d102      	bne.n	80089ec <_fstat_r+0x1c>
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	b103      	cbz	r3, 80089ec <_fstat_r+0x1c>
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	200008c4 	.word	0x200008c4

080089f4 <_isatty_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d06      	ldr	r5, [pc, #24]	@ (8008a10 <_isatty_r+0x1c>)
 80089f8:	2300      	movs	r3, #0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	f7f9 f89d 	bl	8001b3e <_isatty>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_isatty_r+0x1a>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_isatty_r+0x1a>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	200008c4 	.word	0x200008c4

08008a14 <_malloc_usable_size_r>:
 8008a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a18:	1f18      	subs	r0, r3, #4
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	bfbc      	itt	lt
 8008a1e:	580b      	ldrlt	r3, [r1, r0]
 8008a20:	18c0      	addlt	r0, r0, r3
 8008a22:	4770      	bx	lr

08008a24 <_init>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr

08008a30 <_fini>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr
