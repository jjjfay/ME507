
Term_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08008960  08008960  00009960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b44  08008b44  0000a108  2**0
                  CONTENTS
  4 .ARM          00000008  08008b44  08008b44  00009b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b4c  08008b4c  0000a108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08008b54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000604  20000108  08008c5c  0000a108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08008c5c  0000a70c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d8b  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e00  00000000  00000000  00020ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00023cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa2  00000000  00000000  000250e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a698  00000000  00000000  0002608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001829c  00000000  00000000  00050722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001081fd  00000000  00000000  000689be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170bbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  00170c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00176a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008948 	.word	0x08008948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08008948 	.word	0x08008948

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_init>:
/**
 * @brief A function to initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_init(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize the motor driver channels
	start_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fe9f 	bl	80012b0 <start_PWM>

	//initialize the encoder reader channels
	init_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f862 	bl	8000640 <init_channels>


}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <controller_deinit>:
/**
 * @brief A function to de-initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_deinit(controller_t* p_cont){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//de-initialize the motor driver channels
	stop_PWM(p_cont->p_mot);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fe9e 	bl	80012d2 <stop_PWM>

	//de-initialize the encoder reader channels
	deinit_channels(p_cont->p_enc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f85e 	bl	800065c <deinit_channels>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <move>:
/**
 * @brief A function to move the controlled motor to the desired position.
 *
 * @param p_cont The controller object to perform the function on.
 */
int32_t move(controller_t* p_cont){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	//The pwm value should range from 0 to 799,999

	//calculate the desired PWM value using the gain and setpoint.

	int curr_pos = get_pos(p_cont->p_enc);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f85f 	bl	8000678 <get_pos>
 80005ba:	60f8      	str	r0, [r7, #12]

	p_cont->p_mot->pwm_val = p_cont->gain*(p_cont->setpoint - curr_pos);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	68d9      	ldr	r1, [r3, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	fb01 f202 	mul.w	r2, r1, r2
 80005d0:	601a      	str	r2, [r3, #0]

	//saturation
	if(p_cont->p_mot->pwm_val > 799999)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <move+0x74>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	dd04      	ble.n	80005e8 <move+0x40>
	{
		p_cont->p_mot->pwm_val = 799999;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <move+0x74>)
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	e009      	b.n	80005fc <move+0x54>
	}
	else if(p_cont->p_mot->pwm_val < -799999){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <move+0x78>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	da03      	bge.n	80005fc <move+0x54>

		p_cont->p_mot->pwm_val = -799999;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <move+0x78>)
 80005fa:	601a      	str	r2, [r3, #0]

	//might also want to add in some sort of sensitivity like if its below a certain
	//threshold we make it zero

	//set the duty cycle of the motor
	set_duty(p_cont->p_mot, p_cont->p_mot->pwm_val);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	4610      	mov	r0, r2
 800060a:	f000 fe73 	bl	80012f4 <set_duty>

	//return the pwm_val for monitoring
	return p_cont->p_mot->pwm_val;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]

}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	000c34ff 	.word	0x000c34ff
 8000620:	fff3cb01 	.word	0xfff3cb01

08000624 <set_setpoint>:
 * @brief A function to set the new controller set point.
 *
 * @param p_cont The controller object to perform the function on.
 * @param new_setpoint The new set point for the controller object.
 */
void set_setpoint(controller_t* p_cont, int32_t new_setpoint){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]

	p_cont->setpoint = new_setpoint;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	60da      	str	r2, [r3, #12]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <init_channels>:
/**
 * @brief A function to initialize the channels for reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void init_channels(encoder_t* p_enc){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	213c      	movs	r1, #60	@ 0x3c
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f91a 	bl	8005888 <HAL_TIM_Encoder_Start>
	//HAL_TIM_Encoder_Start(p_enc->hal_tim,  p_enc->channel2);
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <deinit_channels>:
/**
 * @brief A function to stop the channels from reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void deinit_channels(encoder_t* p_enc){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Stop(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	213c      	movs	r1, #60	@ 0x3c
 800066a:	4618      	mov	r0, r3
 800066c:	f005 f99a 	bl	80059a4 <HAL_TIM_Encoder_Stop>
	//HAL_TIM_Encoder_Stop(p_enc->hal_tim,  p_enc->channel2);
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <get_pos>:
 * @param p_enc The encoder object to perform the function on.
 *
 * @return count The encoder count to be returned.
 */

uint16_t get_pos(encoder_t* p_enc){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

	p_enc->prev_count = p_enc->curr_count;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	821a      	strh	r2, [r3, #16]
	p_enc->curr_count = __HAL_TIM_GET_COUNTER(p_enc->hal_tim);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000692:	b21a      	sxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	81da      	strh	r2, [r3, #14]

	p_enc->delta = p_enc->curr_count - p_enc->prev_count;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	825a      	strh	r2, [r3, #18]
	//address overflow issues
	if(p_enc->delta >= 32768){

		p_enc->delta -= 65536;
	}
	else if(p_enc->delta <= -32768){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80006b8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80006bc:	d104      	bne.n	80006c8 <get_pos+0x50>

		p_enc->delta += 65536;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	825a      	strh	r2, [r3, #18]
	}

	p_enc->mot_pos += p_enc->delta;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b21a      	sxth	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	819a      	strh	r2, [r3, #12]


	return p_enc->mot_pos;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80006e8:	b29b      	uxth	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <task1>:
/**
 * @brief Task 1, the hand task, is responsible for moving the prosthetic hand fingers based on the
 * 		  set point determined by the myoelectric sensor.
 */
// Task 1 - HAND TASK
void task1(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 80006fc:	4b46      	ldr	r3, [pc, #280]	@ (8000818 <task1+0x120>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d11a      	bne.n	800073a <task1+0x42>

		n = sprintf(print_buff,"\n\rTask 1, State 0\n");
 8000704:	4945      	ldr	r1, [pc, #276]	@ (800081c <task1+0x124>)
 8000706:	4846      	ldr	r0, [pc, #280]	@ (8000820 <task1+0x128>)
 8000708:	f007 f8ec 	bl	80078e4 <siprintf>
 800070c:	4603      	mov	r3, r0
 800070e:	4a45      	ldr	r2, [pc, #276]	@ (8000824 <task1+0x12c>)
 8000710:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 8000712:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <task1+0x12c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b29a      	uxth	r2, r3
 8000718:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800071c:	4940      	ldr	r1, [pc, #256]	@ (8000820 <task1+0x128>)
 800071e:	4842      	ldr	r0, [pc, #264]	@ (8000828 <task1+0x130>)
 8000720:	f006 fab4 	bl	8006c8c <HAL_UART_Transmit>

		//init the motor driver PWM channel and the
		//the encoder channels
		controller_init(&hand_cont);
 8000724:	4841      	ldr	r0, [pc, #260]	@ (800082c <task1+0x134>)
 8000726:	f7ff ff1b 	bl	8000560 <controller_init>

		//initialize the motor to be at rest
		set_duty(&hand_mot,0);
 800072a:	2100      	movs	r1, #0
 800072c:	4840      	ldr	r0, [pc, #256]	@ (8000830 <task1+0x138>)
 800072e:	f000 fde1 	bl	80012f4 <set_duty>

		currentState = 1;}
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <task1+0x120>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);

		currentState = 1;}
}
 8000738:	e06c      	b.n	8000814 <task1+0x11c>
	else if (currentState == 1) {
 800073a:	4b37      	ldr	r3, [pc, #220]	@ (8000818 <task1+0x120>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d121      	bne.n	8000786 <task1+0x8e>
		n = sprintf(print_buff,"\n\rTask 1, State 1\n");
 8000742:	493c      	ldr	r1, [pc, #240]	@ (8000834 <task1+0x13c>)
 8000744:	4836      	ldr	r0, [pc, #216]	@ (8000820 <task1+0x128>)
 8000746:	f007 f8cd 	bl	80078e4 <siprintf>
 800074a:	4603      	mov	r3, r0
 800074c:	4a35      	ldr	r2, [pc, #212]	@ (8000824 <task1+0x12c>)
 800074e:	6013      	str	r3, [r2, #0]
		hmyo_prev = hmyo_curr;
 8000750:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <task1+0x140>)
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	4b39      	ldr	r3, [pc, #228]	@ (800083c <task1+0x144>)
 8000756:	801a      	strh	r2, [r3, #0]
		hmyo_curr = read_current(&hmyo);
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <task1+0x148>)
 800075a:	f000 feb4 	bl	80014c6 <read_current>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <task1+0x140>)
 8000764:	801a      	strh	r2, [r3, #0]
		hmyo_delta = hmyo_curr - hmyo_prev;
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <task1+0x140>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	4b34      	ldr	r3, [pc, #208]	@ (800083c <task1+0x144>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	b29a      	uxth	r2, r3
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <task1+0x14c>)
 8000774:	801a      	strh	r2, [r3, #0]
		if(abs(hmyo_delta) > 50){
 8000776:	4b33      	ldr	r3, [pc, #204]	@ (8000844 <task1+0x14c>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b32      	cmp	r3, #50	@ 0x32
 800077c:	d94a      	bls.n	8000814 <task1+0x11c>
			currentState = 2;
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <task1+0x120>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	e046      	b.n	8000814 <task1+0x11c>
	else if (currentState == 2) {
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <task1+0x120>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d138      	bne.n	8000800 <task1+0x108>
		n = sprintf(print_buff,"\n\rTask 1, State 2\n");
 800078e:	492e      	ldr	r1, [pc, #184]	@ (8000848 <task1+0x150>)
 8000790:	4823      	ldr	r0, [pc, #140]	@ (8000820 <task1+0x128>)
 8000792:	f007 f8a7 	bl	80078e4 <siprintf>
 8000796:	4603      	mov	r3, r0
 8000798:	4a22      	ldr	r2, [pc, #136]	@ (8000824 <task1+0x12c>)
 800079a:	6013      	str	r3, [r2, #0]
		hand_mot_pos += hmyo_delta; //probably need some sort of scaling factor here
 800079c:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <task1+0x154>)
 800079e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <task1+0x14c>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b27      	ldr	r3, [pc, #156]	@ (800084c <task1+0x154>)
 80007b0:	801a      	strh	r2, [r3, #0]
		if(hand_mot_pos > 300)//set max value for the motor position here
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <task1+0x154>)
 80007b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007bc:	dd04      	ble.n	80007c8 <task1+0xd0>
			hand_mot_pos = 300;
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <task1+0x154>)
 80007c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80007c4:	801a      	strh	r2, [r3, #0]
 80007c6:	e007      	b.n	80007d8 <task1+0xe0>
		else if (hand_mot_pos < 0)
 80007c8:	4b20      	ldr	r3, [pc, #128]	@ (800084c <task1+0x154>)
 80007ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da02      	bge.n	80007d8 <task1+0xe0>
			hand_mot_pos = 0;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <task1+0x154>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
		set_setpoint(&hand_cont, hand_mot_pos);
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <task1+0x154>)
 80007da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007de:	4619      	mov	r1, r3
 80007e0:	4812      	ldr	r0, [pc, #72]	@ (800082c <task1+0x134>)
 80007e2:	f7ff ff1f 	bl	8000624 <set_setpoint>
		move(&hand_cont);
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <task1+0x134>)
 80007e8:	f7ff fede 	bl	80005a8 <move>
		if(move(&hand_cont) < 5){
 80007ec:	480f      	ldr	r0, [pc, #60]	@ (800082c <task1+0x134>)
 80007ee:	f7ff fedb 	bl	80005a8 <move>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	dc0d      	bgt.n	8000814 <task1+0x11c>
			currentState = 1;
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <task1+0x120>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	e009      	b.n	8000814 <task1+0x11c>
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
 8000800:	4913      	ldr	r1, [pc, #76]	@ (8000850 <task1+0x158>)
 8000802:	4807      	ldr	r0, [pc, #28]	@ (8000820 <task1+0x128>)
 8000804:	f007 f86e 	bl	80078e4 <siprintf>
 8000808:	4603      	mov	r3, r0
 800080a:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <task1+0x12c>)
 800080c:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800080e:	4b02      	ldr	r3, [pc, #8]	@ (8000818 <task1+0x120>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200003d4 	.word	0x200003d4
 800081c:	08008960 	.word	0x08008960
 8000820:	200003d8 	.word	0x200003d8
 8000824:	20000470 	.word	0x20000470
 8000828:	20000334 	.word	0x20000334
 800082c:	20000070 	.word	0x20000070
 8000830:	20000000 	.word	0x20000000
 8000834:	08008974 	.word	0x08008974
 8000838:	200003c6 	.word	0x200003c6
 800083c:	200003c8 	.word	0x200003c8
 8000840:	20000090 	.word	0x20000090
 8000844:	200003ce 	.word	0x200003ce
 8000848:	08008988 	.word	0x08008988
 800084c:	200003c2 	.word	0x200003c2
 8000850:	0800899c 	.word	0x0800899c

08000854 <task2>:
/**
 * @brief Task 2, the spin motor task, is responsible for rotating the prosthetic hand based
 * 		  on the set point determined by the myoelectric sensor alone.
 */
// Task 2 - SPIN MOTOR TASK
void task2(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 8000858:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <task2+0x120>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d11a      	bne.n	8000896 <task2+0x42>

		n = sprintf(print_buff,"\n\rTask 2, State 0\n");
 8000860:	4945      	ldr	r1, [pc, #276]	@ (8000978 <task2+0x124>)
 8000862:	4846      	ldr	r0, [pc, #280]	@ (800097c <task2+0x128>)
 8000864:	f007 f83e 	bl	80078e4 <siprintf>
 8000868:	4603      	mov	r3, r0
 800086a:	4a45      	ldr	r2, [pc, #276]	@ (8000980 <task2+0x12c>)
 800086c:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 800086e:	4b44      	ldr	r3, [pc, #272]	@ (8000980 <task2+0x12c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	b29a      	uxth	r2, r3
 8000874:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000878:	4940      	ldr	r1, [pc, #256]	@ (800097c <task2+0x128>)
 800087a:	4842      	ldr	r0, [pc, #264]	@ (8000984 <task2+0x130>)
 800087c:	f006 fa06 	bl	8006c8c <HAL_UART_Transmit>

		//initiaize the motor driver PWM channel and the
		//the encoder channels
		controller_init(&spin_cont);
 8000880:	4841      	ldr	r0, [pc, #260]	@ (8000988 <task2+0x134>)
 8000882:	f7ff fe6d 	bl	8000560 <controller_init>

		//initialize the motor to be at rest
		set_duty(&spin_mot,0);
 8000886:	2100      	movs	r1, #0
 8000888:	4840      	ldr	r0, [pc, #256]	@ (800098c <task2+0x138>)
 800088a:	f000 fd33 	bl	80012f4 <set_duty>

		currentState = 1;}
 800088e:	4b39      	ldr	r3, [pc, #228]	@ (8000974 <task2+0x120>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]

	else {
		n = sprintf(print_buff,"\n\rTask 2, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;}
}
 8000894:	e06c      	b.n	8000970 <task2+0x11c>
	else if (currentState == 1) {
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <task2+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d121      	bne.n	80008e2 <task2+0x8e>
		n = sprintf(print_buff,"\n\rTask 2, State 1\n");
 800089e:	493c      	ldr	r1, [pc, #240]	@ (8000990 <task2+0x13c>)
 80008a0:	4836      	ldr	r0, [pc, #216]	@ (800097c <task2+0x128>)
 80008a2:	f007 f81f 	bl	80078e4 <siprintf>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a35      	ldr	r2, [pc, #212]	@ (8000980 <task2+0x12c>)
 80008aa:	6013      	str	r3, [r2, #0]
		smyo_prev = smyo_curr;
 80008ac:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <task2+0x140>)
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	4b39      	ldr	r3, [pc, #228]	@ (8000998 <task2+0x144>)
 80008b2:	801a      	strh	r2, [r3, #0]
		smyo_curr = read_current(&smyo);
 80008b4:	4839      	ldr	r0, [pc, #228]	@ (800099c <task2+0x148>)
 80008b6:	f000 fe06 	bl	80014c6 <read_current>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <task2+0x140>)
 80008c0:	801a      	strh	r2, [r3, #0]
		smyo_delta = smyo_curr - smyo_prev;
 80008c2:	4b34      	ldr	r3, [pc, #208]	@ (8000994 <task2+0x140>)
 80008c4:	881a      	ldrh	r2, [r3, #0]
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <task2+0x144>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b34      	ldr	r3, [pc, #208]	@ (80009a0 <task2+0x14c>)
 80008d0:	801a      	strh	r2, [r3, #0]
			if(abs(smyo_delta) > 50){
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <task2+0x14c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2b32      	cmp	r3, #50	@ 0x32
 80008d8:	d94a      	bls.n	8000970 <task2+0x11c>
					currentState = 2;
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <task2+0x120>)
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	e046      	b.n	8000970 <task2+0x11c>
	else if (currentState == 2) {
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <task2+0x120>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d138      	bne.n	800095c <task2+0x108>
		n = sprintf(print_buff,"\n\rTask 2, State 2\n");
 80008ea:	492e      	ldr	r1, [pc, #184]	@ (80009a4 <task2+0x150>)
 80008ec:	4823      	ldr	r0, [pc, #140]	@ (800097c <task2+0x128>)
 80008ee:	f006 fff9 	bl	80078e4 <siprintf>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <task2+0x12c>)
 80008f6:	6013      	str	r3, [r2, #0]
		spin_mot_pos += smyo_delta; //probably need some sort of scaling factor here
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <task2+0x154>)
 80008fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <task2+0x14c>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	b21a      	sxth	r2, r3
 800090a:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <task2+0x154>)
 800090c:	801a      	strh	r2, [r3, #0]
		if(spin_mot_pos > 300)//set max value for the motor position here
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <task2+0x154>)
 8000910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000914:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000918:	dd04      	ble.n	8000924 <task2+0xd0>
					spin_mot_pos = 300;
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <task2+0x154>)
 800091c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	e007      	b.n	8000934 <task2+0xe0>
	    else if (spin_mot_pos < 0)
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <task2+0x154>)
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	2b00      	cmp	r3, #0
 800092c:	da02      	bge.n	8000934 <task2+0xe0>
					spin_mot_pos = 0; //this should be the at rest position of the device
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <task2+0x154>)
 8000930:	2200      	movs	r2, #0
 8000932:	801a      	strh	r2, [r3, #0]
		set_setpoint(&spin_cont, spin_mot_pos);
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <task2+0x154>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	4619      	mov	r1, r3
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <task2+0x134>)
 800093e:	f7ff fe71 	bl	8000624 <set_setpoint>
		move(&spin_cont);
 8000942:	4811      	ldr	r0, [pc, #68]	@ (8000988 <task2+0x134>)
 8000944:	f7ff fe30 	bl	80005a8 <move>
		if(move(&spin_cont) < 5){
 8000948:	480f      	ldr	r0, [pc, #60]	@ (8000988 <task2+0x134>)
 800094a:	f7ff fe2d 	bl	80005a8 <move>
 800094e:	4603      	mov	r3, r0
 8000950:	2b04      	cmp	r3, #4
 8000952:	dc0d      	bgt.n	8000970 <task2+0x11c>
					currentState = 1;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <task2+0x120>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	e009      	b.n	8000970 <task2+0x11c>
		n = sprintf(print_buff,"\n\rTask 2, Invalid State. Reset to State 1\n");
 800095c:	4913      	ldr	r1, [pc, #76]	@ (80009ac <task2+0x158>)
 800095e:	4807      	ldr	r0, [pc, #28]	@ (800097c <task2+0x128>)
 8000960:	f006 ffc0 	bl	80078e4 <siprintf>
 8000964:	4603      	mov	r3, r0
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <task2+0x12c>)
 8000968:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800096a:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <task2+0x120>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000474 	.word	0x20000474
 8000978:	080089c8 	.word	0x080089c8
 800097c:	20000478 	.word	0x20000478
 8000980:	20000510 	.word	0x20000510
 8000984:	20000334 	.word	0x20000334
 8000988:	20000080 	.word	0x20000080
 800098c:	20000024 	.word	0x20000024
 8000990:	080089dc 	.word	0x080089dc
 8000994:	200003ca 	.word	0x200003ca
 8000998:	200003cc 	.word	0x200003cc
 800099c:	20000098 	.word	0x20000098
 80009a0:	200003d0 	.word	0x200003d0
 80009a4:	080089f0 	.word	0x080089f0
 80009a8:	200003c4 	.word	0x200003c4
 80009ac:	08008a04 	.word	0x08008a04

080009b0 <task3>:
/**
 * @brief Task 3, the wireless emergency stop task, is responsible for monitoring for a change in the
 * 	      PWM signal from a radio transmitter. If a change is detected, this task will end the program.
 */
// Task 3 - WIRELESS E STOP TASK
void task3(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 80009b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <task3+0xc0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d11b      	bne.n	80009f4 <task3+0x44>

		n = sprintf(print_buff,"\n\rTask 3, State 0\n");
 80009bc:	492d      	ldr	r1, [pc, #180]	@ (8000a74 <task3+0xc4>)
 80009be:	482e      	ldr	r0, [pc, #184]	@ (8000a78 <task3+0xc8>)
 80009c0:	f006 ff90 	bl	80078e4 <siprintf>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a7c <task3+0xcc>)
 80009c8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 80009ca:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <task3+0xcc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80009d4:	4928      	ldr	r1, [pc, #160]	@ (8000a78 <task3+0xc8>)
 80009d6:	482a      	ldr	r0, [pc, #168]	@ (8000a80 <task3+0xd0>)
 80009d8:	f006 f958 	bl	8006c8c <HAL_UART_Transmit>

		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_3);
 80009dc:	2108      	movs	r1, #8
 80009de:	4829      	ldr	r0, [pc, #164]	@ (8000a84 <task3+0xd4>)
 80009e0:	f004 fd62 	bl	80054a8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_4);
 80009e4:	210c      	movs	r1, #12
 80009e6:	4827      	ldr	r0, [pc, #156]	@ (8000a84 <task3+0xd4>)
 80009e8:	f004 fd5e 	bl	80054a8 <HAL_TIM_IC_Start_IT>


		currentState = 1;}
 80009ec:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <task3+0xc0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;
	}
}
 80009f2:	e03b      	b.n	8000a6c <task3+0xbc>
	else if (currentState == 1) {
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <task3+0xc0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d113      	bne.n	8000a24 <task3+0x74>
		n = sprintf(print_buff,"\n\rTask 3, State 1\n");
 80009fc:	4922      	ldr	r1, [pc, #136]	@ (8000a88 <task3+0xd8>)
 80009fe:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <task3+0xc8>)
 8000a00:	f006 ff70 	bl	80078e4 <siprintf>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <task3+0xcc>)
 8000a08:	6013      	str	r3, [r2, #0]
		if(check_delta(radio_pulse) == 1)
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <task3+0xdc>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fd7d 	bl	8001510 <check_delta>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d127      	bne.n	8000a6c <task3+0xbc>
				currentState = 2;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <task3+0xc0>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	e023      	b.n	8000a6c <task3+0xbc>
	else if (currentState == 2) {
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <task3+0xc0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d115      	bne.n	8000a58 <task3+0xa8>
		n = sprintf(print_buff,"\n\rTask 3, State 2 EMERGENCY STOP\n");
 8000a2c:	4918      	ldr	r1, [pc, #96]	@ (8000a90 <task3+0xe0>)
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <task3+0xc8>)
 8000a30:	f006 ff58 	bl	80078e4 <siprintf>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <task3+0xcc>)
 8000a38:	6013      	str	r3, [r2, #0]
		controller_deinit(&hand_cont);
 8000a3a:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <task3+0xe4>)
 8000a3c:	f7ff fda2 	bl	8000584 <controller_deinit>
		controller_deinit(&spin_cont);
 8000a40:	4815      	ldr	r0, [pc, #84]	@ (8000a98 <task3+0xe8>)
 8000a42:	f7ff fd9f 	bl	8000584 <controller_deinit>
		set_stby(&hand_mot,0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <task3+0xec>)
 8000a4a:	f000 fd1d 	bl	8001488 <set_stby>
		set_stby(&spin_mot,0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <task3+0xf0>)
 8000a52:	f000 fd19 	bl	8001488 <set_stby>
}
 8000a56:	e009      	b.n	8000a6c <task3+0xbc>
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
 8000a58:	4912      	ldr	r1, [pc, #72]	@ (8000aa4 <task3+0xf4>)
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <task3+0xc8>)
 8000a5c:	f006 ff42 	bl	80078e4 <siprintf>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <task3+0xcc>)
 8000a64:	6013      	str	r3, [r2, #0]
		currentState = 1;
 8000a66:	4b02      	ldr	r3, [pc, #8]	@ (8000a70 <task3+0xc0>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	20000514 	.word	0x20000514
 8000a74:	08008a30 	.word	0x08008a30
 8000a78:	20000518 	.word	0x20000518
 8000a7c:	200005b0 	.word	0x200005b0
 8000a80:	20000334 	.word	0x20000334
 8000a84:	20000250 	.word	0x20000250
 8000a88:	08008a44 	.word	0x08008a44
 8000a8c:	200003c0 	.word	0x200003c0
 8000a90:	08008a58 	.word	0x08008a58
 8000a94:	20000070 	.word	0x20000070
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000024 	.word	0x20000024
 8000aa4:	08008a7c 	.word	0x08008a7c

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aac:	f001 f887 	bl	8001bbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab0:	f000 f81a 	bl	8000ae8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ab4:	f000 f867 	bl	8000b86 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f000 fb46 	bl	8001148 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000abc:	f000 f88e 	bl	8000bdc <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ac0:	f000 f902 	bl	8000cc8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ac4:	f000 f964 	bl	8000d90 <MX_ADC3_Init>
  MX_TIM2_Init();
 8000ac8:	f000 fa52 	bl	8000f70 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000acc:	f000 f9c4 	bl	8000e58 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ad0:	f000 fab4 	bl	800103c <MX_TIM4_Init>
  MX_UART4_Init();
 8000ad4:	f000 fb08 	bl	80010e8 <MX_UART4_Init>
  while (1)
  {
	  //Continuously run the FSM

	 	  // Execute task 1
	 	  task1();
 8000ad8:	f7ff fe0e 	bl	80006f8 <task1>

	 	  // Execute task 2
	 	  task2();
 8000adc:	f7ff feba 	bl	8000854 <task2>

	 	  // Execute task 3
	 	  task3();
 8000ae0:	f7ff ff66 	bl	80009b0 <task3>
	 	  task1();
 8000ae4:	bf00      	nop
 8000ae6:	e7f7      	b.n	8000ad8 <main+0x30>

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b096      	sub	sp, #88	@ 0x58
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	2244      	movs	r2, #68	@ 0x44
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 ff57 	bl	80079aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	463b      	mov	r3, r7
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b0a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b0e:	f002 ff6d 	bl	80039ec <HAL_PWREx_ControlVoltageScaling>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b18:	f000 fbc4 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b26:	2302      	movs	r3, #2
 8000b28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000b32:	2314      	movs	r3, #20
 8000b34:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 ffa6 	bl	8003a98 <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b52:	f000 fba7 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b6a:	463b      	mov	r3, r7
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fb6e 	bl	8004250 <HAL_RCC_ClockConfig>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b7a:	f000 fb93 	bl	80012a4 <Error_Handler>
  }
}
 8000b7e:	bf00      	nop
 8000b80:	3758      	adds	r7, #88	@ 0x58
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b0a2      	sub	sp, #136	@ 0x88
 8000b8a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	2288      	movs	r2, #136	@ 0x88
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f006 ff09 	bl	80079aa <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b9c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b9e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000bbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bc0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 fd67 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000bd0:	f000 fb68 	bl	80012a4 <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3788      	adds	r7, #136	@ 0x88
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	@ 0x28
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
 8000bfc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c00:	4a2f      	ldr	r2, [pc, #188]	@ (8000cc0 <MX_ADC1_Init+0xe4>)
 8000c02:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c04:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b2a      	ldr	r3, [pc, #168]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c16:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1c:	4b27      	ldr	r3, [pc, #156]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c1e:	2204      	movs	r2, #4
 8000c20:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c22:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c28:	4b24      	ldr	r3, [pc, #144]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c2e:	4b23      	ldr	r3, [pc, #140]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c30:	2201      	movs	r2, #1
 8000c32:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c34:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c5e:	4817      	ldr	r0, [pc, #92]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c60:	f001 fa54 	bl	800210c <HAL_ADC_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000c6a:	f000 fb1b 	bl	80012a4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4810      	ldr	r0, [pc, #64]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000c7a:	f002 fb25 	bl	80032c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c84:	f000 fb0e 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c88:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_ADC1_Init+0xe8>)
 8000c8a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c8c:	2306      	movs	r3, #6
 8000c8e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c94:	237f      	movs	r3, #127	@ 0x7f
 8000c96:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c98:	2304      	movs	r3, #4
 8000c9a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_ADC1_Init+0xe0>)
 8000ca6:	f001 fd55 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000cb0:	f000 faf8 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	3728      	adds	r7, #40	@ 0x28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000124 	.word	0x20000124
 8000cc0:	50040000 	.word	0x50040000
 8000cc4:	04300002 	.word	0x04300002

08000cc8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cde:	4b29      	ldr	r3, [pc, #164]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000ce0:	4a29      	ldr	r2, [pc, #164]	@ (8000d88 <MX_ADC2_Init+0xc0>)
 8000ce2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ce4:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cea:	4b26      	ldr	r3, [pc, #152]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b23      	ldr	r3, [pc, #140]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cfc:	4b21      	ldr	r3, [pc, #132]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000cfe:	2204      	movs	r2, #4
 8000d00:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d02:	4b20      	ldr	r3, [pc, #128]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b19      	ldr	r3, [pc, #100]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d22:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d28:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d30:	4b14      	ldr	r3, [pc, #80]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d36:	4b13      	ldr	r3, [pc, #76]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d3e:	4811      	ldr	r0, [pc, #68]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d40:	f001 f9e4 	bl	800210c <HAL_ADC_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000d4a:	f000 faab 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_ADC2_Init+0xc4>)
 8000d50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d52:	2306      	movs	r3, #6
 8000d54:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d5a:	237f      	movs	r3, #127	@ 0x7f
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <MX_ADC2_Init+0xbc>)
 8000d6c:	f001 fcf2 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000d76:	f000 fa95 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000188 	.word	0x20000188
 8000d88:	50040100 	.word	0x50040100
 8000d8c:	08600004 	.word	0x08600004

08000d90 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d96:	463b      	mov	r3, r7
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
 8000da4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000da6:	4b29      	ldr	r3, [pc, #164]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000da8:	4a29      	ldr	r2, [pc, #164]	@ (8000e50 <MX_ADC3_Init+0xc0>)
 8000daa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dac:	4b27      	ldr	r3, [pc, #156]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000db2:	4b26      	ldr	r3, [pc, #152]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dbe:	4b23      	ldr	r3, [pc, #140]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc4:	4b21      	ldr	r3, [pc, #132]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dc6:	2204      	movs	r2, #4
 8000dc8:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000dca:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de4:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dea:	4b18      	ldr	r3, [pc, #96]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000df0:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000df8:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e06:	4811      	ldr	r0, [pc, #68]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000e08:	f001 f980 	bl	800210c <HAL_ADC_Init>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000e12:	f000 fa47 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_ADC3_Init+0xc4>)
 8000e18:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e22:	237f      	movs	r3, #127	@ 0x7f
 8000e24:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e26:	2304      	movs	r3, #4
 8000e28:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e2e:	463b      	mov	r3, r7
 8000e30:	4619      	mov	r1, r3
 8000e32:	4806      	ldr	r0, [pc, #24]	@ (8000e4c <MX_ADC3_Init+0xbc>)
 8000e34:	f001 fc8e 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000e3e:	f000 fa31 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200001ec 	.word	0x200001ec
 8000e50:	50040200 	.word	0x50040200
 8000e54:	10c00010 	.word	0x10c00010

08000e58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b090      	sub	sp, #64	@ 0x40
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e5e:	f107 031c 	add.w	r3, r7, #28
 8000e62:	2224      	movs	r2, #36	@ 0x24
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f006 fd9f 	bl	80079aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e78:	463b      	mov	r3, r7
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e84:	4b38      	ldr	r3, [pc, #224]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000e86:	4a39      	ldr	r2, [pc, #228]	@ (8000f6c <MX_TIM1_Init+0x114>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000e8a:	4b37      	ldr	r3, [pc, #220]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000e8c:	224f      	movs	r2, #79	@ 0x4f
 8000e8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b35      	ldr	r3, [pc, #212]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e96:	4b34      	ldr	r3, [pc, #208]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000e98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e9c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b32      	ldr	r3, [pc, #200]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea4:	4b30      	ldr	r3, [pc, #192]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000eb0:	482d      	ldr	r0, [pc, #180]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000eb2:	f004 faa1 	bl	80053f8 <HAL_TIM_IC_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000ebc:	f000 f9f2 	bl	80012a4 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	481f      	ldr	r0, [pc, #124]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000eec:	f004 fc26 	bl	800573c <HAL_TIM_Encoder_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000ef6:	f000 f9d5 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f06:	f107 0310 	add.w	r3, r7, #16
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4816      	ldr	r0, [pc, #88]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000f0e:	f005 fdc9 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f18:	f000 f9c4 	bl	80012a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f20:	2301      	movs	r3, #1
 8000f22:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	2208      	movs	r2, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000f34:	f004 fedf 	bl	8005cf6 <HAL_TIM_IC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000f3e:	f000 f9b1 	bl	80012a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f42:	2302      	movs	r3, #2
 8000f44:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f46:	2302      	movs	r3, #2
 8000f48:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	220c      	movs	r2, #12
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_TIM1_Init+0x110>)
 8000f52:	f004 fed0 	bl	8005cf6 <HAL_TIM_IC_ConfigChannel>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000f5c:	f000 f9a2 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	3740      	adds	r7, #64	@ 0x40
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000250 	.word	0x20000250
 8000f6c:	40012c00 	.word	0x40012c00

08000f70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000f96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	@ (8001038 <MX_TIM2_Init+0xc8>)
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fba:	481e      	ldr	r0, [pc, #120]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000fbc:	f004 f828 	bl	8005010 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000fc6:	f000 f96d 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4816      	ldr	r0, [pc, #88]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8000fda:	f005 fd63 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000fe4:	f000 f95e 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe8:	2360      	movs	r3, #96	@ 0x60
 8000fea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8001000:	f004 ff16 	bl	8005e30 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800100a:	f000 f94b 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100e:	463b      	mov	r3, r7
 8001010:	2208      	movs	r2, #8
 8001012:	4619      	mov	r1, r3
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8001016:	f004 ff0b 	bl	8005e30 <HAL_TIM_PWM_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001020:	f000 f940 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <MX_TIM2_Init+0xc4>)
 8001026:	f000 fc21 	bl	800186c <HAL_TIM_MspPostInit>

}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	@ 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000029c 	.word	0x2000029c
 8001038:	000c34ff 	.word	0x000c34ff

0800103c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	@ 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2224      	movs	r2, #36	@ 0x24
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 fcad 	bl	80079aa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800105a:	4b21      	ldr	r3, [pc, #132]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 800105c:	4a21      	ldr	r2, [pc, #132]	@ (80010e4 <MX_TIM4_Init+0xa8>)
 800105e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001060:	4b1f      	ldr	r3, [pc, #124]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 800106e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001072:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001080:	2301      	movs	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001088:	2301      	movs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 80010ac:	f004 fb46 	bl	800573c <HAL_TIM_Encoder_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80010b6:	f000 f8f5 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	@ (80010e0 <MX_TIM4_Init+0xa4>)
 80010c8:	f005 fcec 	bl	8006aa4 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80010d2:	f000 f8e7 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	@ 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200002e8 	.word	0x200002e8
 80010e4:	40000800 	.word	0x40000800

080010e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010ec:	4b14      	ldr	r3, [pc, #80]	@ (8001140 <MX_UART4_Init+0x58>)
 80010ee:	4a15      	ldr	r2, [pc, #84]	@ (8001144 <MX_UART4_Init+0x5c>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <MX_UART4_Init+0x58>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <MX_UART4_Init+0x58>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <MX_UART4_Init+0x58>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0e      	ldr	r3, [pc, #56]	@ (8001140 <MX_UART4_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <MX_UART4_Init+0x58>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <MX_UART4_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <MX_UART4_Init+0x58>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800111e:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <MX_UART4_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001124:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <MX_UART4_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <MX_UART4_Init+0x58>)
 800112c:	f005 fd60 	bl	8006bf0 <HAL_UART_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001136:	f000 f8b5 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	20000334 	.word	0x20000334
 8001144:	40004c00 	.word	0x40004c00

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	@ 0x28
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4b39      	ldr	r3, [pc, #228]	@ (8001244 <MX_GPIO_Init+0xfc>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a38      	ldr	r2, [pc, #224]	@ (8001244 <MX_GPIO_Init+0xfc>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b36      	ldr	r3, [pc, #216]	@ (8001244 <MX_GPIO_Init+0xfc>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	4b33      	ldr	r3, [pc, #204]	@ (8001244 <MX_GPIO_Init+0xfc>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	4a32      	ldr	r2, [pc, #200]	@ (8001244 <MX_GPIO_Init+0xfc>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001182:	4b30      	ldr	r3, [pc, #192]	@ (8001244 <MX_GPIO_Init+0xfc>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b2d      	ldr	r3, [pc, #180]	@ (8001244 <MX_GPIO_Init+0xfc>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	4a2c      	ldr	r2, [pc, #176]	@ (8001244 <MX_GPIO_Init+0xfc>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119a:	4b2a      	ldr	r3, [pc, #168]	@ (8001244 <MX_GPIO_Init+0xfc>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_GPIO_Init+0xfc>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <MX_GPIO_Init+0xfc>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_GPIO_Init+0xfc>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STBY_Pin|AIN1_Pin|GPIO_1_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c8:	f002 fbea 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|BIN1_Pin|GPIO_2_Pin, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 80011d2:	481d      	ldr	r0, [pc, #116]	@ (8001248 <MX_GPIO_Init+0x100>)
 80011d4:	f002 fbe4 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2101      	movs	r1, #1
 80011dc:	481b      	ldr	r0, [pc, #108]	@ (800124c <MX_GPIO_Init+0x104>)
 80011de:	f002 fbdf 	bl	80039a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STBY_Pin AIN1_Pin GPIO_1_Pin */
  GPIO_InitStruct.Pin = STBY_Pin|AIN1_Pin|GPIO_1_Pin;
 80011e2:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f002 fa25 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin BIN1_Pin GPIO_2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|BIN1_Pin|GPIO_2_Pin;
 8001202:	f44f 6303 	mov.w	r3, #2096	@ 0x830
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	@ (8001248 <MX_GPIO_Init+0x100>)
 800121c:	f002 fa16 	bl	800364c <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_GPIO_Init+0x104>)
 8001238:	f002 fa08 	bl	800364c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800123c:	bf00      	nop
 800123e:	3728      	adds	r7, #40	@ 0x28
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000
 8001248:	48000800 	.word	0x48000800
 800124c:	48000400 	.word	0x48000400

08001250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	      //ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     // radio_pulse = ch1_val - ch1_p;
  //}
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7f1b      	ldrb	r3, [r3, #28]
 800125c:	2b08      	cmp	r3, #8
 800125e:	d117      	bne.n	8001290 <HAL_TIM_IC_CaptureCallback+0x40>
	      //store the previous value and read the captured value from the input capture register
	  	  ch2_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001260:	2108      	movs	r1, #8
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f004 fef8 	bl	8006058 <HAL_TIM_ReadCapturedValue>
 8001268:	4603      	mov	r3, r0
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x48>)
 800126e:	801a      	strh	r2, [r3, #0]
	      ch2_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001270:	210c      	movs	r1, #12
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f004 fef0 	bl	8006058 <HAL_TIM_ReadCapturedValue>
 8001278:	4603      	mov	r3, r0
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x4c>)
 800127e:	801a      	strh	r2, [r3, #0]

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     radio_pulse = ch2_val - ch2_p;
 8001280:	4b06      	ldr	r3, [pc, #24]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x4c>)
 8001282:	881a      	ldrh	r2, [r3, #0]
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x48>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x50>)
 800128e:	801a      	strh	r2, [r3, #0]
  }

}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200003be 	.word	0x200003be
 800129c:	200003bc 	.word	0x200003bc
 80012a0:	200003c0 	.word	0x200003c0

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(&p_mot->hal_tim, &p_mot->pwm_channel);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	f103 0208 	add.w	r2, r3, #8
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3304      	adds	r3, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	4610      	mov	r0, r2
 80012c6:	f003 fefb 	bl	80050c0 <HAL_TIM_PWM_Start>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <stop_PWM>:


void stop_PWM(motor_t* p_mot)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 */

			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->pwm_channel);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f003 fff1 	bl	80052cc <HAL_TIM_PWM_Stop>

}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <set_duty>:

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 80012fe:	6839      	ldr	r1, [r7, #0]
 8001300:	4860      	ldr	r0, [pc, #384]	@ (8001484 <set_duty+0x190>)
 8001302:	f006 fadd 	bl	80078c0 <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->pwm_val = pwm_sig;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	601a      	str	r2, [r3, #0]
    // dereferencing and accessing struct fields
    // p_mot->duty = duty;
    // is shorthand for
    // (*p_mot).duty = duty;

    if (pwm_sig > 0) {
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	dd49      	ble.n	80013a6 <set_duty+0xb2>

    	//forwards
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,pwm_sig);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <set_duty+0x32>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	635a      	str	r2, [r3, #52]	@ 0x34
 8001324:	e02c      	b.n	8001380 <set_duty+0x8c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b04      	cmp	r3, #4
 800132c:	d105      	bne.n	800133a <set_duty+0x46>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	6393      	str	r3, [r2, #56]	@ 0x38
 8001338:	e022      	b.n	8001380 <set_duty+0x8c>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d105      	bne.n	800134e <set_duty+0x5a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800134c:	e018      	b.n	8001380 <set_duty+0x8c>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b0c      	cmp	r3, #12
 8001354:	d105      	bne.n	8001362 <set_duty+0x6e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001360:	e00e      	b.n	8001380 <set_duty+0x8c>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b10      	cmp	r3, #16
 8001368:	d105      	bne.n	8001376 <set_duty+0x82>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	6593      	str	r3, [r2, #88]	@ 0x58
 8001374:	e004      	b.n	8001380 <set_duty+0x8c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    	//set GPIO PINS
    	// GPIO_PIN_RESET: to clear the port pin
    	 //GPIO_PIN_SET: to set the port pin

    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_SET);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6998      	ldr	r0, [r3, #24]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	b29b      	uxth	r3, r3
 800138a:	2201      	movs	r2, #1
 800138c:	4619      	mov	r1, r3
 800138e:	f002 fb07 	bl	80039a0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	69d8      	ldr	r0, [r3, #28]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	b29b      	uxth	r3, r3
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	f002 fafe 	bl	80039a0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);

    }


}
 80013a4:	e069      	b.n	800147a <set_duty+0x186>
    else if(pwm_sig == 0){
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d112      	bne.n	80013d2 <set_duty+0xde>
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6998      	ldr	r0, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	f002 faf1 	bl	80039a0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69d8      	ldr	r0, [r3, #28]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	4619      	mov	r1, r3
 80013cc:	f002 fae8 	bl	80039a0 <HAL_GPIO_WritePin>
}
 80013d0:	e053      	b.n	800147a <set_duty+0x186>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,-pwm_sig);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <set_duty+0xf4>
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	425a      	negs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80013e6:	e036      	b.n	8001456 <set_duty+0x162>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2b04      	cmp	r3, #4
 80013ee:	d107      	bne.n	8001400 <set_duty+0x10c>
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4259      	negs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	460b      	mov	r3, r1
 80013fc:	6393      	str	r3, [r2, #56]	@ 0x38
 80013fe:	e02a      	b.n	8001456 <set_duty+0x162>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b08      	cmp	r3, #8
 8001406:	d107      	bne.n	8001418 <set_duty+0x124>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	4259      	negs	r1, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	460b      	mov	r3, r1
 8001414:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001416:	e01e      	b.n	8001456 <set_duty+0x162>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d107      	bne.n	8001430 <set_duty+0x13c>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	4259      	negs	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	460b      	mov	r3, r1
 800142c:	6413      	str	r3, [r2, #64]	@ 0x40
 800142e:	e012      	b.n	8001456 <set_duty+0x162>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b10      	cmp	r3, #16
 8001436:	d107      	bne.n	8001448 <set_duty+0x154>
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4259      	negs	r1, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	460b      	mov	r3, r1
 8001444:	6593      	str	r3, [r2, #88]	@ 0x58
 8001446:	e006      	b.n	8001456 <set_duty+0x162>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	4259      	negs	r1, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	460b      	mov	r3, r1
 8001454:	65d3      	str	r3, [r2, #92]	@ 0x5c
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6998      	ldr	r0, [r3, #24]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	b29b      	uxth	r3, r3
 8001460:	2200      	movs	r2, #0
 8001462:	4619      	mov	r1, r3
 8001464:	f002 fa9c 	bl	80039a0 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69d8      	ldr	r0, [r3, #28]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	b29b      	uxth	r3, r3
 8001472:	2201      	movs	r2, #1
 8001474:	4619      	mov	r1, r3
 8001476:	f002 fa93 	bl	80039a0 <HAL_GPIO_WritePin>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	08008aa8 	.word	0x08008aa8

08001488 <set_stby>:
 * @brief A function to set the standby pin for the motor.
 *
 * @param p_mot The motor object to perform the function on.
 * @param stby The desired stby pin value of 0 or 1.
 */
void set_stby(motor_t* p_mot, int32_t stby_val){
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
	if(stby_val == 0){
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d109      	bne.n	80014ac <set_stby+0x24>

		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_RESET);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a18      	ldr	r0, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	695b      	ldr	r3, [r3, #20]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	f002 fa7b 	bl	80039a0 <HAL_GPIO_WritePin>
	else{

		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_SET);
	}

}
 80014aa:	e008      	b.n	80014be <set_stby+0x36>
		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_SET);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a18      	ldr	r0, [r3, #32]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2201      	movs	r2, #1
 80014b8:	4619      	mov	r1, r3
 80014ba:	f002 fa71 	bl	80039a0 <HAL_GPIO_WritePin>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <read_current>:
/**
 * @brief A function to get the ADC value for the myoelectric sensor.
 *
 * @param p_myo The myoelectric sensor object to perform the function on.
 */
uint16_t read_current(myo_t *p_myo){
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(p_myo->hal_adc);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 ff6a 	bl	80023ac <HAL_ADC_Start>
	HAL_ADC_PollForConversion(p_myo->hal_adc,100);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2164      	movs	r1, #100	@ 0x64
 80014de:	4618      	mov	r0, r3
 80014e0:	f001 f852 	bl	8002588 <HAL_ADC_PollForConversion>
	p_myo->current_value = HAL_ADC_GetValue(p_myo->hal_adc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f925 	bl	8002738 <HAL_ADC_GetValue>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(p_myo->hal_adc);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f001 f810 	bl	8002520 <HAL_ADC_Stop>
	//stop ADC?

	//now convert results to a desired output style


	return p_myo->current_value;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001506:	b29b      	uxth	r3, r3

}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <check_delta>:
 */

#include "radio.h"

int check_delta(int16_t pulse_width)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	//if the delta value is invalid, or is at the 1.5 ms base width return 0. If it is not at the
	//base value return a 1.
	if (900 < pulse_width && pulse_width < 1450)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 8001522:	dd07      	ble.n	8001534 <check_delta+0x24>
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 800152c:	4293      	cmp	r3, r2
 800152e:	dc01      	bgt.n	8001534 <check_delta+0x24>
	{
	    return 1;
 8001530:	2301      	movs	r3, #1
 8001532:	e00e      	b.n	8001552 <check_delta+0x42>
	}
	else if (1550 < pulse_width && pulse_width < 2500)
 8001534:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001538:	f240 620e 	movw	r2, #1550	@ 0x60e
 800153c:	4293      	cmp	r3, r2
 800153e:	dd07      	ble.n	8001550 <check_delta+0x40>
 8001540:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001544:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001548:	4293      	cmp	r3, r2
 800154a:	dc01      	bgt.n	8001550 <check_delta+0x40>
	{
	    return 1;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <check_delta+0x42>
	}
	else
	{
			return 0;
 8001550:	2300      	movs	r3, #0
	}
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <HAL_MspInit+0x44>)
 8001568:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800156a:	4a0e      	ldr	r2, [pc, #56]	@ (80015a4 <HAL_MspInit+0x44>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6613      	str	r3, [r2, #96]	@ 0x60
 8001572:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <HAL_MspInit+0x44>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <HAL_MspInit+0x44>)
 8001580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <HAL_MspInit+0x44>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001588:	6593      	str	r3, [r2, #88]	@ 0x58
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_MspInit+0x44>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	603b      	str	r3, [r7, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08e      	sub	sp, #56	@ 0x38
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a4c      	ldr	r2, [pc, #304]	@ (80016f8 <HAL_ADC_MspInit+0x150>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12d      	bne.n	8001626 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 80015ca:	4b4c      	ldr	r3, [pc, #304]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a4a      	ldr	r2, [pc, #296]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 80015d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015d4:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d10b      	bne.n	80015f4 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015dc:	4b48      	ldr	r3, [pc, #288]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a47      	ldr	r2, [pc, #284]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80015e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b45      	ldr	r3, [pc, #276]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015f0:	623b      	str	r3, [r7, #32]
 80015f2:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f4:	4b42      	ldr	r3, [pc, #264]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80015f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f8:	4a41      	ldr	r2, [pc, #260]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80015fa:	f043 0304 	orr.w	r3, r3, #4
 80015fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001600:	4b3f      	ldr	r3, [pc, #252]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MYO1_Pin;
 800160c:	2301      	movs	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001610:	230b      	movs	r3, #11
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MYO1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4839      	ldr	r0, [pc, #228]	@ (8001704 <HAL_ADC_MspInit+0x15c>)
 8001620:	f002 f814 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001624:	e064      	b.n	80016f0 <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC2)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a37      	ldr	r2, [pc, #220]	@ (8001708 <HAL_ADC_MspInit+0x160>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d12d      	bne.n	800168c <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001630:	4b32      	ldr	r3, [pc, #200]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a31      	ldr	r2, [pc, #196]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 8001638:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800163a:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d10b      	bne.n	800165a <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001646:	4a2e      	ldr	r2, [pc, #184]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 8001648:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800164c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164e:	4b2c      	ldr	r3, [pc, #176]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001652:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800165a:	4b29      	ldr	r3, [pc, #164]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165e:	4a28      	ldr	r2, [pc, #160]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 8001660:	f043 0304 	orr.w	r3, r3, #4
 8001664:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001666:	4b26      	ldr	r3, [pc, #152]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MYO2_Pin;
 8001672:	2302      	movs	r3, #2
 8001674:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001676:	230b      	movs	r3, #11
 8001678:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MYO2_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	481f      	ldr	r0, [pc, #124]	@ (8001704 <HAL_ADC_MspInit+0x15c>)
 8001686:	f001 ffe1 	bl	800364c <HAL_GPIO_Init>
}
 800168a:	e031      	b.n	80016f0 <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC3)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a1e      	ldr	r2, [pc, #120]	@ (800170c <HAL_ADC_MspInit+0x164>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12c      	bne.n	80016f0 <HAL_ADC_MspInit+0x148>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001696:	4b19      	ldr	r3, [pc, #100]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	4a17      	ldr	r2, [pc, #92]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 800169e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_ADC_MspInit+0x154>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d10b      	bne.n	80016c0 <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80016aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80016ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80016b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <HAL_ADC_MspInit+0x158>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d0:	f003 0304 	and.w	r3, r3, #4
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PRS_Pin|V_BAT_Pin;
 80016d8:	230c      	movs	r3, #12
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016dc:	230b      	movs	r3, #11
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e8:	4619      	mov	r1, r3
 80016ea:	4806      	ldr	r0, [pc, #24]	@ (8001704 <HAL_ADC_MspInit+0x15c>)
 80016ec:	f001 ffae 	bl	800364c <HAL_GPIO_Init>
}
 80016f0:	bf00      	nop
 80016f2:	3738      	adds	r7, #56	@ 0x38
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	50040000 	.word	0x50040000
 80016fc:	200005b4 	.word	0x200005b4
 8001700:	40021000 	.word	0x40021000
 8001704:	48000800 	.word	0x48000800
 8001708:	50040100 	.word	0x50040100
 800170c:	50040200 	.word	0x50040200

08001710 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	@ 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1c      	ldr	r2, [pc, #112]	@ (80017a0 <HAL_TIM_IC_MspInit+0x90>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d131      	bne.n	8001796 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001732:	4b1c      	ldr	r3, [pc, #112]	@ (80017a4 <HAL_TIM_IC_MspInit+0x94>)
 8001734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001736:	4a1b      	ldr	r2, [pc, #108]	@ (80017a4 <HAL_TIM_IC_MspInit+0x94>)
 8001738:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800173c:	6613      	str	r3, [r2, #96]	@ 0x60
 800173e:	4b19      	ldr	r3, [pc, #100]	@ (80017a4 <HAL_TIM_IC_MspInit+0x94>)
 8001740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001742:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <HAL_TIM_IC_MspInit+0x94>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174e:	4a15      	ldr	r2, [pc, #84]	@ (80017a4 <HAL_TIM_IC_MspInit+0x94>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001756:	4b13      	ldr	r3, [pc, #76]	@ (80017a4 <HAL_TIM_IC_MspInit+0x94>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAND_ENC_A_Pin|HAND_ENC_B_Pin|RADIO_Pin;
 8001762:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001774:	2301      	movs	r3, #1
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001782:	f001 ff63 	bl	800364c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2100      	movs	r1, #0
 800178a:	201b      	movs	r0, #27
 800178c:	f001 ff27 	bl	80035de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001790:	201b      	movs	r0, #27
 8001792:	f001 ff40 	bl	8003616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40012c00 	.word	0x40012c00
 80017a4:	40021000 	.word	0x40021000

080017a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b8:	d10b      	bne.n	80017d2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_TIM_PWM_MspInit+0x38>)
 80017bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017be:	4a08      	ldr	r2, [pc, #32]	@ (80017e0 <HAL_TIM_PWM_MspInit+0x38>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_TIM_PWM_MspInit+0x38>)
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	40021000 	.word	0x40021000

080017e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 0314 	add.w	r3, r7, #20
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a17      	ldr	r2, [pc, #92]	@ (8001860 <HAL_TIM_Encoder_MspInit+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d127      	bne.n	8001856 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x80>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	4a16      	ldr	r2, [pc, #88]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x80>)
 800180c:	f043 0304 	orr.w	r3, r3, #4
 8001810:	6593      	str	r3, [r2, #88]	@ 0x58
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x80>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f003 0304 	and.w	r3, r3, #4
 800181a:	613b      	str	r3, [r7, #16]
 800181c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x80>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001822:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x80>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_TIM_Encoder_MspInit+0x80>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_ENC_A_Pin|MOTOR_ENC_B_Pin;
 8001836:	23c0      	movs	r3, #192	@ 0xc0
 8001838:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001846:	2302      	movs	r3, #2
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0314 	add.w	r3, r7, #20
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_TIM_Encoder_MspInit+0x84>)
 8001852:	f001 fefb 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	@ 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40000800 	.word	0x40000800
 8001864:	40021000 	.word	0x40021000
 8001868:	48000400 	.word	0x48000400

0800186c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800188c:	d11c      	bne.n	80018c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b10      	ldr	r3, [pc, #64]	@ (80018d0 <HAL_TIM_MspPostInit+0x64>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	4a0f      	ldr	r2, [pc, #60]	@ (80018d0 <HAL_TIM_MspPostInit+0x64>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189a:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_TIM_MspPostInit+0x64>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMB_Pin|PWMA_Pin;
 80018a6:	2324      	movs	r3, #36	@ 0x24
 80018a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018c4:	f001 fec2 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000

080018d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0ac      	sub	sp, #176	@ 0xb0
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	2288      	movs	r2, #136	@ 0x88
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f006 f858 	bl	80079aa <memset>
  if(huart->Instance==UART4)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a21      	ldr	r2, [pc, #132]	@ (8001984 <HAL_UART_MspInit+0xb0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d13b      	bne.n	800197c <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001904:	2308      	movs	r3, #8
 8001906:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4618      	mov	r0, r3
 8001912:	f002 fec1 	bl	8004698 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800191c:	f7ff fcc2 	bl	80012a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_UART_MspInit+0xb4>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <HAL_UART_MspInit+0xb4>)
 8001926:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800192a:	6593      	str	r3, [r2, #88]	@ 0x58
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_UART_MspInit+0xb4>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_UART_MspInit+0xb4>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193c:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_UART_MspInit+0xb4>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <HAL_UART_MspInit+0xb4>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001950:	2303      	movs	r3, #3
 8001952:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001968:	2308      	movs	r3, #8
 800196a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001978:	f001 fe68 	bl	800364c <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800197c:	bf00      	nop
 800197e:	37b0      	adds	r7, #176	@ 0xb0
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40004c00 	.word	0x40004c00
 8001988:	40021000 	.word	0x40021000

0800198c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <NMI_Handler+0x4>

08001994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	bf00      	nop
 80019a2:	e7fd      	b.n	80019a0 <MemManage_Handler+0x4>

080019a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a8:	bf00      	nop
 80019aa:	e7fd      	b.n	80019a8 <BusFault_Handler+0x4>

080019ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b0:	bf00      	nop
 80019b2:	e7fd      	b.n	80019b0 <UsageFault_Handler+0x4>

080019b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c2:	b480      	push	{r7}
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e2:	f000 f941 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f0:	4802      	ldr	r0, [pc, #8]	@ (80019fc <TIM1_CC_IRQHandler+0x10>)
 80019f2:	f004 f87e 	bl	8005af2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000250 	.word	0x20000250

08001a00 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	e00a      	b.n	8001a28 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a12:	f3af 8000 	nop.w
 8001a16:	4601      	mov	r1, r0
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	b2ca      	uxtb	r2, r1
 8001a20:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	3301      	adds	r3, #1
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	dbf0      	blt.n	8001a12 <_read+0x12>
  }

  return len;
 8001a30:	687b      	ldr	r3, [r7, #4]
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	60f8      	str	r0, [r7, #12]
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e009      	b.n	8001a60 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	60ba      	str	r2, [r7, #8]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	617b      	str	r3, [r7, #20]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbf1      	blt.n	8001a4c <_write+0x12>
  }
  return len;
 8001a68:	687b      	ldr	r3, [r7, #4]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <_close>:

int _close(int file)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a9a:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_isatty>:

int _isatty(int file)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f005 ff9c 	bl	8007a48 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20018000 	.word	0x20018000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200005b8 	.word	0x200005b8
 8001b44:	20000710 	.word	0x20000710

08001b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b70:	f7ff ffea 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b74:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b76:	490d      	ldr	r1, [pc, #52]	@ (8001bac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <LoopForever+0xe>)
  movs r3, #0
 8001b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b7c:	e002      	b.n	8001b84 <LoopCopyDataInit>

08001b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b82:	3304      	adds	r3, #4

08001b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b88:	d3f9      	bcc.n	8001b7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b8c:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb8 <LoopForever+0x16>)
  movs r3, #0
 8001b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b90:	e001      	b.n	8001b96 <LoopFillZerobss>

08001b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b94:	3204      	adds	r2, #4

08001b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b98:	d3fb      	bcc.n	8001b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f005 ff5b 	bl	8007a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9e:	f7fe ff83 	bl	8000aa8 <main>

08001ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ba2:	e7fe      	b.n	8001ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001bb0:	08008b54 	.word	0x08008b54
  ldr r2, =_sbss
 8001bb4:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001bb8:	2000070c 	.word	0x2000070c

08001bbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC1_2_IRQHandler>

08001bbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bc8:	2003      	movs	r0, #3
 8001bca:	f001 fcfd 	bl	80035c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bce:	200f      	movs	r0, #15
 8001bd0:	f000 f80e 	bl	8001bf0 <HAL_InitTick>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	71fb      	strb	r3, [r7, #7]
 8001bde:	e001      	b.n	8001be4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001be0:	f7ff fcbe 	bl	8001560 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001be4:	79fb      	ldrb	r3, [r7, #7]
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bfc:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_InitTick+0x6c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d023      	beq.n	8001c4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c04:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_InitTick+0x70>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <HAL_InitTick+0x6c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f001 fd09 	bl	8003632 <HAL_SYSTICK_Config>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10f      	bne.n	8001c46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d809      	bhi.n	8001c40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f001 fcd3 	bl	80035de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c38:	4a0a      	ldr	r2, [pc, #40]	@ (8001c64 <HAL_InitTick+0x74>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e007      	b.n	8001c50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
 8001c44:	e004      	b.n	8001c50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e001      	b.n	8001c50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200000a8 	.word	0x200000a8
 8001c60:	200000a0 	.word	0x200000a0
 8001c64:	200000a4 	.word	0x200000a4

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	200000a8 	.word	0x200000a8
 8001c8c:	200005bc 	.word	0x200005bc

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	200005bc 	.word	0x200005bc

08001ca8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	609a      	str	r2, [r3, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	3360      	adds	r3, #96	@ 0x60
 8001d22:	461a      	mov	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <LL_ADC_SetOffset+0x44>)
 8001d32:	4013      	ands	r3, r2
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d48:	bf00      	nop
 8001d4a:	371c      	adds	r7, #28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	03fff000 	.word	0x03fff000

08001d58 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3360      	adds	r3, #96	@ 0x60
 8001d66:	461a      	mov	r2, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b087      	sub	sp, #28
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3360      	adds	r3, #96	@ 0x60
 8001d94:	461a      	mov	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3330      	adds	r3, #48	@ 0x30
 8001df0:	461a      	mov	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	4413      	add	r3, r2
 8001dfe:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 031f 	and.w	r3, r3, #31
 8001e0a:	211f      	movs	r1, #31
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0e9b      	lsrs	r3, r3, #26
 8001e18:	f003 011f 	and.w	r1, r3, #31
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	431a      	orrs	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b087      	sub	sp, #28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3314      	adds	r3, #20
 8001e48:	461a      	mov	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	0e5b      	lsrs	r3, r3, #25
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	4413      	add	r3, r2
 8001e56:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	0d1b      	lsrs	r3, r3, #20
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	2107      	movs	r1, #7
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	0d1b      	lsrs	r3, r3, #20
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7c:	431a      	orrs	r2, r3
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	401a      	ands	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0318 	and.w	r3, r3, #24
 8001eb2:	4908      	ldr	r1, [pc, #32]	@ (8001ed4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001eb4:	40d9      	lsrs	r1, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	400b      	ands	r3, r1
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	0007ffff 	.word	0x0007ffff

08001ed8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6093      	str	r3, [r2, #8]
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f48:	d101      	bne.n	8001f4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f70:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001f98:	d101      	bne.n	8001f9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001fe4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe8:	f043 0202 	orr.w	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f003 0301 	and.w	r3, r3, #1
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <LL_ADC_IsEnabled+0x18>
 8002010:	2301      	movs	r3, #1
 8002012:	e000      	b.n	8002016 <LL_ADC_IsEnabled+0x1a>
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002022:	b480      	push	{r7}
 8002024:	b083      	sub	sp, #12
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b02      	cmp	r3, #2
 8002034:	d101      	bne.n	800203a <LL_ADC_IsDisableOngoing+0x18>
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <LL_ADC_IsDisableOngoing+0x1a>
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002058:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800205c:	f043 0204 	orr.w	r2, r3, #4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002080:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002084:	f043 0210 	orr.w	r2, r3, #16
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b04      	cmp	r3, #4
 80020aa:	d101      	bne.n	80020b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020ac:	2301      	movs	r3, #1
 80020ae:	e000      	b.n	80020b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020ce:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d2:	f043 0220 	orr.w	r2, r3, #32
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80020da:	bf00      	nop
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d101      	bne.n	80020fe <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800210c:	b590      	push	{r4, r7, lr}
 800210e:	b089      	sub	sp, #36	@ 0x24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d101      	bne.n	8002126 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e130      	b.n	8002388 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fa37 	bl	80015a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff fef1 	bl	8001f34 <LL_ADC_IsDeepPowerDownEnabled>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fed7 	bl	8001f10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff ff0c 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d115      	bne.n	800219e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fef0 	bl	8001f5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800217c:	4b84      	ldr	r3, [pc, #528]	@ (8002390 <HAL_ADC_Init+0x284>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	099b      	lsrs	r3, r3, #6
 8002182:	4a84      	ldr	r2, [pc, #528]	@ (8002394 <HAL_ADC_Init+0x288>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	099b      	lsrs	r3, r3, #6
 800218a:	3301      	adds	r3, #1
 800218c:	005b      	lsls	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002190:	e002      	b.n	8002198 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b01      	subs	r3, #1
 8002196:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1f9      	bne.n	8002192 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff feee 	bl	8001f84 <LL_ADC_IsInternalRegulatorEnabled>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10d      	bne.n	80021ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b2:	f043 0210 	orr.w	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff ff62 	bl	8002098 <LL_ADC_REG_IsConversionOngoing>
 80021d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80c9 	bne.w	8002376 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f040 80c5 	bne.w	8002376 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021f4:	f043 0202 	orr.w	r2, r3, #2
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fefb 	bl	8001ffc <LL_ADC_IsEnabled>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d115      	bne.n	8002238 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800220c:	4862      	ldr	r0, [pc, #392]	@ (8002398 <HAL_ADC_Init+0x28c>)
 800220e:	f7ff fef5 	bl	8001ffc <LL_ADC_IsEnabled>
 8002212:	4604      	mov	r4, r0
 8002214:	4861      	ldr	r0, [pc, #388]	@ (800239c <HAL_ADC_Init+0x290>)
 8002216:	f7ff fef1 	bl	8001ffc <LL_ADC_IsEnabled>
 800221a:	4603      	mov	r3, r0
 800221c:	431c      	orrs	r4, r3
 800221e:	4860      	ldr	r0, [pc, #384]	@ (80023a0 <HAL_ADC_Init+0x294>)
 8002220:	f7ff feec 	bl	8001ffc <LL_ADC_IsEnabled>
 8002224:	4603      	mov	r3, r0
 8002226:	4323      	orrs	r3, r4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d105      	bne.n	8002238 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	4619      	mov	r1, r3
 8002232:	485c      	ldr	r0, [pc, #368]	@ (80023a4 <HAL_ADC_Init+0x298>)
 8002234:	f7ff fd38 	bl	8001ca8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	7e5b      	ldrb	r3, [r3, #25]
 800223c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002242:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002248:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800224e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002256:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002258:	4313      	orrs	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d106      	bne.n	8002274 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800226a:	3b01      	subs	r3, #1
 800226c:	045b      	lsls	r3, r3, #17
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002288:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	4b44      	ldr	r3, [pc, #272]	@ (80023a8 <HAL_ADC_Init+0x29c>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	69b9      	ldr	r1, [r7, #24]
 80022a0:	430b      	orrs	r3, r1
 80022a2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff ff1c 	bl	80020e6 <LL_ADC_INJ_IsConversionOngoing>
 80022ae:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d13d      	bne.n	8002332 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d13a      	bne.n	8002332 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022c0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80022c8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022d8:	f023 0302 	bic.w	r3, r3, #2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6812      	ldr	r2, [r2, #0]
 80022e0:	69b9      	ldr	r1, [r7, #24]
 80022e2:	430b      	orrs	r3, r1
 80022e4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d118      	bne.n	8002322 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022fa:	f023 0304 	bic.w	r3, r3, #4
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002306:	4311      	orrs	r1, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800230c:	4311      	orrs	r1, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002312:	430a      	orrs	r2, r1
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	611a      	str	r2, [r3, #16]
 8002320:	e007      	b.n	8002332 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0201 	bic.w	r2, r2, #1
 8002330:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d10c      	bne.n	8002354 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002340:	f023 010f 	bic.w	r1, r3, #15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	631a      	str	r2, [r3, #48]	@ 0x30
 8002352:	e007      	b.n	8002364 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 020f 	bic.w	r2, r2, #15
 8002362:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002368:	f023 0303 	bic.w	r3, r3, #3
 800236c:	f043 0201 	orr.w	r2, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	@ 0x54
 8002374:	e007      	b.n	8002386 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002386:	7ffb      	ldrb	r3, [r7, #31]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3724      	adds	r7, #36	@ 0x24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd90      	pop	{r4, r7, pc}
 8002390:	200000a0 	.word	0x200000a0
 8002394:	053e2d63 	.word	0x053e2d63
 8002398:	50040000 	.word	0x50040000
 800239c:	50040100 	.word	0x50040100
 80023a0:	50040200 	.word	0x50040200
 80023a4:	50040300 	.word	0x50040300
 80023a8:	fff0c007 	.word	0xfff0c007

080023ac <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b4:	4857      	ldr	r0, [pc, #348]	@ (8002514 <HAL_ADC_Start+0x168>)
 80023b6:	f7ff fd8f 	bl	8001ed8 <LL_ADC_GetMultimode>
 80023ba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7ff fe69 	bl	8002098 <LL_ADC_REG_IsConversionOngoing>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f040 809c 	bne.w	8002506 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_ADC_Start+0x30>
 80023d8:	2302      	movs	r3, #2
 80023da:	e097      	b.n	800250c <HAL_ADC_Start+0x160>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fe63 	bl	80030b0 <ADC_Enable>
 80023ea:	4603      	mov	r3, r0
 80023ec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80023ee:	7dfb      	ldrb	r3, [r7, #23]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 8083 	bne.w	80024fc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023fa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023fe:	f023 0301 	bic.w	r3, r3, #1
 8002402:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a42      	ldr	r2, [pc, #264]	@ (8002518 <HAL_ADC_Start+0x16c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d002      	beq.n	800241a <HAL_ADC_Start+0x6e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	e000      	b.n	800241c <HAL_ADC_Start+0x70>
 800241a:	4b40      	ldr	r3, [pc, #256]	@ (800251c <HAL_ADC_Start+0x170>)
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	4293      	cmp	r3, r2
 8002422:	d002      	beq.n	800242a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800242e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800243a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002442:	d106      	bne.n	8002452 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002448:	f023 0206 	bic.w	r2, r3, #6
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002450:	e002      	b.n	8002458 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	221c      	movs	r2, #28
 800245e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a2a      	ldr	r2, [pc, #168]	@ (8002518 <HAL_ADC_Start+0x16c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d002      	beq.n	8002478 <HAL_ADC_Start+0xcc>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	e000      	b.n	800247a <HAL_ADC_Start+0xce>
 8002478:	4b28      	ldr	r3, [pc, #160]	@ (800251c <HAL_ADC_Start+0x170>)
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	4293      	cmp	r3, r2
 8002480:	d008      	beq.n	8002494 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	2b05      	cmp	r3, #5
 800248c:	d002      	beq.n	8002494 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b09      	cmp	r3, #9
 8002492:	d114      	bne.n	80024be <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fdc6 	bl	8002048 <LL_ADC_REG_StartConversion>
 80024bc:	e025      	b.n	800250a <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <HAL_ADC_Start+0x16c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d002      	beq.n	80024da <HAL_ADC_Start+0x12e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	e000      	b.n	80024dc <HAL_ADC_Start+0x130>
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_ADC_Start+0x170>)
 80024dc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	68db      	ldr	r3, [r3, #12]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00f      	beq.n	800250a <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ee:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024f2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	655a      	str	r2, [r3, #84]	@ 0x54
 80024fa:	e006      	b.n	800250a <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002504:	e001      	b.n	800250a <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002506:	2302      	movs	r3, #2
 8002508:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	50040300 	.word	0x50040300
 8002518:	50040100 	.word	0x50040100
 800251c:	50040000 	.word	0x50040000

08002520 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Stop+0x16>
 8002532:	2302      	movs	r3, #2
 8002534:	e023      	b.n	800257e <HAL_ADC_Stop+0x5e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800253e:	2103      	movs	r1, #3
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fcf9 	bl	8002f38 <ADC_ConversionStop>
 8002546:	4603      	mov	r3, r0
 8002548:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d111      	bne.n	8002574 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fe33 	bl	80031bc <ADC_Disable>
 8002556:	4603      	mov	r3, r0
 8002558:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002564:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
	...

08002588 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002592:	4866      	ldr	r0, [pc, #408]	@ (800272c <HAL_ADC_PollForConversion+0x1a4>)
 8002594:	f7ff fca0 	bl	8001ed8 <LL_ADC_GetMultimode>
 8002598:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d102      	bne.n	80025a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025a2:	2308      	movs	r3, #8
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	e02a      	b.n	80025fe <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	2b05      	cmp	r3, #5
 80025b2:	d002      	beq.n	80025ba <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b09      	cmp	r3, #9
 80025b8:	d111      	bne.n	80025de <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025cc:	f043 0220 	orr.w	r2, r3, #32
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0a4      	b.n	8002722 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025d8:	2304      	movs	r3, #4
 80025da:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80025dc:	e00f      	b.n	80025fe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80025de:	4853      	ldr	r0, [pc, #332]	@ (800272c <HAL_ADC_PollForConversion+0x1a4>)
 80025e0:	f7ff fc88 	bl	8001ef4 <LL_ADC_GetMultiDMATransfer>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d007      	beq.n	80025fa <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e093      	b.n	8002722 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80025fa:	2304      	movs	r3, #4
 80025fc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80025fe:	f7ff fb47 	bl	8001c90 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002604:	e021      	b.n	800264a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d01d      	beq.n	800264a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800260e:	f7ff fb3f 	bl	8001c90 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d302      	bcc.n	8002624 <HAL_ADC_PollForConversion+0x9c>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d112      	bne.n	800264a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10b      	bne.n	800264a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e06b      	b.n	8002722 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0d6      	beq.n	8002606 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff fba6 	bl	8001dba <LL_ADC_REG_IsTriggerSourceSWStart>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01c      	beq.n	80026ae <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7e5b      	ldrb	r3, [r3, #25]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d118      	bne.n	80026ae <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b08      	cmp	r3, #8
 8002688:	d111      	bne.n	80026ae <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800269a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d105      	bne.n	80026ae <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a6:	f043 0201 	orr.w	r2, r3, #1
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a1f      	ldr	r2, [pc, #124]	@ (8002730 <HAL_ADC_PollForConversion+0x1a8>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d002      	beq.n	80026be <HAL_ADC_PollForConversion+0x136>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	e000      	b.n	80026c0 <HAL_ADC_PollForConversion+0x138>
 80026be:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <HAL_ADC_PollForConversion+0x1ac>)
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d008      	beq.n	80026da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d005      	beq.n	80026da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b05      	cmp	r3, #5
 80026d2:	d002      	beq.n	80026da <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b09      	cmp	r3, #9
 80026d8:	d104      	bne.n	80026e4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e00c      	b.n	80026fe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_ADC_PollForConversion+0x1a8>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d002      	beq.n	80026f4 <HAL_ADC_PollForConversion+0x16c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	e000      	b.n	80026f6 <HAL_ADC_PollForConversion+0x16e>
 80026f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002734 <HAL_ADC_PollForConversion+0x1ac>)
 80026f6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	2b08      	cmp	r3, #8
 8002702:	d104      	bne.n	800270e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2208      	movs	r2, #8
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e008      	b.n	8002720 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	220c      	movs	r2, #12
 800271e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3720      	adds	r7, #32
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	50040300 	.word	0x50040300
 8002730:	50040100 	.word	0x50040100
 8002734:	50040000 	.word	0x50040000

08002738 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b0b6      	sub	sp, #216	@ 0xd8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x22>
 8002772:	2302      	movs	r3, #2
 8002774:	e3c9      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x7b6>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fc88 	bl	8002098 <LL_ADC_REG_IsConversionOngoing>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	f040 83aa 	bne.w	8002ee4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d824      	bhi.n	80027ea <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	3b02      	subs	r3, #2
 80027a6:	2b03      	cmp	r3, #3
 80027a8:	d81b      	bhi.n	80027e2 <HAL_ADC_ConfigChannel+0x8e>
 80027aa:	a201      	add	r2, pc, #4	@ (adr r2, 80027b0 <HAL_ADC_ConfigChannel+0x5c>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	080027c1 	.word	0x080027c1
 80027b4:	080027c9 	.word	0x080027c9
 80027b8:	080027d1 	.word	0x080027d1
 80027bc:	080027d9 	.word	0x080027d9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027c0:	230c      	movs	r3, #12
 80027c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027c6:	e010      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027c8:	2312      	movs	r3, #18
 80027ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027ce:	e00c      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027d0:	2318      	movs	r3, #24
 80027d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027d6:	e008      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027e0:	e003      	b.n	80027ea <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027e2:	2306      	movs	r3, #6
 80027e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80027e8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80027f8:	f7ff faf2 	bl	8001de0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fc49 	bl	8002098 <LL_ADC_REG_IsConversionOngoing>
 8002806:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff fc69 	bl	80020e6 <LL_ADC_INJ_IsConversionOngoing>
 8002814:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 81a4 	bne.w	8002b6a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 819f 	bne.w	8002b6a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	6819      	ldr	r1, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	461a      	mov	r2, r3
 800283a:	f7ff fafd 	bl	8001e38 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	08db      	lsrs	r3, r3, #3
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b04      	cmp	r3, #4
 800285e:	d00a      	beq.n	8002876 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6818      	ldr	r0, [r3, #0]
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	6919      	ldr	r1, [r3, #16]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002870:	f7ff fa4e 	bl	8001d10 <LL_ADC_SetOffset>
 8002874:	e179      	b.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2100      	movs	r1, #0
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fa6b 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002882:	4603      	mov	r3, r0
 8002884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10a      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x14e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fa60 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002898:	4603      	mov	r3, r0
 800289a:	0e9b      	lsrs	r3, r3, #26
 800289c:	f003 021f 	and.w	r2, r3, #31
 80028a0:	e01e      	b.n	80028e0 <HAL_ADC_ConfigChannel+0x18c>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2100      	movs	r1, #0
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fa55 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80028c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e004      	b.n	80028de <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028d8:	fab3 f383 	clz	r3, r3
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x1a4>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	e018      	b.n	800292a <HAL_ADC_ConfigChannel+0x1d6>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800290c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002910:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002914:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800292a:	429a      	cmp	r2, r3
 800292c:	d106      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fa24 	bl	8001d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff fa08 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002948:	4603      	mov	r3, r0
 800294a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x214>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2101      	movs	r1, #1
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff f9fd 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 800295e:	4603      	mov	r3, r0
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	e01e      	b.n	80029a6 <HAL_ADC_ConfigChannel+0x252>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff f9f2 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002974:	4603      	mov	r3, r0
 8002976:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8002986:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800298a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800298e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e004      	b.n	80029a4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800299a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299e:	fab3 f383 	clz	r3, r3
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d105      	bne.n	80029be <HAL_ADC_ConfigChannel+0x26a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	0e9b      	lsrs	r3, r3, #26
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	e018      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x29c>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80029d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80029d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80029da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d106      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2101      	movs	r1, #1
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff f9c1 	bl	8001d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2102      	movs	r1, #2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff f9a5 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10a      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x2da>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2102      	movs	r1, #2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff f99a 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002a24:	4603      	mov	r3, r0
 8002a26:	0e9b      	lsrs	r3, r3, #26
 8002a28:	f003 021f 	and.w	r2, r3, #31
 8002a2c:	e01e      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x318>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2102      	movs	r1, #2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff f98f 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002a54:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e004      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d105      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x330>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	0e9b      	lsrs	r3, r3, #26
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	e014      	b.n	8002aae <HAL_ADC_ConfigChannel+0x35a>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002a8c:	fa93 f3a3 	rbit	r3, r3
 8002a90:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002a92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a94:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	e004      	b.n	8002aae <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d106      	bne.n	8002ac0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2102      	movs	r1, #2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f962 	bl	8001d84 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2103      	movs	r1, #3
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff f946 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10a      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x398>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2103      	movs	r1, #3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff f93b 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	0e9b      	lsrs	r3, r3, #26
 8002ae6:	f003 021f 	and.w	r2, r3, #31
 8002aea:	e017      	b.n	8002b1c <HAL_ADC_ConfigChannel+0x3c8>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2103      	movs	r1, #3
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f930 	bl	8001d58 <LL_ADC_GetOffsetChannel>
 8002af8:	4603      	mov	r3, r0
 8002afa:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b06:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b0e:	2320      	movs	r3, #32
 8002b10:	e003      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b14:	fab3 f383 	clz	r3, r3
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x3e0>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	0e9b      	lsrs	r3, r3, #26
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	e011      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x404>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b44:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d106      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2200      	movs	r2, #0
 8002b62:	2103      	movs	r1, #3
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7ff f90d 	bl	8001d84 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fa44 	bl	8001ffc <LL_ADC_IsEnabled>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f040 8140 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6818      	ldr	r0, [r3, #0]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	6819      	ldr	r1, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f7ff f981 	bl	8001e90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	4a8f      	ldr	r2, [pc, #572]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x67c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f040 8131 	bne.w	8002dfc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10b      	bne.n	8002bc2 <HAL_ADC_ConfigChannel+0x46e>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f003 031f 	and.w	r3, r3, #31
 8002bb6:	2b09      	cmp	r3, #9
 8002bb8:	bf94      	ite	ls
 8002bba:	2301      	movls	r3, #1
 8002bbc:	2300      	movhi	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e019      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0x4a2>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bca:	fa93 f3a3 	rbit	r3, r3
 8002bce:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002bd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002bda:	2320      	movs	r3, #32
 8002bdc:	e003      	b.n	8002be6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002be0:	fab3 f383 	clz	r3, r3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	3301      	adds	r3, #1
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2b09      	cmp	r3, #9
 8002bee:	bf94      	ite	ls
 8002bf0:	2301      	movls	r3, #1
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d079      	beq.n	8002cee <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d107      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x4c2>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c14:	e015      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4ee>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c26:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c2e:	2320      	movs	r3, #32
 8002c30:	e003      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	069b      	lsls	r3, r3, #26
 8002c3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d109      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x50e>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	3301      	adds	r3, #1
 8002c56:	f003 031f 	and.w	r3, r3, #31
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	e017      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x53e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c72:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f003 031f 	and.w	r3, r3, #31
 8002c8c:	2101      	movs	r1, #1
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	ea42 0103 	orr.w	r1, r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d10a      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x564>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0e9b      	lsrs	r3, r3, #26
 8002ca8:	3301      	adds	r3, #1
 8002caa:	f003 021f 	and.w	r2, r3, #31
 8002cae:	4613      	mov	r3, r2
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	4413      	add	r3, r2
 8002cb4:	051b      	lsls	r3, r3, #20
 8002cb6:	e018      	b.n	8002cea <HAL_ADC_ConfigChannel+0x596>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc0:	fa93 f3a3 	rbit	r3, r3
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002cd0:	2320      	movs	r3, #32
 8002cd2:	e003      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f003 021f 	and.w	r2, r3, #31
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cea:	430b      	orrs	r3, r1
 8002cec:	e081      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d107      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x5b6>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	3301      	adds	r3, #1
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d08:	e015      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x5e2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d12:	fa93 f3a3 	rbit	r3, r3
 8002d16:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e003      	b.n	8002d2e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d28:	fab3 f383 	clz	r3, r3
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	3301      	adds	r3, #1
 8002d30:	069b      	lsls	r3, r3, #26
 8002d32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x602>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2101      	movs	r1, #1
 8002d50:	fa01 f303 	lsl.w	r3, r1, r3
 8002d54:	e017      	b.n	8002d86 <HAL_ADC_ConfigChannel+0x632>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	61bb      	str	r3, [r7, #24]
  return result;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d72:	6a3b      	ldr	r3, [r7, #32]
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	2101      	movs	r1, #1
 8002d82:	fa01 f303 	lsl.w	r3, r1, r3
 8002d86:	ea42 0103 	orr.w	r1, r2, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10d      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x65e>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	0e9b      	lsrs	r3, r3, #26
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	f003 021f 	and.w	r2, r3, #31
 8002da2:	4613      	mov	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	4413      	add	r3, r2
 8002da8:	3b1e      	subs	r3, #30
 8002daa:	051b      	lsls	r3, r3, #20
 8002dac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db0:	e01e      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x69c>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
  return result;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d104      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e006      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x688>
 8002dce:	bf00      	nop
 8002dd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f003 021f 	and.w	r2, r3, #31
 8002de2:	4613      	mov	r3, r2
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	4413      	add	r3, r2
 8002de8:	3b1e      	subs	r3, #30
 8002dea:	051b      	lsls	r3, r3, #20
 8002dec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df6:	4619      	mov	r1, r3
 8002df8:	f7ff f81e 	bl	8001e38 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	4b44      	ldr	r3, [pc, #272]	@ (8002f14 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d07a      	beq.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e08:	4843      	ldr	r0, [pc, #268]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e0a:	f7fe ff73 	bl	8001cf4 <LL_ADC_GetCommonPathInternalCh>
 8002e0e:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a41      	ldr	r2, [pc, #260]	@ (8002f1c <HAL_ADC_ConfigChannel+0x7c8>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d12c      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d126      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a3c      	ldr	r2, [pc, #240]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d004      	beq.n	8002e3c <HAL_ADC_ConfigChannel+0x6e8>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a3b      	ldr	r2, [pc, #236]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d15d      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e44:	4619      	mov	r1, r3
 8002e46:	4834      	ldr	r0, [pc, #208]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e48:	f7fe ff41 	bl	8001cce <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e4c:	4b36      	ldr	r3, [pc, #216]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	099b      	lsrs	r3, r3, #6
 8002e52:	4a36      	ldr	r2, [pc, #216]	@ (8002f2c <HAL_ADC_ConfigChannel+0x7d8>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e66:	e002      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f9      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e74:	e040      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7dc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d118      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d112      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a23      	ldr	r2, [pc, #140]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x74c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a22      	ldr	r2, [pc, #136]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d12d      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ea4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	481b      	ldr	r0, [pc, #108]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002eac:	f7fe ff0f 	bl	8001cce <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb0:	e024      	b.n	8002efc <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8002f34 <HAL_ADC_ConfigChannel+0x7e0>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d120      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ebc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ec0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11a      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	@ (8002f20 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d115      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ed2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002eda:	4619      	mov	r1, r3
 8002edc:	480e      	ldr	r0, [pc, #56]	@ (8002f18 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ede:	f7fe fef6 	bl	8001cce <LL_ADC_SetCommonPathInternalCh>
 8002ee2:	e00c      	b.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee8:	f043 0220 	orr.w	r2, r3, #32
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002ef6:	e002      	b.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ef8:	bf00      	nop
 8002efa:	e000      	b.n	8002efe <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002efc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	37d8      	adds	r7, #216	@ 0xd8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	80080000 	.word	0x80080000
 8002f18:	50040300 	.word	0x50040300
 8002f1c:	c7520000 	.word	0xc7520000
 8002f20:	50040000 	.word	0x50040000
 8002f24:	50040200 	.word	0x50040200
 8002f28:	200000a0 	.word	0x200000a0
 8002f2c:	053e2d63 	.word	0x053e2d63
 8002f30:	cb840000 	.word	0xcb840000
 8002f34:	80000001 	.word	0x80000001

08002f38 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff f8a2 	bl	8002098 <LL_ADC_REG_IsConversionOngoing>
 8002f54:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f8c3 	bl	80020e6 <LL_ADC_INJ_IsConversionOngoing>
 8002f60:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d103      	bne.n	8002f70 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f000 8098 	beq.w	80030a0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d02a      	beq.n	8002fd4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7e5b      	ldrb	r3, [r3, #25]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d126      	bne.n	8002fd4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7e1b      	ldrb	r3, [r3, #24]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d122      	bne.n	8002fd4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f92:	e014      	b.n	8002fbe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	4a45      	ldr	r2, [pc, #276]	@ (80030ac <ADC_ConversionStop+0x174>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d90d      	bls.n	8002fb8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e074      	b.n	80030a2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc8:	2b40      	cmp	r3, #64	@ 0x40
 8002fca:	d1e3      	bne.n	8002f94 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2240      	movs	r2, #64	@ 0x40
 8002fd2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d014      	beq.n	8003004 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f85a 	bl	8002098 <LL_ADC_REG_IsConversionOngoing>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00c      	beq.n	8003004 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff f817 	bl	8002022 <LL_ADC_IsDisableOngoing>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d104      	bne.n	8003004 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff f836 	bl	8002070 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d014      	beq.n	8003034 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff f869 	bl	80020e6 <LL_ADC_INJ_IsConversionOngoing>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00c      	beq.n	8003034 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7fe ffff 	bl	8002022 <LL_ADC_IsDisableOngoing>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f845 	bl	80020be <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d005      	beq.n	8003046 <ADC_ConversionStop+0x10e>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d105      	bne.n	800304c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003040:	230c      	movs	r3, #12
 8003042:	617b      	str	r3, [r7, #20]
        break;
 8003044:	e005      	b.n	8003052 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003046:	2308      	movs	r3, #8
 8003048:	617b      	str	r3, [r7, #20]
        break;
 800304a:	e002      	b.n	8003052 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800304c:	2304      	movs	r3, #4
 800304e:	617b      	str	r3, [r7, #20]
        break;
 8003050:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003052:	f7fe fe1d 	bl	8001c90 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003058:	e01b      	b.n	8003092 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800305a:	f7fe fe19 	bl	8001c90 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b05      	cmp	r3, #5
 8003066:	d914      	bls.n	8003092 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00d      	beq.n	8003092 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307a:	f043 0210 	orr.w	r2, r3, #16
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e007      	b.n	80030a2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1dc      	bne.n	800305a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	a33fffff 	.word	0xa33fffff

080030b0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7fe ff9b 	bl	8001ffc <LL_ADC_IsEnabled>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d169      	bne.n	80031a0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <ADC_Enable+0xfc>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030de:	f043 0210 	orr.w	r2, r3, #16
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e055      	b.n	80031a2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ff56 	bl	8001fac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003100:	482b      	ldr	r0, [pc, #172]	@ (80031b0 <ADC_Enable+0x100>)
 8003102:	f7fe fdf7 	bl	8001cf4 <LL_ADC_GetCommonPathInternalCh>
 8003106:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003108:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003110:	4b28      	ldr	r3, [pc, #160]	@ (80031b4 <ADC_Enable+0x104>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	4a28      	ldr	r2, [pc, #160]	@ (80031b8 <ADC_Enable+0x108>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800312a:	e002      	b.n	8003132 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	3b01      	subs	r3, #1
 8003130:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f9      	bne.n	800312c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003138:	f7fe fdaa 	bl	8001c90 <HAL_GetTick>
 800313c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800313e:	e028      	b.n	8003192 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fe ff59 	bl	8001ffc <LL_ADC_IsEnabled>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d104      	bne.n	800315a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe ff29 	bl	8001fac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800315a:	f7fe fd99 	bl	8001c90 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	2b02      	cmp	r3, #2
 8003166:	d914      	bls.n	8003192 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d00d      	beq.n	8003192 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317a:	f043 0210 	orr.w	r2, r3, #16
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003186:	f043 0201 	orr.w	r2, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e007      	b.n	80031a2 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d1cf      	bne.n	8003140 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	8000003f 	.word	0x8000003f
 80031b0:	50040300 	.word	0x50040300
 80031b4:	200000a0 	.word	0x200000a0
 80031b8:	053e2d63 	.word	0x053e2d63

080031bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe ff2a 	bl	8002022 <LL_ADC_IsDisableOngoing>
 80031ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe ff11 	bl	8001ffc <LL_ADC_IsEnabled>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d047      	beq.n	8003270 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d144      	bne.n	8003270 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030d 	and.w	r3, r3, #13
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10c      	bne.n	800320e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7fe feeb 	bl	8001fd4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2203      	movs	r2, #3
 8003204:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003206:	f7fe fd43 	bl	8001c90 <HAL_GetTick>
 800320a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800320c:	e029      	b.n	8003262 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e023      	b.n	8003272 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800322a:	f7fe fd31 	bl	8001c90 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d914      	bls.n	8003262 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f043 0210 	orr.w	r2, r3, #16
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003256:	f043 0201 	orr.w	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e007      	b.n	8003272 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1dc      	bne.n	800322a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <LL_ADC_IsEnabled>:
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d101      	bne.n	8003292 <LL_ADC_IsEnabled+0x18>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_IsEnabled+0x1a>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_REG_IsConversionOngoing>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b04      	cmp	r3, #4
 80032b2:	d101      	bne.n	80032b8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b09f      	sub	sp, #124	@ 0x7c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e093      	b.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80032ee:	2300      	movs	r3, #0
 80032f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80032f2:	2300      	movs	r3, #0
 80032f4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a47      	ldr	r2, [pc, #284]	@ (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d102      	bne.n	8003306 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003300:	4b46      	ldr	r3, [pc, #280]	@ (800341c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e001      	b.n	800330a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10b      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003314:	f043 0220 	orr.w	r2, r3, #32
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e072      	b.n	800340e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff ffb8 	bl	80032a0 <LL_ADC_REG_IsConversionOngoing>
 8003330:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ffb2 	bl	80032a0 <LL_ADC_REG_IsConversionOngoing>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d154      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003342:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003344:	2b00      	cmp	r3, #0
 8003346:	d151      	bne.n	80033ec <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003348:	4b35      	ldr	r3, [pc, #212]	@ (8003420 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800334a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d02c      	beq.n	80033ae <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003354:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6859      	ldr	r1, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003366:	035b      	lsls	r3, r3, #13
 8003368:	430b      	orrs	r3, r1
 800336a:	431a      	orrs	r2, r3
 800336c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800336e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003370:	4829      	ldr	r0, [pc, #164]	@ (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003372:	f7ff ff82 	bl	800327a <LL_ADC_IsEnabled>
 8003376:	4604      	mov	r4, r0
 8003378:	4828      	ldr	r0, [pc, #160]	@ (800341c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800337a:	f7ff ff7e 	bl	800327a <LL_ADC_IsEnabled>
 800337e:	4603      	mov	r3, r0
 8003380:	431c      	orrs	r4, r3
 8003382:	4828      	ldr	r0, [pc, #160]	@ (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003384:	f7ff ff79 	bl	800327a <LL_ADC_IsEnabled>
 8003388:	4603      	mov	r3, r0
 800338a:	4323      	orrs	r3, r4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d137      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003398:	f023 030f 	bic.w	r3, r3, #15
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	6811      	ldr	r1, [r2, #0]
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	6892      	ldr	r2, [r2, #8]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	431a      	orrs	r2, r3
 80033a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033aa:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ac:	e028      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033b8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ba:	4817      	ldr	r0, [pc, #92]	@ (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033bc:	f7ff ff5d 	bl	800327a <LL_ADC_IsEnabled>
 80033c0:	4604      	mov	r4, r0
 80033c2:	4816      	ldr	r0, [pc, #88]	@ (800341c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033c4:	f7ff ff59 	bl	800327a <LL_ADC_IsEnabled>
 80033c8:	4603      	mov	r3, r0
 80033ca:	431c      	orrs	r4, r3
 80033cc:	4815      	ldr	r0, [pc, #84]	@ (8003424 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033ce:	f7ff ff54 	bl	800327a <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4323      	orrs	r3, r4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d112      	bne.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033e2:	f023 030f 	bic.w	r3, r3, #15
 80033e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033ea:	e009      	b.n	8003400 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f043 0220 	orr.w	r2, r3, #32
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80033fe:	e000      	b.n	8003402 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003400:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800340a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800340e:	4618      	mov	r0, r3
 8003410:	377c      	adds	r7, #124	@ 0x7c
 8003412:	46bd      	mov	sp, r7
 8003414:	bd90      	pop	{r4, r7, pc}
 8003416:	bf00      	nop
 8003418:	50040000 	.word	0x50040000
 800341c:	50040100 	.word	0x50040100
 8003420:	50040300 	.word	0x50040300
 8003424:	50040200 	.word	0x50040200

08003428 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f003 0307 	and.w	r3, r3, #7
 8003436:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003438:	4b0c      	ldr	r3, [pc, #48]	@ (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003444:	4013      	ands	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003450:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003454:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003458:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800345a:	4a04      	ldr	r2, [pc, #16]	@ (800346c <__NVIC_SetPriorityGrouping+0x44>)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	60d3      	str	r3, [r2, #12]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	e000ed00 	.word	0xe000ed00

08003470 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <__NVIC_GetPriorityGrouping+0x18>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	f003 0307 	and.w	r3, r3, #7
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	2b00      	cmp	r3, #0
 800349c:	db0b      	blt.n	80034b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800349e:	79fb      	ldrb	r3, [r7, #7]
 80034a0:	f003 021f 	and.w	r2, r3, #31
 80034a4:	4907      	ldr	r1, [pc, #28]	@ (80034c4 <__NVIC_EnableIRQ+0x38>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	2001      	movs	r0, #1
 80034ae:	fa00 f202 	lsl.w	r2, r0, r2
 80034b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	e000e100 	.word	0xe000e100

080034c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	db0a      	blt.n	80034f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	490c      	ldr	r1, [pc, #48]	@ (8003514 <__NVIC_SetPriority+0x4c>)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	0112      	lsls	r2, r2, #4
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	440b      	add	r3, r1
 80034ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034f0:	e00a      	b.n	8003508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	4908      	ldr	r1, [pc, #32]	@ (8003518 <__NVIC_SetPriority+0x50>)
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	f003 030f 	and.w	r3, r3, #15
 80034fe:	3b04      	subs	r3, #4
 8003500:	0112      	lsls	r2, r2, #4
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	440b      	add	r3, r1
 8003506:	761a      	strb	r2, [r3, #24]
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	e000e100 	.word	0xe000e100
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351c:	b480      	push	{r7}
 800351e:	b089      	sub	sp, #36	@ 0x24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f1c3 0307 	rsb	r3, r3, #7
 8003536:	2b04      	cmp	r3, #4
 8003538:	bf28      	it	cs
 800353a:	2304      	movcs	r3, #4
 800353c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3304      	adds	r3, #4
 8003542:	2b06      	cmp	r3, #6
 8003544:	d902      	bls.n	800354c <NVIC_EncodePriority+0x30>
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	3b03      	subs	r3, #3
 800354a:	e000      	b.n	800354e <NVIC_EncodePriority+0x32>
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	401a      	ands	r2, r3
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	fa01 f303 	lsl.w	r3, r1, r3
 800356e:	43d9      	mvns	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003574:	4313      	orrs	r3, r2
         );
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	@ 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
	...

08003584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003594:	d301      	bcc.n	800359a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003596:	2301      	movs	r3, #1
 8003598:	e00f      	b.n	80035ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800359a:	4a0a      	ldr	r2, [pc, #40]	@ (80035c4 <SysTick_Config+0x40>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	3b01      	subs	r3, #1
 80035a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035a2:	210f      	movs	r1, #15
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295
 80035a8:	f7ff ff8e 	bl	80034c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <SysTick_Config+0x40>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035b2:	4b04      	ldr	r3, [pc, #16]	@ (80035c4 <SysTick_Config+0x40>)
 80035b4:	2207      	movs	r2, #7
 80035b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	e000e010 	.word	0xe000e010

080035c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff ff29 	bl	8003428 <__NVIC_SetPriorityGrouping>
}
 80035d6:	bf00      	nop
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b086      	sub	sp, #24
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
 80035ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035ec:	2300      	movs	r3, #0
 80035ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035f0:	f7ff ff3e 	bl	8003470 <__NVIC_GetPriorityGrouping>
 80035f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	6978      	ldr	r0, [r7, #20]
 80035fc:	f7ff ff8e 	bl	800351c <NVIC_EncodePriority>
 8003600:	4602      	mov	r2, r0
 8003602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003606:	4611      	mov	r1, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff ff5d 	bl	80034c8 <__NVIC_SetPriority>
}
 800360e:	bf00      	nop
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	b082      	sub	sp, #8
 800361a:	af00      	add	r7, sp, #0
 800361c:	4603      	mov	r3, r0
 800361e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	4618      	mov	r0, r3
 8003626:	f7ff ff31 	bl	800348c <__NVIC_EnableIRQ>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7ff ffa2 	bl	8003584 <SysTick_Config>
 8003640:	4603      	mov	r3, r0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800365a:	e17f      	b.n	800395c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2101      	movs	r1, #1
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	4013      	ands	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8171 	beq.w	8003956 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b01      	cmp	r3, #1
 800367e:	d005      	beq.n	800368c <HAL_GPIO_Init+0x40>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	2b02      	cmp	r3, #2
 800368a:	d130      	bne.n	80036ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80036c2:	2201      	movs	r2, #1
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ca:	43db      	mvns	r3, r3
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	4013      	ands	r3, r2
 80036d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 0201 	and.w	r2, r3, #1
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d118      	bne.n	800372c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003700:	2201      	movs	r2, #1
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	43db      	mvns	r3, r3
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	08db      	lsrs	r3, r3, #3
 8003716:	f003 0201 	and.w	r2, r3, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4313      	orrs	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 0303 	and.w	r3, r3, #3
 8003734:	2b03      	cmp	r3, #3
 8003736:	d017      	beq.n	8003768 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	2203      	movs	r2, #3
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	43db      	mvns	r3, r3
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4313      	orrs	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d123      	bne.n	80037bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	08da      	lsrs	r2, r3, #3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3208      	adds	r2, #8
 800377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	220f      	movs	r2, #15
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	4013      	ands	r3, r2
 8003796:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f003 0307 	and.w	r3, r3, #7
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	08da      	lsrs	r2, r3, #3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	3208      	adds	r2, #8
 80037b6:	6939      	ldr	r1, [r7, #16]
 80037b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	2203      	movs	r2, #3
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	4013      	ands	r3, r2
 80037d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0203 	and.w	r2, r3, #3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 80ac 	beq.w	8003956 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fe:	4b5f      	ldr	r3, [pc, #380]	@ (800397c <HAL_GPIO_Init+0x330>)
 8003800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003802:	4a5e      	ldr	r2, [pc, #376]	@ (800397c <HAL_GPIO_Init+0x330>)
 8003804:	f043 0301 	orr.w	r3, r3, #1
 8003808:	6613      	str	r3, [r2, #96]	@ 0x60
 800380a:	4b5c      	ldr	r3, [pc, #368]	@ (800397c <HAL_GPIO_Init+0x330>)
 800380c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003816:	4a5a      	ldr	r2, [pc, #360]	@ (8003980 <HAL_GPIO_Init+0x334>)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	3302      	adds	r3, #2
 800381e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	fa02 f303 	lsl.w	r3, r2, r3
 8003832:	43db      	mvns	r3, r3
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003840:	d025      	beq.n	800388e <HAL_GPIO_Init+0x242>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a4f      	ldr	r2, [pc, #316]	@ (8003984 <HAL_GPIO_Init+0x338>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_GPIO_Init+0x23e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4e      	ldr	r2, [pc, #312]	@ (8003988 <HAL_GPIO_Init+0x33c>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x23a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4d      	ldr	r2, [pc, #308]	@ (800398c <HAL_GPIO_Init+0x340>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x236>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4c      	ldr	r2, [pc, #304]	@ (8003990 <HAL_GPIO_Init+0x344>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x232>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4b      	ldr	r2, [pc, #300]	@ (8003994 <HAL_GPIO_Init+0x348>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x22e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4a      	ldr	r2, [pc, #296]	@ (8003998 <HAL_GPIO_Init+0x34c>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x22a>
 8003872:	2306      	movs	r3, #6
 8003874:	e00c      	b.n	8003890 <HAL_GPIO_Init+0x244>
 8003876:	2307      	movs	r3, #7
 8003878:	e00a      	b.n	8003890 <HAL_GPIO_Init+0x244>
 800387a:	2305      	movs	r3, #5
 800387c:	e008      	b.n	8003890 <HAL_GPIO_Init+0x244>
 800387e:	2304      	movs	r3, #4
 8003880:	e006      	b.n	8003890 <HAL_GPIO_Init+0x244>
 8003882:	2303      	movs	r3, #3
 8003884:	e004      	b.n	8003890 <HAL_GPIO_Init+0x244>
 8003886:	2302      	movs	r3, #2
 8003888:	e002      	b.n	8003890 <HAL_GPIO_Init+0x244>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <HAL_GPIO_Init+0x244>
 800388e:	2300      	movs	r3, #0
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	f002 0203 	and.w	r2, r2, #3
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	4093      	lsls	r3, r2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038a0:	4937      	ldr	r1, [pc, #220]	@ (8003980 <HAL_GPIO_Init+0x334>)
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	089b      	lsrs	r3, r3, #2
 80038a6:	3302      	adds	r3, #2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038ae:	4b3b      	ldr	r3, [pc, #236]	@ (800399c <HAL_GPIO_Init+0x350>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038d2:	4a32      	ldr	r2, [pc, #200]	@ (800399c <HAL_GPIO_Init+0x350>)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038d8:	4b30      	ldr	r3, [pc, #192]	@ (800399c <HAL_GPIO_Init+0x350>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038fc:	4a27      	ldr	r2, [pc, #156]	@ (800399c <HAL_GPIO_Init+0x350>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003902:	4b26      	ldr	r3, [pc, #152]	@ (800399c <HAL_GPIO_Init+0x350>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003926:	4a1d      	ldr	r2, [pc, #116]	@ (800399c <HAL_GPIO_Init+0x350>)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800392c:	4b1b      	ldr	r3, [pc, #108]	@ (800399c <HAL_GPIO_Init+0x350>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	43db      	mvns	r3, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003950:	4a12      	ldr	r2, [pc, #72]	@ (800399c <HAL_GPIO_Init+0x350>)
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	3301      	adds	r3, #1
 800395a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	f47f ae78 	bne.w	800365c <HAL_GPIO_Init+0x10>
  }
}
 800396c:	bf00      	nop
 800396e:	bf00      	nop
 8003970:	371c      	adds	r7, #28
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	40010000 	.word	0x40010000
 8003984:	48000400 	.word	0x48000400
 8003988:	48000800 	.word	0x48000800
 800398c:	48000c00 	.word	0x48000c00
 8003990:	48001000 	.word	0x48001000
 8003994:	48001400 	.word	0x48001400
 8003998:	48001800 	.word	0x48001800
 800399c:	40010400 	.word	0x40010400

080039a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
 80039ac:	4613      	mov	r3, r2
 80039ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b0:	787b      	ldrb	r3, [r7, #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039bc:	e002      	b.n	80039c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039be:	887a      	ldrh	r2, [r7, #2]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039d0:	b480      	push	{r7}
 80039d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039d4:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80039dc:	4618      	mov	r0, r3
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40007000 	.word	0x40007000

080039ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039fa:	d130      	bne.n	8003a5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039fc:	4b23      	ldr	r3, [pc, #140]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a08:	d038      	beq.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a0a:	4b20      	ldr	r3, [pc, #128]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a12:	4a1e      	ldr	r2, [pc, #120]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a14:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2232      	movs	r2, #50	@ 0x32
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	4a1b      	ldr	r2, [pc, #108]	@ (8003a94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a26:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2a:	0c9b      	lsrs	r3, r3, #18
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a30:	e002      	b.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a38:	4b14      	ldr	r3, [pc, #80]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a44:	d102      	bne.n	8003a4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f2      	bne.n	8003a32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a58:	d110      	bne.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e00f      	b.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a6a:	d007      	beq.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a6c:	4b07      	ldr	r3, [pc, #28]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a74:	4a05      	ldr	r2, [pc, #20]	@ (8003a8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	200000a0 	.word	0x200000a0
 8003a94:	431bde83 	.word	0x431bde83

08003a98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e3ca      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003aaa:	4b97      	ldr	r3, [pc, #604]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
 8003ab2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ab4:	4b94      	ldr	r3, [pc, #592]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0310 	and.w	r3, r3, #16
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80e4 	beq.w	8003c94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d007      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x4a>
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	f040 808b 	bne.w	8003bf0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	f040 8087 	bne.w	8003bf0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ae2:	4b89      	ldr	r3, [pc, #548]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d005      	beq.n	8003afa <HAL_RCC_OscConfig+0x62>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e3a2      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1a      	ldr	r2, [r3, #32]
 8003afe:	4b82      	ldr	r3, [pc, #520]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <HAL_RCC_OscConfig+0x7c>
 8003b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b12:	e005      	b.n	8003b20 <HAL_RCC_OscConfig+0x88>
 8003b14:	4b7c      	ldr	r3, [pc, #496]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1a:	091b      	lsrs	r3, r3, #4
 8003b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d223      	bcs.n	8003b6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 fd55 	bl	80045d8 <RCC_SetFlashLatencyFromMSIRange>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e383      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b38:	4b73      	ldr	r3, [pc, #460]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a72      	ldr	r2, [pc, #456]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	f043 0308 	orr.w	r3, r3, #8
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	4b70      	ldr	r3, [pc, #448]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	496d      	ldr	r1, [pc, #436]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b56:	4b6c      	ldr	r3, [pc, #432]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	021b      	lsls	r3, r3, #8
 8003b64:	4968      	ldr	r1, [pc, #416]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	604b      	str	r3, [r1, #4]
 8003b6a:	e025      	b.n	8003bb8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b6c:	4b66      	ldr	r3, [pc, #408]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a65      	ldr	r2, [pc, #404]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b72:	f043 0308 	orr.w	r3, r3, #8
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	4b63      	ldr	r3, [pc, #396]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a1b      	ldr	r3, [r3, #32]
 8003b84:	4960      	ldr	r1, [pc, #384]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	021b      	lsls	r3, r3, #8
 8003b98:	495b      	ldr	r1, [pc, #364]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d109      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fd15 	bl	80045d8 <RCC_SetFlashLatencyFromMSIRange>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e343      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bb8:	f000 fc4a 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	4b52      	ldr	r3, [pc, #328]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	091b      	lsrs	r3, r3, #4
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	4950      	ldr	r1, [pc, #320]	@ (8003d0c <HAL_RCC_OscConfig+0x274>)
 8003bca:	5ccb      	ldrb	r3, [r1, r3]
 8003bcc:	f003 031f 	and.w	r3, r3, #31
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd4:	4a4e      	ldr	r2, [pc, #312]	@ (8003d10 <HAL_RCC_OscConfig+0x278>)
 8003bd6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8003d14 <HAL_RCC_OscConfig+0x27c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe f807 	bl	8001bf0 <HAL_InitTick>
 8003be2:	4603      	mov	r3, r0
 8003be4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003be6:	7bfb      	ldrb	r3, [r7, #15]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d052      	beq.n	8003c92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	e327      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d032      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003bf8:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a42      	ldr	r2, [pc, #264]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c04:	f7fe f844 	bl	8001c90 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c0c:	f7fe f840 	bl	8001c90 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e310      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0302 	and.w	r3, r3, #2
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d0f0      	beq.n	8003c0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c2a:	4b37      	ldr	r3, [pc, #220]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a36      	ldr	r2, [pc, #216]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c30:	f043 0308 	orr.w	r3, r3, #8
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	4931      	ldr	r1, [pc, #196]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c48:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	492c      	ldr	r1, [pc, #176]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	604b      	str	r3, [r1, #4]
 8003c5c:	e01a      	b.n	8003c94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a29      	ldr	r2, [pc, #164]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c6a:	f7fe f811 	bl	8001c90 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c72:	f7fe f80d 	bl	8001c90 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e2dd      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c84:	4b20      	ldr	r3, [pc, #128]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x1da>
 8003c90:	e000      	b.n	8003c94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d074      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b08      	cmp	r3, #8
 8003ca4:	d005      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x21a>
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	2b0c      	cmp	r3, #12
 8003caa:	d10e      	bne.n	8003cca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d10b      	bne.n	8003cca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb2:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d064      	beq.n	8003d88 <HAL_RCC_OscConfig+0x2f0>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d160      	bne.n	8003d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e2ba      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x24a>
 8003cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	e026      	b.n	8003d30 <HAL_RCC_OscConfig+0x298>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cea:	d115      	bne.n	8003d18 <HAL_RCC_OscConfig+0x280>
 8003cec:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a05      	ldr	r2, [pc, #20]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a02      	ldr	r2, [pc, #8]	@ (8003d08 <HAL_RCC_OscConfig+0x270>)
 8003cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	e014      	b.n	8003d30 <HAL_RCC_OscConfig+0x298>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	08008ac8 	.word	0x08008ac8
 8003d10:	200000a0 	.word	0x200000a0
 8003d14:	200000a4 	.word	0x200000a4
 8003d18:	4ba0      	ldr	r3, [pc, #640]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a9f      	ldr	r2, [pc, #636]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b9d      	ldr	r3, [pc, #628]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a9c      	ldr	r2, [pc, #624]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d013      	beq.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd ffaa 	bl	8001c90 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fd ffa6 	bl	8001c90 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	@ 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e276      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d52:	4b92      	ldr	r3, [pc, #584]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0x2a8>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fd ff96 	bl	8001c90 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fd ff92 	bl	8001c90 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	@ 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e262      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d7a:	4b88      	ldr	r3, [pc, #544]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x2d0>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d060      	beq.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_OscConfig+0x310>
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	2b0c      	cmp	r3, #12
 8003da0:	d119      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d116      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da8:	4b7c      	ldr	r3, [pc, #496]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x328>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e23f      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc0:	4b76      	ldr	r3, [pc, #472]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	061b      	lsls	r3, r3, #24
 8003dce:	4973      	ldr	r1, [pc, #460]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd4:	e040      	b.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d023      	beq.n	8003e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dde:	4b6f      	ldr	r3, [pc, #444]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a6e      	ldr	r2, [pc, #440]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fd ff51 	bl	8001c90 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df2:	f7fd ff4d 	bl	8001c90 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e21d      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e04:	4b65      	ldr	r3, [pc, #404]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e10:	4b62      	ldr	r3, [pc, #392]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	061b      	lsls	r3, r3, #24
 8003e1e:	495f      	ldr	r1, [pc, #380]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e20:	4313      	orrs	r3, r2
 8003e22:	604b      	str	r3, [r1, #4]
 8003e24:	e018      	b.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e26:	4b5d      	ldr	r3, [pc, #372]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5c      	ldr	r2, [pc, #368]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fd ff2d 	bl	8001c90 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fd ff29 	bl	8001c90 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1f9      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e4c:	4b53      	ldr	r3, [pc, #332]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d03c      	beq.n	8003ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01c      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e72:	4a4a      	ldr	r2, [pc, #296]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fd ff08 	bl	8001c90 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fd ff04 	bl	8001c90 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e1d4      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e96:	4b41      	ldr	r3, [pc, #260]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d0ef      	beq.n	8003e84 <HAL_RCC_OscConfig+0x3ec>
 8003ea4:	e01b      	b.n	8003ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea6:	4b3d      	ldr	r3, [pc, #244]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eac:	4a3b      	ldr	r2, [pc, #236]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003eae:	f023 0301 	bic.w	r3, r3, #1
 8003eb2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd feeb 	bl	8001c90 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebe:	f7fd fee7 	bl	8001c90 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e1b7      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ed0:	4b32      	ldr	r3, [pc, #200]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1ef      	bne.n	8003ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80a6 	beq.w	8004038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efc:	4b27      	ldr	r3, [pc, #156]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f00:	4a26      	ldr	r2, [pc, #152]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f06:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f08:	4b24      	ldr	r3, [pc, #144]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f14:	2301      	movs	r3, #1
 8003f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f18:	4b21      	ldr	r3, [pc, #132]	@ (8003fa0 <HAL_RCC_OscConfig+0x508>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d118      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f24:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa0 <HAL_RCC_OscConfig+0x508>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa0 <HAL_RCC_OscConfig+0x508>)
 8003f2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f30:	f7fd feae 	bl	8001c90 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f38:	f7fd feaa 	bl	8001c90 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e17a      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <HAL_RCC_OscConfig+0x508>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d108      	bne.n	8003f70 <HAL_RCC_OscConfig+0x4d8>
 8003f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f64:	4a0d      	ldr	r2, [pc, #52]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f6e:	e029      	b.n	8003fc4 <HAL_RCC_OscConfig+0x52c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	d115      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x50c>
 8003f78:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	4a07      	ldr	r2, [pc, #28]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f80:	f043 0304 	orr.w	r3, r3, #4
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f88:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8e:	4a03      	ldr	r2, [pc, #12]	@ (8003f9c <HAL_RCC_OscConfig+0x504>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f98:	e014      	b.n	8003fc4 <HAL_RCC_OscConfig+0x52c>
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	4b9c      	ldr	r3, [pc, #624]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003faa:	4a9b      	ldr	r2, [pc, #620]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8003fac:	f023 0301 	bic.w	r3, r3, #1
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fb4:	4b98      	ldr	r3, [pc, #608]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fba:	4a97      	ldr	r2, [pc, #604]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8003fbc:	f023 0304 	bic.w	r3, r3, #4
 8003fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d016      	beq.n	8003ffa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fcc:	f7fd fe60 	bl	8001c90 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd2:	e00a      	b.n	8003fea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd4:	f7fd fe5c 	bl	8001c90 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e12a      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	4b8b      	ldr	r3, [pc, #556]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ed      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x53c>
 8003ff8:	e015      	b.n	8004026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fe49 	bl	8001c90 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fd fe45 	bl	8001c90 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e113      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004018:	4b7f      	ldr	r3, [pc, #508]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ed      	bne.n	8004002 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004026:	7ffb      	ldrb	r3, [r7, #31]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b7a      	ldr	r3, [pc, #488]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800402e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004030:	4a79      	ldr	r2, [pc, #484]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004036:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80fe 	beq.w	800423e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004046:	2b02      	cmp	r3, #2
 8004048:	f040 80d0 	bne.w	80041ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800404c:	4b72      	ldr	r3, [pc, #456]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f003 0203 	and.w	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	429a      	cmp	r2, r3
 800405e:	d130      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	3b01      	subs	r3, #1
 800406c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800406e:	429a      	cmp	r2, r3
 8004070:	d127      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800407c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800407e:	429a      	cmp	r2, r3
 8004080:	d11f      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800408c:	2a07      	cmp	r2, #7
 800408e:	bf14      	ite	ne
 8004090:	2201      	movne	r2, #1
 8004092:	2200      	moveq	r2, #0
 8004094:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004096:	4293      	cmp	r3, r2
 8004098:	d113      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d109      	bne.n	80040c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040be:	429a      	cmp	r2, r3
 80040c0:	d06e      	beq.n	80041a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	2b0c      	cmp	r3, #12
 80040c6:	d069      	beq.n	800419c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040c8:	4b53      	ldr	r3, [pc, #332]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d105      	bne.n	80040e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040d4:	4b50      	ldr	r3, [pc, #320]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0ad      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a4b      	ldr	r2, [pc, #300]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80040ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040f0:	f7fd fdce 	bl	8001c90 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f8:	f7fd fdca 	bl	8001c90 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e09a      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410a:	4b43      	ldr	r3, [pc, #268]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004116:	4b40      	ldr	r3, [pc, #256]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	4b40      	ldr	r3, [pc, #256]	@ (800421c <HAL_RCC_OscConfig+0x784>)
 800411c:	4013      	ands	r3, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004126:	3a01      	subs	r2, #1
 8004128:	0112      	lsls	r2, r2, #4
 800412a:	4311      	orrs	r1, r2
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004130:	0212      	lsls	r2, r2, #8
 8004132:	4311      	orrs	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004138:	0852      	lsrs	r2, r2, #1
 800413a:	3a01      	subs	r2, #1
 800413c:	0552      	lsls	r2, r2, #21
 800413e:	4311      	orrs	r1, r2
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004144:	0852      	lsrs	r2, r2, #1
 8004146:	3a01      	subs	r2, #1
 8004148:	0652      	lsls	r2, r2, #25
 800414a:	4311      	orrs	r1, r2
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004150:	0912      	lsrs	r2, r2, #4
 8004152:	0452      	lsls	r2, r2, #17
 8004154:	430a      	orrs	r2, r1
 8004156:	4930      	ldr	r1, [pc, #192]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8004158:	4313      	orrs	r3, r2
 800415a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800415c:	4b2e      	ldr	r3, [pc, #184]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a2d      	ldr	r2, [pc, #180]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8004162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004166:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004168:	4b2b      	ldr	r3, [pc, #172]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a2a      	ldr	r2, [pc, #168]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 800416e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004172:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004174:	f7fd fd8c 	bl	8001c90 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417c:	f7fd fd88 	bl	8001c90 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e058      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418e:	4b22      	ldr	r3, [pc, #136]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800419a:	e050      	b.n	800423e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e04f      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d148      	bne.n	800423e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b8:	4b17      	ldr	r3, [pc, #92]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a16      	ldr	r2, [pc, #88]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041c4:	f7fd fd64 	bl	8001c90 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fd fd60 	bl	8001c90 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e030      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	4b0e      	ldr	r3, [pc, #56]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x734>
 80041ea:	e028      	b.n	800423e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	2b0c      	cmp	r3, #12
 80041f0:	d023      	beq.n	800423a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a08      	ldr	r2, [pc, #32]	@ (8004218 <HAL_RCC_OscConfig+0x780>)
 80041f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80041fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fe:	f7fd fd47 	bl	8001c90 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004204:	e00c      	b.n	8004220 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004206:	f7fd fd43 	bl	8001c90 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d905      	bls.n	8004220 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e013      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
 8004218:	40021000 	.word	0x40021000
 800421c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004220:	4b09      	ldr	r3, [pc, #36]	@ (8004248 <HAL_RCC_OscConfig+0x7b0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1ec      	bne.n	8004206 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <HAL_RCC_OscConfig+0x7b0>)
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	4905      	ldr	r1, [pc, #20]	@ (8004248 <HAL_RCC_OscConfig+0x7b0>)
 8004232:	4b06      	ldr	r3, [pc, #24]	@ (800424c <HAL_RCC_OscConfig+0x7b4>)
 8004234:	4013      	ands	r3, r2
 8004236:	60cb      	str	r3, [r1, #12]
 8004238:	e001      	b.n	800423e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3720      	adds	r7, #32
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40021000 	.word	0x40021000
 800424c:	feeefffc 	.word	0xfeeefffc

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0e7      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b75      	ldr	r3, [pc, #468]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d910      	bls.n	8004294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b72      	ldr	r3, [pc, #456]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4970      	ldr	r1, [pc, #448]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b6e      	ldr	r3, [pc, #440]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0cf      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	4b66      	ldr	r3, [pc, #408]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d908      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b63      	ldr	r3, [pc, #396]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	4960      	ldr	r1, [pc, #384]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d04c      	beq.n	8004368 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d6:	4b5a      	ldr	r3, [pc, #360]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d121      	bne.n	8004326 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e0a6      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ee:	4b54      	ldr	r3, [pc, #336]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d115      	bne.n	8004326 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e09a      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004306:	4b4e      	ldr	r3, [pc, #312]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d109      	bne.n	8004326 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e08e      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004316:	4b4a      	ldr	r3, [pc, #296]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e086      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4b46      	ldr	r3, [pc, #280]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4943      	ldr	r1, [pc, #268]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fd fcaa 	bl	8001c90 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	e00a      	b.n	8004356 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004340:	f7fd fca6 	bl	8001c90 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e06e      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b3a      	ldr	r3, [pc, #232]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 020c 	and.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	429a      	cmp	r2, r3
 8004366:	d1eb      	bne.n	8004340 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d010      	beq.n	8004396 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	4b31      	ldr	r3, [pc, #196]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004380:	429a      	cmp	r2, r3
 8004382:	d208      	bcs.n	8004396 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004384:	4b2e      	ldr	r3, [pc, #184]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	492b      	ldr	r1, [pc, #172]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004396:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d210      	bcs.n	80043c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043a4:	4b25      	ldr	r3, [pc, #148]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f023 0207 	bic.w	r2, r3, #7
 80043ac:	4923      	ldr	r1, [pc, #140]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043b4:	4b21      	ldr	r3, [pc, #132]	@ (800443c <HAL_RCC_ClockConfig+0x1ec>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e036      	b.n	8004434 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0304 	and.w	r3, r3, #4
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	4918      	ldr	r1, [pc, #96]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0308 	and.w	r3, r3, #8
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f0:	4b13      	ldr	r3, [pc, #76]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4910      	ldr	r1, [pc, #64]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 8004400:	4313      	orrs	r3, r2
 8004402:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004404:	f000 f824 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <HAL_RCC_ClockConfig+0x1f0>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	091b      	lsrs	r3, r3, #4
 8004410:	f003 030f 	and.w	r3, r3, #15
 8004414:	490b      	ldr	r1, [pc, #44]	@ (8004444 <HAL_RCC_ClockConfig+0x1f4>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	fa22 f303 	lsr.w	r3, r2, r3
 8004420:	4a09      	ldr	r2, [pc, #36]	@ (8004448 <HAL_RCC_ClockConfig+0x1f8>)
 8004422:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004424:	4b09      	ldr	r3, [pc, #36]	@ (800444c <HAL_RCC_ClockConfig+0x1fc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4618      	mov	r0, r3
 800442a:	f7fd fbe1 	bl	8001bf0 <HAL_InitTick>
 800442e:	4603      	mov	r3, r0
 8004430:	72fb      	strb	r3, [r7, #11]

  return status;
 8004432:	7afb      	ldrb	r3, [r7, #11]
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40022000 	.word	0x40022000
 8004440:	40021000 	.word	0x40021000
 8004444:	08008ac8 	.word	0x08008ac8
 8004448:	200000a0 	.word	0x200000a0
 800444c:	200000a4 	.word	0x200000a4

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b480      	push	{r7}
 8004452:	b089      	sub	sp, #36	@ 0x24
 8004454:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800445e:	4b3e      	ldr	r3, [pc, #248]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	f003 030c 	and.w	r3, r3, #12
 8004466:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004468:	4b3b      	ldr	r3, [pc, #236]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_GetSysClockFreq+0x34>
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	2b0c      	cmp	r3, #12
 800447c:	d121      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11e      	bne.n	80044c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004484:	4b34      	ldr	r3, [pc, #208]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d107      	bne.n	80044a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004490:	4b31      	ldr	r3, [pc, #196]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	e005      	b.n	80044ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044ac:	4a2b      	ldr	r2, [pc, #172]	@ (800455c <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10d      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044c0:	e00a      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b04      	cmp	r3, #4
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c8:	4b25      	ldr	r3, [pc, #148]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x110>)
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e004      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b08      	cmp	r3, #8
 80044d2:	d101      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d4:	4b23      	ldr	r3, [pc, #140]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x114>)
 80044d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	2b0c      	cmp	r3, #12
 80044dc:	d134      	bne.n	8004548 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044de:	4b1e      	ldr	r3, [pc, #120]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b03      	cmp	r3, #3
 80044f2:	d003      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0xac>
 80044f4:	e005      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004560 <HAL_RCC_GetSysClockFreq+0x110>)
 80044f8:	617b      	str	r3, [r7, #20]
      break;
 80044fa:	e005      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044fc:	4b19      	ldr	r3, [pc, #100]	@ (8004564 <HAL_RCC_GetSysClockFreq+0x114>)
 80044fe:	617b      	str	r3, [r7, #20]
      break;
 8004500:	e002      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	617b      	str	r3, [r7, #20]
      break;
 8004506:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004508:	4b13      	ldr	r3, [pc, #76]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	091b      	lsrs	r3, r3, #4
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	3301      	adds	r3, #1
 8004514:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004516:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	fb03 f202 	mul.w	r2, r3, r2
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	fbb2 f3f3 	udiv	r3, r2, r3
 800452c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452e:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <HAL_RCC_GetSysClockFreq+0x108>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	0e5b      	lsrs	r3, r3, #25
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	3301      	adds	r3, #1
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004548:	69bb      	ldr	r3, [r7, #24]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3724      	adds	r7, #36	@ 0x24
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	40021000 	.word	0x40021000
 800455c:	08008ae0 	.word	0x08008ae0
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	@ (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	200000a0 	.word	0x200000a0

08004580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004584:	f7ff fff0 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 8004588:	4602      	mov	r2, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	@ (80045a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	f003 0307 	and.w	r3, r3, #7
 8004594:	4904      	ldr	r1, [pc, #16]	@ (80045a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004596:	5ccb      	ldrb	r3, [r1, r3]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08008ad8 	.word	0x08008ad8

080045ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045b0:	f7ff ffda 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b06      	ldr	r3, [pc, #24]	@ (80045d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	0adb      	lsrs	r3, r3, #11
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	4904      	ldr	r1, [pc, #16]	@ (80045d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	40021000 	.word	0x40021000
 80045d4:	08008ad8 	.word	0x08008ad8

080045d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045e0:	2300      	movs	r3, #0
 80045e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045f0:	f7ff f9ee 	bl	80039d0 <HAL_PWREx_GetVoltageRange>
 80045f4:	6178      	str	r0, [r7, #20]
 80045f6:	e014      	b.n	8004622 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045f8:	4b25      	ldr	r3, [pc, #148]	@ (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045fc:	4a24      	ldr	r2, [pc, #144]	@ (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004602:	6593      	str	r3, [r2, #88]	@ 0x58
 8004604:	4b22      	ldr	r3, [pc, #136]	@ (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800460c:	60fb      	str	r3, [r7, #12]
 800460e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004610:	f7ff f9de 	bl	80039d0 <HAL_PWREx_GetVoltageRange>
 8004614:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b1e      	ldr	r3, [pc, #120]	@ (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461a:	4a1d      	ldr	r2, [pc, #116]	@ (8004690 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004620:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004628:	d10b      	bne.n	8004642 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2b80      	cmp	r3, #128	@ 0x80
 800462e:	d919      	bls.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2ba0      	cmp	r3, #160	@ 0xa0
 8004634:	d902      	bls.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004636:	2302      	movs	r3, #2
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	e013      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800463c:	2301      	movs	r3, #1
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	e010      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b80      	cmp	r3, #128	@ 0x80
 8004646:	d902      	bls.n	800464e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004648:	2303      	movs	r3, #3
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	e00a      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b80      	cmp	r3, #128	@ 0x80
 8004652:	d102      	bne.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004654:	2302      	movs	r3, #2
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e004      	b.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b70      	cmp	r3, #112	@ 0x70
 800465e:	d101      	bne.n	8004664 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004660:	2301      	movs	r3, #1
 8004662:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004664:	4b0b      	ldr	r3, [pc, #44]	@ (8004694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 0207 	bic.w	r2, r3, #7
 800466c:	4909      	ldr	r1, [pc, #36]	@ (8004694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004674:	4b07      	ldr	r3, [pc, #28]	@ (8004694 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021000 	.word	0x40021000
 8004694:	40022000 	.word	0x40022000

08004698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046a0:	2300      	movs	r3, #0
 80046a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046a4:	2300      	movs	r3, #0
 80046a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d041      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80046b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046bc:	d02a      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80046c2:	d824      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046c8:	d008      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80046ce:	d81e      	bhi.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046d8:	d010      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046da:	e018      	b.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046dc:	4b86      	ldr	r3, [pc, #536]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	4a85      	ldr	r2, [pc, #532]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046e8:	e015      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3304      	adds	r3, #4
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fabb 	bl	8004c6c <RCCEx_PLLSAI1_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046fa:	e00c      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3320      	adds	r3, #32
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fba6 	bl	8004e54 <RCCEx_PLLSAI2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800470c:	e003      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	74fb      	strb	r3, [r7, #19]
      break;
 8004712:	e000      	b.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004714:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004716:	7cfb      	ldrb	r3, [r7, #19]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800471c:	4b76      	ldr	r3, [pc, #472]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004722:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800472a:	4973      	ldr	r1, [pc, #460]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004732:	e001      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d041      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004748:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800474c:	d02a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800474e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004752:	d824      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004758:	d008      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800475a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800475e:	d81e      	bhi.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00a      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004768:	d010      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800476a:	e018      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800476c:	4b62      	ldr	r3, [pc, #392]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	4a61      	ldr	r2, [pc, #388]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004776:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004778:	e015      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3304      	adds	r3, #4
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f000 fa73 	bl	8004c6c <RCCEx_PLLSAI1_Config>
 8004786:	4603      	mov	r3, r0
 8004788:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800478a:	e00c      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3320      	adds	r3, #32
 8004790:	2100      	movs	r1, #0
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb5e 	bl	8004e54 <RCCEx_PLLSAI2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800479c:	e003      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	74fb      	strb	r3, [r7, #19]
      break;
 80047a2:	e000      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047ac:	4b52      	ldr	r3, [pc, #328]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80047ba:	494f      	ldr	r1, [pc, #316]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80047c2:	e001      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 80a0 	beq.w	8004916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047d6:	2300      	movs	r3, #0
 80047d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047da:	4b47      	ldr	r3, [pc, #284]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047ea:	2300      	movs	r3, #0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00d      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f0:	4b41      	ldr	r3, [pc, #260]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f4:	4a40      	ldr	r2, [pc, #256]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80047fc:	4b3e      	ldr	r3, [pc, #248]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004808:	2301      	movs	r3, #1
 800480a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800480c:	4b3b      	ldr	r3, [pc, #236]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3a      	ldr	r2, [pc, #232]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004816:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004818:	f7fd fa3a 	bl	8001c90 <HAL_GetTick>
 800481c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800481e:	e009      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004820:	f7fd fa36 	bl	8001c90 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	74fb      	strb	r3, [r7, #19]
        break;
 8004832:	e005      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0ef      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d15c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004846:	4b2c      	ldr	r3, [pc, #176]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800484c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004850:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d01f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	429a      	cmp	r2, r3
 8004862:	d019      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004864:	4b24      	ldr	r3, [pc, #144]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800486e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004870:	4b21      	ldr	r3, [pc, #132]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	4a20      	ldr	r2, [pc, #128]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800487c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004880:	4b1d      	ldr	r3, [pc, #116]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004886:	4a1c      	ldr	r2, [pc, #112]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800488c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004890:	4a19      	ldr	r2, [pc, #100]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a2:	f7fd f9f5 	bl	8001c90 <HAL_GetTick>
 80048a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048a8:	e00b      	b.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048aa:	f7fd f9f1 	bl	8001c90 <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d902      	bls.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	74fb      	strb	r3, [r7, #19]
            break;
 80048c0:	e006      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048c2:	4b0d      	ldr	r3, [pc, #52]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	f003 0302 	and.w	r3, r3, #2
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0ec      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048d0:	7cfb      	ldrb	r3, [r7, #19]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d6:	4b08      	ldr	r3, [pc, #32]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048e6:	4904      	ldr	r1, [pc, #16]	@ (80048f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80048ee:	e009      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048f0:	7cfb      	ldrb	r3, [r7, #19]
 80048f2:	74bb      	strb	r3, [r7, #18]
 80048f4:	e006      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048f6:	bf00      	nop
 80048f8:	40021000 	.word	0x40021000
 80048fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004904:	7c7b      	ldrb	r3, [r7, #17]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d105      	bne.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800490a:	4b9e      	ldr	r3, [pc, #632]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800490e:	4a9d      	ldr	r2, [pc, #628]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004914:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004922:	4b98      	ldr	r3, [pc, #608]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004928:	f023 0203 	bic.w	r2, r3, #3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004930:	4994      	ldr	r1, [pc, #592]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004944:	4b8f      	ldr	r3, [pc, #572]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800494a:	f023 020c 	bic.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	498c      	ldr	r1, [pc, #560]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0304 	and.w	r3, r3, #4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004966:	4b87      	ldr	r3, [pc, #540]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	4983      	ldr	r1, [pc, #524]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004988:	4b7e      	ldr	r3, [pc, #504]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800498e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	497b      	ldr	r1, [pc, #492]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049aa:	4b76      	ldr	r3, [pc, #472]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b8:	4972      	ldr	r1, [pc, #456]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	496a      	ldr	r1, [pc, #424]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049ee:	4b65      	ldr	r3, [pc, #404]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fc:	4961      	ldr	r1, [pc, #388]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a10:	4b5c      	ldr	r3, [pc, #368]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a1e:	4959      	ldr	r1, [pc, #356]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a32:	4b54      	ldr	r3, [pc, #336]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a40:	4950      	ldr	r1, [pc, #320]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a54:	4b4b      	ldr	r3, [pc, #300]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a62:	4948      	ldr	r1, [pc, #288]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a76:	4b43      	ldr	r3, [pc, #268]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a84:	493f      	ldr	r1, [pc, #252]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d028      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a98:	4b3a      	ldr	r3, [pc, #232]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aa6:	4937      	ldr	r1, [pc, #220]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ab2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b32      	ldr	r3, [pc, #200]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a31      	ldr	r2, [pc, #196]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
 8004ac4:	e011      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ace:	d10c      	bne.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f8c8 	bl	8004c6c <RCCEx_PLLSAI1_Config>
 8004adc:	4603      	mov	r3, r0
 8004ade:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d028      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004af6:	4b23      	ldr	r3, [pc, #140]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b04:	491f      	ldr	r1, [pc, #124]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b14:	d106      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b16:	4b1b      	ldr	r3, [pc, #108]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b20:	60d3      	str	r3, [r2, #12]
 8004b22:	e011      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3304      	adds	r3, #4
 8004b32:	2101      	movs	r1, #1
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 f899 	bl	8004c6c <RCCEx_PLLSAI1_Config>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b44:	7cfb      	ldrb	r3, [r7, #19]
 8004b46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d02b      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b54:	4b0b      	ldr	r3, [pc, #44]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b62:	4908      	ldr	r1, [pc, #32]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b72:	d109      	bne.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b74:	4b03      	ldr	r3, [pc, #12]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4a02      	ldr	r2, [pc, #8]	@ (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b7e:	60d3      	str	r3, [r2, #12]
 8004b80:	e014      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b82:	bf00      	nop
 8004b84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b90:	d10c      	bne.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	2101      	movs	r1, #1
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 f867 	bl	8004c6c <RCCEx_PLLSAI1_Config>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ba2:	7cfb      	ldrb	r3, [r7, #19]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d02f      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bb8:	4b2b      	ldr	r3, [pc, #172]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bbe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bc6:	4928      	ldr	r1, [pc, #160]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 f844 	bl	8004c6c <RCCEx_PLLSAI1_Config>
 8004be4:	4603      	mov	r3, r0
 8004be6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be8:	7cfb      	ldrb	r3, [r7, #19]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d014      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	74bb      	strb	r3, [r7, #18]
 8004bf2:	e011      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3320      	adds	r3, #32
 8004c02:	2102      	movs	r1, #2
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 f925 	bl	8004e54 <RCCEx_PLLSAI2_Config>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c0e:	7cfb      	ldrb	r3, [r7, #19]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d001      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c14:	7cfb      	ldrb	r3, [r7, #19]
 8004c16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00a      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c24:	4b10      	ldr	r3, [pc, #64]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c32:	490d      	ldr	r1, [pc, #52]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c46:	4b08      	ldr	r3, [pc, #32]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c56:	4904      	ldr	r1, [pc, #16]	@ (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3718      	adds	r7, #24
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40021000 	.word	0x40021000

08004c6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c76:	2300      	movs	r3, #0
 8004c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c7a:	4b75      	ldr	r3, [pc, #468]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d018      	beq.n	8004cb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c86:	4b72      	ldr	r3, [pc, #456]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0203 	and.w	r2, r3, #3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d10d      	bne.n	8004cb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
       ||
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	091b      	lsrs	r3, r3, #4
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
       ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d047      	beq.n	8004d42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	e044      	b.n	8004d42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d018      	beq.n	8004cf2 <RCCEx_PLLSAI1_Config+0x86>
 8004cc0:	2b03      	cmp	r3, #3
 8004cc2:	d825      	bhi.n	8004d10 <RCCEx_PLLSAI1_Config+0xa4>
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d002      	beq.n	8004cce <RCCEx_PLLSAI1_Config+0x62>
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d009      	beq.n	8004ce0 <RCCEx_PLLSAI1_Config+0x74>
 8004ccc:	e020      	b.n	8004d10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cce:	4b60      	ldr	r3, [pc, #384]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d11d      	bne.n	8004d16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cde:	e01a      	b.n	8004d16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d116      	bne.n	8004d1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf0:	e013      	b.n	8004d1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cf2:	4b57      	ldr	r3, [pc, #348]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d10f      	bne.n	8004d1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cfe:	4b54      	ldr	r3, [pc, #336]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d0e:	e006      	b.n	8004d1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e004      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d16:	bf00      	nop
 8004d18:	e002      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d1a:	bf00      	nop
 8004d1c:	e000      	b.n	8004d20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10d      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d26:	4b4a      	ldr	r3, [pc, #296]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6819      	ldr	r1, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	4944      	ldr	r1, [pc, #272]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d42:	7bfb      	ldrb	r3, [r7, #15]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d17d      	bne.n	8004e44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d48:	4b41      	ldr	r3, [pc, #260]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a40      	ldr	r2, [pc, #256]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d54:	f7fc ff9c 	bl	8001c90 <HAL_GetTick>
 8004d58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d5a:	e009      	b.n	8004d70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d5c:	f7fc ff98 	bl	8001c90 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d902      	bls.n	8004d70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004d6e:	e005      	b.n	8004d7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d70:	4b37      	ldr	r3, [pc, #220]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ef      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d160      	bne.n	8004e44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d111      	bne.n	8004dac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d88:	4b31      	ldr	r3, [pc, #196]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004d90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6892      	ldr	r2, [r2, #8]
 8004d98:	0211      	lsls	r1, r2, #8
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	68d2      	ldr	r2, [r2, #12]
 8004d9e:	0912      	lsrs	r2, r2, #4
 8004da0:	0452      	lsls	r2, r2, #17
 8004da2:	430a      	orrs	r2, r1
 8004da4:	492a      	ldr	r1, [pc, #168]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	610b      	str	r3, [r1, #16]
 8004daa:	e027      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d112      	bne.n	8004dd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004db2:	4b27      	ldr	r3, [pc, #156]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004dba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	6892      	ldr	r2, [r2, #8]
 8004dc2:	0211      	lsls	r1, r2, #8
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6912      	ldr	r2, [r2, #16]
 8004dc8:	0852      	lsrs	r2, r2, #1
 8004dca:	3a01      	subs	r2, #1
 8004dcc:	0552      	lsls	r2, r2, #21
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	491f      	ldr	r1, [pc, #124]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	610b      	str	r3, [r1, #16]
 8004dd6:	e011      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004de0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6892      	ldr	r2, [r2, #8]
 8004de8:	0211      	lsls	r1, r2, #8
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6952      	ldr	r2, [r2, #20]
 8004dee:	0852      	lsrs	r2, r2, #1
 8004df0:	3a01      	subs	r2, #1
 8004df2:	0652      	lsls	r2, r2, #25
 8004df4:	430a      	orrs	r2, r1
 8004df6:	4916      	ldr	r1, [pc, #88]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dfc:	4b14      	ldr	r3, [pc, #80]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a13      	ldr	r2, [pc, #76]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e08:	f7fc ff42 	bl	8001c90 <HAL_GetTick>
 8004e0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e0e:	e009      	b.n	8004e24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e10:	f7fc ff3e 	bl	8001c90 <HAL_GetTick>
 8004e14:	4602      	mov	r2, r0
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d902      	bls.n	8004e24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	73fb      	strb	r3, [r7, #15]
          break;
 8004e22:	e005      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e24:	4b0a      	ldr	r3, [pc, #40]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ef      	beq.n	8004e10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e36:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	4904      	ldr	r1, [pc, #16]	@ (8004e50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000

08004e54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e62:	4b6a      	ldr	r3, [pc, #424]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d018      	beq.n	8004ea0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e6e:	4b67      	ldr	r3, [pc, #412]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0203 	and.w	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d10d      	bne.n	8004e9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
       ||
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d009      	beq.n	8004e9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e86:	4b61      	ldr	r3, [pc, #388]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	091b      	lsrs	r3, r3, #4
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	1c5a      	adds	r2, r3, #1
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
       ||
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d047      	beq.n	8004f2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
 8004e9e:	e044      	b.n	8004f2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b03      	cmp	r3, #3
 8004ea6:	d018      	beq.n	8004eda <RCCEx_PLLSAI2_Config+0x86>
 8004ea8:	2b03      	cmp	r3, #3
 8004eaa:	d825      	bhi.n	8004ef8 <RCCEx_PLLSAI2_Config+0xa4>
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d002      	beq.n	8004eb6 <RCCEx_PLLSAI2_Config+0x62>
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d009      	beq.n	8004ec8 <RCCEx_PLLSAI2_Config+0x74>
 8004eb4:	e020      	b.n	8004ef8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004eb6:	4b55      	ldr	r3, [pc, #340]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d11d      	bne.n	8004efe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ec6:	e01a      	b.n	8004efe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ec8:	4b50      	ldr	r3, [pc, #320]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d116      	bne.n	8004f02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed8:	e013      	b.n	8004f02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004eda:	4b4c      	ldr	r3, [pc, #304]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10f      	bne.n	8004f06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ee6:	4b49      	ldr	r3, [pc, #292]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d109      	bne.n	8004f06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ef6:	e006      	b.n	8004f06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	73fb      	strb	r3, [r7, #15]
      break;
 8004efc:	e004      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004efe:	bf00      	nop
 8004f00:	e002      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f02:	bf00      	nop
 8004f04:	e000      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10d      	bne.n	8004f2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f0e:	4b3f      	ldr	r3, [pc, #252]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6819      	ldr	r1, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	430b      	orrs	r3, r1
 8004f24:	4939      	ldr	r1, [pc, #228]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d167      	bne.n	8005000 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f30:	4b36      	ldr	r3, [pc, #216]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a35      	ldr	r2, [pc, #212]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f3c:	f7fc fea8 	bl	8001c90 <HAL_GetTick>
 8004f40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f42:	e009      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f44:	f7fc fea4 	bl	8001c90 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d902      	bls.n	8004f58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	73fb      	strb	r3, [r7, #15]
        break;
 8004f56:	e005      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f58:	4b2c      	ldr	r3, [pc, #176]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1ef      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f64:	7bfb      	ldrb	r3, [r7, #15]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d14a      	bne.n	8005000 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d111      	bne.n	8004f94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f70:	4b26      	ldr	r3, [pc, #152]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6892      	ldr	r2, [r2, #8]
 8004f80:	0211      	lsls	r1, r2, #8
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	68d2      	ldr	r2, [r2, #12]
 8004f86:	0912      	lsrs	r2, r2, #4
 8004f88:	0452      	lsls	r2, r2, #17
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	491f      	ldr	r1, [pc, #124]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	614b      	str	r3, [r1, #20]
 8004f92:	e011      	b.n	8004fb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f94:	4b1d      	ldr	r3, [pc, #116]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6892      	ldr	r2, [r2, #8]
 8004fa4:	0211      	lsls	r1, r2, #8
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6912      	ldr	r2, [r2, #16]
 8004faa:	0852      	lsrs	r2, r2, #1
 8004fac:	3a01      	subs	r2, #1
 8004fae:	0652      	lsls	r2, r2, #25
 8004fb0:	430a      	orrs	r2, r1
 8004fb2:	4916      	ldr	r1, [pc, #88]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fb8:	4b14      	ldr	r3, [pc, #80]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a13      	ldr	r2, [pc, #76]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fc2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc4:	f7fc fe64 	bl	8001c90 <HAL_GetTick>
 8004fc8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fca:	e009      	b.n	8004fe0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fcc:	f7fc fe60 	bl	8001c90 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d902      	bls.n	8004fe0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	73fb      	strb	r3, [r7, #15]
          break;
 8004fde:	e005      	b.n	8004fec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0ef      	beq.n	8004fcc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff4:	695a      	ldr	r2, [r3, #20]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4904      	ldr	r1, [pc, #16]	@ (800500c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005000:	7bfb      	ldrb	r3, [r7, #15]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000

08005010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e049      	b.n	80050b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc fbb6 	bl	80017a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f001 f86e 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_TIM_PWM_Start+0x24>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	bf14      	ite	ne
 80050dc:	2301      	movne	r3, #1
 80050de:	2300      	moveq	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	e03c      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	d109      	bne.n	80050fe <HAL_TIM_PWM_Start+0x3e>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	bf14      	ite	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	2300      	moveq	r3, #0
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	e02f      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d109      	bne.n	8005118 <HAL_TIM_PWM_Start+0x58>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b01      	cmp	r3, #1
 800510e:	bf14      	ite	ne
 8005110:	2301      	movne	r3, #1
 8005112:	2300      	moveq	r3, #0
 8005114:	b2db      	uxtb	r3, r3
 8005116:	e022      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b0c      	cmp	r3, #12
 800511c:	d109      	bne.n	8005132 <HAL_TIM_PWM_Start+0x72>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b01      	cmp	r3, #1
 8005128:	bf14      	ite	ne
 800512a:	2301      	movne	r3, #1
 800512c:	2300      	moveq	r3, #0
 800512e:	b2db      	uxtb	r3, r3
 8005130:	e015      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b10      	cmp	r3, #16
 8005136:	d109      	bne.n	800514c <HAL_TIM_PWM_Start+0x8c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800513e:	b2db      	uxtb	r3, r3
 8005140:	2b01      	cmp	r3, #1
 8005142:	bf14      	ite	ne
 8005144:	2301      	movne	r3, #1
 8005146:	2300      	moveq	r3, #0
 8005148:	b2db      	uxtb	r3, r3
 800514a:	e008      	b.n	800515e <HAL_TIM_PWM_Start+0x9e>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e09c      	b.n	80052a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_TIM_PWM_Start+0xb6>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	e023      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d104      	bne.n	8005186 <HAL_TIM_PWM_Start+0xc6>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005184:	e01b      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d104      	bne.n	8005196 <HAL_TIM_PWM_Start+0xd6>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005194:	e013      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d104      	bne.n	80051a6 <HAL_TIM_PWM_Start+0xe6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2202      	movs	r2, #2
 80051a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051a4:	e00b      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b10      	cmp	r3, #16
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_PWM_Start+0xf6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051b4:	e003      	b.n	80051be <HAL_TIM_PWM_Start+0xfe>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2202      	movs	r2, #2
 80051ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f001 fc46 	bl	8006a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a35      	ldr	r2, [pc, #212]	@ (80052a8 <HAL_TIM_PWM_Start+0x1e8>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a34      	ldr	r2, [pc, #208]	@ (80052ac <HAL_TIM_PWM_Start+0x1ec>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d00e      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a32      	ldr	r2, [pc, #200]	@ (80052b0 <HAL_TIM_PWM_Start+0x1f0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d009      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a31      	ldr	r2, [pc, #196]	@ (80052b4 <HAL_TIM_PWM_Start+0x1f4>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d004      	beq.n	80051fe <HAL_TIM_PWM_Start+0x13e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	@ (80052b8 <HAL_TIM_PWM_Start+0x1f8>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_PWM_Start+0x142>
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <HAL_TIM_PWM_Start+0x144>
 8005202:	2300      	movs	r3, #0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d007      	beq.n	8005218 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005216:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a22      	ldr	r2, [pc, #136]	@ (80052a8 <HAL_TIM_PWM_Start+0x1e8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d01d      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800522a:	d018      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	@ (80052bc <HAL_TIM_PWM_Start+0x1fc>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a21      	ldr	r2, [pc, #132]	@ (80052c0 <HAL_TIM_PWM_Start+0x200>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00e      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a1f      	ldr	r2, [pc, #124]	@ (80052c4 <HAL_TIM_PWM_Start+0x204>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d009      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <HAL_TIM_PWM_Start+0x1ec>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_TIM_PWM_Start+0x19e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <HAL_TIM_PWM_Start+0x1f0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d115      	bne.n	800528a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	4b18      	ldr	r3, [pc, #96]	@ (80052c8 <HAL_TIM_PWM_Start+0x208>)
 8005266:	4013      	ands	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b06      	cmp	r3, #6
 800526e:	d015      	beq.n	800529c <HAL_TIM_PWM_Start+0x1dc>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005276:	d011      	beq.n	800529c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0201 	orr.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005288:	e008      	b.n	800529c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f042 0201 	orr.w	r2, r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e000      	b.n	800529e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40012c00 	.word	0x40012c00
 80052ac:	40013400 	.word	0x40013400
 80052b0:	40014000 	.word	0x40014000
 80052b4:	40014400 	.word	0x40014400
 80052b8:	40014800 	.word	0x40014800
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	00010007 	.word	0x00010007

080052cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2200      	movs	r2, #0
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fbba 	bl	8006a58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a3e      	ldr	r2, [pc, #248]	@ (80053e4 <HAL_TIM_PWM_Stop+0x118>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_TIM_PWM_Stop+0x4a>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a3d      	ldr	r2, [pc, #244]	@ (80053e8 <HAL_TIM_PWM_Stop+0x11c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_TIM_PWM_Stop+0x4a>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a3b      	ldr	r2, [pc, #236]	@ (80053ec <HAL_TIM_PWM_Stop+0x120>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_TIM_PWM_Stop+0x4a>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3a      	ldr	r2, [pc, #232]	@ (80053f0 <HAL_TIM_PWM_Stop+0x124>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_TIM_PWM_Stop+0x4a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a38      	ldr	r2, [pc, #224]	@ (80053f4 <HAL_TIM_PWM_Stop+0x128>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d101      	bne.n	800531a <HAL_TIM_PWM_Stop+0x4e>
 8005316:	2301      	movs	r3, #1
 8005318:	e000      	b.n	800531c <HAL_TIM_PWM_Stop+0x50>
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f241 1311 	movw	r3, #4369	@ 0x1111
 800532a:	4013      	ands	r3, r2
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10f      	bne.n	8005350 <HAL_TIM_PWM_Stop+0x84>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	f240 4344 	movw	r3, #1092	@ 0x444
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d107      	bne.n	8005350 <HAL_TIM_PWM_Stop+0x84>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800534e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	6a1a      	ldr	r2, [r3, #32]
 8005356:	f241 1311 	movw	r3, #4369	@ 0x1111
 800535a:	4013      	ands	r3, r2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10f      	bne.n	8005380 <HAL_TIM_PWM_Stop+0xb4>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	f240 4344 	movw	r3, #1092	@ 0x444
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <HAL_TIM_PWM_Stop+0xb4>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_TIM_PWM_Stop+0xc4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800538e:	e023      	b.n	80053d8 <HAL_TIM_PWM_Stop+0x10c>
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d104      	bne.n	80053a0 <HAL_TIM_PWM_Stop+0xd4>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800539e:	e01b      	b.n	80053d8 <HAL_TIM_PWM_Stop+0x10c>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d104      	bne.n	80053b0 <HAL_TIM_PWM_Stop+0xe4>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053ae:	e013      	b.n	80053d8 <HAL_TIM_PWM_Stop+0x10c>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d104      	bne.n	80053c0 <HAL_TIM_PWM_Stop+0xf4>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053be:	e00b      	b.n	80053d8 <HAL_TIM_PWM_Stop+0x10c>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d104      	bne.n	80053d0 <HAL_TIM_PWM_Stop+0x104>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053ce:	e003      	b.n	80053d8 <HAL_TIM_PWM_Stop+0x10c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40012c00 	.word	0x40012c00
 80053e8:	40013400 	.word	0x40013400
 80053ec:	40014000 	.word	0x40014000
 80053f0:	40014400 	.word	0x40014400
 80053f4:	40014800 	.word	0x40014800

080053f8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e049      	b.n	800549e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc f976 	bl	8001710 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3304      	adds	r3, #4
 8005434:	4619      	mov	r1, r3
 8005436:	4610      	mov	r0, r2
 8005438:	f000 fe7a 	bl	8006130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_IC_Start_IT+0x1e>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	e023      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_IC_Start_IT+0x2e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	e01b      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_IC_Start_IT+0x3e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	e013      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b0c      	cmp	r3, #12
 80054ea:	d104      	bne.n	80054f6 <HAL_TIM_IC_Start_IT+0x4e>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e00b      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d104      	bne.n	8005506 <HAL_TIM_IC_Start_IT+0x5e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e003      	b.n	800550e <HAL_TIM_IC_Start_IT+0x66>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800550c:	b2db      	uxtb	r3, r3
 800550e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d104      	bne.n	8005520 <HAL_TIM_IC_Start_IT+0x78>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e013      	b.n	8005548 <HAL_TIM_IC_Start_IT+0xa0>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	2b04      	cmp	r3, #4
 8005524:	d104      	bne.n	8005530 <HAL_TIM_IC_Start_IT+0x88>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800552c:	b2db      	uxtb	r3, r3
 800552e:	e00b      	b.n	8005548 <HAL_TIM_IC_Start_IT+0xa0>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b08      	cmp	r3, #8
 8005534:	d104      	bne.n	8005540 <HAL_TIM_IC_Start_IT+0x98>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800553c:	b2db      	uxtb	r3, r3
 800553e:	e003      	b.n	8005548 <HAL_TIM_IC_Start_IT+0xa0>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005546:	b2db      	uxtb	r3, r3
 8005548:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d102      	bne.n	8005556 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005550:	7b7b      	ldrb	r3, [r7, #13]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d001      	beq.n	800555a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0dd      	b.n	8005716 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xc2>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005568:	e023      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xd2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005578:	e01b      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xe2>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005588:	e013      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0xf2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005598:	e00b      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b10      	cmp	r3, #16
 800559e:	d104      	bne.n	80055aa <HAL_TIM_IC_Start_IT+0x102>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055a8:	e003      	b.n	80055b2 <HAL_TIM_IC_Start_IT+0x10a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2202      	movs	r2, #2
 80055ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d104      	bne.n	80055c2 <HAL_TIM_IC_Start_IT+0x11a>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055c0:	e013      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x142>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	2b04      	cmp	r3, #4
 80055c6:	d104      	bne.n	80055d2 <HAL_TIM_IC_Start_IT+0x12a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055d0:	e00b      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x142>
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d104      	bne.n	80055e2 <HAL_TIM_IC_Start_IT+0x13a>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055e0:	e003      	b.n	80055ea <HAL_TIM_IC_Start_IT+0x142>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2202      	movs	r2, #2
 80055e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b0c      	cmp	r3, #12
 80055ee:	d841      	bhi.n	8005674 <HAL_TIM_IC_Start_IT+0x1cc>
 80055f0:	a201      	add	r2, pc, #4	@ (adr r2, 80055f8 <HAL_TIM_IC_Start_IT+0x150>)
 80055f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f6:	bf00      	nop
 80055f8:	0800562d 	.word	0x0800562d
 80055fc:	08005675 	.word	0x08005675
 8005600:	08005675 	.word	0x08005675
 8005604:	08005675 	.word	0x08005675
 8005608:	0800563f 	.word	0x0800563f
 800560c:	08005675 	.word	0x08005675
 8005610:	08005675 	.word	0x08005675
 8005614:	08005675 	.word	0x08005675
 8005618:	08005651 	.word	0x08005651
 800561c:	08005675 	.word	0x08005675
 8005620:	08005675 	.word	0x08005675
 8005624:	08005675 	.word	0x08005675
 8005628:	08005663 	.word	0x08005663
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0202 	orr.w	r2, r2, #2
 800563a:	60da      	str	r2, [r3, #12]
      break;
 800563c:	e01d      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0204 	orr.w	r2, r2, #4
 800564c:	60da      	str	r2, [r3, #12]
      break;
 800564e:	e014      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68da      	ldr	r2, [r3, #12]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0208 	orr.w	r2, r2, #8
 800565e:	60da      	str	r2, [r3, #12]
      break;
 8005660:	e00b      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f042 0210 	orr.w	r2, r2, #16
 8005670:	60da      	str	r2, [r3, #12]
      break;
 8005672:	e002      	b.n	800567a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	73fb      	strb	r3, [r7, #15]
      break;
 8005678:	bf00      	nop
  }

  if (status == HAL_OK)
 800567a:	7bfb      	ldrb	r3, [r7, #15]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d149      	bne.n	8005714 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2201      	movs	r2, #1
 8005686:	6839      	ldr	r1, [r7, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f001 f9e5 	bl	8006a58 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a23      	ldr	r2, [pc, #140]	@ (8005720 <HAL_TIM_IC_Start_IT+0x278>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d01d      	beq.n	80056d4 <HAL_TIM_IC_Start_IT+0x22c>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056a0:	d018      	beq.n	80056d4 <HAL_TIM_IC_Start_IT+0x22c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1f      	ldr	r2, [pc, #124]	@ (8005724 <HAL_TIM_IC_Start_IT+0x27c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <HAL_TIM_IC_Start_IT+0x22c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <HAL_TIM_IC_Start_IT+0x280>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <HAL_TIM_IC_Start_IT+0x22c>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a1c      	ldr	r2, [pc, #112]	@ (800572c <HAL_TIM_IC_Start_IT+0x284>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d009      	beq.n	80056d4 <HAL_TIM_IC_Start_IT+0x22c>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a1a      	ldr	r2, [pc, #104]	@ (8005730 <HAL_TIM_IC_Start_IT+0x288>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d004      	beq.n	80056d4 <HAL_TIM_IC_Start_IT+0x22c>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a19      	ldr	r2, [pc, #100]	@ (8005734 <HAL_TIM_IC_Start_IT+0x28c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d115      	bne.n	8005700 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <HAL_TIM_IC_Start_IT+0x290>)
 80056dc:	4013      	ands	r3, r2
 80056de:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b06      	cmp	r3, #6
 80056e4:	d015      	beq.n	8005712 <HAL_TIM_IC_Start_IT+0x26a>
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ec:	d011      	beq.n	8005712 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f042 0201 	orr.w	r2, r2, #1
 80056fc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056fe:	e008      	b.n	8005712 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0201 	orr.w	r2, r2, #1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e000      	b.n	8005714 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005712:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005714:	7bfb      	ldrb	r3, [r7, #15]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40013400 	.word	0x40013400
 8005734:	40014000 	.word	0x40014000
 8005738:	00010007 	.word	0x00010007

0800573c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e097      	b.n	8005880 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fc f83d 	bl	80017e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8005780:	f023 0307 	bic.w	r3, r3, #7
 8005784:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f000 fccd 	bl	8006130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057be:	f023 0303 	bic.w	r3, r3, #3
 80057c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	021b      	lsls	r3, r3, #8
 80057ce:	4313      	orrs	r3, r2
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80057dc:	f023 030c 	bic.w	r3, r3, #12
 80057e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	021b      	lsls	r3, r3, #8
 80057f8:	4313      	orrs	r3, r2
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	011a      	lsls	r2, r3, #4
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	031b      	lsls	r3, r3, #12
 800580c:	4313      	orrs	r3, r2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005822:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	011b      	lsls	r3, r3, #4
 800582e:	4313      	orrs	r3, r2
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	4313      	orrs	r3, r2
 8005834:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3718      	adds	r7, #24
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005898:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058a0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058a8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058b0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d110      	bne.n	80058da <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d102      	bne.n	80058c4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058be:	7b7b      	ldrb	r3, [r7, #13]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d001      	beq.n	80058c8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e069      	b.n	800599c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2202      	movs	r2, #2
 80058cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d8:	e031      	b.n	800593e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d110      	bne.n	8005902 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058e0:	7bbb      	ldrb	r3, [r7, #14]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d102      	bne.n	80058ec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058e6:	7b3b      	ldrb	r3, [r7, #12]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e055      	b.n	800599c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2202      	movs	r2, #2
 80058fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005900:	e01d      	b.n	800593e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d108      	bne.n	800591a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005908:	7bbb      	ldrb	r3, [r7, #14]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d105      	bne.n	800591a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800590e:	7b7b      	ldrb	r3, [r7, #13]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d102      	bne.n	800591a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005914:	7b3b      	ldrb	r3, [r7, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e03e      	b.n	800599c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2202      	movs	r2, #2
 8005922:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2202      	movs	r2, #2
 800592a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2202      	movs	r2, #2
 8005932:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2202      	movs	r2, #2
 800593a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d003      	beq.n	800594c <HAL_TIM_Encoder_Start+0xc4>
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b04      	cmp	r3, #4
 8005948:	d008      	beq.n	800595c <HAL_TIM_Encoder_Start+0xd4>
 800594a:	e00f      	b.n	800596c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2201      	movs	r2, #1
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f001 f87f 	bl	8006a58 <TIM_CCxChannelCmd>
      break;
 800595a:	e016      	b.n	800598a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2201      	movs	r2, #1
 8005962:	2104      	movs	r1, #4
 8005964:	4618      	mov	r0, r3
 8005966:	f001 f877 	bl	8006a58 <TIM_CCxChannelCmd>
      break;
 800596a:	e00e      	b.n	800598a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2201      	movs	r2, #1
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f001 f86f 	bl	8006a58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2201      	movs	r2, #1
 8005980:	2104      	movs	r1, #4
 8005982:	4618      	mov	r0, r3
 8005984:	f001 f868 	bl	8006a58 <TIM_CCxChannelCmd>
      break;
 8005988:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f042 0201 	orr.w	r2, r2, #1
 8005998:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <HAL_TIM_Encoder_Stop+0x18>
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d008      	beq.n	80059cc <HAL_TIM_Encoder_Stop+0x28>
 80059ba:	e00f      	b.n	80059dc <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2200      	movs	r2, #0
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 f847 	bl	8006a58 <TIM_CCxChannelCmd>
      break;
 80059ca:	e016      	b.n	80059fa <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2200      	movs	r2, #0
 80059d2:	2104      	movs	r1, #4
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 f83f 	bl	8006a58 <TIM_CCxChannelCmd>
      break;
 80059da:	e00e      	b.n	80059fa <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2100      	movs	r1, #0
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 f837 	bl	8006a58 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	2104      	movs	r1, #4
 80059f2:	4618      	mov	r0, r3
 80059f4:	f001 f830 	bl	8006a58 <TIM_CCxChannelCmd>
      break;
 80059f8:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10f      	bne.n	8005a2a <HAL_TIM_Encoder_Stop+0x86>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a1a      	ldr	r2, [r3, #32]
 8005a10:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a14:	4013      	ands	r3, r2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d107      	bne.n	8005a2a <HAL_TIM_Encoder_Stop+0x86>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 0201 	bic.w	r2, r2, #1
 8005a28:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_TIM_Encoder_Stop+0x92>
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	2b04      	cmp	r3, #4
 8005a34:	d148      	bne.n	8005ac8 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_Encoder_Stop+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a44:	e023      	b.n	8005a8e <HAL_TIM_Encoder_Stop+0xea>
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	2b04      	cmp	r3, #4
 8005a4a:	d104      	bne.n	8005a56 <HAL_TIM_Encoder_Stop+0xb2>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a54:	e01b      	b.n	8005a8e <HAL_TIM_Encoder_Stop+0xea>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d104      	bne.n	8005a66 <HAL_TIM_Encoder_Stop+0xc2>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a64:	e013      	b.n	8005a8e <HAL_TIM_Encoder_Stop+0xea>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b0c      	cmp	r3, #12
 8005a6a:	d104      	bne.n	8005a76 <HAL_TIM_Encoder_Stop+0xd2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005a74:	e00b      	b.n	8005a8e <HAL_TIM_Encoder_Stop+0xea>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d104      	bne.n	8005a86 <HAL_TIM_Encoder_Stop+0xe2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a84:	e003      	b.n	8005a8e <HAL_TIM_Encoder_Stop+0xea>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <HAL_TIM_Encoder_Stop+0xfa>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a9c:	e024      	b.n	8005ae8 <HAL_TIM_Encoder_Stop+0x144>
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	2b04      	cmp	r3, #4
 8005aa2:	d104      	bne.n	8005aae <HAL_TIM_Encoder_Stop+0x10a>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aac:	e01c      	b.n	8005ae8 <HAL_TIM_Encoder_Stop+0x144>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d104      	bne.n	8005abe <HAL_TIM_Encoder_Stop+0x11a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005abc:	e014      	b.n	8005ae8 <HAL_TIM_Encoder_Stop+0x144>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005ac6:	e00f      	b.n	8005ae8 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b084      	sub	sp, #16
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	f003 0302 	and.w	r3, r3, #2
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d020      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f003 0302 	and.w	r3, r3, #2
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d01b      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f06f 0202 	mvn.w	r2, #2
 8005b26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f7fb fb87 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 8005b42:	e005      	b.n	8005b50 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 fad5 	bl	80060f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fadc 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d020      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0304 	and.w	r3, r3, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0204 	mvn.w	r2, #4
 8005b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fb fb61 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 8005b8e:	e005      	b.n	8005b9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 faaf 	bl	80060f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fab6 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 0308 	and.w	r3, r3, #8
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0308 	and.w	r3, r3, #8
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01b      	beq.n	8005bee <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0208 	mvn.w	r2, #8
 8005bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2204      	movs	r2, #4
 8005bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f003 0303 	and.w	r3, r3, #3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fb fb3b 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 8005bda:	e005      	b.n	8005be8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa89 	bl	80060f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa90 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01b      	beq.n	8005c3a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f06f 0210 	mvn.w	r2, #16
 8005c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2208      	movs	r2, #8
 8005c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fb fb15 	bl	8001250 <HAL_TIM_IC_CaptureCallback>
 8005c26:	e005      	b.n	8005c34 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fa63 	bl	80060f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa6a 	bl	8006108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00c      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d007      	beq.n	8005c5e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f06f 0201 	mvn.w	r2, #1
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fa41 	bl	80060e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00c      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 ffa3 	bl	8006bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00c      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d007      	beq.n	8005ca6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 ff9b 	bl	8006bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00c      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d007      	beq.n	8005cca <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fa29 	bl	800611c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00c      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f06f 0220 	mvn.w	r2, #32
 8005ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 ff63 	bl	8006bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}

08005cf6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005cf6:	b580      	push	{r7, lr}
 8005cf8:	b086      	sub	sp, #24
 8005cfa:	af00      	add	r7, sp, #0
 8005cfc:	60f8      	str	r0, [r7, #12]
 8005cfe:	60b9      	str	r1, [r7, #8]
 8005d00:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e088      	b.n	8005e26 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d11b      	bne.n	8005d5a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d32:	f000 fd6d 	bl	8006810 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f022 020c 	bic.w	r2, r2, #12
 8005d44:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6999      	ldr	r1, [r3, #24]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	619a      	str	r2, [r3, #24]
 8005d58:	e060      	b.n	8005e1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d11c      	bne.n	8005d9a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005d70:	f000 fdbc 	bl	80068ec <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699a      	ldr	r2, [r3, #24]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005d82:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6999      	ldr	r1, [r3, #24]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	021a      	lsls	r2, r3, #8
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	619a      	str	r2, [r3, #24]
 8005d98:	e040      	b.n	8005e1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b08      	cmp	r3, #8
 8005d9e:	d11b      	bne.n	8005dd8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005db0:	f000 fdd9 	bl	8006966 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69da      	ldr	r2, [r3, #28]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 020c 	bic.w	r2, r2, #12
 8005dc2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69d9      	ldr	r1, [r3, #28]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	61da      	str	r2, [r3, #28]
 8005dd6:	e021      	b.n	8005e1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b0c      	cmp	r3, #12
 8005ddc:	d11c      	bne.n	8005e18 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005dee:	f000 fdf6 	bl	80069de <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69da      	ldr	r2, [r3, #28]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e00:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69d9      	ldr	r1, [r3, #28]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	021a      	lsls	r2, r3, #8
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	61da      	str	r2, [r3, #28]
 8005e16:	e001      	b.n	8005e1c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d101      	bne.n	8005e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	e0ff      	b.n	800604e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2201      	movs	r2, #1
 8005e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b14      	cmp	r3, #20
 8005e5a:	f200 80f0 	bhi.w	800603e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005eb9 	.word	0x08005eb9
 8005e68:	0800603f 	.word	0x0800603f
 8005e6c:	0800603f 	.word	0x0800603f
 8005e70:	0800603f 	.word	0x0800603f
 8005e74:	08005ef9 	.word	0x08005ef9
 8005e78:	0800603f 	.word	0x0800603f
 8005e7c:	0800603f 	.word	0x0800603f
 8005e80:	0800603f 	.word	0x0800603f
 8005e84:	08005f3b 	.word	0x08005f3b
 8005e88:	0800603f 	.word	0x0800603f
 8005e8c:	0800603f 	.word	0x0800603f
 8005e90:	0800603f 	.word	0x0800603f
 8005e94:	08005f7b 	.word	0x08005f7b
 8005e98:	0800603f 	.word	0x0800603f
 8005e9c:	0800603f 	.word	0x0800603f
 8005ea0:	0800603f 	.word	0x0800603f
 8005ea4:	08005fbd 	.word	0x08005fbd
 8005ea8:	0800603f 	.word	0x0800603f
 8005eac:	0800603f 	.word	0x0800603f
 8005eb0:	0800603f 	.word	0x0800603f
 8005eb4:	08005ffd 	.word	0x08005ffd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68b9      	ldr	r1, [r7, #8]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f9d0 	bl	8006264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0208 	orr.w	r2, r2, #8
 8005ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0204 	bic.w	r2, r2, #4
 8005ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6999      	ldr	r1, [r3, #24]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	691a      	ldr	r2, [r3, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	619a      	str	r2, [r3, #24]
      break;
 8005ef6:	e0a5      	b.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	68b9      	ldr	r1, [r7, #8]
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 fa40 	bl	8006384 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	699a      	ldr	r2, [r3, #24]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6999      	ldr	r1, [r3, #24]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	021a      	lsls	r2, r3, #8
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	430a      	orrs	r2, r1
 8005f36:	619a      	str	r2, [r3, #24]
      break;
 8005f38:	e084      	b.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68b9      	ldr	r1, [r7, #8]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 faa9 	bl	8006498 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f042 0208 	orr.w	r2, r2, #8
 8005f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69da      	ldr	r2, [r3, #28]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0204 	bic.w	r2, r2, #4
 8005f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	69d9      	ldr	r1, [r3, #28]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	691a      	ldr	r2, [r3, #16]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	430a      	orrs	r2, r1
 8005f76:	61da      	str	r2, [r3, #28]
      break;
 8005f78:	e064      	b.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f000 fb11 	bl	80065a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	69da      	ldr	r2, [r3, #28]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69d9      	ldr	r1, [r3, #28]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	021a      	lsls	r2, r3, #8
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	61da      	str	r2, [r3, #28]
      break;
 8005fba:	e043      	b.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f000 fb5a 	bl	800667c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0208 	orr.w	r2, r2, #8
 8005fd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0204 	bic.w	r2, r2, #4
 8005fe6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	430a      	orrs	r2, r1
 8005ff8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ffa:	e023      	b.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68b9      	ldr	r1, [r7, #8]
 8006002:	4618      	mov	r0, r3
 8006004:	f000 fb9e 	bl	8006744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006016:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006026:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	021a      	lsls	r2, r3, #8
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	430a      	orrs	r2, r1
 800603a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800603c:	e002      	b.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
      break;
 8006042:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800604c:	7dfb      	ldrb	r3, [r7, #23]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3718      	adds	r7, #24
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop

08006058 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b0c      	cmp	r3, #12
 800606a:	d831      	bhi.n	80060d0 <HAL_TIM_ReadCapturedValue+0x78>
 800606c:	a201      	add	r2, pc, #4	@ (adr r2, 8006074 <HAL_TIM_ReadCapturedValue+0x1c>)
 800606e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006072:	bf00      	nop
 8006074:	080060a9 	.word	0x080060a9
 8006078:	080060d1 	.word	0x080060d1
 800607c:	080060d1 	.word	0x080060d1
 8006080:	080060d1 	.word	0x080060d1
 8006084:	080060b3 	.word	0x080060b3
 8006088:	080060d1 	.word	0x080060d1
 800608c:	080060d1 	.word	0x080060d1
 8006090:	080060d1 	.word	0x080060d1
 8006094:	080060bd 	.word	0x080060bd
 8006098:	080060d1 	.word	0x080060d1
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	080060d1 	.word	0x080060d1
 80060a4:	080060c7 	.word	0x080060c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060ae:	60fb      	str	r3, [r7, #12]

      break;
 80060b0:	e00f      	b.n	80060d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b8:	60fb      	str	r3, [r7, #12]

      break;
 80060ba:	e00a      	b.n	80060d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	60fb      	str	r3, [r7, #12]

      break;
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060cc:	60fb      	str	r3, [r7, #12]

      break;
 80060ce:	e000      	b.n	80060d2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80060d0:	bf00      	nop
  }

  return tmpreg;
 80060d2:	68fb      	ldr	r3, [r7, #12]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a40      	ldr	r2, [pc, #256]	@ (8006244 <TIM_Base_SetConfig+0x114>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800614e:	d00f      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a3d      	ldr	r2, [pc, #244]	@ (8006248 <TIM_Base_SetConfig+0x118>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00b      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a3c      	ldr	r2, [pc, #240]	@ (800624c <TIM_Base_SetConfig+0x11c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d007      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a3b      	ldr	r2, [pc, #236]	@ (8006250 <TIM_Base_SetConfig+0x120>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d003      	beq.n	8006170 <TIM_Base_SetConfig+0x40>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a3a      	ldr	r2, [pc, #232]	@ (8006254 <TIM_Base_SetConfig+0x124>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d108      	bne.n	8006182 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	4313      	orrs	r3, r2
 8006180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a2f      	ldr	r2, [pc, #188]	@ (8006244 <TIM_Base_SetConfig+0x114>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d01f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006190:	d01b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4a2c      	ldr	r2, [pc, #176]	@ (8006248 <TIM_Base_SetConfig+0x118>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d017      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a2b      	ldr	r2, [pc, #172]	@ (800624c <TIM_Base_SetConfig+0x11c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	4a2a      	ldr	r2, [pc, #168]	@ (8006250 <TIM_Base_SetConfig+0x120>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00f      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a29      	ldr	r2, [pc, #164]	@ (8006254 <TIM_Base_SetConfig+0x124>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00b      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a28      	ldr	r2, [pc, #160]	@ (8006258 <TIM_Base_SetConfig+0x128>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d007      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a27      	ldr	r2, [pc, #156]	@ (800625c <TIM_Base_SetConfig+0x12c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d003      	beq.n	80061ca <TIM_Base_SetConfig+0x9a>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a26      	ldr	r2, [pc, #152]	@ (8006260 <TIM_Base_SetConfig+0x130>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d108      	bne.n	80061dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4313      	orrs	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a10      	ldr	r2, [pc, #64]	@ (8006244 <TIM_Base_SetConfig+0x114>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a12      	ldr	r2, [pc, #72]	@ (8006254 <TIM_Base_SetConfig+0x124>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a11      	ldr	r2, [pc, #68]	@ (8006258 <TIM_Base_SetConfig+0x128>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a10      	ldr	r2, [pc, #64]	@ (800625c <TIM_Base_SetConfig+0x12c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0xf8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a0f      	ldr	r2, [pc, #60]	@ (8006260 <TIM_Base_SetConfig+0x130>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	691a      	ldr	r2, [r3, #16]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	615a      	str	r2, [r3, #20]
}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	40012c00 	.word	0x40012c00
 8006248:	40000400 	.word	0x40000400
 800624c:	40000800 	.word	0x40000800
 8006250:	40000c00 	.word	0x40000c00
 8006254:	40013400 	.word	0x40013400
 8006258:	40014000 	.word	0x40014000
 800625c:	40014400 	.word	0x40014400
 8006260:	40014800 	.word	0x40014800

08006264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006264:	b480      	push	{r7}
 8006266:	b087      	sub	sp, #28
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	f023 0201 	bic.w	r2, r3, #1
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f023 0303 	bic.w	r3, r3, #3
 800629e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	f023 0302 	bic.w	r3, r3, #2
 80062b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	4a2c      	ldr	r2, [pc, #176]	@ (8006370 <TIM_OC1_SetConfig+0x10c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00f      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	4a2b      	ldr	r2, [pc, #172]	@ (8006374 <TIM_OC1_SetConfig+0x110>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006378 <TIM_OC1_SetConfig+0x114>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d007      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a29      	ldr	r2, [pc, #164]	@ (800637c <TIM_OC1_SetConfig+0x118>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d003      	beq.n	80062e4 <TIM_OC1_SetConfig+0x80>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a28      	ldr	r2, [pc, #160]	@ (8006380 <TIM_OC1_SetConfig+0x11c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d10c      	bne.n	80062fe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0308 	bic.w	r3, r3, #8
 80062ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0304 	bic.w	r3, r3, #4
 80062fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1b      	ldr	r2, [pc, #108]	@ (8006370 <TIM_OC1_SetConfig+0x10c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00f      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1a      	ldr	r2, [pc, #104]	@ (8006374 <TIM_OC1_SetConfig+0x110>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00b      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a19      	ldr	r2, [pc, #100]	@ (8006378 <TIM_OC1_SetConfig+0x114>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a18      	ldr	r2, [pc, #96]	@ (800637c <TIM_OC1_SetConfig+0x118>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d003      	beq.n	8006326 <TIM_OC1_SetConfig+0xc2>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a17      	ldr	r2, [pc, #92]	@ (8006380 <TIM_OC1_SetConfig+0x11c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d111      	bne.n	800634a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800632c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	621a      	str	r2, [r3, #32]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40013400 	.word	0x40013400
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f023 0210 	bic.w	r2, r3, #16
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	68fa      	ldr	r2, [r7, #12]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f023 0320 	bic.w	r3, r3, #32
 80063d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	011b      	lsls	r3, r3, #4
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	4313      	orrs	r3, r2
 80063de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a28      	ldr	r2, [pc, #160]	@ (8006484 <TIM_OC2_SetConfig+0x100>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_OC2_SetConfig+0x6c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a27      	ldr	r2, [pc, #156]	@ (8006488 <TIM_OC2_SetConfig+0x104>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10d      	bne.n	800640c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800640a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a1d      	ldr	r2, [pc, #116]	@ (8006484 <TIM_OC2_SetConfig+0x100>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00f      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a1c      	ldr	r2, [pc, #112]	@ (8006488 <TIM_OC2_SetConfig+0x104>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00b      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a1b      	ldr	r2, [pc, #108]	@ (800648c <TIM_OC2_SetConfig+0x108>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a1a      	ldr	r2, [pc, #104]	@ (8006490 <TIM_OC2_SetConfig+0x10c>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_OC2_SetConfig+0xb0>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a19      	ldr	r2, [pc, #100]	@ (8006494 <TIM_OC2_SetConfig+0x110>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d113      	bne.n	800645c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800643a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	699b      	ldr	r3, [r3, #24]
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	621a      	str	r2, [r3, #32]
}
 8006476:	bf00      	nop
 8006478:	371c      	adds	r7, #28
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40012c00 	.word	0x40012c00
 8006488:	40013400 	.word	0x40013400
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f023 0303 	bic.w	r3, r3, #3
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a27      	ldr	r2, [pc, #156]	@ (8006594 <TIM_OC3_SetConfig+0xfc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d003      	beq.n	8006502 <TIM_OC3_SetConfig+0x6a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a26      	ldr	r2, [pc, #152]	@ (8006598 <TIM_OC3_SetConfig+0x100>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10d      	bne.n	800651e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006508:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800651c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1c      	ldr	r2, [pc, #112]	@ (8006594 <TIM_OC3_SetConfig+0xfc>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d00f      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a1b      	ldr	r2, [pc, #108]	@ (8006598 <TIM_OC3_SetConfig+0x100>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d00b      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a1a      	ldr	r2, [pc, #104]	@ (800659c <TIM_OC3_SetConfig+0x104>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d007      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a19      	ldr	r2, [pc, #100]	@ (80065a0 <TIM_OC3_SetConfig+0x108>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d003      	beq.n	8006546 <TIM_OC3_SetConfig+0xae>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a18      	ldr	r2, [pc, #96]	@ (80065a4 <TIM_OC3_SetConfig+0x10c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d113      	bne.n	800656e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800654c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	011b      	lsls	r3, r3, #4
 800655c:	693a      	ldr	r2, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	4313      	orrs	r3, r2
 800656c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	621a      	str	r2, [r3, #32]
}
 8006588:	bf00      	nop
 800658a:	371c      	adds	r7, #28
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40013400 	.word	0x40013400
 800659c:	40014000 	.word	0x40014000
 80065a0:	40014400 	.word	0x40014400
 80065a4:	40014800 	.word	0x40014800

080065a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b087      	sub	sp, #28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80065d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	021b      	lsls	r3, r3, #8
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	031b      	lsls	r3, r3, #12
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a18      	ldr	r2, [pc, #96]	@ (8006668 <TIM_OC4_SetConfig+0xc0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d00f      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a17      	ldr	r2, [pc, #92]	@ (800666c <TIM_OC4_SetConfig+0xc4>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d00b      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a16      	ldr	r2, [pc, #88]	@ (8006670 <TIM_OC4_SetConfig+0xc8>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d007      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a15      	ldr	r2, [pc, #84]	@ (8006674 <TIM_OC4_SetConfig+0xcc>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d003      	beq.n	800662c <TIM_OC4_SetConfig+0x84>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a14      	ldr	r2, [pc, #80]	@ (8006678 <TIM_OC4_SetConfig+0xd0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d109      	bne.n	8006640 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	685a      	ldr	r2, [r3, #4]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	621a      	str	r2, [r3, #32]
}
 800665a:	bf00      	nop
 800665c:	371c      	adds	r7, #28
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40013400 	.word	0x40013400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80066c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	041b      	lsls	r3, r3, #16
 80066c8:	693a      	ldr	r2, [r7, #16]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a17      	ldr	r2, [pc, #92]	@ (8006730 <TIM_OC5_SetConfig+0xb4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d00f      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a16      	ldr	r2, [pc, #88]	@ (8006734 <TIM_OC5_SetConfig+0xb8>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d00b      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a15      	ldr	r2, [pc, #84]	@ (8006738 <TIM_OC5_SetConfig+0xbc>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d007      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a14      	ldr	r2, [pc, #80]	@ (800673c <TIM_OC5_SetConfig+0xc0>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d003      	beq.n	80066f6 <TIM_OC5_SetConfig+0x7a>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a13      	ldr	r2, [pc, #76]	@ (8006740 <TIM_OC5_SetConfig+0xc4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d109      	bne.n	800670a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	621a      	str	r2, [r3, #32]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40013400 	.word	0x40013400
 8006738:	40014000 	.word	0x40014000
 800673c:	40014400 	.word	0x40014400
 8006740:	40014800 	.word	0x40014800

08006744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006744:	b480      	push	{r7}
 8006746:	b087      	sub	sp, #28
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800676a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	021b      	lsls	r3, r3, #8
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	4313      	orrs	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800678a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	051b      	lsls	r3, r3, #20
 8006792:	693a      	ldr	r2, [r7, #16]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a18      	ldr	r2, [pc, #96]	@ (80067fc <TIM_OC6_SetConfig+0xb8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d00f      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a17      	ldr	r2, [pc, #92]	@ (8006800 <TIM_OC6_SetConfig+0xbc>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a16      	ldr	r2, [pc, #88]	@ (8006804 <TIM_OC6_SetConfig+0xc0>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a15      	ldr	r2, [pc, #84]	@ (8006808 <TIM_OC6_SetConfig+0xc4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_OC6_SetConfig+0x7c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a14      	ldr	r2, [pc, #80]	@ (800680c <TIM_OC6_SetConfig+0xc8>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d109      	bne.n	80067d4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80067c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	029b      	lsls	r3, r3, #10
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	621a      	str	r2, [r3, #32]
}
 80067ee:	bf00      	nop
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	40012c00 	.word	0x40012c00
 8006800:	40013400 	.word	0x40013400
 8006804:	40014000 	.word	0x40014000
 8006808:	40014400 	.word	0x40014400
 800680c:	40014800 	.word	0x40014800

08006810 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006810:	b480      	push	{r7}
 8006812:	b087      	sub	sp, #28
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6a1b      	ldr	r3, [r3, #32]
 8006828:	f023 0201 	bic.w	r2, r3, #1
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a26      	ldr	r2, [pc, #152]	@ (80068d4 <TIM_TI1_SetConfig+0xc4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d017      	beq.n	800686e <TIM_TI1_SetConfig+0x5e>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006844:	d013      	beq.n	800686e <TIM_TI1_SetConfig+0x5e>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a23      	ldr	r2, [pc, #140]	@ (80068d8 <TIM_TI1_SetConfig+0xc8>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00f      	beq.n	800686e <TIM_TI1_SetConfig+0x5e>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4a22      	ldr	r2, [pc, #136]	@ (80068dc <TIM_TI1_SetConfig+0xcc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00b      	beq.n	800686e <TIM_TI1_SetConfig+0x5e>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4a21      	ldr	r2, [pc, #132]	@ (80068e0 <TIM_TI1_SetConfig+0xd0>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <TIM_TI1_SetConfig+0x5e>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	4a20      	ldr	r2, [pc, #128]	@ (80068e4 <TIM_TI1_SetConfig+0xd4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_TI1_SetConfig+0x5e>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4a1f      	ldr	r2, [pc, #124]	@ (80068e8 <TIM_TI1_SetConfig+0xd8>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d101      	bne.n	8006872 <TIM_TI1_SetConfig+0x62>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <TIM_TI1_SetConfig+0x64>
 8006872:	2300      	movs	r3, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d008      	beq.n	800688a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f023 0303 	bic.w	r3, r3, #3
 800687e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4313      	orrs	r3, r2
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e003      	b.n	8006892 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f043 0301 	orr.w	r3, r3, #1
 8006890:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	011b      	lsls	r3, r3, #4
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	f023 030a 	bic.w	r3, r3, #10
 80068ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	f003 030a 	and.w	r3, r3, #10
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
 80068d2:	bf00      	nop
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40000400 	.word	0x40000400
 80068dc:	40000800 	.word	0x40000800
 80068e0:	40000c00 	.word	0x40000c00
 80068e4:	40013400 	.word	0x40013400
 80068e8:	40014000 	.word	0x40014000

080068ec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	f023 0210 	bic.w	r2, r3, #16
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	699b      	ldr	r3, [r3, #24]
 8006910:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4313      	orrs	r3, r2
 8006922:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	031b      	lsls	r3, r3, #12
 8006930:	b29b      	uxth	r3, r3
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800693e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006966:	b480      	push	{r7}
 8006968:	b087      	sub	sp, #28
 800696a:	af00      	add	r7, sp, #0
 800696c:	60f8      	str	r0, [r7, #12]
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	607a      	str	r2, [r7, #4]
 8006972:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a1b      	ldr	r3, [r3, #32]
 8006978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	69db      	ldr	r3, [r3, #28]
 800698a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f023 0303 	bic.w	r3, r3, #3
 8006992:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4313      	orrs	r3, r2
 800699a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80069b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	021b      	lsls	r3, r3, #8
 80069bc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069de:	b480      	push	{r7}
 80069e0:	b087      	sub	sp, #28
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	60f8      	str	r0, [r7, #12]
 80069e6:	60b9      	str	r1, [r7, #8]
 80069e8:	607a      	str	r2, [r7, #4]
 80069ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	021b      	lsls	r3, r3, #8
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a30:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	693a      	ldr	r2, [r7, #16]
 8006a44:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f003 031f 	and.w	r3, r3, #31
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6a1a      	ldr	r2, [r3, #32]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1a      	ldr	r2, [r3, #32]
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 031f 	and.w	r3, r3, #31
 8006a8a:	6879      	ldr	r1, [r7, #4]
 8006a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a90:	431a      	orrs	r2, r3
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
}
 8006a96:	bf00      	nop
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d101      	bne.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ab8:	2302      	movs	r3, #2
 8006aba:	e068      	b.n	8006b8e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2202      	movs	r2, #2
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a2d      	ldr	r2, [pc, #180]	@ (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d108      	bne.n	8006b02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006af6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1e      	ldr	r2, [pc, #120]	@ (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d01d      	beq.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2e:	d018      	beq.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1b      	ldr	r2, [pc, #108]	@ (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d013      	beq.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d00e      	beq.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a18      	ldr	r2, [pc, #96]	@ (8006bac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d009      	beq.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a13      	ldr	r2, [pc, #76]	@ (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d004      	beq.n	8006b62 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a14      	ldr	r2, [pc, #80]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d10c      	bne.n	8006b7c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40000400 	.word	0x40000400
 8006ba8:	40000800 	.word	0x40000800
 8006bac:	40000c00 	.word	0x40000c00
 8006bb0:	40014000 	.word	0x40014000

08006bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e040      	b.n	8006c84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f7fa fe5e 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2224      	movs	r2, #36	@ 0x24
 8006c1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f022 0201 	bic.w	r2, r2, #1
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fb6a 	bl	8007310 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f8af 	bl	8006da0 <UART_SetConfig>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d101      	bne.n	8006c4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e01b      	b.n	8006c84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	689a      	ldr	r2, [r3, #8]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f042 0201 	orr.w	r2, r2, #1
 8006c7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fbe9 	bl	8007454 <UART_CheckIdleState>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	@ 0x28
 8006c90:	af02      	add	r7, sp, #8
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d177      	bne.n	8006d94 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <HAL_UART_Transmit+0x24>
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d101      	bne.n	8006cb4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e070      	b.n	8006d96 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2221      	movs	r2, #33	@ 0x21
 8006cc0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cc2:	f7fa ffe5 	bl	8001c90 <HAL_GetTick>
 8006cc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ce0:	d108      	bne.n	8006cf4 <HAL_UART_Transmit+0x68>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	e003      	b.n	8006cfc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cfc:	e02f      	b.n	8006d5e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	9300      	str	r3, [sp, #0]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	2200      	movs	r2, #0
 8006d06:	2180      	movs	r1, #128	@ 0x80
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f000 fc4b 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d004      	beq.n	8006d1e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e03b      	b.n	8006d96 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d10b      	bne.n	8006d3c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	881a      	ldrh	r2, [r3, #0]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d30:	b292      	uxth	r2, r2
 8006d32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	3302      	adds	r3, #2
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e007      	b.n	8006d4c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	781a      	ldrb	r2, [r3, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	3b01      	subs	r3, #1
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1c9      	bne.n	8006cfe <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2200      	movs	r2, #0
 8006d72:	2140      	movs	r1, #64	@ 0x40
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f000 fc15 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d004      	beq.n	8006d8a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2220      	movs	r2, #32
 8006d84:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e005      	b.n	8006d96 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2220      	movs	r2, #32
 8006d8e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006d90:	2300      	movs	r3, #0
 8006d92:	e000      	b.n	8006d96 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
  }
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3720      	adds	r7, #32
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
	...

08006da0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006da0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006da4:	b08a      	sub	sp, #40	@ 0x28
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	431a      	orrs	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	431a      	orrs	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	69db      	ldr	r3, [r3, #28]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	4ba4      	ldr	r3, [pc, #656]	@ (8007060 <UART_SetConfig+0x2c0>)
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	68fa      	ldr	r2, [r7, #12]
 8006dd4:	6812      	ldr	r2, [r2, #0]
 8006dd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006dd8:	430b      	orrs	r3, r1
 8006dda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a99      	ldr	r2, [pc, #612]	@ (8007064 <UART_SetConfig+0x2c4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a90      	ldr	r2, [pc, #576]	@ (8007068 <UART_SetConfig+0x2c8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d126      	bne.n	8006e78 <UART_SetConfig+0xd8>
 8006e2a:	4b90      	ldr	r3, [pc, #576]	@ (800706c <UART_SetConfig+0x2cc>)
 8006e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e30:	f003 0303 	and.w	r3, r3, #3
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d81b      	bhi.n	8006e70 <UART_SetConfig+0xd0>
 8006e38:	a201      	add	r2, pc, #4	@ (adr r2, 8006e40 <UART_SetConfig+0xa0>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e61 	.word	0x08006e61
 8006e48:	08006e59 	.word	0x08006e59
 8006e4c:	08006e69 	.word	0x08006e69
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e56:	e116      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e5e:	e112      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e66:	e10e      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e6e:	e10a      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006e76:	e106      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a7c      	ldr	r2, [pc, #496]	@ (8007070 <UART_SetConfig+0x2d0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d138      	bne.n	8006ef4 <UART_SetConfig+0x154>
 8006e82:	4b7a      	ldr	r3, [pc, #488]	@ (800706c <UART_SetConfig+0x2cc>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	2b0c      	cmp	r3, #12
 8006e8e:	d82d      	bhi.n	8006eec <UART_SetConfig+0x14c>
 8006e90:	a201      	add	r2, pc, #4	@ (adr r2, 8006e98 <UART_SetConfig+0xf8>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ecd 	.word	0x08006ecd
 8006e9c:	08006eed 	.word	0x08006eed
 8006ea0:	08006eed 	.word	0x08006eed
 8006ea4:	08006eed 	.word	0x08006eed
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006eed 	.word	0x08006eed
 8006eb0:	08006eed 	.word	0x08006eed
 8006eb4:	08006eed 	.word	0x08006eed
 8006eb8:	08006ed5 	.word	0x08006ed5
 8006ebc:	08006eed 	.word	0x08006eed
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	08006eed 	.word	0x08006eed
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	2300      	movs	r3, #0
 8006ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ed2:	e0d8      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eda:	e0d4      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006edc:	2304      	movs	r3, #4
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ee2:	e0d0      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006ee4:	2308      	movs	r3, #8
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eea:	e0cc      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006eec:	2310      	movs	r3, #16
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ef2:	e0c8      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a5e      	ldr	r2, [pc, #376]	@ (8007074 <UART_SetConfig+0x2d4>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d125      	bne.n	8006f4a <UART_SetConfig+0x1aa>
 8006efe:	4b5b      	ldr	r3, [pc, #364]	@ (800706c <UART_SetConfig+0x2cc>)
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f04:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f08:	2b30      	cmp	r3, #48	@ 0x30
 8006f0a:	d016      	beq.n	8006f3a <UART_SetConfig+0x19a>
 8006f0c:	2b30      	cmp	r3, #48	@ 0x30
 8006f0e:	d818      	bhi.n	8006f42 <UART_SetConfig+0x1a2>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d00a      	beq.n	8006f2a <UART_SetConfig+0x18a>
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	d814      	bhi.n	8006f42 <UART_SetConfig+0x1a2>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <UART_SetConfig+0x182>
 8006f1c:	2b10      	cmp	r3, #16
 8006f1e:	d008      	beq.n	8006f32 <UART_SetConfig+0x192>
 8006f20:	e00f      	b.n	8006f42 <UART_SetConfig+0x1a2>
 8006f22:	2300      	movs	r3, #0
 8006f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f28:	e0ad      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f30:	e0a9      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f32:	2304      	movs	r3, #4
 8006f34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f38:	e0a5      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f3a:	2308      	movs	r3, #8
 8006f3c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f40:	e0a1      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f42:	2310      	movs	r3, #16
 8006f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f48:	e09d      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a4a      	ldr	r2, [pc, #296]	@ (8007078 <UART_SetConfig+0x2d8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d125      	bne.n	8006fa0 <UART_SetConfig+0x200>
 8006f54:	4b45      	ldr	r3, [pc, #276]	@ (800706c <UART_SetConfig+0x2cc>)
 8006f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f5a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f60:	d016      	beq.n	8006f90 <UART_SetConfig+0x1f0>
 8006f62:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f64:	d818      	bhi.n	8006f98 <UART_SetConfig+0x1f8>
 8006f66:	2b80      	cmp	r3, #128	@ 0x80
 8006f68:	d00a      	beq.n	8006f80 <UART_SetConfig+0x1e0>
 8006f6a:	2b80      	cmp	r3, #128	@ 0x80
 8006f6c:	d814      	bhi.n	8006f98 <UART_SetConfig+0x1f8>
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <UART_SetConfig+0x1d8>
 8006f72:	2b40      	cmp	r3, #64	@ 0x40
 8006f74:	d008      	beq.n	8006f88 <UART_SetConfig+0x1e8>
 8006f76:	e00f      	b.n	8006f98 <UART_SetConfig+0x1f8>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7e:	e082      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f80:	2302      	movs	r3, #2
 8006f82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f86:	e07e      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8e:	e07a      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f90:	2308      	movs	r3, #8
 8006f92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f96:	e076      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006f98:	2310      	movs	r3, #16
 8006f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f9e:	e072      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a35      	ldr	r2, [pc, #212]	@ (800707c <UART_SetConfig+0x2dc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d12a      	bne.n	8007000 <UART_SetConfig+0x260>
 8006faa:	4b30      	ldr	r3, [pc, #192]	@ (800706c <UART_SetConfig+0x2cc>)
 8006fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb8:	d01a      	beq.n	8006ff0 <UART_SetConfig+0x250>
 8006fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fbe:	d81b      	bhi.n	8006ff8 <UART_SetConfig+0x258>
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc4:	d00c      	beq.n	8006fe0 <UART_SetConfig+0x240>
 8006fc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fca:	d815      	bhi.n	8006ff8 <UART_SetConfig+0x258>
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <UART_SetConfig+0x238>
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fd4:	d008      	beq.n	8006fe8 <UART_SetConfig+0x248>
 8006fd6:	e00f      	b.n	8006ff8 <UART_SetConfig+0x258>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fde:	e052      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe6:	e04e      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006fe8:	2304      	movs	r3, #4
 8006fea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fee:	e04a      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006ff0:	2308      	movs	r3, #8
 8006ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ff6:	e046      	b.n	8007086 <UART_SetConfig+0x2e6>
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ffe:	e042      	b.n	8007086 <UART_SetConfig+0x2e6>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a17      	ldr	r2, [pc, #92]	@ (8007064 <UART_SetConfig+0x2c4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d13a      	bne.n	8007080 <UART_SetConfig+0x2e0>
 800700a:	4b18      	ldr	r3, [pc, #96]	@ (800706c <UART_SetConfig+0x2cc>)
 800700c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007010:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007014:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007018:	d01a      	beq.n	8007050 <UART_SetConfig+0x2b0>
 800701a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800701e:	d81b      	bhi.n	8007058 <UART_SetConfig+0x2b8>
 8007020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007024:	d00c      	beq.n	8007040 <UART_SetConfig+0x2a0>
 8007026:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800702a:	d815      	bhi.n	8007058 <UART_SetConfig+0x2b8>
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <UART_SetConfig+0x298>
 8007030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007034:	d008      	beq.n	8007048 <UART_SetConfig+0x2a8>
 8007036:	e00f      	b.n	8007058 <UART_SetConfig+0x2b8>
 8007038:	2300      	movs	r3, #0
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703e:	e022      	b.n	8007086 <UART_SetConfig+0x2e6>
 8007040:	2302      	movs	r3, #2
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007046:	e01e      	b.n	8007086 <UART_SetConfig+0x2e6>
 8007048:	2304      	movs	r3, #4
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704e:	e01a      	b.n	8007086 <UART_SetConfig+0x2e6>
 8007050:	2308      	movs	r3, #8
 8007052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007056:	e016      	b.n	8007086 <UART_SetConfig+0x2e6>
 8007058:	2310      	movs	r3, #16
 800705a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800705e:	e012      	b.n	8007086 <UART_SetConfig+0x2e6>
 8007060:	efff69f3 	.word	0xefff69f3
 8007064:	40008000 	.word	0x40008000
 8007068:	40013800 	.word	0x40013800
 800706c:	40021000 	.word	0x40021000
 8007070:	40004400 	.word	0x40004400
 8007074:	40004800 	.word	0x40004800
 8007078:	40004c00 	.word	0x40004c00
 800707c:	40005000 	.word	0x40005000
 8007080:	2310      	movs	r3, #16
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a9f      	ldr	r2, [pc, #636]	@ (8007308 <UART_SetConfig+0x568>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d17a      	bne.n	8007186 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007090:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007094:	2b08      	cmp	r3, #8
 8007096:	d824      	bhi.n	80070e2 <UART_SetConfig+0x342>
 8007098:	a201      	add	r2, pc, #4	@ (adr r2, 80070a0 <UART_SetConfig+0x300>)
 800709a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709e:	bf00      	nop
 80070a0:	080070c5 	.word	0x080070c5
 80070a4:	080070e3 	.word	0x080070e3
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070e3 	.word	0x080070e3
 80070b0:	080070d3 	.word	0x080070d3
 80070b4:	080070e3 	.word	0x080070e3
 80070b8:	080070e3 	.word	0x080070e3
 80070bc:	080070e3 	.word	0x080070e3
 80070c0:	080070db 	.word	0x080070db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c4:	f7fd fa5c 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80070c8:	61f8      	str	r0, [r7, #28]
        break;
 80070ca:	e010      	b.n	80070ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070cc:	4b8f      	ldr	r3, [pc, #572]	@ (800730c <UART_SetConfig+0x56c>)
 80070ce:	61fb      	str	r3, [r7, #28]
        break;
 80070d0:	e00d      	b.n	80070ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d2:	f7fd f9bd 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80070d6:	61f8      	str	r0, [r7, #28]
        break;
 80070d8:	e009      	b.n	80070ee <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80070de:	61fb      	str	r3, [r7, #28]
        break;
 80070e0:	e005      	b.n	80070ee <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80070ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80fb 	beq.w	80072ec <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	69fa      	ldr	r2, [r7, #28]
 8007102:	429a      	cmp	r2, r3
 8007104:	d305      	bcc.n	8007112 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	429a      	cmp	r2, r3
 8007110:	d903      	bls.n	800711a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007118:	e0e8      	b.n	80072ec <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	2200      	movs	r2, #0
 800711e:	461c      	mov	r4, r3
 8007120:	4615      	mov	r5, r2
 8007122:	f04f 0200 	mov.w	r2, #0
 8007126:	f04f 0300 	mov.w	r3, #0
 800712a:	022b      	lsls	r3, r5, #8
 800712c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007130:	0222      	lsls	r2, r4, #8
 8007132:	68f9      	ldr	r1, [r7, #12]
 8007134:	6849      	ldr	r1, [r1, #4]
 8007136:	0849      	lsrs	r1, r1, #1
 8007138:	2000      	movs	r0, #0
 800713a:	4688      	mov	r8, r1
 800713c:	4681      	mov	r9, r0
 800713e:	eb12 0a08 	adds.w	sl, r2, r8
 8007142:	eb43 0b09 	adc.w	fp, r3, r9
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	603b      	str	r3, [r7, #0]
 800714e:	607a      	str	r2, [r7, #4]
 8007150:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007154:	4650      	mov	r0, sl
 8007156:	4659      	mov	r1, fp
 8007158:	f7f9 f88a 	bl	8000270 <__aeabi_uldivmod>
 800715c:	4602      	mov	r2, r0
 800715e:	460b      	mov	r3, r1
 8007160:	4613      	mov	r3, r2
 8007162:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007164:	69bb      	ldr	r3, [r7, #24]
 8007166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800716a:	d308      	bcc.n	800717e <UART_SetConfig+0x3de>
 800716c:	69bb      	ldr	r3, [r7, #24]
 800716e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007172:	d204      	bcs.n	800717e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	60da      	str	r2, [r3, #12]
 800717c:	e0b6      	b.n	80072ec <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007184:	e0b2      	b.n	80072ec <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800718e:	d15e      	bne.n	800724e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007190:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007194:	2b08      	cmp	r3, #8
 8007196:	d828      	bhi.n	80071ea <UART_SetConfig+0x44a>
 8007198:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <UART_SetConfig+0x400>)
 800719a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719e:	bf00      	nop
 80071a0:	080071c5 	.word	0x080071c5
 80071a4:	080071cd 	.word	0x080071cd
 80071a8:	080071d5 	.word	0x080071d5
 80071ac:	080071eb 	.word	0x080071eb
 80071b0:	080071db 	.word	0x080071db
 80071b4:	080071eb 	.word	0x080071eb
 80071b8:	080071eb 	.word	0x080071eb
 80071bc:	080071eb 	.word	0x080071eb
 80071c0:	080071e3 	.word	0x080071e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071c4:	f7fd f9dc 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80071c8:	61f8      	str	r0, [r7, #28]
        break;
 80071ca:	e014      	b.n	80071f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071cc:	f7fd f9ee 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 80071d0:	61f8      	str	r0, [r7, #28]
        break;
 80071d2:	e010      	b.n	80071f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071d4:	4b4d      	ldr	r3, [pc, #308]	@ (800730c <UART_SetConfig+0x56c>)
 80071d6:	61fb      	str	r3, [r7, #28]
        break;
 80071d8:	e00d      	b.n	80071f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071da:	f7fd f939 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 80071de:	61f8      	str	r0, [r7, #28]
        break;
 80071e0:	e009      	b.n	80071f6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071e6:	61fb      	str	r3, [r7, #28]
        break;
 80071e8:	e005      	b.n	80071f6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80071f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071f6:	69fb      	ldr	r3, [r7, #28]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d077      	beq.n	80072ec <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	005a      	lsls	r2, r3, #1
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	085b      	lsrs	r3, r3, #1
 8007206:	441a      	add	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007210:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b0f      	cmp	r3, #15
 8007216:	d916      	bls.n	8007246 <UART_SetConfig+0x4a6>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800721e:	d212      	bcs.n	8007246 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	b29b      	uxth	r3, r3
 8007224:	f023 030f 	bic.w	r3, r3, #15
 8007228:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	085b      	lsrs	r3, r3, #1
 800722e:	b29b      	uxth	r3, r3
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	b29a      	uxth	r2, r3
 8007236:	8afb      	ldrh	r3, [r7, #22]
 8007238:	4313      	orrs	r3, r2
 800723a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	8afa      	ldrh	r2, [r7, #22]
 8007242:	60da      	str	r2, [r3, #12]
 8007244:	e052      	b.n	80072ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800724c:	e04e      	b.n	80072ec <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800724e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007252:	2b08      	cmp	r3, #8
 8007254:	d827      	bhi.n	80072a6 <UART_SetConfig+0x506>
 8007256:	a201      	add	r2, pc, #4	@ (adr r2, 800725c <UART_SetConfig+0x4bc>)
 8007258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725c:	08007281 	.word	0x08007281
 8007260:	08007289 	.word	0x08007289
 8007264:	08007291 	.word	0x08007291
 8007268:	080072a7 	.word	0x080072a7
 800726c:	08007297 	.word	0x08007297
 8007270:	080072a7 	.word	0x080072a7
 8007274:	080072a7 	.word	0x080072a7
 8007278:	080072a7 	.word	0x080072a7
 800727c:	0800729f 	.word	0x0800729f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007280:	f7fd f97e 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8007284:	61f8      	str	r0, [r7, #28]
        break;
 8007286:	e014      	b.n	80072b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007288:	f7fd f990 	bl	80045ac <HAL_RCC_GetPCLK2Freq>
 800728c:	61f8      	str	r0, [r7, #28]
        break;
 800728e:	e010      	b.n	80072b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007290:	4b1e      	ldr	r3, [pc, #120]	@ (800730c <UART_SetConfig+0x56c>)
 8007292:	61fb      	str	r3, [r7, #28]
        break;
 8007294:	e00d      	b.n	80072b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007296:	f7fd f8db 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800729a:	61f8      	str	r0, [r7, #28]
        break;
 800729c:	e009      	b.n	80072b2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800729e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a2:	61fb      	str	r3, [r7, #28]
        break;
 80072a4:	e005      	b.n	80072b2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072b0:	bf00      	nop
    }

    if (pclk != 0U)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d019      	beq.n	80072ec <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	085a      	lsrs	r2, r3, #1
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	441a      	add	r2, r3
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	d909      	bls.n	80072e6 <UART_SetConfig+0x546>
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072d8:	d205      	bcs.n	80072e6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60da      	str	r2, [r3, #12]
 80072e4:	e002      	b.n	80072ec <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80072e6:	2301      	movs	r3, #1
 80072e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80072f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3728      	adds	r7, #40	@ 0x28
 8007300:	46bd      	mov	sp, r7
 8007302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007306:	bf00      	nop
 8007308:	40008000 	.word	0x40008000
 800730c:	00f42400 	.word	0x00f42400

08007310 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731c:	f003 0308 	and.w	r3, r3, #8
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00a      	beq.n	800733a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	430a      	orrs	r2, r1
 800735a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007382:	f003 0304 	and.w	r3, r3, #4
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d01a      	beq.n	8007426 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800740a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800740e:	d10a      	bne.n	8007426 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800742a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742e:	2b00      	cmp	r3, #0
 8007430:	d00a      	beq.n	8007448 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	430a      	orrs	r2, r1
 8007446:	605a      	str	r2, [r3, #4]
  }
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b098      	sub	sp, #96	@ 0x60
 8007458:	af02      	add	r7, sp, #8
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007464:	f7fa fc14 	bl	8001c90 <HAL_GetTick>
 8007468:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b08      	cmp	r3, #8
 8007476:	d12e      	bne.n	80074d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007478:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800747c:	9300      	str	r3, [sp, #0]
 800747e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007480:	2200      	movs	r2, #0
 8007482:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f88c 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d021      	beq.n	80074d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80074b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e6      	bne.n	8007492 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2220      	movs	r2, #32
 80074c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e062      	b.n	800759c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 0304 	and.w	r3, r3, #4
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d149      	bne.n	8007578 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ec:	2200      	movs	r2, #0
 80074ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f856 	bl	80075a4 <UART_WaitOnFlagUntilTimeout>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d03c      	beq.n	8007578 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007506:	e853 3f00 	ldrex	r3, [r3]
 800750a:	623b      	str	r3, [r7, #32]
   return(result);
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007512:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800751c:	633b      	str	r3, [r7, #48]	@ 0x30
 800751e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007524:	e841 2300 	strex	r3, r2, [r1]
 8007528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1e6      	bne.n	80074fe <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	3308      	adds	r3, #8
 8007536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	e853 3f00 	ldrex	r3, [r3]
 800753e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f023 0301 	bic.w	r3, r3, #1
 8007546:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	3308      	adds	r3, #8
 800754e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007550:	61fa      	str	r2, [r7, #28]
 8007552:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007554:	69b9      	ldr	r1, [r7, #24]
 8007556:	69fa      	ldr	r2, [r7, #28]
 8007558:	e841 2300 	strex	r3, r2, [r1]
 800755c:	617b      	str	r3, [r7, #20]
   return(result);
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d1e5      	bne.n	8007530 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2220      	movs	r2, #32
 8007568:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e011      	b.n	800759c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3758      	adds	r7, #88	@ 0x58
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b4:	e049      	b.n	800764a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075bc:	d045      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075be:	f7fa fb67 	bl	8001c90 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d302      	bcc.n	80075d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e048      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d031      	beq.n	800764a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d110      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2208      	movs	r2, #8
 80075fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 f838 	bl	8007672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2208      	movs	r2, #8
 8007606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e029      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007624:	d111      	bne.n	800764a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800762e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f000 f81e 	bl	8007672 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2220      	movs	r2, #32
 800763a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007646:	2303      	movs	r3, #3
 8007648:	e00f      	b.n	800766a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4013      	ands	r3, r2
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	429a      	cmp	r2, r3
 8007658:	bf0c      	ite	eq
 800765a:	2301      	moveq	r3, #1
 800765c:	2300      	movne	r3, #0
 800765e:	b2db      	uxtb	r3, r3
 8007660:	461a      	mov	r2, r3
 8007662:	79fb      	ldrb	r3, [r7, #7]
 8007664:	429a      	cmp	r2, r3
 8007666:	d0a6      	beq.n	80075b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007672:	b480      	push	{r7}
 8007674:	b095      	sub	sp, #84	@ 0x54
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800768e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007698:	643b      	str	r3, [r7, #64]	@ 0x40
 800769a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800769e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3308      	adds	r3, #8
 80076b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3308      	adds	r3, #8
 80076ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d118      	bne.n	800771a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f023 0310 	bic.w	r3, r3, #16
 80076fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	461a      	mov	r2, r3
 8007704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770a:	6979      	ldr	r1, [r7, #20]
 800770c:	69ba      	ldr	r2, [r7, #24]
 800770e:	e841 2300 	strex	r3, r2, [r1]
 8007712:	613b      	str	r3, [r7, #16]
   return(result);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e6      	bne.n	80076e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2220      	movs	r2, #32
 800771e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800772e:	bf00      	nop
 8007730:	3754      	adds	r7, #84	@ 0x54
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
	...

0800773c <std>:
 800773c:	2300      	movs	r3, #0
 800773e:	b510      	push	{r4, lr}
 8007740:	4604      	mov	r4, r0
 8007742:	e9c0 3300 	strd	r3, r3, [r0]
 8007746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800774a:	6083      	str	r3, [r0, #8]
 800774c:	8181      	strh	r1, [r0, #12]
 800774e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007750:	81c2      	strh	r2, [r0, #14]
 8007752:	6183      	str	r3, [r0, #24]
 8007754:	4619      	mov	r1, r3
 8007756:	2208      	movs	r2, #8
 8007758:	305c      	adds	r0, #92	@ 0x5c
 800775a:	f000 f926 	bl	80079aa <memset>
 800775e:	4b0d      	ldr	r3, [pc, #52]	@ (8007794 <std+0x58>)
 8007760:	6263      	str	r3, [r4, #36]	@ 0x24
 8007762:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <std+0x5c>)
 8007764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007766:	4b0d      	ldr	r3, [pc, #52]	@ (800779c <std+0x60>)
 8007768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800776a:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <std+0x64>)
 800776c:	6323      	str	r3, [r4, #48]	@ 0x30
 800776e:	4b0d      	ldr	r3, [pc, #52]	@ (80077a4 <std+0x68>)
 8007770:	6224      	str	r4, [r4, #32]
 8007772:	429c      	cmp	r4, r3
 8007774:	d006      	beq.n	8007784 <std+0x48>
 8007776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800777a:	4294      	cmp	r4, r2
 800777c:	d002      	beq.n	8007784 <std+0x48>
 800777e:	33d0      	adds	r3, #208	@ 0xd0
 8007780:	429c      	cmp	r4, r3
 8007782:	d105      	bne.n	8007790 <std+0x54>
 8007784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800778c:	f000 b986 	b.w	8007a9c <__retarget_lock_init_recursive>
 8007790:	bd10      	pop	{r4, pc}
 8007792:	bf00      	nop
 8007794:	08007925 	.word	0x08007925
 8007798:	08007947 	.word	0x08007947
 800779c:	0800797f 	.word	0x0800797f
 80077a0:	080079a3 	.word	0x080079a3
 80077a4:	200005c0 	.word	0x200005c0

080077a8 <stdio_exit_handler>:
 80077a8:	4a02      	ldr	r2, [pc, #8]	@ (80077b4 <stdio_exit_handler+0xc>)
 80077aa:	4903      	ldr	r1, [pc, #12]	@ (80077b8 <stdio_exit_handler+0x10>)
 80077ac:	4803      	ldr	r0, [pc, #12]	@ (80077bc <stdio_exit_handler+0x14>)
 80077ae:	f000 b869 	b.w	8007884 <_fwalk_sglue>
 80077b2:	bf00      	nop
 80077b4:	200000ac 	.word	0x200000ac
 80077b8:	080085ed 	.word	0x080085ed
 80077bc:	200000bc 	.word	0x200000bc

080077c0 <cleanup_stdio>:
 80077c0:	6841      	ldr	r1, [r0, #4]
 80077c2:	4b0c      	ldr	r3, [pc, #48]	@ (80077f4 <cleanup_stdio+0x34>)
 80077c4:	4299      	cmp	r1, r3
 80077c6:	b510      	push	{r4, lr}
 80077c8:	4604      	mov	r4, r0
 80077ca:	d001      	beq.n	80077d0 <cleanup_stdio+0x10>
 80077cc:	f000 ff0e 	bl	80085ec <_fflush_r>
 80077d0:	68a1      	ldr	r1, [r4, #8]
 80077d2:	4b09      	ldr	r3, [pc, #36]	@ (80077f8 <cleanup_stdio+0x38>)
 80077d4:	4299      	cmp	r1, r3
 80077d6:	d002      	beq.n	80077de <cleanup_stdio+0x1e>
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 ff07 	bl	80085ec <_fflush_r>
 80077de:	68e1      	ldr	r1, [r4, #12]
 80077e0:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <cleanup_stdio+0x3c>)
 80077e2:	4299      	cmp	r1, r3
 80077e4:	d004      	beq.n	80077f0 <cleanup_stdio+0x30>
 80077e6:	4620      	mov	r0, r4
 80077e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ec:	f000 befe 	b.w	80085ec <_fflush_r>
 80077f0:	bd10      	pop	{r4, pc}
 80077f2:	bf00      	nop
 80077f4:	200005c0 	.word	0x200005c0
 80077f8:	20000628 	.word	0x20000628
 80077fc:	20000690 	.word	0x20000690

08007800 <global_stdio_init.part.0>:
 8007800:	b510      	push	{r4, lr}
 8007802:	4b0b      	ldr	r3, [pc, #44]	@ (8007830 <global_stdio_init.part.0+0x30>)
 8007804:	4c0b      	ldr	r4, [pc, #44]	@ (8007834 <global_stdio_init.part.0+0x34>)
 8007806:	4a0c      	ldr	r2, [pc, #48]	@ (8007838 <global_stdio_init.part.0+0x38>)
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	4620      	mov	r0, r4
 800780c:	2200      	movs	r2, #0
 800780e:	2104      	movs	r1, #4
 8007810:	f7ff ff94 	bl	800773c <std>
 8007814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007818:	2201      	movs	r2, #1
 800781a:	2109      	movs	r1, #9
 800781c:	f7ff ff8e 	bl	800773c <std>
 8007820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007824:	2202      	movs	r2, #2
 8007826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800782a:	2112      	movs	r1, #18
 800782c:	f7ff bf86 	b.w	800773c <std>
 8007830:	200006f8 	.word	0x200006f8
 8007834:	200005c0 	.word	0x200005c0
 8007838:	080077a9 	.word	0x080077a9

0800783c <__sfp_lock_acquire>:
 800783c:	4801      	ldr	r0, [pc, #4]	@ (8007844 <__sfp_lock_acquire+0x8>)
 800783e:	f000 b92e 	b.w	8007a9e <__retarget_lock_acquire_recursive>
 8007842:	bf00      	nop
 8007844:	20000701 	.word	0x20000701

08007848 <__sfp_lock_release>:
 8007848:	4801      	ldr	r0, [pc, #4]	@ (8007850 <__sfp_lock_release+0x8>)
 800784a:	f000 b929 	b.w	8007aa0 <__retarget_lock_release_recursive>
 800784e:	bf00      	nop
 8007850:	20000701 	.word	0x20000701

08007854 <__sinit>:
 8007854:	b510      	push	{r4, lr}
 8007856:	4604      	mov	r4, r0
 8007858:	f7ff fff0 	bl	800783c <__sfp_lock_acquire>
 800785c:	6a23      	ldr	r3, [r4, #32]
 800785e:	b11b      	cbz	r3, 8007868 <__sinit+0x14>
 8007860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007864:	f7ff bff0 	b.w	8007848 <__sfp_lock_release>
 8007868:	4b04      	ldr	r3, [pc, #16]	@ (800787c <__sinit+0x28>)
 800786a:	6223      	str	r3, [r4, #32]
 800786c:	4b04      	ldr	r3, [pc, #16]	@ (8007880 <__sinit+0x2c>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f5      	bne.n	8007860 <__sinit+0xc>
 8007874:	f7ff ffc4 	bl	8007800 <global_stdio_init.part.0>
 8007878:	e7f2      	b.n	8007860 <__sinit+0xc>
 800787a:	bf00      	nop
 800787c:	080077c1 	.word	0x080077c1
 8007880:	200006f8 	.word	0x200006f8

08007884 <_fwalk_sglue>:
 8007884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007888:	4607      	mov	r7, r0
 800788a:	4688      	mov	r8, r1
 800788c:	4614      	mov	r4, r2
 800788e:	2600      	movs	r6, #0
 8007890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007894:	f1b9 0901 	subs.w	r9, r9, #1
 8007898:	d505      	bpl.n	80078a6 <_fwalk_sglue+0x22>
 800789a:	6824      	ldr	r4, [r4, #0]
 800789c:	2c00      	cmp	r4, #0
 800789e:	d1f7      	bne.n	8007890 <_fwalk_sglue+0xc>
 80078a0:	4630      	mov	r0, r6
 80078a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d907      	bls.n	80078bc <_fwalk_sglue+0x38>
 80078ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078b0:	3301      	adds	r3, #1
 80078b2:	d003      	beq.n	80078bc <_fwalk_sglue+0x38>
 80078b4:	4629      	mov	r1, r5
 80078b6:	4638      	mov	r0, r7
 80078b8:	47c0      	blx	r8
 80078ba:	4306      	orrs	r6, r0
 80078bc:	3568      	adds	r5, #104	@ 0x68
 80078be:	e7e9      	b.n	8007894 <_fwalk_sglue+0x10>

080078c0 <iprintf>:
 80078c0:	b40f      	push	{r0, r1, r2, r3}
 80078c2:	b507      	push	{r0, r1, r2, lr}
 80078c4:	4906      	ldr	r1, [pc, #24]	@ (80078e0 <iprintf+0x20>)
 80078c6:	ab04      	add	r3, sp, #16
 80078c8:	6808      	ldr	r0, [r1, #0]
 80078ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80078ce:	6881      	ldr	r1, [r0, #8]
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f000 fb61 	bl	8007f98 <_vfiprintf_r>
 80078d6:	b003      	add	sp, #12
 80078d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078dc:	b004      	add	sp, #16
 80078de:	4770      	bx	lr
 80078e0:	200000b8 	.word	0x200000b8

080078e4 <siprintf>:
 80078e4:	b40e      	push	{r1, r2, r3}
 80078e6:	b500      	push	{lr}
 80078e8:	b09c      	sub	sp, #112	@ 0x70
 80078ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80078ec:	9002      	str	r0, [sp, #8]
 80078ee:	9006      	str	r0, [sp, #24]
 80078f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80078f4:	4809      	ldr	r0, [pc, #36]	@ (800791c <siprintf+0x38>)
 80078f6:	9107      	str	r1, [sp, #28]
 80078f8:	9104      	str	r1, [sp, #16]
 80078fa:	4909      	ldr	r1, [pc, #36]	@ (8007920 <siprintf+0x3c>)
 80078fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007900:	9105      	str	r1, [sp, #20]
 8007902:	6800      	ldr	r0, [r0, #0]
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	a902      	add	r1, sp, #8
 8007908:	f000 fa20 	bl	8007d4c <_svfiprintf_r>
 800790c:	9b02      	ldr	r3, [sp, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	701a      	strb	r2, [r3, #0]
 8007912:	b01c      	add	sp, #112	@ 0x70
 8007914:	f85d eb04 	ldr.w	lr, [sp], #4
 8007918:	b003      	add	sp, #12
 800791a:	4770      	bx	lr
 800791c:	200000b8 	.word	0x200000b8
 8007920:	ffff0208 	.word	0xffff0208

08007924 <__sread>:
 8007924:	b510      	push	{r4, lr}
 8007926:	460c      	mov	r4, r1
 8007928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792c:	f000 f868 	bl	8007a00 <_read_r>
 8007930:	2800      	cmp	r0, #0
 8007932:	bfab      	itete	ge
 8007934:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007936:	89a3      	ldrhlt	r3, [r4, #12]
 8007938:	181b      	addge	r3, r3, r0
 800793a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800793e:	bfac      	ite	ge
 8007940:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007942:	81a3      	strhlt	r3, [r4, #12]
 8007944:	bd10      	pop	{r4, pc}

08007946 <__swrite>:
 8007946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	461f      	mov	r7, r3
 800794c:	898b      	ldrh	r3, [r1, #12]
 800794e:	05db      	lsls	r3, r3, #23
 8007950:	4605      	mov	r5, r0
 8007952:	460c      	mov	r4, r1
 8007954:	4616      	mov	r6, r2
 8007956:	d505      	bpl.n	8007964 <__swrite+0x1e>
 8007958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800795c:	2302      	movs	r3, #2
 800795e:	2200      	movs	r2, #0
 8007960:	f000 f83c 	bl	80079dc <_lseek_r>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800796a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800796e:	81a3      	strh	r3, [r4, #12]
 8007970:	4632      	mov	r2, r6
 8007972:	463b      	mov	r3, r7
 8007974:	4628      	mov	r0, r5
 8007976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	f000 b853 	b.w	8007a24 <_write_r>

0800797e <__sseek>:
 800797e:	b510      	push	{r4, lr}
 8007980:	460c      	mov	r4, r1
 8007982:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007986:	f000 f829 	bl	80079dc <_lseek_r>
 800798a:	1c43      	adds	r3, r0, #1
 800798c:	89a3      	ldrh	r3, [r4, #12]
 800798e:	bf15      	itete	ne
 8007990:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007992:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007996:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800799a:	81a3      	strheq	r3, [r4, #12]
 800799c:	bf18      	it	ne
 800799e:	81a3      	strhne	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__sclose>:
 80079a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a6:	f000 b809 	b.w	80079bc <_close_r>

080079aa <memset>:
 80079aa:	4402      	add	r2, r0
 80079ac:	4603      	mov	r3, r0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d100      	bne.n	80079b4 <memset+0xa>
 80079b2:	4770      	bx	lr
 80079b4:	f803 1b01 	strb.w	r1, [r3], #1
 80079b8:	e7f9      	b.n	80079ae <memset+0x4>
	...

080079bc <_close_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4d06      	ldr	r5, [pc, #24]	@ (80079d8 <_close_r+0x1c>)
 80079c0:	2300      	movs	r3, #0
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7fa f853 	bl	8001a72 <_close>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_close_r+0x1a>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_close_r+0x1a>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	200006fc 	.word	0x200006fc

080079dc <_lseek_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	4d07      	ldr	r5, [pc, #28]	@ (80079fc <_lseek_r+0x20>)
 80079e0:	4604      	mov	r4, r0
 80079e2:	4608      	mov	r0, r1
 80079e4:	4611      	mov	r1, r2
 80079e6:	2200      	movs	r2, #0
 80079e8:	602a      	str	r2, [r5, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f7fa f868 	bl	8001ac0 <_lseek>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_lseek_r+0x1e>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_lseek_r+0x1e>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	200006fc 	.word	0x200006fc

08007a00 <_read_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	@ (8007a20 <_read_r+0x20>)
 8007a04:	4604      	mov	r4, r0
 8007a06:	4608      	mov	r0, r1
 8007a08:	4611      	mov	r1, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7f9 fff6 	bl	8001a00 <_read>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_read_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_read_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	200006fc 	.word	0x200006fc

08007a24 <_write_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d07      	ldr	r5, [pc, #28]	@ (8007a44 <_write_r+0x20>)
 8007a28:	4604      	mov	r4, r0
 8007a2a:	4608      	mov	r0, r1
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	2200      	movs	r2, #0
 8007a30:	602a      	str	r2, [r5, #0]
 8007a32:	461a      	mov	r2, r3
 8007a34:	f7fa f801 	bl	8001a3a <_write>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d102      	bne.n	8007a42 <_write_r+0x1e>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	b103      	cbz	r3, 8007a42 <_write_r+0x1e>
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	bd38      	pop	{r3, r4, r5, pc}
 8007a44:	200006fc 	.word	0x200006fc

08007a48 <__errno>:
 8007a48:	4b01      	ldr	r3, [pc, #4]	@ (8007a50 <__errno+0x8>)
 8007a4a:	6818      	ldr	r0, [r3, #0]
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop
 8007a50:	200000b8 	.word	0x200000b8

08007a54 <__libc_init_array>:
 8007a54:	b570      	push	{r4, r5, r6, lr}
 8007a56:	4d0d      	ldr	r5, [pc, #52]	@ (8007a8c <__libc_init_array+0x38>)
 8007a58:	4c0d      	ldr	r4, [pc, #52]	@ (8007a90 <__libc_init_array+0x3c>)
 8007a5a:	1b64      	subs	r4, r4, r5
 8007a5c:	10a4      	asrs	r4, r4, #2
 8007a5e:	2600      	movs	r6, #0
 8007a60:	42a6      	cmp	r6, r4
 8007a62:	d109      	bne.n	8007a78 <__libc_init_array+0x24>
 8007a64:	4d0b      	ldr	r5, [pc, #44]	@ (8007a94 <__libc_init_array+0x40>)
 8007a66:	4c0c      	ldr	r4, [pc, #48]	@ (8007a98 <__libc_init_array+0x44>)
 8007a68:	f000 ff6e 	bl	8008948 <_init>
 8007a6c:	1b64      	subs	r4, r4, r5
 8007a6e:	10a4      	asrs	r4, r4, #2
 8007a70:	2600      	movs	r6, #0
 8007a72:	42a6      	cmp	r6, r4
 8007a74:	d105      	bne.n	8007a82 <__libc_init_array+0x2e>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}
 8007a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a7c:	4798      	blx	r3
 8007a7e:	3601      	adds	r6, #1
 8007a80:	e7ee      	b.n	8007a60 <__libc_init_array+0xc>
 8007a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a86:	4798      	blx	r3
 8007a88:	3601      	adds	r6, #1
 8007a8a:	e7f2      	b.n	8007a72 <__libc_init_array+0x1e>
 8007a8c:	08008b4c 	.word	0x08008b4c
 8007a90:	08008b4c 	.word	0x08008b4c
 8007a94:	08008b4c 	.word	0x08008b4c
 8007a98:	08008b50 	.word	0x08008b50

08007a9c <__retarget_lock_init_recursive>:
 8007a9c:	4770      	bx	lr

08007a9e <__retarget_lock_acquire_recursive>:
 8007a9e:	4770      	bx	lr

08007aa0 <__retarget_lock_release_recursive>:
 8007aa0:	4770      	bx	lr
	...

08007aa4 <_free_r>:
 8007aa4:	b538      	push	{r3, r4, r5, lr}
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	2900      	cmp	r1, #0
 8007aaa:	d041      	beq.n	8007b30 <_free_r+0x8c>
 8007aac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ab0:	1f0c      	subs	r4, r1, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	bfb8      	it	lt
 8007ab6:	18e4      	addlt	r4, r4, r3
 8007ab8:	f000 f8e0 	bl	8007c7c <__malloc_lock>
 8007abc:	4a1d      	ldr	r2, [pc, #116]	@ (8007b34 <_free_r+0x90>)
 8007abe:	6813      	ldr	r3, [r2, #0]
 8007ac0:	b933      	cbnz	r3, 8007ad0 <_free_r+0x2c>
 8007ac2:	6063      	str	r3, [r4, #4]
 8007ac4:	6014      	str	r4, [r2, #0]
 8007ac6:	4628      	mov	r0, r5
 8007ac8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007acc:	f000 b8dc 	b.w	8007c88 <__malloc_unlock>
 8007ad0:	42a3      	cmp	r3, r4
 8007ad2:	d908      	bls.n	8007ae6 <_free_r+0x42>
 8007ad4:	6820      	ldr	r0, [r4, #0]
 8007ad6:	1821      	adds	r1, r4, r0
 8007ad8:	428b      	cmp	r3, r1
 8007ada:	bf01      	itttt	eq
 8007adc:	6819      	ldreq	r1, [r3, #0]
 8007ade:	685b      	ldreq	r3, [r3, #4]
 8007ae0:	1809      	addeq	r1, r1, r0
 8007ae2:	6021      	streq	r1, [r4, #0]
 8007ae4:	e7ed      	b.n	8007ac2 <_free_r+0x1e>
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	b10b      	cbz	r3, 8007af0 <_free_r+0x4c>
 8007aec:	42a3      	cmp	r3, r4
 8007aee:	d9fa      	bls.n	8007ae6 <_free_r+0x42>
 8007af0:	6811      	ldr	r1, [r2, #0]
 8007af2:	1850      	adds	r0, r2, r1
 8007af4:	42a0      	cmp	r0, r4
 8007af6:	d10b      	bne.n	8007b10 <_free_r+0x6c>
 8007af8:	6820      	ldr	r0, [r4, #0]
 8007afa:	4401      	add	r1, r0
 8007afc:	1850      	adds	r0, r2, r1
 8007afe:	4283      	cmp	r3, r0
 8007b00:	6011      	str	r1, [r2, #0]
 8007b02:	d1e0      	bne.n	8007ac6 <_free_r+0x22>
 8007b04:	6818      	ldr	r0, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	6053      	str	r3, [r2, #4]
 8007b0a:	4408      	add	r0, r1
 8007b0c:	6010      	str	r0, [r2, #0]
 8007b0e:	e7da      	b.n	8007ac6 <_free_r+0x22>
 8007b10:	d902      	bls.n	8007b18 <_free_r+0x74>
 8007b12:	230c      	movs	r3, #12
 8007b14:	602b      	str	r3, [r5, #0]
 8007b16:	e7d6      	b.n	8007ac6 <_free_r+0x22>
 8007b18:	6820      	ldr	r0, [r4, #0]
 8007b1a:	1821      	adds	r1, r4, r0
 8007b1c:	428b      	cmp	r3, r1
 8007b1e:	bf04      	itt	eq
 8007b20:	6819      	ldreq	r1, [r3, #0]
 8007b22:	685b      	ldreq	r3, [r3, #4]
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	bf04      	itt	eq
 8007b28:	1809      	addeq	r1, r1, r0
 8007b2a:	6021      	streq	r1, [r4, #0]
 8007b2c:	6054      	str	r4, [r2, #4]
 8007b2e:	e7ca      	b.n	8007ac6 <_free_r+0x22>
 8007b30:	bd38      	pop	{r3, r4, r5, pc}
 8007b32:	bf00      	nop
 8007b34:	20000708 	.word	0x20000708

08007b38 <sbrk_aligned>:
 8007b38:	b570      	push	{r4, r5, r6, lr}
 8007b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8007b78 <sbrk_aligned+0x40>)
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	6831      	ldr	r1, [r6, #0]
 8007b40:	4605      	mov	r5, r0
 8007b42:	b911      	cbnz	r1, 8007b4a <sbrk_aligned+0x12>
 8007b44:	f000 fe28 	bl	8008798 <_sbrk_r>
 8007b48:	6030      	str	r0, [r6, #0]
 8007b4a:	4621      	mov	r1, r4
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	f000 fe23 	bl	8008798 <_sbrk_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	d103      	bne.n	8007b5e <sbrk_aligned+0x26>
 8007b56:	f04f 34ff 	mov.w	r4, #4294967295
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	1cc4      	adds	r4, r0, #3
 8007b60:	f024 0403 	bic.w	r4, r4, #3
 8007b64:	42a0      	cmp	r0, r4
 8007b66:	d0f8      	beq.n	8007b5a <sbrk_aligned+0x22>
 8007b68:	1a21      	subs	r1, r4, r0
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	f000 fe14 	bl	8008798 <_sbrk_r>
 8007b70:	3001      	adds	r0, #1
 8007b72:	d1f2      	bne.n	8007b5a <sbrk_aligned+0x22>
 8007b74:	e7ef      	b.n	8007b56 <sbrk_aligned+0x1e>
 8007b76:	bf00      	nop
 8007b78:	20000704 	.word	0x20000704

08007b7c <_malloc_r>:
 8007b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b80:	1ccd      	adds	r5, r1, #3
 8007b82:	f025 0503 	bic.w	r5, r5, #3
 8007b86:	3508      	adds	r5, #8
 8007b88:	2d0c      	cmp	r5, #12
 8007b8a:	bf38      	it	cc
 8007b8c:	250c      	movcc	r5, #12
 8007b8e:	2d00      	cmp	r5, #0
 8007b90:	4606      	mov	r6, r0
 8007b92:	db01      	blt.n	8007b98 <_malloc_r+0x1c>
 8007b94:	42a9      	cmp	r1, r5
 8007b96:	d904      	bls.n	8007ba2 <_malloc_r+0x26>
 8007b98:	230c      	movs	r3, #12
 8007b9a:	6033      	str	r3, [r6, #0]
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c78 <_malloc_r+0xfc>
 8007ba6:	f000 f869 	bl	8007c7c <__malloc_lock>
 8007baa:	f8d8 3000 	ldr.w	r3, [r8]
 8007bae:	461c      	mov	r4, r3
 8007bb0:	bb44      	cbnz	r4, 8007c04 <_malloc_r+0x88>
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4630      	mov	r0, r6
 8007bb6:	f7ff ffbf 	bl	8007b38 <sbrk_aligned>
 8007bba:	1c43      	adds	r3, r0, #1
 8007bbc:	4604      	mov	r4, r0
 8007bbe:	d158      	bne.n	8007c72 <_malloc_r+0xf6>
 8007bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8007bc4:	4627      	mov	r7, r4
 8007bc6:	2f00      	cmp	r7, #0
 8007bc8:	d143      	bne.n	8007c52 <_malloc_r+0xd6>
 8007bca:	2c00      	cmp	r4, #0
 8007bcc:	d04b      	beq.n	8007c66 <_malloc_r+0xea>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	4639      	mov	r1, r7
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	eb04 0903 	add.w	r9, r4, r3
 8007bd8:	f000 fdde 	bl	8008798 <_sbrk_r>
 8007bdc:	4581      	cmp	r9, r0
 8007bde:	d142      	bne.n	8007c66 <_malloc_r+0xea>
 8007be0:	6821      	ldr	r1, [r4, #0]
 8007be2:	1a6d      	subs	r5, r5, r1
 8007be4:	4629      	mov	r1, r5
 8007be6:	4630      	mov	r0, r6
 8007be8:	f7ff ffa6 	bl	8007b38 <sbrk_aligned>
 8007bec:	3001      	adds	r0, #1
 8007bee:	d03a      	beq.n	8007c66 <_malloc_r+0xea>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	442b      	add	r3, r5
 8007bf4:	6023      	str	r3, [r4, #0]
 8007bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfa:	685a      	ldr	r2, [r3, #4]
 8007bfc:	bb62      	cbnz	r2, 8007c58 <_malloc_r+0xdc>
 8007bfe:	f8c8 7000 	str.w	r7, [r8]
 8007c02:	e00f      	b.n	8007c24 <_malloc_r+0xa8>
 8007c04:	6822      	ldr	r2, [r4, #0]
 8007c06:	1b52      	subs	r2, r2, r5
 8007c08:	d420      	bmi.n	8007c4c <_malloc_r+0xd0>
 8007c0a:	2a0b      	cmp	r2, #11
 8007c0c:	d917      	bls.n	8007c3e <_malloc_r+0xc2>
 8007c0e:	1961      	adds	r1, r4, r5
 8007c10:	42a3      	cmp	r3, r4
 8007c12:	6025      	str	r5, [r4, #0]
 8007c14:	bf18      	it	ne
 8007c16:	6059      	strne	r1, [r3, #4]
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	bf08      	it	eq
 8007c1c:	f8c8 1000 	streq.w	r1, [r8]
 8007c20:	5162      	str	r2, [r4, r5]
 8007c22:	604b      	str	r3, [r1, #4]
 8007c24:	4630      	mov	r0, r6
 8007c26:	f000 f82f 	bl	8007c88 <__malloc_unlock>
 8007c2a:	f104 000b 	add.w	r0, r4, #11
 8007c2e:	1d23      	adds	r3, r4, #4
 8007c30:	f020 0007 	bic.w	r0, r0, #7
 8007c34:	1ac2      	subs	r2, r0, r3
 8007c36:	bf1c      	itt	ne
 8007c38:	1a1b      	subne	r3, r3, r0
 8007c3a:	50a3      	strne	r3, [r4, r2]
 8007c3c:	e7af      	b.n	8007b9e <_malloc_r+0x22>
 8007c3e:	6862      	ldr	r2, [r4, #4]
 8007c40:	42a3      	cmp	r3, r4
 8007c42:	bf0c      	ite	eq
 8007c44:	f8c8 2000 	streq.w	r2, [r8]
 8007c48:	605a      	strne	r2, [r3, #4]
 8007c4a:	e7eb      	b.n	8007c24 <_malloc_r+0xa8>
 8007c4c:	4623      	mov	r3, r4
 8007c4e:	6864      	ldr	r4, [r4, #4]
 8007c50:	e7ae      	b.n	8007bb0 <_malloc_r+0x34>
 8007c52:	463c      	mov	r4, r7
 8007c54:	687f      	ldr	r7, [r7, #4]
 8007c56:	e7b6      	b.n	8007bc6 <_malloc_r+0x4a>
 8007c58:	461a      	mov	r2, r3
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	d1fb      	bne.n	8007c58 <_malloc_r+0xdc>
 8007c60:	2300      	movs	r3, #0
 8007c62:	6053      	str	r3, [r2, #4]
 8007c64:	e7de      	b.n	8007c24 <_malloc_r+0xa8>
 8007c66:	230c      	movs	r3, #12
 8007c68:	6033      	str	r3, [r6, #0]
 8007c6a:	4630      	mov	r0, r6
 8007c6c:	f000 f80c 	bl	8007c88 <__malloc_unlock>
 8007c70:	e794      	b.n	8007b9c <_malloc_r+0x20>
 8007c72:	6005      	str	r5, [r0, #0]
 8007c74:	e7d6      	b.n	8007c24 <_malloc_r+0xa8>
 8007c76:	bf00      	nop
 8007c78:	20000708 	.word	0x20000708

08007c7c <__malloc_lock>:
 8007c7c:	4801      	ldr	r0, [pc, #4]	@ (8007c84 <__malloc_lock+0x8>)
 8007c7e:	f7ff bf0e 	b.w	8007a9e <__retarget_lock_acquire_recursive>
 8007c82:	bf00      	nop
 8007c84:	20000700 	.word	0x20000700

08007c88 <__malloc_unlock>:
 8007c88:	4801      	ldr	r0, [pc, #4]	@ (8007c90 <__malloc_unlock+0x8>)
 8007c8a:	f7ff bf09 	b.w	8007aa0 <__retarget_lock_release_recursive>
 8007c8e:	bf00      	nop
 8007c90:	20000700 	.word	0x20000700

08007c94 <__ssputs_r>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	688e      	ldr	r6, [r1, #8]
 8007c9a:	461f      	mov	r7, r3
 8007c9c:	42be      	cmp	r6, r7
 8007c9e:	680b      	ldr	r3, [r1, #0]
 8007ca0:	4682      	mov	sl, r0
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	4690      	mov	r8, r2
 8007ca6:	d82d      	bhi.n	8007d04 <__ssputs_r+0x70>
 8007ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cb0:	d026      	beq.n	8007d00 <__ssputs_r+0x6c>
 8007cb2:	6965      	ldr	r5, [r4, #20]
 8007cb4:	6909      	ldr	r1, [r1, #16]
 8007cb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007cba:	eba3 0901 	sub.w	r9, r3, r1
 8007cbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007cc2:	1c7b      	adds	r3, r7, #1
 8007cc4:	444b      	add	r3, r9
 8007cc6:	106d      	asrs	r5, r5, #1
 8007cc8:	429d      	cmp	r5, r3
 8007cca:	bf38      	it	cc
 8007ccc:	461d      	movcc	r5, r3
 8007cce:	0553      	lsls	r3, r2, #21
 8007cd0:	d527      	bpl.n	8007d22 <__ssputs_r+0x8e>
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f7ff ff52 	bl	8007b7c <_malloc_r>
 8007cd8:	4606      	mov	r6, r0
 8007cda:	b360      	cbz	r0, 8007d36 <__ssputs_r+0xa2>
 8007cdc:	6921      	ldr	r1, [r4, #16]
 8007cde:	464a      	mov	r2, r9
 8007ce0:	f000 fd6a 	bl	80087b8 <memcpy>
 8007ce4:	89a3      	ldrh	r3, [r4, #12]
 8007ce6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cee:	81a3      	strh	r3, [r4, #12]
 8007cf0:	6126      	str	r6, [r4, #16]
 8007cf2:	6165      	str	r5, [r4, #20]
 8007cf4:	444e      	add	r6, r9
 8007cf6:	eba5 0509 	sub.w	r5, r5, r9
 8007cfa:	6026      	str	r6, [r4, #0]
 8007cfc:	60a5      	str	r5, [r4, #8]
 8007cfe:	463e      	mov	r6, r7
 8007d00:	42be      	cmp	r6, r7
 8007d02:	d900      	bls.n	8007d06 <__ssputs_r+0x72>
 8007d04:	463e      	mov	r6, r7
 8007d06:	6820      	ldr	r0, [r4, #0]
 8007d08:	4632      	mov	r2, r6
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	f000 fd2a 	bl	8008764 <memmove>
 8007d10:	68a3      	ldr	r3, [r4, #8]
 8007d12:	1b9b      	subs	r3, r3, r6
 8007d14:	60a3      	str	r3, [r4, #8]
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	4433      	add	r3, r6
 8007d1a:	6023      	str	r3, [r4, #0]
 8007d1c:	2000      	movs	r0, #0
 8007d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d22:	462a      	mov	r2, r5
 8007d24:	f000 fd56 	bl	80087d4 <_realloc_r>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d1e0      	bne.n	8007cf0 <__ssputs_r+0x5c>
 8007d2e:	6921      	ldr	r1, [r4, #16]
 8007d30:	4650      	mov	r0, sl
 8007d32:	f7ff feb7 	bl	8007aa4 <_free_r>
 8007d36:	230c      	movs	r3, #12
 8007d38:	f8ca 3000 	str.w	r3, [sl]
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	f04f 30ff 	mov.w	r0, #4294967295
 8007d48:	e7e9      	b.n	8007d1e <__ssputs_r+0x8a>
	...

08007d4c <_svfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	4698      	mov	r8, r3
 8007d52:	898b      	ldrh	r3, [r1, #12]
 8007d54:	061b      	lsls	r3, r3, #24
 8007d56:	b09d      	sub	sp, #116	@ 0x74
 8007d58:	4607      	mov	r7, r0
 8007d5a:	460d      	mov	r5, r1
 8007d5c:	4614      	mov	r4, r2
 8007d5e:	d510      	bpl.n	8007d82 <_svfiprintf_r+0x36>
 8007d60:	690b      	ldr	r3, [r1, #16]
 8007d62:	b973      	cbnz	r3, 8007d82 <_svfiprintf_r+0x36>
 8007d64:	2140      	movs	r1, #64	@ 0x40
 8007d66:	f7ff ff09 	bl	8007b7c <_malloc_r>
 8007d6a:	6028      	str	r0, [r5, #0]
 8007d6c:	6128      	str	r0, [r5, #16]
 8007d6e:	b930      	cbnz	r0, 8007d7e <_svfiprintf_r+0x32>
 8007d70:	230c      	movs	r3, #12
 8007d72:	603b      	str	r3, [r7, #0]
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	b01d      	add	sp, #116	@ 0x74
 8007d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d7e:	2340      	movs	r3, #64	@ 0x40
 8007d80:	616b      	str	r3, [r5, #20]
 8007d82:	2300      	movs	r3, #0
 8007d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d86:	2320      	movs	r3, #32
 8007d88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d90:	2330      	movs	r3, #48	@ 0x30
 8007d92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f30 <_svfiprintf_r+0x1e4>
 8007d96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d9a:	f04f 0901 	mov.w	r9, #1
 8007d9e:	4623      	mov	r3, r4
 8007da0:	469a      	mov	sl, r3
 8007da2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007da6:	b10a      	cbz	r2, 8007dac <_svfiprintf_r+0x60>
 8007da8:	2a25      	cmp	r2, #37	@ 0x25
 8007daa:	d1f9      	bne.n	8007da0 <_svfiprintf_r+0x54>
 8007dac:	ebba 0b04 	subs.w	fp, sl, r4
 8007db0:	d00b      	beq.n	8007dca <_svfiprintf_r+0x7e>
 8007db2:	465b      	mov	r3, fp
 8007db4:	4622      	mov	r2, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	4638      	mov	r0, r7
 8007dba:	f7ff ff6b 	bl	8007c94 <__ssputs_r>
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	f000 80a7 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007dc6:	445a      	add	r2, fp
 8007dc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8007dca:	f89a 3000 	ldrb.w	r3, [sl]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 809f 	beq.w	8007f12 <_svfiprintf_r+0x1c6>
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dde:	f10a 0a01 	add.w	sl, sl, #1
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007dea:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dec:	4654      	mov	r4, sl
 8007dee:	2205      	movs	r2, #5
 8007df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df4:	484e      	ldr	r0, [pc, #312]	@ (8007f30 <_svfiprintf_r+0x1e4>)
 8007df6:	f7f8 f9eb 	bl	80001d0 <memchr>
 8007dfa:	9a04      	ldr	r2, [sp, #16]
 8007dfc:	b9d8      	cbnz	r0, 8007e36 <_svfiprintf_r+0xea>
 8007dfe:	06d0      	lsls	r0, r2, #27
 8007e00:	bf44      	itt	mi
 8007e02:	2320      	movmi	r3, #32
 8007e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e08:	0711      	lsls	r1, r2, #28
 8007e0a:	bf44      	itt	mi
 8007e0c:	232b      	movmi	r3, #43	@ 0x2b
 8007e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e12:	f89a 3000 	ldrb.w	r3, [sl]
 8007e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e18:	d015      	beq.n	8007e46 <_svfiprintf_r+0xfa>
 8007e1a:	9a07      	ldr	r2, [sp, #28]
 8007e1c:	4654      	mov	r4, sl
 8007e1e:	2000      	movs	r0, #0
 8007e20:	f04f 0c0a 	mov.w	ip, #10
 8007e24:	4621      	mov	r1, r4
 8007e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e2a:	3b30      	subs	r3, #48	@ 0x30
 8007e2c:	2b09      	cmp	r3, #9
 8007e2e:	d94b      	bls.n	8007ec8 <_svfiprintf_r+0x17c>
 8007e30:	b1b0      	cbz	r0, 8007e60 <_svfiprintf_r+0x114>
 8007e32:	9207      	str	r2, [sp, #28]
 8007e34:	e014      	b.n	8007e60 <_svfiprintf_r+0x114>
 8007e36:	eba0 0308 	sub.w	r3, r0, r8
 8007e3a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	9304      	str	r3, [sp, #16]
 8007e42:	46a2      	mov	sl, r4
 8007e44:	e7d2      	b.n	8007dec <_svfiprintf_r+0xa0>
 8007e46:	9b03      	ldr	r3, [sp, #12]
 8007e48:	1d19      	adds	r1, r3, #4
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	9103      	str	r1, [sp, #12]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bfbb      	ittet	lt
 8007e52:	425b      	neglt	r3, r3
 8007e54:	f042 0202 	orrlt.w	r2, r2, #2
 8007e58:	9307      	strge	r3, [sp, #28]
 8007e5a:	9307      	strlt	r3, [sp, #28]
 8007e5c:	bfb8      	it	lt
 8007e5e:	9204      	strlt	r2, [sp, #16]
 8007e60:	7823      	ldrb	r3, [r4, #0]
 8007e62:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e64:	d10a      	bne.n	8007e7c <_svfiprintf_r+0x130>
 8007e66:	7863      	ldrb	r3, [r4, #1]
 8007e68:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e6a:	d132      	bne.n	8007ed2 <_svfiprintf_r+0x186>
 8007e6c:	9b03      	ldr	r3, [sp, #12]
 8007e6e:	1d1a      	adds	r2, r3, #4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	9203      	str	r2, [sp, #12]
 8007e74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e78:	3402      	adds	r4, #2
 8007e7a:	9305      	str	r3, [sp, #20]
 8007e7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f40 <_svfiprintf_r+0x1f4>
 8007e80:	7821      	ldrb	r1, [r4, #0]
 8007e82:	2203      	movs	r2, #3
 8007e84:	4650      	mov	r0, sl
 8007e86:	f7f8 f9a3 	bl	80001d0 <memchr>
 8007e8a:	b138      	cbz	r0, 8007e9c <_svfiprintf_r+0x150>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	eba0 000a 	sub.w	r0, r0, sl
 8007e92:	2240      	movs	r2, #64	@ 0x40
 8007e94:	4082      	lsls	r2, r0
 8007e96:	4313      	orrs	r3, r2
 8007e98:	3401      	adds	r4, #1
 8007e9a:	9304      	str	r3, [sp, #16]
 8007e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ea0:	4824      	ldr	r0, [pc, #144]	@ (8007f34 <_svfiprintf_r+0x1e8>)
 8007ea2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ea6:	2206      	movs	r2, #6
 8007ea8:	f7f8 f992 	bl	80001d0 <memchr>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d036      	beq.n	8007f1e <_svfiprintf_r+0x1d2>
 8007eb0:	4b21      	ldr	r3, [pc, #132]	@ (8007f38 <_svfiprintf_r+0x1ec>)
 8007eb2:	bb1b      	cbnz	r3, 8007efc <_svfiprintf_r+0x1b0>
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	3307      	adds	r3, #7
 8007eb8:	f023 0307 	bic.w	r3, r3, #7
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	9303      	str	r3, [sp, #12]
 8007ec0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec2:	4433      	add	r3, r6
 8007ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ec6:	e76a      	b.n	8007d9e <_svfiprintf_r+0x52>
 8007ec8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ecc:	460c      	mov	r4, r1
 8007ece:	2001      	movs	r0, #1
 8007ed0:	e7a8      	b.n	8007e24 <_svfiprintf_r+0xd8>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	3401      	adds	r4, #1
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	f04f 0c0a 	mov.w	ip, #10
 8007ede:	4620      	mov	r0, r4
 8007ee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ee4:	3a30      	subs	r2, #48	@ 0x30
 8007ee6:	2a09      	cmp	r2, #9
 8007ee8:	d903      	bls.n	8007ef2 <_svfiprintf_r+0x1a6>
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0c6      	beq.n	8007e7c <_svfiprintf_r+0x130>
 8007eee:	9105      	str	r1, [sp, #20]
 8007ef0:	e7c4      	b.n	8007e7c <_svfiprintf_r+0x130>
 8007ef2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e7f0      	b.n	8007ede <_svfiprintf_r+0x192>
 8007efc:	ab03      	add	r3, sp, #12
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	462a      	mov	r2, r5
 8007f02:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <_svfiprintf_r+0x1f0>)
 8007f04:	a904      	add	r1, sp, #16
 8007f06:	4638      	mov	r0, r7
 8007f08:	f3af 8000 	nop.w
 8007f0c:	1c42      	adds	r2, r0, #1
 8007f0e:	4606      	mov	r6, r0
 8007f10:	d1d6      	bne.n	8007ec0 <_svfiprintf_r+0x174>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	065b      	lsls	r3, r3, #25
 8007f16:	f53f af2d 	bmi.w	8007d74 <_svfiprintf_r+0x28>
 8007f1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f1c:	e72c      	b.n	8007d78 <_svfiprintf_r+0x2c>
 8007f1e:	ab03      	add	r3, sp, #12
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	462a      	mov	r2, r5
 8007f24:	4b05      	ldr	r3, [pc, #20]	@ (8007f3c <_svfiprintf_r+0x1f0>)
 8007f26:	a904      	add	r1, sp, #16
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f000 f9bb 	bl	80082a4 <_printf_i>
 8007f2e:	e7ed      	b.n	8007f0c <_svfiprintf_r+0x1c0>
 8007f30:	08008b10 	.word	0x08008b10
 8007f34:	08008b1a 	.word	0x08008b1a
 8007f38:	00000000 	.word	0x00000000
 8007f3c:	08007c95 	.word	0x08007c95
 8007f40:	08008b16 	.word	0x08008b16

08007f44 <__sfputc_r>:
 8007f44:	6893      	ldr	r3, [r2, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	b410      	push	{r4}
 8007f4c:	6093      	str	r3, [r2, #8]
 8007f4e:	da08      	bge.n	8007f62 <__sfputc_r+0x1e>
 8007f50:	6994      	ldr	r4, [r2, #24]
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	db01      	blt.n	8007f5a <__sfputc_r+0x16>
 8007f56:	290a      	cmp	r1, #10
 8007f58:	d103      	bne.n	8007f62 <__sfputc_r+0x1e>
 8007f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5e:	f000 bb6d 	b.w	800863c <__swbuf_r>
 8007f62:	6813      	ldr	r3, [r2, #0]
 8007f64:	1c58      	adds	r0, r3, #1
 8007f66:	6010      	str	r0, [r2, #0]
 8007f68:	7019      	strb	r1, [r3, #0]
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <__sfputs_r>:
 8007f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	18d5      	adds	r5, r2, r3
 8007f7c:	42ac      	cmp	r4, r5
 8007f7e:	d101      	bne.n	8007f84 <__sfputs_r+0x12>
 8007f80:	2000      	movs	r0, #0
 8007f82:	e007      	b.n	8007f94 <__sfputs_r+0x22>
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	463a      	mov	r2, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ffda 	bl	8007f44 <__sfputc_r>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d1f3      	bne.n	8007f7c <__sfputs_r+0xa>
 8007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f98 <_vfiprintf_r>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	b09d      	sub	sp, #116	@ 0x74
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	4698      	mov	r8, r3
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	b118      	cbz	r0, 8007fb0 <_vfiprintf_r+0x18>
 8007fa8:	6a03      	ldr	r3, [r0, #32]
 8007faa:	b90b      	cbnz	r3, 8007fb0 <_vfiprintf_r+0x18>
 8007fac:	f7ff fc52 	bl	8007854 <__sinit>
 8007fb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fb2:	07d9      	lsls	r1, r3, #31
 8007fb4:	d405      	bmi.n	8007fc2 <_vfiprintf_r+0x2a>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	059a      	lsls	r2, r3, #22
 8007fba:	d402      	bmi.n	8007fc2 <_vfiprintf_r+0x2a>
 8007fbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fbe:	f7ff fd6e 	bl	8007a9e <__retarget_lock_acquire_recursive>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	071b      	lsls	r3, r3, #28
 8007fc6:	d501      	bpl.n	8007fcc <_vfiprintf_r+0x34>
 8007fc8:	692b      	ldr	r3, [r5, #16]
 8007fca:	b99b      	cbnz	r3, 8007ff4 <_vfiprintf_r+0x5c>
 8007fcc:	4629      	mov	r1, r5
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f000 fb72 	bl	80086b8 <__swsetup_r>
 8007fd4:	b170      	cbz	r0, 8007ff4 <_vfiprintf_r+0x5c>
 8007fd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd8:	07dc      	lsls	r4, r3, #31
 8007fda:	d504      	bpl.n	8007fe6 <_vfiprintf_r+0x4e>
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	b01d      	add	sp, #116	@ 0x74
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	89ab      	ldrh	r3, [r5, #12]
 8007fe8:	0598      	lsls	r0, r3, #22
 8007fea:	d4f7      	bmi.n	8007fdc <_vfiprintf_r+0x44>
 8007fec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fee:	f7ff fd57 	bl	8007aa0 <__retarget_lock_release_recursive>
 8007ff2:	e7f3      	b.n	8007fdc <_vfiprintf_r+0x44>
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008002:	2330      	movs	r3, #48	@ 0x30
 8008004:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081b4 <_vfiprintf_r+0x21c>
 8008008:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800800c:	f04f 0901 	mov.w	r9, #1
 8008010:	4623      	mov	r3, r4
 8008012:	469a      	mov	sl, r3
 8008014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008018:	b10a      	cbz	r2, 800801e <_vfiprintf_r+0x86>
 800801a:	2a25      	cmp	r2, #37	@ 0x25
 800801c:	d1f9      	bne.n	8008012 <_vfiprintf_r+0x7a>
 800801e:	ebba 0b04 	subs.w	fp, sl, r4
 8008022:	d00b      	beq.n	800803c <_vfiprintf_r+0xa4>
 8008024:	465b      	mov	r3, fp
 8008026:	4622      	mov	r2, r4
 8008028:	4629      	mov	r1, r5
 800802a:	4630      	mov	r0, r6
 800802c:	f7ff ffa1 	bl	8007f72 <__sfputs_r>
 8008030:	3001      	adds	r0, #1
 8008032:	f000 80a7 	beq.w	8008184 <_vfiprintf_r+0x1ec>
 8008036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008038:	445a      	add	r2, fp
 800803a:	9209      	str	r2, [sp, #36]	@ 0x24
 800803c:	f89a 3000 	ldrb.w	r3, [sl]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 809f 	beq.w	8008184 <_vfiprintf_r+0x1ec>
 8008046:	2300      	movs	r3, #0
 8008048:	f04f 32ff 	mov.w	r2, #4294967295
 800804c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008050:	f10a 0a01 	add.w	sl, sl, #1
 8008054:	9304      	str	r3, [sp, #16]
 8008056:	9307      	str	r3, [sp, #28]
 8008058:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800805c:	931a      	str	r3, [sp, #104]	@ 0x68
 800805e:	4654      	mov	r4, sl
 8008060:	2205      	movs	r2, #5
 8008062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008066:	4853      	ldr	r0, [pc, #332]	@ (80081b4 <_vfiprintf_r+0x21c>)
 8008068:	f7f8 f8b2 	bl	80001d0 <memchr>
 800806c:	9a04      	ldr	r2, [sp, #16]
 800806e:	b9d8      	cbnz	r0, 80080a8 <_vfiprintf_r+0x110>
 8008070:	06d1      	lsls	r1, r2, #27
 8008072:	bf44      	itt	mi
 8008074:	2320      	movmi	r3, #32
 8008076:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800807a:	0713      	lsls	r3, r2, #28
 800807c:	bf44      	itt	mi
 800807e:	232b      	movmi	r3, #43	@ 0x2b
 8008080:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008084:	f89a 3000 	ldrb.w	r3, [sl]
 8008088:	2b2a      	cmp	r3, #42	@ 0x2a
 800808a:	d015      	beq.n	80080b8 <_vfiprintf_r+0x120>
 800808c:	9a07      	ldr	r2, [sp, #28]
 800808e:	4654      	mov	r4, sl
 8008090:	2000      	movs	r0, #0
 8008092:	f04f 0c0a 	mov.w	ip, #10
 8008096:	4621      	mov	r1, r4
 8008098:	f811 3b01 	ldrb.w	r3, [r1], #1
 800809c:	3b30      	subs	r3, #48	@ 0x30
 800809e:	2b09      	cmp	r3, #9
 80080a0:	d94b      	bls.n	800813a <_vfiprintf_r+0x1a2>
 80080a2:	b1b0      	cbz	r0, 80080d2 <_vfiprintf_r+0x13a>
 80080a4:	9207      	str	r2, [sp, #28]
 80080a6:	e014      	b.n	80080d2 <_vfiprintf_r+0x13a>
 80080a8:	eba0 0308 	sub.w	r3, r0, r8
 80080ac:	fa09 f303 	lsl.w	r3, r9, r3
 80080b0:	4313      	orrs	r3, r2
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	46a2      	mov	sl, r4
 80080b6:	e7d2      	b.n	800805e <_vfiprintf_r+0xc6>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	1d19      	adds	r1, r3, #4
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	9103      	str	r1, [sp, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	bfbb      	ittet	lt
 80080c4:	425b      	neglt	r3, r3
 80080c6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ca:	9307      	strge	r3, [sp, #28]
 80080cc:	9307      	strlt	r3, [sp, #28]
 80080ce:	bfb8      	it	lt
 80080d0:	9204      	strlt	r2, [sp, #16]
 80080d2:	7823      	ldrb	r3, [r4, #0]
 80080d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080d6:	d10a      	bne.n	80080ee <_vfiprintf_r+0x156>
 80080d8:	7863      	ldrb	r3, [r4, #1]
 80080da:	2b2a      	cmp	r3, #42	@ 0x2a
 80080dc:	d132      	bne.n	8008144 <_vfiprintf_r+0x1ac>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	1d1a      	adds	r2, r3, #4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	9203      	str	r2, [sp, #12]
 80080e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080ea:	3402      	adds	r4, #2
 80080ec:	9305      	str	r3, [sp, #20]
 80080ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081c4 <_vfiprintf_r+0x22c>
 80080f2:	7821      	ldrb	r1, [r4, #0]
 80080f4:	2203      	movs	r2, #3
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 f86a 	bl	80001d0 <memchr>
 80080fc:	b138      	cbz	r0, 800810e <_vfiprintf_r+0x176>
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	eba0 000a 	sub.w	r0, r0, sl
 8008104:	2240      	movs	r2, #64	@ 0x40
 8008106:	4082      	lsls	r2, r0
 8008108:	4313      	orrs	r3, r2
 800810a:	3401      	adds	r4, #1
 800810c:	9304      	str	r3, [sp, #16]
 800810e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008112:	4829      	ldr	r0, [pc, #164]	@ (80081b8 <_vfiprintf_r+0x220>)
 8008114:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008118:	2206      	movs	r2, #6
 800811a:	f7f8 f859 	bl	80001d0 <memchr>
 800811e:	2800      	cmp	r0, #0
 8008120:	d03f      	beq.n	80081a2 <_vfiprintf_r+0x20a>
 8008122:	4b26      	ldr	r3, [pc, #152]	@ (80081bc <_vfiprintf_r+0x224>)
 8008124:	bb1b      	cbnz	r3, 800816e <_vfiprintf_r+0x1d6>
 8008126:	9b03      	ldr	r3, [sp, #12]
 8008128:	3307      	adds	r3, #7
 800812a:	f023 0307 	bic.w	r3, r3, #7
 800812e:	3308      	adds	r3, #8
 8008130:	9303      	str	r3, [sp, #12]
 8008132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008134:	443b      	add	r3, r7
 8008136:	9309      	str	r3, [sp, #36]	@ 0x24
 8008138:	e76a      	b.n	8008010 <_vfiprintf_r+0x78>
 800813a:	fb0c 3202 	mla	r2, ip, r2, r3
 800813e:	460c      	mov	r4, r1
 8008140:	2001      	movs	r0, #1
 8008142:	e7a8      	b.n	8008096 <_vfiprintf_r+0xfe>
 8008144:	2300      	movs	r3, #0
 8008146:	3401      	adds	r4, #1
 8008148:	9305      	str	r3, [sp, #20]
 800814a:	4619      	mov	r1, r3
 800814c:	f04f 0c0a 	mov.w	ip, #10
 8008150:	4620      	mov	r0, r4
 8008152:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008156:	3a30      	subs	r2, #48	@ 0x30
 8008158:	2a09      	cmp	r2, #9
 800815a:	d903      	bls.n	8008164 <_vfiprintf_r+0x1cc>
 800815c:	2b00      	cmp	r3, #0
 800815e:	d0c6      	beq.n	80080ee <_vfiprintf_r+0x156>
 8008160:	9105      	str	r1, [sp, #20]
 8008162:	e7c4      	b.n	80080ee <_vfiprintf_r+0x156>
 8008164:	fb0c 2101 	mla	r1, ip, r1, r2
 8008168:	4604      	mov	r4, r0
 800816a:	2301      	movs	r3, #1
 800816c:	e7f0      	b.n	8008150 <_vfiprintf_r+0x1b8>
 800816e:	ab03      	add	r3, sp, #12
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	462a      	mov	r2, r5
 8008174:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <_vfiprintf_r+0x228>)
 8008176:	a904      	add	r1, sp, #16
 8008178:	4630      	mov	r0, r6
 800817a:	f3af 8000 	nop.w
 800817e:	4607      	mov	r7, r0
 8008180:	1c78      	adds	r0, r7, #1
 8008182:	d1d6      	bne.n	8008132 <_vfiprintf_r+0x19a>
 8008184:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008186:	07d9      	lsls	r1, r3, #31
 8008188:	d405      	bmi.n	8008196 <_vfiprintf_r+0x1fe>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	059a      	lsls	r2, r3, #22
 800818e:	d402      	bmi.n	8008196 <_vfiprintf_r+0x1fe>
 8008190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008192:	f7ff fc85 	bl	8007aa0 <__retarget_lock_release_recursive>
 8008196:	89ab      	ldrh	r3, [r5, #12]
 8008198:	065b      	lsls	r3, r3, #25
 800819a:	f53f af1f 	bmi.w	8007fdc <_vfiprintf_r+0x44>
 800819e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081a0:	e71e      	b.n	8007fe0 <_vfiprintf_r+0x48>
 80081a2:	ab03      	add	r3, sp, #12
 80081a4:	9300      	str	r3, [sp, #0]
 80081a6:	462a      	mov	r2, r5
 80081a8:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <_vfiprintf_r+0x228>)
 80081aa:	a904      	add	r1, sp, #16
 80081ac:	4630      	mov	r0, r6
 80081ae:	f000 f879 	bl	80082a4 <_printf_i>
 80081b2:	e7e4      	b.n	800817e <_vfiprintf_r+0x1e6>
 80081b4:	08008b10 	.word	0x08008b10
 80081b8:	08008b1a 	.word	0x08008b1a
 80081bc:	00000000 	.word	0x00000000
 80081c0:	08007f73 	.word	0x08007f73
 80081c4:	08008b16 	.word	0x08008b16

080081c8 <_printf_common>:
 80081c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081cc:	4616      	mov	r6, r2
 80081ce:	4698      	mov	r8, r3
 80081d0:	688a      	ldr	r2, [r1, #8]
 80081d2:	690b      	ldr	r3, [r1, #16]
 80081d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081d8:	4293      	cmp	r3, r2
 80081da:	bfb8      	it	lt
 80081dc:	4613      	movlt	r3, r2
 80081de:	6033      	str	r3, [r6, #0]
 80081e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081e4:	4607      	mov	r7, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	b10a      	cbz	r2, 80081ee <_printf_common+0x26>
 80081ea:	3301      	adds	r3, #1
 80081ec:	6033      	str	r3, [r6, #0]
 80081ee:	6823      	ldr	r3, [r4, #0]
 80081f0:	0699      	lsls	r1, r3, #26
 80081f2:	bf42      	ittt	mi
 80081f4:	6833      	ldrmi	r3, [r6, #0]
 80081f6:	3302      	addmi	r3, #2
 80081f8:	6033      	strmi	r3, [r6, #0]
 80081fa:	6825      	ldr	r5, [r4, #0]
 80081fc:	f015 0506 	ands.w	r5, r5, #6
 8008200:	d106      	bne.n	8008210 <_printf_common+0x48>
 8008202:	f104 0a19 	add.w	sl, r4, #25
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	6832      	ldr	r2, [r6, #0]
 800820a:	1a9b      	subs	r3, r3, r2
 800820c:	42ab      	cmp	r3, r5
 800820e:	dc26      	bgt.n	800825e <_printf_common+0x96>
 8008210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008214:	6822      	ldr	r2, [r4, #0]
 8008216:	3b00      	subs	r3, #0
 8008218:	bf18      	it	ne
 800821a:	2301      	movne	r3, #1
 800821c:	0692      	lsls	r2, r2, #26
 800821e:	d42b      	bmi.n	8008278 <_printf_common+0xb0>
 8008220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008224:	4641      	mov	r1, r8
 8008226:	4638      	mov	r0, r7
 8008228:	47c8      	blx	r9
 800822a:	3001      	adds	r0, #1
 800822c:	d01e      	beq.n	800826c <_printf_common+0xa4>
 800822e:	6823      	ldr	r3, [r4, #0]
 8008230:	6922      	ldr	r2, [r4, #16]
 8008232:	f003 0306 	and.w	r3, r3, #6
 8008236:	2b04      	cmp	r3, #4
 8008238:	bf02      	ittt	eq
 800823a:	68e5      	ldreq	r5, [r4, #12]
 800823c:	6833      	ldreq	r3, [r6, #0]
 800823e:	1aed      	subeq	r5, r5, r3
 8008240:	68a3      	ldr	r3, [r4, #8]
 8008242:	bf0c      	ite	eq
 8008244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008248:	2500      	movne	r5, #0
 800824a:	4293      	cmp	r3, r2
 800824c:	bfc4      	itt	gt
 800824e:	1a9b      	subgt	r3, r3, r2
 8008250:	18ed      	addgt	r5, r5, r3
 8008252:	2600      	movs	r6, #0
 8008254:	341a      	adds	r4, #26
 8008256:	42b5      	cmp	r5, r6
 8008258:	d11a      	bne.n	8008290 <_printf_common+0xc8>
 800825a:	2000      	movs	r0, #0
 800825c:	e008      	b.n	8008270 <_printf_common+0xa8>
 800825e:	2301      	movs	r3, #1
 8008260:	4652      	mov	r2, sl
 8008262:	4641      	mov	r1, r8
 8008264:	4638      	mov	r0, r7
 8008266:	47c8      	blx	r9
 8008268:	3001      	adds	r0, #1
 800826a:	d103      	bne.n	8008274 <_printf_common+0xac>
 800826c:	f04f 30ff 	mov.w	r0, #4294967295
 8008270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008274:	3501      	adds	r5, #1
 8008276:	e7c6      	b.n	8008206 <_printf_common+0x3e>
 8008278:	18e1      	adds	r1, r4, r3
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	2030      	movs	r0, #48	@ 0x30
 800827e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008282:	4422      	add	r2, r4
 8008284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800828c:	3302      	adds	r3, #2
 800828e:	e7c7      	b.n	8008220 <_printf_common+0x58>
 8008290:	2301      	movs	r3, #1
 8008292:	4622      	mov	r2, r4
 8008294:	4641      	mov	r1, r8
 8008296:	4638      	mov	r0, r7
 8008298:	47c8      	blx	r9
 800829a:	3001      	adds	r0, #1
 800829c:	d0e6      	beq.n	800826c <_printf_common+0xa4>
 800829e:	3601      	adds	r6, #1
 80082a0:	e7d9      	b.n	8008256 <_printf_common+0x8e>
	...

080082a4 <_printf_i>:
 80082a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082a8:	7e0f      	ldrb	r7, [r1, #24]
 80082aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082ac:	2f78      	cmp	r7, #120	@ 0x78
 80082ae:	4691      	mov	r9, r2
 80082b0:	4680      	mov	r8, r0
 80082b2:	460c      	mov	r4, r1
 80082b4:	469a      	mov	sl, r3
 80082b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082ba:	d807      	bhi.n	80082cc <_printf_i+0x28>
 80082bc:	2f62      	cmp	r7, #98	@ 0x62
 80082be:	d80a      	bhi.n	80082d6 <_printf_i+0x32>
 80082c0:	2f00      	cmp	r7, #0
 80082c2:	f000 80d2 	beq.w	800846a <_printf_i+0x1c6>
 80082c6:	2f58      	cmp	r7, #88	@ 0x58
 80082c8:	f000 80b9 	beq.w	800843e <_printf_i+0x19a>
 80082cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082d4:	e03a      	b.n	800834c <_printf_i+0xa8>
 80082d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082da:	2b15      	cmp	r3, #21
 80082dc:	d8f6      	bhi.n	80082cc <_printf_i+0x28>
 80082de:	a101      	add	r1, pc, #4	@ (adr r1, 80082e4 <_printf_i+0x40>)
 80082e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082e4:	0800833d 	.word	0x0800833d
 80082e8:	08008351 	.word	0x08008351
 80082ec:	080082cd 	.word	0x080082cd
 80082f0:	080082cd 	.word	0x080082cd
 80082f4:	080082cd 	.word	0x080082cd
 80082f8:	080082cd 	.word	0x080082cd
 80082fc:	08008351 	.word	0x08008351
 8008300:	080082cd 	.word	0x080082cd
 8008304:	080082cd 	.word	0x080082cd
 8008308:	080082cd 	.word	0x080082cd
 800830c:	080082cd 	.word	0x080082cd
 8008310:	08008451 	.word	0x08008451
 8008314:	0800837b 	.word	0x0800837b
 8008318:	0800840b 	.word	0x0800840b
 800831c:	080082cd 	.word	0x080082cd
 8008320:	080082cd 	.word	0x080082cd
 8008324:	08008473 	.word	0x08008473
 8008328:	080082cd 	.word	0x080082cd
 800832c:	0800837b 	.word	0x0800837b
 8008330:	080082cd 	.word	0x080082cd
 8008334:	080082cd 	.word	0x080082cd
 8008338:	08008413 	.word	0x08008413
 800833c:	6833      	ldr	r3, [r6, #0]
 800833e:	1d1a      	adds	r2, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6032      	str	r2, [r6, #0]
 8008344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800834c:	2301      	movs	r3, #1
 800834e:	e09d      	b.n	800848c <_printf_i+0x1e8>
 8008350:	6833      	ldr	r3, [r6, #0]
 8008352:	6820      	ldr	r0, [r4, #0]
 8008354:	1d19      	adds	r1, r3, #4
 8008356:	6031      	str	r1, [r6, #0]
 8008358:	0606      	lsls	r6, r0, #24
 800835a:	d501      	bpl.n	8008360 <_printf_i+0xbc>
 800835c:	681d      	ldr	r5, [r3, #0]
 800835e:	e003      	b.n	8008368 <_printf_i+0xc4>
 8008360:	0645      	lsls	r5, r0, #25
 8008362:	d5fb      	bpl.n	800835c <_printf_i+0xb8>
 8008364:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008368:	2d00      	cmp	r5, #0
 800836a:	da03      	bge.n	8008374 <_printf_i+0xd0>
 800836c:	232d      	movs	r3, #45	@ 0x2d
 800836e:	426d      	negs	r5, r5
 8008370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008374:	4859      	ldr	r0, [pc, #356]	@ (80084dc <_printf_i+0x238>)
 8008376:	230a      	movs	r3, #10
 8008378:	e011      	b.n	800839e <_printf_i+0xfa>
 800837a:	6821      	ldr	r1, [r4, #0]
 800837c:	6833      	ldr	r3, [r6, #0]
 800837e:	0608      	lsls	r0, r1, #24
 8008380:	f853 5b04 	ldr.w	r5, [r3], #4
 8008384:	d402      	bmi.n	800838c <_printf_i+0xe8>
 8008386:	0649      	lsls	r1, r1, #25
 8008388:	bf48      	it	mi
 800838a:	b2ad      	uxthmi	r5, r5
 800838c:	2f6f      	cmp	r7, #111	@ 0x6f
 800838e:	4853      	ldr	r0, [pc, #332]	@ (80084dc <_printf_i+0x238>)
 8008390:	6033      	str	r3, [r6, #0]
 8008392:	bf14      	ite	ne
 8008394:	230a      	movne	r3, #10
 8008396:	2308      	moveq	r3, #8
 8008398:	2100      	movs	r1, #0
 800839a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800839e:	6866      	ldr	r6, [r4, #4]
 80083a0:	60a6      	str	r6, [r4, #8]
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	bfa2      	ittt	ge
 80083a6:	6821      	ldrge	r1, [r4, #0]
 80083a8:	f021 0104 	bicge.w	r1, r1, #4
 80083ac:	6021      	strge	r1, [r4, #0]
 80083ae:	b90d      	cbnz	r5, 80083b4 <_printf_i+0x110>
 80083b0:	2e00      	cmp	r6, #0
 80083b2:	d04b      	beq.n	800844c <_printf_i+0x1a8>
 80083b4:	4616      	mov	r6, r2
 80083b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80083ba:	fb03 5711 	mls	r7, r3, r1, r5
 80083be:	5dc7      	ldrb	r7, [r0, r7]
 80083c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083c4:	462f      	mov	r7, r5
 80083c6:	42bb      	cmp	r3, r7
 80083c8:	460d      	mov	r5, r1
 80083ca:	d9f4      	bls.n	80083b6 <_printf_i+0x112>
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d10b      	bne.n	80083e8 <_printf_i+0x144>
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	07df      	lsls	r7, r3, #31
 80083d4:	d508      	bpl.n	80083e8 <_printf_i+0x144>
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	4299      	cmp	r1, r3
 80083dc:	bfde      	ittt	le
 80083de:	2330      	movle	r3, #48	@ 0x30
 80083e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083e8:	1b92      	subs	r2, r2, r6
 80083ea:	6122      	str	r2, [r4, #16]
 80083ec:	f8cd a000 	str.w	sl, [sp]
 80083f0:	464b      	mov	r3, r9
 80083f2:	aa03      	add	r2, sp, #12
 80083f4:	4621      	mov	r1, r4
 80083f6:	4640      	mov	r0, r8
 80083f8:	f7ff fee6 	bl	80081c8 <_printf_common>
 80083fc:	3001      	adds	r0, #1
 80083fe:	d14a      	bne.n	8008496 <_printf_i+0x1f2>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295
 8008404:	b004      	add	sp, #16
 8008406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	f043 0320 	orr.w	r3, r3, #32
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	4833      	ldr	r0, [pc, #204]	@ (80084e0 <_printf_i+0x23c>)
 8008414:	2778      	movs	r7, #120	@ 0x78
 8008416:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	6831      	ldr	r1, [r6, #0]
 800841e:	061f      	lsls	r7, r3, #24
 8008420:	f851 5b04 	ldr.w	r5, [r1], #4
 8008424:	d402      	bmi.n	800842c <_printf_i+0x188>
 8008426:	065f      	lsls	r7, r3, #25
 8008428:	bf48      	it	mi
 800842a:	b2ad      	uxthmi	r5, r5
 800842c:	6031      	str	r1, [r6, #0]
 800842e:	07d9      	lsls	r1, r3, #31
 8008430:	bf44      	itt	mi
 8008432:	f043 0320 	orrmi.w	r3, r3, #32
 8008436:	6023      	strmi	r3, [r4, #0]
 8008438:	b11d      	cbz	r5, 8008442 <_printf_i+0x19e>
 800843a:	2310      	movs	r3, #16
 800843c:	e7ac      	b.n	8008398 <_printf_i+0xf4>
 800843e:	4827      	ldr	r0, [pc, #156]	@ (80084dc <_printf_i+0x238>)
 8008440:	e7e9      	b.n	8008416 <_printf_i+0x172>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	f023 0320 	bic.w	r3, r3, #32
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	e7f6      	b.n	800843a <_printf_i+0x196>
 800844c:	4616      	mov	r6, r2
 800844e:	e7bd      	b.n	80083cc <_printf_i+0x128>
 8008450:	6833      	ldr	r3, [r6, #0]
 8008452:	6825      	ldr	r5, [r4, #0]
 8008454:	6961      	ldr	r1, [r4, #20]
 8008456:	1d18      	adds	r0, r3, #4
 8008458:	6030      	str	r0, [r6, #0]
 800845a:	062e      	lsls	r6, r5, #24
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	d501      	bpl.n	8008464 <_printf_i+0x1c0>
 8008460:	6019      	str	r1, [r3, #0]
 8008462:	e002      	b.n	800846a <_printf_i+0x1c6>
 8008464:	0668      	lsls	r0, r5, #25
 8008466:	d5fb      	bpl.n	8008460 <_printf_i+0x1bc>
 8008468:	8019      	strh	r1, [r3, #0]
 800846a:	2300      	movs	r3, #0
 800846c:	6123      	str	r3, [r4, #16]
 800846e:	4616      	mov	r6, r2
 8008470:	e7bc      	b.n	80083ec <_printf_i+0x148>
 8008472:	6833      	ldr	r3, [r6, #0]
 8008474:	1d1a      	adds	r2, r3, #4
 8008476:	6032      	str	r2, [r6, #0]
 8008478:	681e      	ldr	r6, [r3, #0]
 800847a:	6862      	ldr	r2, [r4, #4]
 800847c:	2100      	movs	r1, #0
 800847e:	4630      	mov	r0, r6
 8008480:	f7f7 fea6 	bl	80001d0 <memchr>
 8008484:	b108      	cbz	r0, 800848a <_printf_i+0x1e6>
 8008486:	1b80      	subs	r0, r0, r6
 8008488:	6060      	str	r0, [r4, #4]
 800848a:	6863      	ldr	r3, [r4, #4]
 800848c:	6123      	str	r3, [r4, #16]
 800848e:	2300      	movs	r3, #0
 8008490:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008494:	e7aa      	b.n	80083ec <_printf_i+0x148>
 8008496:	6923      	ldr	r3, [r4, #16]
 8008498:	4632      	mov	r2, r6
 800849a:	4649      	mov	r1, r9
 800849c:	4640      	mov	r0, r8
 800849e:	47d0      	blx	sl
 80084a0:	3001      	adds	r0, #1
 80084a2:	d0ad      	beq.n	8008400 <_printf_i+0x15c>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	079b      	lsls	r3, r3, #30
 80084a8:	d413      	bmi.n	80084d2 <_printf_i+0x22e>
 80084aa:	68e0      	ldr	r0, [r4, #12]
 80084ac:	9b03      	ldr	r3, [sp, #12]
 80084ae:	4298      	cmp	r0, r3
 80084b0:	bfb8      	it	lt
 80084b2:	4618      	movlt	r0, r3
 80084b4:	e7a6      	b.n	8008404 <_printf_i+0x160>
 80084b6:	2301      	movs	r3, #1
 80084b8:	4632      	mov	r2, r6
 80084ba:	4649      	mov	r1, r9
 80084bc:	4640      	mov	r0, r8
 80084be:	47d0      	blx	sl
 80084c0:	3001      	adds	r0, #1
 80084c2:	d09d      	beq.n	8008400 <_printf_i+0x15c>
 80084c4:	3501      	adds	r5, #1
 80084c6:	68e3      	ldr	r3, [r4, #12]
 80084c8:	9903      	ldr	r1, [sp, #12]
 80084ca:	1a5b      	subs	r3, r3, r1
 80084cc:	42ab      	cmp	r3, r5
 80084ce:	dcf2      	bgt.n	80084b6 <_printf_i+0x212>
 80084d0:	e7eb      	b.n	80084aa <_printf_i+0x206>
 80084d2:	2500      	movs	r5, #0
 80084d4:	f104 0619 	add.w	r6, r4, #25
 80084d8:	e7f5      	b.n	80084c6 <_printf_i+0x222>
 80084da:	bf00      	nop
 80084dc:	08008b21 	.word	0x08008b21
 80084e0:	08008b32 	.word	0x08008b32

080084e4 <__sflush_r>:
 80084e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ec:	0716      	lsls	r6, r2, #28
 80084ee:	4605      	mov	r5, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	d454      	bmi.n	800859e <__sflush_r+0xba>
 80084f4:	684b      	ldr	r3, [r1, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dc02      	bgt.n	8008500 <__sflush_r+0x1c>
 80084fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dd48      	ble.n	8008592 <__sflush_r+0xae>
 8008500:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008502:	2e00      	cmp	r6, #0
 8008504:	d045      	beq.n	8008592 <__sflush_r+0xae>
 8008506:	2300      	movs	r3, #0
 8008508:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800850c:	682f      	ldr	r7, [r5, #0]
 800850e:	6a21      	ldr	r1, [r4, #32]
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	d030      	beq.n	8008576 <__sflush_r+0x92>
 8008514:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	0759      	lsls	r1, r3, #29
 800851a:	d505      	bpl.n	8008528 <__sflush_r+0x44>
 800851c:	6863      	ldr	r3, [r4, #4]
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008522:	b10b      	cbz	r3, 8008528 <__sflush_r+0x44>
 8008524:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008526:	1ad2      	subs	r2, r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800852c:	6a21      	ldr	r1, [r4, #32]
 800852e:	4628      	mov	r0, r5
 8008530:	47b0      	blx	r6
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	d106      	bne.n	8008546 <__sflush_r+0x62>
 8008538:	6829      	ldr	r1, [r5, #0]
 800853a:	291d      	cmp	r1, #29
 800853c:	d82b      	bhi.n	8008596 <__sflush_r+0xb2>
 800853e:	4a2a      	ldr	r2, [pc, #168]	@ (80085e8 <__sflush_r+0x104>)
 8008540:	410a      	asrs	r2, r1
 8008542:	07d6      	lsls	r6, r2, #31
 8008544:	d427      	bmi.n	8008596 <__sflush_r+0xb2>
 8008546:	2200      	movs	r2, #0
 8008548:	6062      	str	r2, [r4, #4]
 800854a:	04d9      	lsls	r1, r3, #19
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	d504      	bpl.n	800855c <__sflush_r+0x78>
 8008552:	1c42      	adds	r2, r0, #1
 8008554:	d101      	bne.n	800855a <__sflush_r+0x76>
 8008556:	682b      	ldr	r3, [r5, #0]
 8008558:	b903      	cbnz	r3, 800855c <__sflush_r+0x78>
 800855a:	6560      	str	r0, [r4, #84]	@ 0x54
 800855c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800855e:	602f      	str	r7, [r5, #0]
 8008560:	b1b9      	cbz	r1, 8008592 <__sflush_r+0xae>
 8008562:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008566:	4299      	cmp	r1, r3
 8008568:	d002      	beq.n	8008570 <__sflush_r+0x8c>
 800856a:	4628      	mov	r0, r5
 800856c:	f7ff fa9a 	bl	8007aa4 <_free_r>
 8008570:	2300      	movs	r3, #0
 8008572:	6363      	str	r3, [r4, #52]	@ 0x34
 8008574:	e00d      	b.n	8008592 <__sflush_r+0xae>
 8008576:	2301      	movs	r3, #1
 8008578:	4628      	mov	r0, r5
 800857a:	47b0      	blx	r6
 800857c:	4602      	mov	r2, r0
 800857e:	1c50      	adds	r0, r2, #1
 8008580:	d1c9      	bne.n	8008516 <__sflush_r+0x32>
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0c6      	beq.n	8008516 <__sflush_r+0x32>
 8008588:	2b1d      	cmp	r3, #29
 800858a:	d001      	beq.n	8008590 <__sflush_r+0xac>
 800858c:	2b16      	cmp	r3, #22
 800858e:	d11e      	bne.n	80085ce <__sflush_r+0xea>
 8008590:	602f      	str	r7, [r5, #0]
 8008592:	2000      	movs	r0, #0
 8008594:	e022      	b.n	80085dc <__sflush_r+0xf8>
 8008596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800859a:	b21b      	sxth	r3, r3
 800859c:	e01b      	b.n	80085d6 <__sflush_r+0xf2>
 800859e:	690f      	ldr	r7, [r1, #16]
 80085a0:	2f00      	cmp	r7, #0
 80085a2:	d0f6      	beq.n	8008592 <__sflush_r+0xae>
 80085a4:	0793      	lsls	r3, r2, #30
 80085a6:	680e      	ldr	r6, [r1, #0]
 80085a8:	bf08      	it	eq
 80085aa:	694b      	ldreq	r3, [r1, #20]
 80085ac:	600f      	str	r7, [r1, #0]
 80085ae:	bf18      	it	ne
 80085b0:	2300      	movne	r3, #0
 80085b2:	eba6 0807 	sub.w	r8, r6, r7
 80085b6:	608b      	str	r3, [r1, #8]
 80085b8:	f1b8 0f00 	cmp.w	r8, #0
 80085bc:	dde9      	ble.n	8008592 <__sflush_r+0xae>
 80085be:	6a21      	ldr	r1, [r4, #32]
 80085c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085c2:	4643      	mov	r3, r8
 80085c4:	463a      	mov	r2, r7
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b0      	blx	r6
 80085ca:	2800      	cmp	r0, #0
 80085cc:	dc08      	bgt.n	80085e0 <__sflush_r+0xfc>
 80085ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	4407      	add	r7, r0
 80085e2:	eba8 0800 	sub.w	r8, r8, r0
 80085e6:	e7e7      	b.n	80085b8 <__sflush_r+0xd4>
 80085e8:	dfbffffe 	.word	0xdfbffffe

080085ec <_fflush_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	4605      	mov	r5, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	b913      	cbnz	r3, 80085fc <_fflush_r+0x10>
 80085f6:	2500      	movs	r5, #0
 80085f8:	4628      	mov	r0, r5
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	b118      	cbz	r0, 8008606 <_fflush_r+0x1a>
 80085fe:	6a03      	ldr	r3, [r0, #32]
 8008600:	b90b      	cbnz	r3, 8008606 <_fflush_r+0x1a>
 8008602:	f7ff f927 	bl	8007854 <__sinit>
 8008606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f3      	beq.n	80085f6 <_fflush_r+0xa>
 800860e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008610:	07d0      	lsls	r0, r2, #31
 8008612:	d404      	bmi.n	800861e <_fflush_r+0x32>
 8008614:	0599      	lsls	r1, r3, #22
 8008616:	d402      	bmi.n	800861e <_fflush_r+0x32>
 8008618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861a:	f7ff fa40 	bl	8007a9e <__retarget_lock_acquire_recursive>
 800861e:	4628      	mov	r0, r5
 8008620:	4621      	mov	r1, r4
 8008622:	f7ff ff5f 	bl	80084e4 <__sflush_r>
 8008626:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008628:	07da      	lsls	r2, r3, #31
 800862a:	4605      	mov	r5, r0
 800862c:	d4e4      	bmi.n	80085f8 <_fflush_r+0xc>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	059b      	lsls	r3, r3, #22
 8008632:	d4e1      	bmi.n	80085f8 <_fflush_r+0xc>
 8008634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008636:	f7ff fa33 	bl	8007aa0 <__retarget_lock_release_recursive>
 800863a:	e7dd      	b.n	80085f8 <_fflush_r+0xc>

0800863c <__swbuf_r>:
 800863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800863e:	460e      	mov	r6, r1
 8008640:	4614      	mov	r4, r2
 8008642:	4605      	mov	r5, r0
 8008644:	b118      	cbz	r0, 800864e <__swbuf_r+0x12>
 8008646:	6a03      	ldr	r3, [r0, #32]
 8008648:	b90b      	cbnz	r3, 800864e <__swbuf_r+0x12>
 800864a:	f7ff f903 	bl	8007854 <__sinit>
 800864e:	69a3      	ldr	r3, [r4, #24]
 8008650:	60a3      	str	r3, [r4, #8]
 8008652:	89a3      	ldrh	r3, [r4, #12]
 8008654:	071a      	lsls	r2, r3, #28
 8008656:	d501      	bpl.n	800865c <__swbuf_r+0x20>
 8008658:	6923      	ldr	r3, [r4, #16]
 800865a:	b943      	cbnz	r3, 800866e <__swbuf_r+0x32>
 800865c:	4621      	mov	r1, r4
 800865e:	4628      	mov	r0, r5
 8008660:	f000 f82a 	bl	80086b8 <__swsetup_r>
 8008664:	b118      	cbz	r0, 800866e <__swbuf_r+0x32>
 8008666:	f04f 37ff 	mov.w	r7, #4294967295
 800866a:	4638      	mov	r0, r7
 800866c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800866e:	6823      	ldr	r3, [r4, #0]
 8008670:	6922      	ldr	r2, [r4, #16]
 8008672:	1a98      	subs	r0, r3, r2
 8008674:	6963      	ldr	r3, [r4, #20]
 8008676:	b2f6      	uxtb	r6, r6
 8008678:	4283      	cmp	r3, r0
 800867a:	4637      	mov	r7, r6
 800867c:	dc05      	bgt.n	800868a <__swbuf_r+0x4e>
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f7ff ffb3 	bl	80085ec <_fflush_r>
 8008686:	2800      	cmp	r0, #0
 8008688:	d1ed      	bne.n	8008666 <__swbuf_r+0x2a>
 800868a:	68a3      	ldr	r3, [r4, #8]
 800868c:	3b01      	subs	r3, #1
 800868e:	60a3      	str	r3, [r4, #8]
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	1c5a      	adds	r2, r3, #1
 8008694:	6022      	str	r2, [r4, #0]
 8008696:	701e      	strb	r6, [r3, #0]
 8008698:	6962      	ldr	r2, [r4, #20]
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	429a      	cmp	r2, r3
 800869e:	d004      	beq.n	80086aa <__swbuf_r+0x6e>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	07db      	lsls	r3, r3, #31
 80086a4:	d5e1      	bpl.n	800866a <__swbuf_r+0x2e>
 80086a6:	2e0a      	cmp	r6, #10
 80086a8:	d1df      	bne.n	800866a <__swbuf_r+0x2e>
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f7ff ff9d 	bl	80085ec <_fflush_r>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d0d9      	beq.n	800866a <__swbuf_r+0x2e>
 80086b6:	e7d6      	b.n	8008666 <__swbuf_r+0x2a>

080086b8 <__swsetup_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4b29      	ldr	r3, [pc, #164]	@ (8008760 <__swsetup_r+0xa8>)
 80086bc:	4605      	mov	r5, r0
 80086be:	6818      	ldr	r0, [r3, #0]
 80086c0:	460c      	mov	r4, r1
 80086c2:	b118      	cbz	r0, 80086cc <__swsetup_r+0x14>
 80086c4:	6a03      	ldr	r3, [r0, #32]
 80086c6:	b90b      	cbnz	r3, 80086cc <__swsetup_r+0x14>
 80086c8:	f7ff f8c4 	bl	8007854 <__sinit>
 80086cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086d0:	0719      	lsls	r1, r3, #28
 80086d2:	d422      	bmi.n	800871a <__swsetup_r+0x62>
 80086d4:	06da      	lsls	r2, r3, #27
 80086d6:	d407      	bmi.n	80086e8 <__swsetup_r+0x30>
 80086d8:	2209      	movs	r2, #9
 80086da:	602a      	str	r2, [r5, #0]
 80086dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e0:	81a3      	strh	r3, [r4, #12]
 80086e2:	f04f 30ff 	mov.w	r0, #4294967295
 80086e6:	e033      	b.n	8008750 <__swsetup_r+0x98>
 80086e8:	0758      	lsls	r0, r3, #29
 80086ea:	d512      	bpl.n	8008712 <__swsetup_r+0x5a>
 80086ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086ee:	b141      	cbz	r1, 8008702 <__swsetup_r+0x4a>
 80086f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086f4:	4299      	cmp	r1, r3
 80086f6:	d002      	beq.n	80086fe <__swsetup_r+0x46>
 80086f8:	4628      	mov	r0, r5
 80086fa:	f7ff f9d3 	bl	8007aa4 <_free_r>
 80086fe:	2300      	movs	r3, #0
 8008700:	6363      	str	r3, [r4, #52]	@ 0x34
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	2300      	movs	r3, #0
 800870c:	6063      	str	r3, [r4, #4]
 800870e:	6923      	ldr	r3, [r4, #16]
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	89a3      	ldrh	r3, [r4, #12]
 8008714:	f043 0308 	orr.w	r3, r3, #8
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	6923      	ldr	r3, [r4, #16]
 800871c:	b94b      	cbnz	r3, 8008732 <__swsetup_r+0x7a>
 800871e:	89a3      	ldrh	r3, [r4, #12]
 8008720:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008724:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008728:	d003      	beq.n	8008732 <__swsetup_r+0x7a>
 800872a:	4621      	mov	r1, r4
 800872c:	4628      	mov	r0, r5
 800872e:	f000 f8a5 	bl	800887c <__smakebuf_r>
 8008732:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008736:	f013 0201 	ands.w	r2, r3, #1
 800873a:	d00a      	beq.n	8008752 <__swsetup_r+0x9a>
 800873c:	2200      	movs	r2, #0
 800873e:	60a2      	str	r2, [r4, #8]
 8008740:	6962      	ldr	r2, [r4, #20]
 8008742:	4252      	negs	r2, r2
 8008744:	61a2      	str	r2, [r4, #24]
 8008746:	6922      	ldr	r2, [r4, #16]
 8008748:	b942      	cbnz	r2, 800875c <__swsetup_r+0xa4>
 800874a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800874e:	d1c5      	bne.n	80086dc <__swsetup_r+0x24>
 8008750:	bd38      	pop	{r3, r4, r5, pc}
 8008752:	0799      	lsls	r1, r3, #30
 8008754:	bf58      	it	pl
 8008756:	6962      	ldrpl	r2, [r4, #20]
 8008758:	60a2      	str	r2, [r4, #8]
 800875a:	e7f4      	b.n	8008746 <__swsetup_r+0x8e>
 800875c:	2000      	movs	r0, #0
 800875e:	e7f7      	b.n	8008750 <__swsetup_r+0x98>
 8008760:	200000b8 	.word	0x200000b8

08008764 <memmove>:
 8008764:	4288      	cmp	r0, r1
 8008766:	b510      	push	{r4, lr}
 8008768:	eb01 0402 	add.w	r4, r1, r2
 800876c:	d902      	bls.n	8008774 <memmove+0x10>
 800876e:	4284      	cmp	r4, r0
 8008770:	4623      	mov	r3, r4
 8008772:	d807      	bhi.n	8008784 <memmove+0x20>
 8008774:	1e43      	subs	r3, r0, #1
 8008776:	42a1      	cmp	r1, r4
 8008778:	d008      	beq.n	800878c <memmove+0x28>
 800877a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800877e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008782:	e7f8      	b.n	8008776 <memmove+0x12>
 8008784:	4402      	add	r2, r0
 8008786:	4601      	mov	r1, r0
 8008788:	428a      	cmp	r2, r1
 800878a:	d100      	bne.n	800878e <memmove+0x2a>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008796:	e7f7      	b.n	8008788 <memmove+0x24>

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	@ (80087b4 <_sbrk_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7f9 f99a 	bl	8001adc <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	200006fc 	.word	0x200006fc

080087b8 <memcpy>:
 80087b8:	440a      	add	r2, r1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80087c0:	d100      	bne.n	80087c4 <memcpy+0xc>
 80087c2:	4770      	bx	lr
 80087c4:	b510      	push	{r4, lr}
 80087c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ce:	4291      	cmp	r1, r2
 80087d0:	d1f9      	bne.n	80087c6 <memcpy+0xe>
 80087d2:	bd10      	pop	{r4, pc}

080087d4 <_realloc_r>:
 80087d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d8:	4680      	mov	r8, r0
 80087da:	4615      	mov	r5, r2
 80087dc:	460c      	mov	r4, r1
 80087de:	b921      	cbnz	r1, 80087ea <_realloc_r+0x16>
 80087e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087e4:	4611      	mov	r1, r2
 80087e6:	f7ff b9c9 	b.w	8007b7c <_malloc_r>
 80087ea:	b92a      	cbnz	r2, 80087f8 <_realloc_r+0x24>
 80087ec:	f7ff f95a 	bl	8007aa4 <_free_r>
 80087f0:	2400      	movs	r4, #0
 80087f2:	4620      	mov	r0, r4
 80087f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087f8:	f000 f89e 	bl	8008938 <_malloc_usable_size_r>
 80087fc:	4285      	cmp	r5, r0
 80087fe:	4606      	mov	r6, r0
 8008800:	d802      	bhi.n	8008808 <_realloc_r+0x34>
 8008802:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008806:	d8f4      	bhi.n	80087f2 <_realloc_r+0x1e>
 8008808:	4629      	mov	r1, r5
 800880a:	4640      	mov	r0, r8
 800880c:	f7ff f9b6 	bl	8007b7c <_malloc_r>
 8008810:	4607      	mov	r7, r0
 8008812:	2800      	cmp	r0, #0
 8008814:	d0ec      	beq.n	80087f0 <_realloc_r+0x1c>
 8008816:	42b5      	cmp	r5, r6
 8008818:	462a      	mov	r2, r5
 800881a:	4621      	mov	r1, r4
 800881c:	bf28      	it	cs
 800881e:	4632      	movcs	r2, r6
 8008820:	f7ff ffca 	bl	80087b8 <memcpy>
 8008824:	4621      	mov	r1, r4
 8008826:	4640      	mov	r0, r8
 8008828:	f7ff f93c 	bl	8007aa4 <_free_r>
 800882c:	463c      	mov	r4, r7
 800882e:	e7e0      	b.n	80087f2 <_realloc_r+0x1e>

08008830 <__swhatbuf_r>:
 8008830:	b570      	push	{r4, r5, r6, lr}
 8008832:	460c      	mov	r4, r1
 8008834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008838:	2900      	cmp	r1, #0
 800883a:	b096      	sub	sp, #88	@ 0x58
 800883c:	4615      	mov	r5, r2
 800883e:	461e      	mov	r6, r3
 8008840:	da0d      	bge.n	800885e <__swhatbuf_r+0x2e>
 8008842:	89a3      	ldrh	r3, [r4, #12]
 8008844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008848:	f04f 0100 	mov.w	r1, #0
 800884c:	bf14      	ite	ne
 800884e:	2340      	movne	r3, #64	@ 0x40
 8008850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008854:	2000      	movs	r0, #0
 8008856:	6031      	str	r1, [r6, #0]
 8008858:	602b      	str	r3, [r5, #0]
 800885a:	b016      	add	sp, #88	@ 0x58
 800885c:	bd70      	pop	{r4, r5, r6, pc}
 800885e:	466a      	mov	r2, sp
 8008860:	f000 f848 	bl	80088f4 <_fstat_r>
 8008864:	2800      	cmp	r0, #0
 8008866:	dbec      	blt.n	8008842 <__swhatbuf_r+0x12>
 8008868:	9901      	ldr	r1, [sp, #4]
 800886a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800886e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008872:	4259      	negs	r1, r3
 8008874:	4159      	adcs	r1, r3
 8008876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800887a:	e7eb      	b.n	8008854 <__swhatbuf_r+0x24>

0800887c <__smakebuf_r>:
 800887c:	898b      	ldrh	r3, [r1, #12]
 800887e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008880:	079d      	lsls	r5, r3, #30
 8008882:	4606      	mov	r6, r0
 8008884:	460c      	mov	r4, r1
 8008886:	d507      	bpl.n	8008898 <__smakebuf_r+0x1c>
 8008888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	2301      	movs	r3, #1
 8008892:	6163      	str	r3, [r4, #20]
 8008894:	b003      	add	sp, #12
 8008896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008898:	ab01      	add	r3, sp, #4
 800889a:	466a      	mov	r2, sp
 800889c:	f7ff ffc8 	bl	8008830 <__swhatbuf_r>
 80088a0:	9f00      	ldr	r7, [sp, #0]
 80088a2:	4605      	mov	r5, r0
 80088a4:	4639      	mov	r1, r7
 80088a6:	4630      	mov	r0, r6
 80088a8:	f7ff f968 	bl	8007b7c <_malloc_r>
 80088ac:	b948      	cbnz	r0, 80088c2 <__smakebuf_r+0x46>
 80088ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b2:	059a      	lsls	r2, r3, #22
 80088b4:	d4ee      	bmi.n	8008894 <__smakebuf_r+0x18>
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	f043 0302 	orr.w	r3, r3, #2
 80088be:	81a3      	strh	r3, [r4, #12]
 80088c0:	e7e2      	b.n	8008888 <__smakebuf_r+0xc>
 80088c2:	89a3      	ldrh	r3, [r4, #12]
 80088c4:	6020      	str	r0, [r4, #0]
 80088c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ca:	81a3      	strh	r3, [r4, #12]
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80088d2:	b15b      	cbz	r3, 80088ec <__smakebuf_r+0x70>
 80088d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088d8:	4630      	mov	r0, r6
 80088da:	f000 f81d 	bl	8008918 <_isatty_r>
 80088de:	b128      	cbz	r0, 80088ec <__smakebuf_r+0x70>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	f023 0303 	bic.w	r3, r3, #3
 80088e6:	f043 0301 	orr.w	r3, r3, #1
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	89a3      	ldrh	r3, [r4, #12]
 80088ee:	431d      	orrs	r5, r3
 80088f0:	81a5      	strh	r5, [r4, #12]
 80088f2:	e7cf      	b.n	8008894 <__smakebuf_r+0x18>

080088f4 <_fstat_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	@ (8008914 <_fstat_r+0x20>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	4611      	mov	r1, r2
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	f7f9 f8c2 	bl	8001a8a <_fstat>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d102      	bne.n	8008910 <_fstat_r+0x1c>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	b103      	cbz	r3, 8008910 <_fstat_r+0x1c>
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	bf00      	nop
 8008914:	200006fc 	.word	0x200006fc

08008918 <_isatty_r>:
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4d06      	ldr	r5, [pc, #24]	@ (8008934 <_isatty_r+0x1c>)
 800891c:	2300      	movs	r3, #0
 800891e:	4604      	mov	r4, r0
 8008920:	4608      	mov	r0, r1
 8008922:	602b      	str	r3, [r5, #0]
 8008924:	f7f9 f8c1 	bl	8001aaa <_isatty>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_isatty_r+0x1a>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_isatty_r+0x1a>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	200006fc 	.word	0x200006fc

08008938 <_malloc_usable_size_r>:
 8008938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800893c:	1f18      	subs	r0, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	bfbc      	itt	lt
 8008942:	580b      	ldrlt	r3, [r1, r0]
 8008944:	18c0      	addlt	r0, r0, r3
 8008946:	4770      	bx	lr

08008948 <_init>:
 8008948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894a:	bf00      	nop
 800894c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800894e:	bc08      	pop	{r3}
 8008950:	469e      	mov	lr, r3
 8008952:	4770      	bx	lr

08008954 <_fini>:
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008956:	bf00      	nop
 8008958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895a:	bc08      	pop	{r3}
 800895c:	469e      	mov	lr, r3
 800895e:	4770      	bx	lr
