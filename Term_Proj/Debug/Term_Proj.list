
Term_Proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000881c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  080089ac  080089ac  000099ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ba8  08008ba8  0000a108  2**0
                  CONTENTS
  4 .ARM          00000008  08008ba8  08008ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bb0  08008bb0  0000a108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bb0  08008bb0  00009bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bb4  08008bb4  00009bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000108  20000000  08008bb8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a0  20000108  08008cc0  0000a108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a8  08008cc0  0000a7a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d8b  00000000  00000000  0000a138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e00  00000000  00000000  00020ec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001420  00000000  00000000  00023cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fa3  00000000  00000000  000250e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a698  00000000  00000000  0002608b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182c3  00000000  00000000  00050723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001081fd  00000000  00000000  000689e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00170be3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e1c  00000000  00000000  00170c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00176a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000108 	.word	0x20000108
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008994 	.word	0x08008994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000010c 	.word	0x2000010c
 80001cc:	08008994 	.word	0x08008994

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <controller_init>:
/**
 * @brief A function to initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_init(controller_t* p_cont){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

	//initialize the motor driver channels
	start_PWM(p_cont->p_mot);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 fec5 	bl	80012fc <start_PWM>

	//initialize the encoder reader channels
	init_channels(p_cont->p_enc);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	685b      	ldr	r3, [r3, #4]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f862 	bl	8000640 <init_channels>


}
 800057c:	bf00      	nop
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}

08000584 <controller_deinit>:
/**
 * @brief A function to de-initialize all of the timer channels.
 *
 * @param p_cont The controller object to perform the function on.
 */
void controller_deinit(controller_t* p_cont){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

	//de-initialize the motor driver channels
	stop_PWM(p_cont->p_mot);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4618      	mov	r0, r3
 8000592:	f000 fec4 	bl	800131e <stop_PWM>

	//de-initialize the encoder reader channels
	deinit_channels(p_cont->p_enc);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	685b      	ldr	r3, [r3, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	f000 f85e 	bl	800065c <deinit_channels>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <move>:
/**
 * @brief A function to move the controlled motor to the desired position.
 *
 * @param p_cont The controller object to perform the function on.
 */
int32_t move(controller_t* p_cont){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]

	//The pwm value should range from 0 to 799,999

	//calculate the desired PWM value using the gain and setpoint.

	int curr_pos = get_pos(p_cont->p_enc);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 f85f 	bl	8000678 <get_pos>
 80005ba:	60f8      	str	r0, [r7, #12]

	p_cont->p_mot->pwm_val = p_cont->gain*(p_cont->setpoint - curr_pos);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	68d9      	ldr	r1, [r3, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	1ac9      	subs	r1, r1, r3
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	fb01 f202 	mul.w	r2, r1, r2
 80005d0:	601a      	str	r2, [r3, #0]

	//saturation
	if(p_cont->p_mot->pwm_val > 799999)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a10      	ldr	r2, [pc, #64]	@ (800061c <move+0x74>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	dd04      	ble.n	80005e8 <move+0x40>
	{
		p_cont->p_mot->pwm_val = 799999;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a0e      	ldr	r2, [pc, #56]	@ (800061c <move+0x74>)
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	e009      	b.n	80005fc <move+0x54>
	}
	else if(p_cont->p_mot->pwm_val < -799999){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <move+0x78>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	da03      	bge.n	80005fc <move+0x54>

		p_cont->p_mot->pwm_val = -799999;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a09      	ldr	r2, [pc, #36]	@ (8000620 <move+0x78>)
 80005fa:	601a      	str	r2, [r3, #0]

	//might also want to add in some sort of sensitivity like if its below a certain
	//threshold we make it zero

	//set the duty cycle of the motor
	set_duty(p_cont->p_mot, p_cont->p_mot->pwm_val);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4619      	mov	r1, r3
 8000608:	4610      	mov	r0, r2
 800060a:	f000 fe99 	bl	8001340 <set_duty>

	//return the pwm_val for monitoring
	return p_cont->p_mot->pwm_val;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]

}
 8000614:	4618      	mov	r0, r3
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	000c34ff 	.word	0x000c34ff
 8000620:	fff3cb01 	.word	0xfff3cb01

08000624 <set_setpoint>:
 * @brief A function to set the new controller set point.
 *
 * @param p_cont The controller object to perform the function on.
 * @param new_setpoint The new set point for the controller object.
 */
void set_setpoint(controller_t* p_cont, int32_t new_setpoint){
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]

	p_cont->setpoint = new_setpoint;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	60da      	str	r2, [r3, #12]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <init_channels>:
/**
 * @brief A function to initialize the channels for reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void init_channels(encoder_t* p_enc){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Start(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	213c      	movs	r1, #60	@ 0x3c
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f940 	bl	80058d4 <HAL_TIM_Encoder_Start>
	//HAL_TIM_Encoder_Start(p_enc->hal_tim,  p_enc->channel2);
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <deinit_channels>:
/**
 * @brief A function to stop the channels from reading the encoder signals.
 *
 * @param p_enc The encoder object to perform the function on.
 */
void deinit_channels(encoder_t* p_enc){
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	//probably some sort of HAL thing
	HAL_TIM_Encoder_Stop(p_enc->hal_tim,  TIM_CHANNEL_ALL);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	213c      	movs	r1, #60	@ 0x3c
 800066a:	4618      	mov	r0, r3
 800066c:	f005 f9c0 	bl	80059f0 <HAL_TIM_Encoder_Stop>
	//HAL_TIM_Encoder_Stop(p_enc->hal_tim,  p_enc->channel2);
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}

08000678 <get_pos>:
 * @param p_enc The encoder object to perform the function on.
 *
 * @return count The encoder count to be returned.
 */

uint16_t get_pos(encoder_t* p_enc){
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]

	p_enc->prev_count = p_enc->curr_count;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	821a      	strh	r2, [r3, #16]
	p_enc->curr_count = __HAL_TIM_GET_COUNTER(p_enc->hal_tim);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000692:	b21a      	sxth	r2, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	81da      	strh	r2, [r3, #14]

	p_enc->delta = p_enc->curr_count - p_enc->prev_count;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800069e:	b29a      	uxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	1ad3      	subs	r3, r2, r3
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	b21a      	sxth	r2, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	825a      	strh	r2, [r3, #18]
	//address overflow issues
	if(p_enc->delta >= 32768){

		p_enc->delta -= 65536;
	}
	else if(p_enc->delta <= -32768){
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80006b8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80006bc:	d104      	bne.n	80006c8 <get_pos+0x50>

		p_enc->delta += 65536;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	825a      	strh	r2, [r3, #18]
	}

	p_enc->mot_pos += p_enc->delta;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b29b      	uxth	r3, r3
 80006dc:	b21a      	sxth	r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	819a      	strh	r2, [r3, #12]


	return p_enc->mot_pos;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80006e8:	b29b      	uxth	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
	...

080006f8 <task1>:
/**
 * @brief Task 1, the hand task, is responsible for moving the prosthetic hand fingers based on the
 * 		  set point determined by the myoelectric sensor.
 */
// Task 1 - HAND TASK
void task1(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 80006fc:	4b46      	ldr	r3, [pc, #280]	@ (8000818 <task1+0x120>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d11a      	bne.n	800073a <task1+0x42>

		n = sprintf(print_buff,"\n\rTask 1, State 0\n");
 8000704:	4945      	ldr	r1, [pc, #276]	@ (800081c <task1+0x124>)
 8000706:	4846      	ldr	r0, [pc, #280]	@ (8000820 <task1+0x128>)
 8000708:	f007 f912 	bl	8007930 <siprintf>
 800070c:	4603      	mov	r3, r0
 800070e:	4a45      	ldr	r2, [pc, #276]	@ (8000824 <task1+0x12c>)
 8000710:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 8000712:	4b44      	ldr	r3, [pc, #272]	@ (8000824 <task1+0x12c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	b29a      	uxth	r2, r3
 8000718:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800071c:	4940      	ldr	r1, [pc, #256]	@ (8000820 <task1+0x128>)
 800071e:	4842      	ldr	r0, [pc, #264]	@ (8000828 <task1+0x130>)
 8000720:	f006 fada 	bl	8006cd8 <HAL_UART_Transmit>

		//init the motor driver PWM channel and the
		//the encoder channels
		controller_init(&hand_cont);
 8000724:	4841      	ldr	r0, [pc, #260]	@ (800082c <task1+0x134>)
 8000726:	f7ff ff1b 	bl	8000560 <controller_init>

		//initialize the motor to be at rest
		set_duty(&hand_mot,0);
 800072a:	2100      	movs	r1, #0
 800072c:	4840      	ldr	r0, [pc, #256]	@ (8000830 <task1+0x138>)
 800072e:	f000 fe07 	bl	8001340 <set_duty>

		currentState = 1;}
 8000732:	4b39      	ldr	r3, [pc, #228]	@ (8000818 <task1+0x120>)
 8000734:	2201      	movs	r2, #1
 8000736:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);

		currentState = 1;}
}
 8000738:	e06c      	b.n	8000814 <task1+0x11c>
	else if (currentState == 1) {
 800073a:	4b37      	ldr	r3, [pc, #220]	@ (8000818 <task1+0x120>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d121      	bne.n	8000786 <task1+0x8e>
		n = sprintf(print_buff,"\n\rTask 1, State 1\n");
 8000742:	493c      	ldr	r1, [pc, #240]	@ (8000834 <task1+0x13c>)
 8000744:	4836      	ldr	r0, [pc, #216]	@ (8000820 <task1+0x128>)
 8000746:	f007 f8f3 	bl	8007930 <siprintf>
 800074a:	4603      	mov	r3, r0
 800074c:	4a35      	ldr	r2, [pc, #212]	@ (8000824 <task1+0x12c>)
 800074e:	6013      	str	r3, [r2, #0]
		hmyo_prev = hmyo_curr;
 8000750:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <task1+0x140>)
 8000752:	881a      	ldrh	r2, [r3, #0]
 8000754:	4b39      	ldr	r3, [pc, #228]	@ (800083c <task1+0x144>)
 8000756:	801a      	strh	r2, [r3, #0]
		hmyo_curr = read_current(&hmyo);
 8000758:	4839      	ldr	r0, [pc, #228]	@ (8000840 <task1+0x148>)
 800075a:	f000 feda 	bl	8001512 <read_current>
 800075e:	4603      	mov	r3, r0
 8000760:	461a      	mov	r2, r3
 8000762:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <task1+0x140>)
 8000764:	801a      	strh	r2, [r3, #0]
		hmyo_delta = hmyo_curr - hmyo_prev;
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <task1+0x140>)
 8000768:	881a      	ldrh	r2, [r3, #0]
 800076a:	4b34      	ldr	r3, [pc, #208]	@ (800083c <task1+0x144>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	1ad3      	subs	r3, r2, r3
 8000770:	b29a      	uxth	r2, r3
 8000772:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <task1+0x14c>)
 8000774:	801a      	strh	r2, [r3, #0]
		if(abs(hmyo_delta) > 50){
 8000776:	4b33      	ldr	r3, [pc, #204]	@ (8000844 <task1+0x14c>)
 8000778:	881b      	ldrh	r3, [r3, #0]
 800077a:	2b32      	cmp	r3, #50	@ 0x32
 800077c:	d94a      	bls.n	8000814 <task1+0x11c>
			currentState = 2;
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <task1+0x120>)
 8000780:	2202      	movs	r2, #2
 8000782:	601a      	str	r2, [r3, #0]
}
 8000784:	e046      	b.n	8000814 <task1+0x11c>
	else if (currentState == 2) {
 8000786:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <task1+0x120>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d138      	bne.n	8000800 <task1+0x108>
		n = sprintf(print_buff,"\n\rTask 1, State 2\n");
 800078e:	492e      	ldr	r1, [pc, #184]	@ (8000848 <task1+0x150>)
 8000790:	4823      	ldr	r0, [pc, #140]	@ (8000820 <task1+0x128>)
 8000792:	f007 f8cd 	bl	8007930 <siprintf>
 8000796:	4603      	mov	r3, r0
 8000798:	4a22      	ldr	r2, [pc, #136]	@ (8000824 <task1+0x12c>)
 800079a:	6013      	str	r3, [r2, #0]
		hand_mot_pos += hmyo_delta; //probably need some sort of scaling factor here
 800079c:	4b2b      	ldr	r3, [pc, #172]	@ (800084c <task1+0x154>)
 800079e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <task1+0x14c>)
 80007a6:	881b      	ldrh	r3, [r3, #0]
 80007a8:	4413      	add	r3, r2
 80007aa:	b29b      	uxth	r3, r3
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	4b27      	ldr	r3, [pc, #156]	@ (800084c <task1+0x154>)
 80007b0:	801a      	strh	r2, [r3, #0]
		if(hand_mot_pos > 300)//set max value for the motor position here
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <task1+0x154>)
 80007b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80007bc:	dd04      	ble.n	80007c8 <task1+0xd0>
			hand_mot_pos = 300;
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <task1+0x154>)
 80007c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80007c4:	801a      	strh	r2, [r3, #0]
 80007c6:	e007      	b.n	80007d8 <task1+0xe0>
		else if (hand_mot_pos < 0)
 80007c8:	4b20      	ldr	r3, [pc, #128]	@ (800084c <task1+0x154>)
 80007ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	da02      	bge.n	80007d8 <task1+0xe0>
			hand_mot_pos = 0;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <task1+0x154>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	801a      	strh	r2, [r3, #0]
		set_setpoint(&hand_cont, hand_mot_pos);
 80007d8:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <task1+0x154>)
 80007da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007de:	4619      	mov	r1, r3
 80007e0:	4812      	ldr	r0, [pc, #72]	@ (800082c <task1+0x134>)
 80007e2:	f7ff ff1f 	bl	8000624 <set_setpoint>
		move(&hand_cont);
 80007e6:	4811      	ldr	r0, [pc, #68]	@ (800082c <task1+0x134>)
 80007e8:	f7ff fede 	bl	80005a8 <move>
		if(move(&hand_cont) < 5){
 80007ec:	480f      	ldr	r0, [pc, #60]	@ (800082c <task1+0x134>)
 80007ee:	f7ff fedb 	bl	80005a8 <move>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	dc0d      	bgt.n	8000814 <task1+0x11c>
			currentState = 1;
 80007f8:	4b07      	ldr	r3, [pc, #28]	@ (8000818 <task1+0x120>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	601a      	str	r2, [r3, #0]
}
 80007fe:	e009      	b.n	8000814 <task1+0x11c>
		n = sprintf(print_buff,"\n\rTask 1, Invalid State. Reset to State 1\n");
 8000800:	4913      	ldr	r1, [pc, #76]	@ (8000850 <task1+0x158>)
 8000802:	4807      	ldr	r0, [pc, #28]	@ (8000820 <task1+0x128>)
 8000804:	f007 f894 	bl	8007930 <siprintf>
 8000808:	4603      	mov	r3, r0
 800080a:	4a06      	ldr	r2, [pc, #24]	@ (8000824 <task1+0x12c>)
 800080c:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800080e:	4b02      	ldr	r3, [pc, #8]	@ (8000818 <task1+0x120>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20000470 	.word	0x20000470
 800081c:	080089ac 	.word	0x080089ac
 8000820:	20000474 	.word	0x20000474
 8000824:	2000050c 	.word	0x2000050c
 8000828:	20000334 	.word	0x20000334
 800082c:	20000070 	.word	0x20000070
 8000830:	20000000 	.word	0x20000000
 8000834:	080089c0 	.word	0x080089c0
 8000838:	200003c6 	.word	0x200003c6
 800083c:	200003c8 	.word	0x200003c8
 8000840:	20000090 	.word	0x20000090
 8000844:	200003ce 	.word	0x200003ce
 8000848:	080089d4 	.word	0x080089d4
 800084c:	200003c2 	.word	0x200003c2
 8000850:	080089e8 	.word	0x080089e8

08000854 <task2>:
/**
 * @brief Task 2, the spin motor task, is responsible for rotating the prosthetic hand based
 * 		  on the set point determined by the myoelectric sensor alone.
 */
// Task 2 - SPIN MOTOR TASK
void task2(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 8000858:	4b46      	ldr	r3, [pc, #280]	@ (8000974 <task2+0x120>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d11a      	bne.n	8000896 <task2+0x42>

		n = sprintf(print_buff,"\n\rTask 2, State 0\n");
 8000860:	4945      	ldr	r1, [pc, #276]	@ (8000978 <task2+0x124>)
 8000862:	4846      	ldr	r0, [pc, #280]	@ (800097c <task2+0x128>)
 8000864:	f007 f864 	bl	8007930 <siprintf>
 8000868:	4603      	mov	r3, r0
 800086a:	4a45      	ldr	r2, [pc, #276]	@ (8000980 <task2+0x12c>)
 800086c:	6013      	str	r3, [r2, #0]
		//change back to huart4
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 800086e:	4b44      	ldr	r3, [pc, #272]	@ (8000980 <task2+0x12c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	b29a      	uxth	r2, r3
 8000874:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000878:	4940      	ldr	r1, [pc, #256]	@ (800097c <task2+0x128>)
 800087a:	4842      	ldr	r0, [pc, #264]	@ (8000984 <task2+0x130>)
 800087c:	f006 fa2c 	bl	8006cd8 <HAL_UART_Transmit>

		//initiaize the motor driver PWM channel and the
		//the encoder channels
		controller_init(&spin_cont);
 8000880:	4841      	ldr	r0, [pc, #260]	@ (8000988 <task2+0x134>)
 8000882:	f7ff fe6d 	bl	8000560 <controller_init>

		//initialize the motor to be at rest
		set_duty(&spin_mot,0);
 8000886:	2100      	movs	r1, #0
 8000888:	4840      	ldr	r0, [pc, #256]	@ (800098c <task2+0x138>)
 800088a:	f000 fd59 	bl	8001340 <set_duty>

		currentState = 1;}
 800088e:	4b39      	ldr	r3, [pc, #228]	@ (8000974 <task2+0x120>)
 8000890:	2201      	movs	r2, #1
 8000892:	601a      	str	r2, [r3, #0]

	else {
		n = sprintf(print_buff,"\n\rTask 2, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;}
}
 8000894:	e06c      	b.n	8000970 <task2+0x11c>
	else if (currentState == 1) {
 8000896:	4b37      	ldr	r3, [pc, #220]	@ (8000974 <task2+0x120>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d121      	bne.n	80008e2 <task2+0x8e>
		n = sprintf(print_buff,"\n\rTask 2, State 1\n");
 800089e:	493c      	ldr	r1, [pc, #240]	@ (8000990 <task2+0x13c>)
 80008a0:	4836      	ldr	r0, [pc, #216]	@ (800097c <task2+0x128>)
 80008a2:	f007 f845 	bl	8007930 <siprintf>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a35      	ldr	r2, [pc, #212]	@ (8000980 <task2+0x12c>)
 80008aa:	6013      	str	r3, [r2, #0]
		smyo_prev = smyo_curr;
 80008ac:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <task2+0x140>)
 80008ae:	881a      	ldrh	r2, [r3, #0]
 80008b0:	4b39      	ldr	r3, [pc, #228]	@ (8000998 <task2+0x144>)
 80008b2:	801a      	strh	r2, [r3, #0]
		smyo_curr = read_current(&smyo);
 80008b4:	4839      	ldr	r0, [pc, #228]	@ (800099c <task2+0x148>)
 80008b6:	f000 fe2c 	bl	8001512 <read_current>
 80008ba:	4603      	mov	r3, r0
 80008bc:	461a      	mov	r2, r3
 80008be:	4b35      	ldr	r3, [pc, #212]	@ (8000994 <task2+0x140>)
 80008c0:	801a      	strh	r2, [r3, #0]
		smyo_delta = smyo_curr - smyo_prev;
 80008c2:	4b34      	ldr	r3, [pc, #208]	@ (8000994 <task2+0x140>)
 80008c4:	881a      	ldrh	r2, [r3, #0]
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <task2+0x144>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b34      	ldr	r3, [pc, #208]	@ (80009a0 <task2+0x14c>)
 80008d0:	801a      	strh	r2, [r3, #0]
			if(abs(smyo_delta) > 50){
 80008d2:	4b33      	ldr	r3, [pc, #204]	@ (80009a0 <task2+0x14c>)
 80008d4:	881b      	ldrh	r3, [r3, #0]
 80008d6:	2b32      	cmp	r3, #50	@ 0x32
 80008d8:	d94a      	bls.n	8000970 <task2+0x11c>
					currentState = 2;
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <task2+0x120>)
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
}
 80008e0:	e046      	b.n	8000970 <task2+0x11c>
	else if (currentState == 2) {
 80008e2:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <task2+0x120>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d138      	bne.n	800095c <task2+0x108>
		n = sprintf(print_buff,"\n\rTask 2, State 2\n");
 80008ea:	492e      	ldr	r1, [pc, #184]	@ (80009a4 <task2+0x150>)
 80008ec:	4823      	ldr	r0, [pc, #140]	@ (800097c <task2+0x128>)
 80008ee:	f007 f81f 	bl	8007930 <siprintf>
 80008f2:	4603      	mov	r3, r0
 80008f4:	4a22      	ldr	r2, [pc, #136]	@ (8000980 <task2+0x12c>)
 80008f6:	6013      	str	r3, [r2, #0]
		spin_mot_pos += smyo_delta; //probably need some sort of scaling factor here
 80008f8:	4b2b      	ldr	r3, [pc, #172]	@ (80009a8 <task2+0x154>)
 80008fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80008fe:	b29a      	uxth	r2, r3
 8000900:	4b27      	ldr	r3, [pc, #156]	@ (80009a0 <task2+0x14c>)
 8000902:	881b      	ldrh	r3, [r3, #0]
 8000904:	4413      	add	r3, r2
 8000906:	b29b      	uxth	r3, r3
 8000908:	b21a      	sxth	r2, r3
 800090a:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <task2+0x154>)
 800090c:	801a      	strh	r2, [r3, #0]
		if(spin_mot_pos > 300)//set max value for the motor position here
 800090e:	4b26      	ldr	r3, [pc, #152]	@ (80009a8 <task2+0x154>)
 8000910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000914:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8000918:	dd04      	ble.n	8000924 <task2+0xd0>
					spin_mot_pos = 300;
 800091a:	4b23      	ldr	r3, [pc, #140]	@ (80009a8 <task2+0x154>)
 800091c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	e007      	b.n	8000934 <task2+0xe0>
	    else if (spin_mot_pos < 0)
 8000924:	4b20      	ldr	r3, [pc, #128]	@ (80009a8 <task2+0x154>)
 8000926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800092a:	2b00      	cmp	r3, #0
 800092c:	da02      	bge.n	8000934 <task2+0xe0>
					spin_mot_pos = 0; //this should be the at rest position of the device
 800092e:	4b1e      	ldr	r3, [pc, #120]	@ (80009a8 <task2+0x154>)
 8000930:	2200      	movs	r2, #0
 8000932:	801a      	strh	r2, [r3, #0]
		set_setpoint(&spin_cont, spin_mot_pos);
 8000934:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <task2+0x154>)
 8000936:	f9b3 3000 	ldrsh.w	r3, [r3]
 800093a:	4619      	mov	r1, r3
 800093c:	4812      	ldr	r0, [pc, #72]	@ (8000988 <task2+0x134>)
 800093e:	f7ff fe71 	bl	8000624 <set_setpoint>
		move(&spin_cont);
 8000942:	4811      	ldr	r0, [pc, #68]	@ (8000988 <task2+0x134>)
 8000944:	f7ff fe30 	bl	80005a8 <move>
		if(move(&spin_cont) < 5){
 8000948:	480f      	ldr	r0, [pc, #60]	@ (8000988 <task2+0x134>)
 800094a:	f7ff fe2d 	bl	80005a8 <move>
 800094e:	4603      	mov	r3, r0
 8000950:	2b04      	cmp	r3, #4
 8000952:	dc0d      	bgt.n	8000970 <task2+0x11c>
					currentState = 1;
 8000954:	4b07      	ldr	r3, [pc, #28]	@ (8000974 <task2+0x120>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	e009      	b.n	8000970 <task2+0x11c>
		n = sprintf(print_buff,"\n\rTask 2, Invalid State. Reset to State 1\n");
 800095c:	4913      	ldr	r1, [pc, #76]	@ (80009ac <task2+0x158>)
 800095e:	4807      	ldr	r0, [pc, #28]	@ (800097c <task2+0x128>)
 8000960:	f006 ffe6 	bl	8007930 <siprintf>
 8000964:	4603      	mov	r3, r0
 8000966:	4a06      	ldr	r2, [pc, #24]	@ (8000980 <task2+0x12c>)
 8000968:	6013      	str	r3, [r2, #0]
		currentState = 1;}
 800096a:	4b02      	ldr	r3, [pc, #8]	@ (8000974 <task2+0x120>)
 800096c:	2201      	movs	r2, #1
 800096e:	601a      	str	r2, [r3, #0]
}
 8000970:	bf00      	nop
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000510 	.word	0x20000510
 8000978:	08008a14 	.word	0x08008a14
 800097c:	20000514 	.word	0x20000514
 8000980:	200005ac 	.word	0x200005ac
 8000984:	20000334 	.word	0x20000334
 8000988:	20000080 	.word	0x20000080
 800098c:	20000024 	.word	0x20000024
 8000990:	08008a28 	.word	0x08008a28
 8000994:	200003ca 	.word	0x200003ca
 8000998:	200003cc 	.word	0x200003cc
 800099c:	20000098 	.word	0x20000098
 80009a0:	200003d0 	.word	0x200003d0
 80009a4:	08008a3c 	.word	0x08008a3c
 80009a8:	200003c4 	.word	0x200003c4
 80009ac:	08008a50 	.word	0x08008a50

080009b0 <task3>:
/**
 * @brief Task 3, the wireless emergency stop task, is responsible for monitoring for a change in the
 * 	      PWM signal from a radio transmitter. If a change is detected, this task will end the program.
 */
// Task 3 - WIRELESS E STOP TASK
void task3(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	static int currentState = 0;
	static char print_buff[150];
	static int n;

	// State 0 - INIT
	if (currentState == 0) {
 80009b4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <task3+0xc0>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d11b      	bne.n	80009f4 <task3+0x44>

		n = sprintf(print_buff,"\n\rTask 3, State 0\n");
 80009bc:	492d      	ldr	r1, [pc, #180]	@ (8000a74 <task3+0xc4>)
 80009be:	482e      	ldr	r0, [pc, #184]	@ (8000a78 <task3+0xc8>)
 80009c0:	f006 ffb6 	bl	8007930 <siprintf>
 80009c4:	4603      	mov	r3, r0
 80009c6:	4a2d      	ldr	r2, [pc, #180]	@ (8000a7c <task3+0xcc>)
 80009c8:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart4,print_buff,n,400);
 80009ca:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <task3+0xcc>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80009d4:	4928      	ldr	r1, [pc, #160]	@ (8000a78 <task3+0xc8>)
 80009d6:	482a      	ldr	r0, [pc, #168]	@ (8000a80 <task3+0xd0>)
 80009d8:	f006 f97e 	bl	8006cd8 <HAL_UART_Transmit>

		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_3);
 80009dc:	2108      	movs	r1, #8
 80009de:	4829      	ldr	r0, [pc, #164]	@ (8000a84 <task3+0xd4>)
 80009e0:	f004 fd88 	bl	80054f4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT (&htim1, TIM_CHANNEL_4);
 80009e4:	210c      	movs	r1, #12
 80009e6:	4827      	ldr	r0, [pc, #156]	@ (8000a84 <task3+0xd4>)
 80009e8:	f004 fd84 	bl	80054f4 <HAL_TIM_IC_Start_IT>


		currentState = 1;}
 80009ec:	4b20      	ldr	r3, [pc, #128]	@ (8000a70 <task3+0xc0>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
	else {
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
		//HAL_UART_Transmit(&huart4,print_buff,n,400);
		currentState = 1;
	}
}
 80009f2:	e03b      	b.n	8000a6c <task3+0xbc>
	else if (currentState == 1) {
 80009f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a70 <task3+0xc0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d113      	bne.n	8000a24 <task3+0x74>
		n = sprintf(print_buff,"\n\rTask 3, State 1\n");
 80009fc:	4922      	ldr	r1, [pc, #136]	@ (8000a88 <task3+0xd8>)
 80009fe:	481e      	ldr	r0, [pc, #120]	@ (8000a78 <task3+0xc8>)
 8000a00:	f006 ff96 	bl	8007930 <siprintf>
 8000a04:	4603      	mov	r3, r0
 8000a06:	4a1d      	ldr	r2, [pc, #116]	@ (8000a7c <task3+0xcc>)
 8000a08:	6013      	str	r3, [r2, #0]
		if(check_delta(radio_pulse) == 1)
 8000a0a:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <task3+0xdc>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	b21b      	sxth	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fda3 	bl	800155c <check_delta>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d127      	bne.n	8000a6c <task3+0xbc>
				currentState = 2;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	@ (8000a70 <task3+0xc0>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	601a      	str	r2, [r3, #0]
}
 8000a22:	e023      	b.n	8000a6c <task3+0xbc>
	else if (currentState == 2) {
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <task3+0xc0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d115      	bne.n	8000a58 <task3+0xa8>
		n = sprintf(print_buff,"\n\rTask 3, State 2 EMERGENCY STOP\n");
 8000a2c:	4918      	ldr	r1, [pc, #96]	@ (8000a90 <task3+0xe0>)
 8000a2e:	4812      	ldr	r0, [pc, #72]	@ (8000a78 <task3+0xc8>)
 8000a30:	f006 ff7e 	bl	8007930 <siprintf>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <task3+0xcc>)
 8000a38:	6013      	str	r3, [r2, #0]
		controller_deinit(&hand_cont);
 8000a3a:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <task3+0xe4>)
 8000a3c:	f7ff fda2 	bl	8000584 <controller_deinit>
		controller_deinit(&spin_cont);
 8000a40:	4815      	ldr	r0, [pc, #84]	@ (8000a98 <task3+0xe8>)
 8000a42:	f7ff fd9f 	bl	8000584 <controller_deinit>
		set_stby(&hand_mot,0);
 8000a46:	2100      	movs	r1, #0
 8000a48:	4814      	ldr	r0, [pc, #80]	@ (8000a9c <task3+0xec>)
 8000a4a:	f000 fd43 	bl	80014d4 <set_stby>
		set_stby(&spin_mot,0);
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4813      	ldr	r0, [pc, #76]	@ (8000aa0 <task3+0xf0>)
 8000a52:	f000 fd3f 	bl	80014d4 <set_stby>
}
 8000a56:	e009      	b.n	8000a6c <task3+0xbc>
		n = sprintf(print_buff,"\n\rTask 3, Invalid State. Reset to State 1\n");
 8000a58:	4912      	ldr	r1, [pc, #72]	@ (8000aa4 <task3+0xf4>)
 8000a5a:	4807      	ldr	r0, [pc, #28]	@ (8000a78 <task3+0xc8>)
 8000a5c:	f006 ff68 	bl	8007930 <siprintf>
 8000a60:	4603      	mov	r3, r0
 8000a62:	4a06      	ldr	r2, [pc, #24]	@ (8000a7c <task3+0xcc>)
 8000a64:	6013      	str	r3, [r2, #0]
		currentState = 1;
 8000a66:	4b02      	ldr	r3, [pc, #8]	@ (8000a70 <task3+0xc0>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	200005b0 	.word	0x200005b0
 8000a74:	08008a7c 	.word	0x08008a7c
 8000a78:	200005b4 	.word	0x200005b4
 8000a7c:	2000064c 	.word	0x2000064c
 8000a80:	20000334 	.word	0x20000334
 8000a84:	20000250 	.word	0x20000250
 8000a88:	08008a90 	.word	0x08008a90
 8000a8c:	200003c0 	.word	0x200003c0
 8000a90:	08008aa4 	.word	0x08008aa4
 8000a94:	20000070 	.word	0x20000070
 8000a98:	20000080 	.word	0x20000080
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	20000024 	.word	0x20000024
 8000aa4:	08008ac8 	.word	0x08008ac8

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aac:	f001 f8ad 	bl	8001c0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab0:	f000 f840 	bl	8000b34 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ab4:	f000 f88d 	bl	8000bd2 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab8:	f000 fb6c 	bl	8001194 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000abc:	f000 f8b4 	bl	8000c28 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ac0:	f000 f928 	bl	8000d14 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ac4:	f000 f98a 	bl	8000ddc <MX_ADC3_Init>
  MX_TIM2_Init();
 8000ac8:	f000 fa78 	bl	8000fbc <MX_TIM2_Init>
  MX_TIM1_Init();
 8000acc:	f000 f9ea 	bl	8000ea4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000ad0:	f000 fada 	bl	8001088 <MX_TIM4_Init>
  MX_UART4_Init();
 8000ad4:	f000 fb2e 	bl	8001134 <MX_UART4_Init>
  while (1)
  {
	  //Continuously run the FSM

	 	  // Execute task 1
	 	  task1();
 8000ad8:	f7ff fe0e 	bl	80006f8 <task1>

	 	  // Execute task 2
	 	  task2();
 8000adc:	f7ff feba 	bl	8000854 <task2>

	 	  // Execute task 3
	 	  task3();
 8000ae0:	f7ff ff66 	bl	80009b0 <task3>
	 	  //spin_mot_count = get_pos(&spin_enc);
	 	  //m = sprintf(tst_buff,"\n\rThe encoder count is %d\n",spin_mot_count);
	 	  //HAL_UART_Transmit(&huart4,tst_buff,m,400);

	 	  //test muscle sensor
	 	 hmyo_curr = read_current(&hmyo);
 8000ae4:	480d      	ldr	r0, [pc, #52]	@ (8000b1c <main+0x74>)
 8000ae6:	f000 fd14 	bl	8001512 <read_current>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <main+0x78>)
 8000af0:	801a      	strh	r2, [r3, #0]
	 	 m = sprintf(tst_buff,"\n\rThe myo output is %d\n",hmyo_curr);
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <main+0x78>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	490a      	ldr	r1, [pc, #40]	@ (8000b24 <main+0x7c>)
 8000afa:	480b      	ldr	r0, [pc, #44]	@ (8000b28 <main+0x80>)
 8000afc:	f006 ff18 	bl	8007930 <siprintf>
 8000b00:	4603      	mov	r3, r0
 8000b02:	4a0a      	ldr	r2, [pc, #40]	@ (8000b2c <main+0x84>)
 8000b04:	6013      	str	r3, [r2, #0]
	 	 HAL_UART_Transmit(&huart4,tst_buff,m,400);
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <main+0x84>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b10:	4905      	ldr	r1, [pc, #20]	@ (8000b28 <main+0x80>)
 8000b12:	4807      	ldr	r0, [pc, #28]	@ (8000b30 <main+0x88>)
 8000b14:	f006 f8e0 	bl	8006cd8 <HAL_UART_Transmit>
	 	  task1();
 8000b18:	bf00      	nop
 8000b1a:	e7dd      	b.n	8000ad8 <main+0x30>
 8000b1c:	20000090 	.word	0x20000090
 8000b20:	200003c6 	.word	0x200003c6
 8000b24:	08008af4 	.word	0x08008af4
 8000b28:	200003d4 	.word	0x200003d4
 8000b2c:	2000046c 	.word	0x2000046c
 8000b30:	20000334 	.word	0x20000334

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b096      	sub	sp, #88	@ 0x58
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	2244      	movs	r2, #68	@ 0x44
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f006 ff57 	bl	80079f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b56:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b5a:	f002 ff6d 	bl	8003a38 <HAL_PWREx_ControlVoltageScaling>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b64:	f000 fbc4 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b76:	2303      	movs	r3, #3
 8000b78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000b7e:	2314      	movs	r3, #20
 8000b80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b82:	2307      	movs	r3, #7
 8000b84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 ffa6 	bl	8003ae4 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b9e:	f000 fba7 	bl	80012f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f003 fb6e 	bl	800429c <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bc6:	f000 fb93 	bl	80012f0 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3758      	adds	r7, #88	@ 0x58
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b0a2      	sub	sp, #136	@ 0x88
 8000bd6:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2288      	movs	r2, #136	@ 0x88
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 ff09 	bl	80079f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000be4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000be8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bea:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000bee:	67bb      	str	r3, [r7, #120]	@ 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000c0c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0e:	463b      	mov	r3, r7
 8000c10:	4618      	mov	r0, r3
 8000c12:	f003 fd67 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000c1c:	f000 fb68 	bl	80012f0 <Error_Handler>
  }
}
 8000c20:	bf00      	nop
 8000c22:	3788      	adds	r7, #136	@ 0x88
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c4c:	4a2f      	ldr	r2, [pc, #188]	@ (8000d0c <MX_ADC1_Init+0xe4>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c62:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000c7a:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c94:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000caa:	4817      	ldr	r0, [pc, #92]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000cac:	f001 fa54 	bl	8002158 <HAL_ADC_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000cb6:	f000 fb1b 	bl	80012f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4810      	ldr	r0, [pc, #64]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000cc6:	f002 fb25 	bl	8003314 <HAL_ADCEx_MultiModeConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000cd0:	f000 fb0e 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <MX_ADC1_Init+0xe8>)
 8000cd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ce0:	237f      	movs	r3, #127	@ 0x7f
 8000ce2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	@ (8000d08 <MX_ADC1_Init+0xe0>)
 8000cf2:	f001 fd55 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000cfc:	f000 faf8 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	@ 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000124 	.word	0x20000124
 8000d0c:	50040000 	.word	0x50040000
 8000d10:	04300002 	.word	0x04300002

08000d14 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
 8000d28:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d2a:	4b29      	ldr	r3, [pc, #164]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d2c:	4a29      	ldr	r2, [pc, #164]	@ (8000dd4 <MX_ADC2_Init+0xc0>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d30:	4b27      	ldr	r3, [pc, #156]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d36:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d3c:	4b24      	ldr	r3, [pc, #144]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d42:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d4a:	2204      	movs	r2, #4
 8000d4c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000d4e:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d54:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d6e:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d8a:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000d8c:	f001 f9e4 	bl	8002158 <HAL_ADC_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000d96:	f000 faab 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd8 <MX_ADC2_Init+0xc4>)
 8000d9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000da6:	237f      	movs	r3, #127	@ 0x7f
 8000da8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000daa:	2304      	movs	r3, #4
 8000dac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MX_ADC2_Init+0xbc>)
 8000db8:	f001 fcf2 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000dc2:	f000 fa95 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000188 	.word	0x20000188
 8000dd4:	50040100 	.word	0x50040100
 8000dd8:	08600004 	.word	0x08600004

08000ddc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000df2:	4b29      	ldr	r3, [pc, #164]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000df4:	4a29      	ldr	r2, [pc, #164]	@ (8000e9c <MX_ADC3_Init+0xc0>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000df8:	4b27      	ldr	r3, [pc, #156]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000dfe:	4b26      	ldr	r3, [pc, #152]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e04:	4b24      	ldr	r3, [pc, #144]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e0a:	4b23      	ldr	r3, [pc, #140]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e10:	4b21      	ldr	r3, [pc, #132]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e12:	2204      	movs	r2, #4
 8000e14:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000e16:	4b20      	ldr	r3, [pc, #128]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e24:	2201      	movs	r2, #1
 8000e26:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e30:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e3c:	4b16      	ldr	r3, [pc, #88]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e44:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000e4a:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e52:	4811      	ldr	r0, [pc, #68]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e54:	f001 f980 	bl	8002158 <HAL_ADC_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000e5e:	f000 fa47 	bl	80012f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_ADC3_Init+0xc4>)
 8000e64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e66:	2306      	movs	r3, #6
 8000e68:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e6e:	237f      	movs	r3, #127	@ 0x7f
 8000e70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e72:	2304      	movs	r3, #4
 8000e74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e7a:	463b      	mov	r3, r7
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <MX_ADC3_Init+0xbc>)
 8000e80:	f001 fc8e 	bl	80027a0 <HAL_ADC_ConfigChannel>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000e8a:	f000 fa31 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	200001ec 	.word	0x200001ec
 8000e9c:	50040200 	.word	0x50040200
 8000ea0:	10c00010 	.word	0x10c00010

08000ea4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b090      	sub	sp, #64	@ 0x40
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	2224      	movs	r2, #36	@ 0x24
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f006 fd9f 	bl	80079f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ed0:	4b38      	ldr	r3, [pc, #224]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000ed2:	4a39      	ldr	r2, [pc, #228]	@ (8000fb8 <MX_TIM1_Init+0x114>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000ed8:	224f      	movs	r2, #79	@ 0x4f
 8000eda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b35      	ldr	r3, [pc, #212]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ee2:	4b34      	ldr	r3, [pc, #208]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000ee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eea:	4b32      	ldr	r3, [pc, #200]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ef0:	4b30      	ldr	r3, [pc, #192]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000efc:	482d      	ldr	r0, [pc, #180]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000efe:	f004 faa1 	bl	8005444 <HAL_TIM_IC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8000f08:	f000 f9f2 	bl	80012f0 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f14:	2301      	movs	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC1Filter = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f20:	2300      	movs	r3, #0
 8000f22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f24:	2301      	movs	r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfig.IC2Filter = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	481f      	ldr	r0, [pc, #124]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000f38:	f004 fc26 	bl	8005788 <HAL_TIM_Encoder_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8000f42:	f000 f9d5 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4816      	ldr	r0, [pc, #88]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000f5a:	f005 fdc9 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000f64:	f000 f9c4 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2208      	movs	r2, #8
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480d      	ldr	r0, [pc, #52]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000f80:	f004 fedf 	bl	8005d42 <HAL_TIM_IC_ConfigChannel>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8000f8a:	f000 f9b1 	bl	80012f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000f92:	2302      	movs	r3, #2
 8000f94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000f96:	463b      	mov	r3, r7
 8000f98:	220c      	movs	r2, #12
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <MX_TIM1_Init+0x110>)
 8000f9e:	f004 fed0 	bl	8005d42 <HAL_TIM_IC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000fa8:	f000 f9a2 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	3740      	adds	r7, #64	@ 0x40
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000250 	.word	0x20000250
 8000fb8:	40012c00 	.word	0x40012c00

08000fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	@ 0x28
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
 8000fdc:	615a      	str	r2, [r3, #20]
 8000fde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fe8:	4b25      	ldr	r3, [pc, #148]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b24      	ldr	r3, [pc, #144]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799999;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8000ff6:	4a23      	ldr	r2, [pc, #140]	@ (8001084 <MX_TIM2_Init+0xc8>)
 8000ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001006:	481e      	ldr	r0, [pc, #120]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8001008:	f004 f828 	bl	800505c <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001012:	f000 f96d 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	4619      	mov	r1, r3
 8001024:	4816      	ldr	r0, [pc, #88]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8001026:	f005 fd63 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001030:	f000 f95e 	bl	80012f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001034:	2360      	movs	r3, #96	@ 0x60
 8001036:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	2200      	movs	r2, #0
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	@ (8001080 <MX_TIM2_Init+0xc4>)
 800104c:	f004 ff16 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001056:	f000 f94b 	bl	80012f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2208      	movs	r2, #8
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8001062:	f004 ff0b 	bl	8005e7c <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800106c:	f000 f940 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001070:	4803      	ldr	r0, [pc, #12]	@ (8001080 <MX_TIM2_Init+0xc4>)
 8001072:	f000 fc21 	bl	80018b8 <HAL_TIM_MspPostInit>

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000029c 	.word	0x2000029c
 8001084:	000c34ff 	.word	0x000c34ff

08001088 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2224      	movs	r2, #36	@ 0x24
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f006 fcad 	bl	80079f6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800109c:	463b      	mov	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010a8:	4a21      	ldr	r2, [pc, #132]	@ (8001130 <MX_TIM4_Init+0xa8>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010ac:	4b1f      	ldr	r3, [pc, #124]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010b8:	4b1c      	ldr	r3, [pc, #112]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010cc:	2301      	movs	r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010d4:	2301      	movs	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010e4:	2301      	movs	r3, #1
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	480d      	ldr	r0, [pc, #52]	@ (800112c <MX_TIM4_Init+0xa4>)
 80010f8:	f004 fb46 	bl	8005788 <HAL_TIM_Encoder_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001102:	f000 f8f5 	bl	80012f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4806      	ldr	r0, [pc, #24]	@ (800112c <MX_TIM4_Init+0xa4>)
 8001114:	f005 fcec 	bl	8006af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800111e:	f000 f8e7 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	3730      	adds	r7, #48	@ 0x30
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200002e8 	.word	0x200002e8
 8001130:	40000800 	.word	0x40000800

08001134 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <MX_UART4_Init+0x58>)
 800113a:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <MX_UART4_Init+0x5c>)
 800113c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <MX_UART4_Init+0x58>)
 8001140:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001144:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <MX_UART4_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <MX_UART4_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_UART4_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <MX_UART4_Init+0x58>)
 800115a:	220c      	movs	r2, #12
 800115c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <MX_UART4_Init+0x58>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001164:	4b09      	ldr	r3, [pc, #36]	@ (800118c <MX_UART4_Init+0x58>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116a:	4b08      	ldr	r3, [pc, #32]	@ (800118c <MX_UART4_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001170:	4b06      	ldr	r3, [pc, #24]	@ (800118c <MX_UART4_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <MX_UART4_Init+0x58>)
 8001178:	f005 fd60 	bl	8006c3c <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001182:	f000 f8b5 	bl	80012f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000334 	.word	0x20000334
 8001190:	40004c00 	.word	0x40004c00

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	@ 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011aa:	4b39      	ldr	r3, [pc, #228]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a38      	ldr	r2, [pc, #224]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011be:	613b      	str	r3, [r7, #16]
 80011c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a32      	ldr	r2, [pc, #200]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011c8:	f043 0304 	orr.w	r3, r3, #4
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b30      	ldr	r3, [pc, #192]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b2d      	ldr	r3, [pc, #180]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	4a2c      	ldr	r2, [pc, #176]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f6:	4a26      	ldr	r2, [pc, #152]	@ (8001290 <MX_GPIO_Init+0xfc>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fe:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <MX_GPIO_Init+0xfc>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, STBY_Pin|AIN1_Pin|GPIO_1_Pin, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f248 01c0 	movw	r1, #32960	@ 0x80c0
 8001210:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001214:	f002 fbea 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|BIN1_Pin|GPIO_2_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 6103 	mov.w	r1, #2096	@ 0x830
 800121e:	481d      	ldr	r0, [pc, #116]	@ (8001294 <MX_GPIO_Init+0x100>)
 8001220:	f002 fbe4 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BIN2_GPIO_Port, BIN2_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	2101      	movs	r1, #1
 8001228:	481b      	ldr	r0, [pc, #108]	@ (8001298 <MX_GPIO_Init+0x104>)
 800122a:	f002 fbdf 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : STBY_Pin AIN1_Pin GPIO_1_Pin */
  GPIO_InitStruct.Pin = STBY_Pin|AIN1_Pin|GPIO_1_Pin;
 800122e:	f248 03c0 	movw	r3, #32960	@ 0x80c0
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124a:	f002 fa25 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin BIN1_Pin GPIO_2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|BIN1_Pin|GPIO_2_Pin;
 800124e:	f44f 6303 	mov.w	r3, #2096	@ 0x830
 8001252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001254:	2301      	movs	r3, #1
 8001256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	480b      	ldr	r0, [pc, #44]	@ (8001294 <MX_GPIO_Init+0x100>)
 8001268:	f002 fa16 	bl	8003698 <HAL_GPIO_Init>

  /*Configure GPIO pin : BIN2_Pin */
  GPIO_InitStruct.Pin = BIN2_Pin;
 800126c:	2301      	movs	r3, #1
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001270:	2301      	movs	r3, #1
 8001272:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BIN2_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_GPIO_Init+0x104>)
 8001284:	f002 fa08 	bl	8003698 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001288:	bf00      	nop
 800128a:	3728      	adds	r7, #40	@ 0x28
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021000 	.word	0x40021000
 8001294:	48000800 	.word	0x48000800
 8001298:	48000400 	.word	0x48000400

0800129c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	      //ch1_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     // radio_pulse = ch1_val - ch1_p;
  //}
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7f1b      	ldrb	r3, [r3, #28]
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d117      	bne.n	80012dc <HAL_TIM_IC_CaptureCallback+0x40>
	      //store the previous value and read the captured value from the input capture register
	  	  ch2_p = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80012ac:	2108      	movs	r1, #8
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f004 fef8 	bl	80060a4 <HAL_TIM_ReadCapturedValue>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80012ba:	801a      	strh	r2, [r3, #0]
	      ch2_val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80012bc:	210c      	movs	r1, #12
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f004 fef0 	bl	80060a4 <HAL_TIM_ReadCapturedValue>
 80012c4:	4603      	mov	r3, r0
 80012c6:	b29a      	uxth	r2, r3
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80012ca:	801a      	strh	r2, [r3, #0]

	      //calculate the width of the pwm pulse generated by the radio transmitter
	     radio_pulse = ch2_val - ch2_p;
 80012cc:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <HAL_TIM_IC_CaptureCallback+0x4c>)
 80012ce:	881a      	ldrh	r2, [r3, #0]
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <HAL_TIM_IC_CaptureCallback+0x48>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <HAL_TIM_IC_CaptureCallback+0x50>)
 80012da:	801a      	strh	r2, [r3, #0]
  }

}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200003be 	.word	0x200003be
 80012e8:	200003bc 	.word	0x200003bc
 80012ec:	200003c0 	.word	0x200003c0

080012f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f4:	b672      	cpsid	i
}
 80012f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <Error_Handler+0x8>

080012fc <start_PWM>:

#include "motor_driver.h"


void start_PWM(motor_t* p_mot)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 *  */

		HAL_TIM_PWM_Start(&p_mot->hal_tim, &p_mot->pwm_channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f103 0208 	add.w	r2, r3, #8
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	3304      	adds	r3, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4610      	mov	r0, r2
 8001312:	f003 fefb 	bl	800510c <HAL_TIM_PWM_Start>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <stop_PWM>:


void stop_PWM(motor_t* p_mot)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
	 *
	 * @param channel The timer channel to perform the function on.
	 *
	 */

			HAL_TIM_PWM_Stop(p_mot->hal_tim, p_mot->pwm_channel);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	4619      	mov	r1, r3
 8001330:	4610      	mov	r0, r2
 8001332:	f003 fff1 	bl	8005318 <HAL_TIM_PWM_Stop>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <set_duty>:

void set_duty(motor_t* p_mot, int32_t pwm_sig)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	 *
	 * @param duty The desired duty cycle for the motor.
	 */

    // Print to the console so we can see what's happening
    printf("Setting Motor Duty Cycle to %ld", pwm_sig);
 800134a:	6839      	ldr	r1, [r7, #0]
 800134c:	4860      	ldr	r0, [pc, #384]	@ (80014d0 <set_duty+0x190>)
 800134e:	f006 fadd 	bl	800790c <iprintf>

    // Assign the duty cycle to a field in the structure
    p_mot->pwm_val = pwm_sig;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	683a      	ldr	r2, [r7, #0]
 8001356:	601a      	str	r2, [r3, #0]
    // dereferencing and accessing struct fields
    // p_mot->duty = duty;
    // is shorthand for
    // (*p_mot).duty = duty;

    if (pwm_sig > 0) {
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	dd49      	ble.n	80013f2 <set_duty+0xb2>

    	//forwards
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,pwm_sig);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d105      	bne.n	8001372 <set_duty+0x32>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001370:	e02c      	b.n	80013cc <set_duty+0x8c>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b04      	cmp	r3, #4
 8001378:	d105      	bne.n	8001386 <set_duty+0x46>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	6393      	str	r3, [r2, #56]	@ 0x38
 8001384:	e022      	b.n	80013cc <set_duty+0x8c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d105      	bne.n	800139a <set_duty+0x5a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001398:	e018      	b.n	80013cc <set_duty+0x8c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b0c      	cmp	r3, #12
 80013a0:	d105      	bne.n	80013ae <set_duty+0x6e>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ac:	e00e      	b.n	80013cc <set_duty+0x8c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d105      	bne.n	80013c2 <set_duty+0x82>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6593      	str	r3, [r2, #88]	@ 0x58
 80013c0:	e004      	b.n	80013cc <set_duty+0x8c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	65d3      	str	r3, [r2, #92]	@ 0x5c

    	//set GPIO PINS
    	// GPIO_PIN_RESET: to clear the port pin
    	 //GPIO_PIN_SET: to set the port pin

    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_SET);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6998      	ldr	r0, [r3, #24]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	2201      	movs	r2, #1
 80013d8:	4619      	mov	r1, r3
 80013da:	f002 fb07 	bl	80039ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69d8      	ldr	r0, [r3, #28]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	f002 fafe 	bl	80039ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);

    }


}
 80013f0:	e069      	b.n	80014c6 <set_duty+0x186>
    else if(pwm_sig == 0){
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d112      	bne.n	800141e <set_duty+0xde>
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6998      	ldr	r0, [r3, #24]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	b29b      	uxth	r3, r3
 8001402:	2200      	movs	r2, #0
 8001404:	4619      	mov	r1, r3
 8001406:	f002 faf1 	bl	80039ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_RESET);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69d8      	ldr	r0, [r3, #28]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	b29b      	uxth	r3, r3
 8001414:	2200      	movs	r2, #0
 8001416:	4619      	mov	r1, r3
 8001418:	f002 fae8 	bl	80039ec <HAL_GPIO_WritePin>
}
 800141c:	e053      	b.n	80014c6 <set_duty+0x186>
    	__HAL_TIM_SET_COMPARE(p_mot->hal_tim, p_mot->pwm_channel,-pwm_sig);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d106      	bne.n	8001434 <set_duty+0xf4>
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	425a      	negs	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	635a      	str	r2, [r3, #52]	@ 0x34
 8001432:	e036      	b.n	80014a2 <set_duty+0x162>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d107      	bne.n	800144c <set_duty+0x10c>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4259      	negs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	460b      	mov	r3, r1
 8001448:	6393      	str	r3, [r2, #56]	@ 0x38
 800144a:	e02a      	b.n	80014a2 <set_duty+0x162>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b08      	cmp	r3, #8
 8001452:	d107      	bne.n	8001464 <set_duty+0x124>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4259      	negs	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	460b      	mov	r3, r1
 8001460:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001462:	e01e      	b.n	80014a2 <set_duty+0x162>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d107      	bne.n	800147c <set_duty+0x13c>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4259      	negs	r1, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	460b      	mov	r3, r1
 8001478:	6413      	str	r3, [r2, #64]	@ 0x40
 800147a:	e012      	b.n	80014a2 <set_duty+0x162>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b10      	cmp	r3, #16
 8001482:	d107      	bne.n	8001494 <set_duty+0x154>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	4259      	negs	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	460b      	mov	r3, r1
 8001490:	6593      	str	r3, [r2, #88]	@ 0x58
 8001492:	e006      	b.n	80014a2 <set_duty+0x162>
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	4259      	negs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	460b      	mov	r3, r1
 80014a0:	65d3      	str	r3, [r2, #92]	@ 0x5c
    	HAL_GPIO_WritePin (p_mot->port_in_1, p_mot->in_pin_1, GPIO_PIN_RESET);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6998      	ldr	r0, [r3, #24]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	2200      	movs	r2, #0
 80014ae:	4619      	mov	r1, r3
 80014b0:	f002 fa9c 	bl	80039ec <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin (p_mot->port_in_2, p_mot->in_pin_2, GPIO_PIN_SET);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69d8      	ldr	r0, [r3, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	f002 fa93 	bl	80039ec <HAL_GPIO_WritePin>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	08008b0c 	.word	0x08008b0c

080014d4 <set_stby>:
 * @brief A function to set the standby pin for the motor.
 *
 * @param p_mot The motor object to perform the function on.
 * @param stby The desired stby pin value of 0 or 1.
 */
void set_stby(motor_t* p_mot, int32_t stby_val){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	if(stby_val == 0){
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d109      	bne.n	80014f8 <set_stby+0x24>

		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_RESET);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a18      	ldr	r0, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	695b      	ldr	r3, [r3, #20]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2200      	movs	r2, #0
 80014f0:	4619      	mov	r1, r3
 80014f2:	f002 fa7b 	bl	80039ec <HAL_GPIO_WritePin>
	else{

		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_SET);
	}

}
 80014f6:	e008      	b.n	800150a <set_stby+0x36>
		HAL_GPIO_WritePin (p_mot->port_stby_pin, p_mot->stby_pin, GPIO_PIN_SET);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a18      	ldr	r0, [r3, #32]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	695b      	ldr	r3, [r3, #20]
 8001500:	b29b      	uxth	r3, r3
 8001502:	2201      	movs	r2, #1
 8001504:	4619      	mov	r1, r3
 8001506:	f002 fa71 	bl	80039ec <HAL_GPIO_WritePin>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <read_current>:
/**
 * @brief A function to get the ADC value for the myoelectric sensor.
 *
 * @param p_myo The myoelectric sensor object to perform the function on.
 */
uint16_t read_current(myo_t *p_myo){
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]

	HAL_ADC_Start(p_myo->hal_adc);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 ff6a 	bl	80023f8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(p_myo->hal_adc,100);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2164      	movs	r1, #100	@ 0x64
 800152a:	4618      	mov	r0, r3
 800152c:	f001 f852 	bl	80025d4 <HAL_ADC_PollForConversion>
	p_myo->current_value = HAL_ADC_GetValue(p_myo->hal_adc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f001 f925 	bl	8002784 <HAL_ADC_GetValue>
 800153a:	4603      	mov	r3, r0
 800153c:	b21a      	sxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	80da      	strh	r2, [r3, #6]
	HAL_ADC_Stop(p_myo->hal_adc);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f001 f810 	bl	800256c <HAL_ADC_Stop>
	//stop ADC?

	//now convert results to a desired output style


	return p_myo->current_value;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001552:	b29b      	uxth	r3, r3

}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <check_delta>:
 */

#include "radio.h"

int check_delta(int16_t pulse_width)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	80fb      	strh	r3, [r7, #6]
	//if the delta value is invalid, or is at the 1.5 ms base width return 0. If it is not at the
	//base value return a 1.
	if (900 < pulse_width && pulse_width < 1450)
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 800156e:	dd07      	ble.n	8001580 <check_delta+0x24>
 8001570:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001574:	f240 52a9 	movw	r2, #1449	@ 0x5a9
 8001578:	4293      	cmp	r3, r2
 800157a:	dc01      	bgt.n	8001580 <check_delta+0x24>
	{
	    return 1;
 800157c:	2301      	movs	r3, #1
 800157e:	e00e      	b.n	800159e <check_delta+0x42>
	}
	else if (1550 < pulse_width && pulse_width < 2500)
 8001580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001584:	f240 620e 	movw	r2, #1550	@ 0x60e
 8001588:	4293      	cmp	r3, r2
 800158a:	dd07      	ble.n	800159c <check_delta+0x40>
 800158c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001590:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001594:	4293      	cmp	r3, r2
 8001596:	dc01      	bgt.n	800159c <check_delta+0x40>
	{
	    return 1;
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <check_delta+0x42>
	}
	else
	{
			return 0;
 800159c:	2300      	movs	r3, #0
	}
}
 800159e:	4618      	mov	r0, r3
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015b6:	4a0e      	ldr	r2, [pc, #56]	@ (80015f0 <HAL_MspInit+0x44>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80015be:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <HAL_MspInit+0x44>)
 80015c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <HAL_MspInit+0x44>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	4a08      	ldr	r2, [pc, #32]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80015d6:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <HAL_MspInit+0x44>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	@ 0x38
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a4c      	ldr	r2, [pc, #304]	@ (8001744 <HAL_ADC_MspInit+0x150>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12d      	bne.n	8001672 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001616:	4b4c      	ldr	r3, [pc, #304]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a4a      	ldr	r2, [pc, #296]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 800161e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001620:	4b49      	ldr	r3, [pc, #292]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10b      	bne.n	8001640 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001628:	4b48      	ldr	r3, [pc, #288]	@ (800174c <HAL_ADC_MspInit+0x158>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	4a47      	ldr	r2, [pc, #284]	@ (800174c <HAL_ADC_MspInit+0x158>)
 800162e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001632:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001634:	4b45      	ldr	r3, [pc, #276]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800163c:	623b      	str	r3, [r7, #32]
 800163e:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b42      	ldr	r3, [pc, #264]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	4a41      	ldr	r2, [pc, #260]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164c:	4b3f      	ldr	r3, [pc, #252]	@ (800174c <HAL_ADC_MspInit+0x158>)
 800164e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = MYO1_Pin;
 8001658:	2301      	movs	r3, #1
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800165c:	230b      	movs	r3, #11
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MYO1_GPIO_Port, &GPIO_InitStruct);
 8001664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001668:	4619      	mov	r1, r3
 800166a:	4839      	ldr	r0, [pc, #228]	@ (8001750 <HAL_ADC_MspInit+0x15c>)
 800166c:	f002 f814 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001670:	e064      	b.n	800173c <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC2)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a37      	ldr	r2, [pc, #220]	@ (8001754 <HAL_ADC_MspInit+0x160>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d12d      	bne.n	80016d8 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 800167c:	4b32      	ldr	r3, [pc, #200]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	3301      	adds	r3, #1
 8001682:	4a31      	ldr	r2, [pc, #196]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 8001684:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8001686:	4b30      	ldr	r3, [pc, #192]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d10b      	bne.n	80016a6 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	4a2e      	ldr	r2, [pc, #184]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001694:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169a:	4b2c      	ldr	r3, [pc, #176]	@ (800174c <HAL_ADC_MspInit+0x158>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b29      	ldr	r3, [pc, #164]	@ (800174c <HAL_ADC_MspInit+0x158>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4a28      	ldr	r2, [pc, #160]	@ (800174c <HAL_ADC_MspInit+0x158>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b2:	4b26      	ldr	r3, [pc, #152]	@ (800174c <HAL_ADC_MspInit+0x158>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MYO2_Pin;
 80016be:	2302      	movs	r3, #2
 80016c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016c2:	230b      	movs	r3, #11
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MYO2_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ce:	4619      	mov	r1, r3
 80016d0:	481f      	ldr	r0, [pc, #124]	@ (8001750 <HAL_ADC_MspInit+0x15c>)
 80016d2:	f001 ffe1 	bl	8003698 <HAL_GPIO_Init>
}
 80016d6:	e031      	b.n	800173c <HAL_ADC_MspInit+0x148>
  else if(hadc->Instance==ADC3)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <HAL_ADC_MspInit+0x164>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d12c      	bne.n	800173c <HAL_ADC_MspInit+0x148>
    HAL_RCC_ADC_CLK_ENABLED++;
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a17      	ldr	r2, [pc, #92]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 80016ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_ADC_MspInit+0x154>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d10b      	bne.n	800170c <HAL_ADC_MspInit+0x118>
      __HAL_RCC_ADC_CLK_ENABLE();
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <HAL_ADC_MspInit+0x158>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	4a14      	ldr	r2, [pc, #80]	@ (800174c <HAL_ADC_MspInit+0x158>)
 80016fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80016fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001700:	4b12      	ldr	r3, [pc, #72]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_ADC_MspInit+0x158>)
 800170e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001710:	4a0e      	ldr	r2, [pc, #56]	@ (800174c <HAL_ADC_MspInit+0x158>)
 8001712:	f043 0304 	orr.w	r3, r3, #4
 8001716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <HAL_ADC_MspInit+0x158>)
 800171a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171c:	f003 0304 	and.w	r3, r3, #4
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PRS_Pin|V_BAT_Pin;
 8001724:	230c      	movs	r3, #12
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001728:	230b      	movs	r3, #11
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	@ (8001750 <HAL_ADC_MspInit+0x15c>)
 8001738:	f001 ffae 	bl	8003698 <HAL_GPIO_Init>
}
 800173c:	bf00      	nop
 800173e:	3738      	adds	r7, #56	@ 0x38
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	50040000 	.word	0x50040000
 8001748:	20000650 	.word	0x20000650
 800174c:	40021000 	.word	0x40021000
 8001750:	48000800 	.word	0x48000800
 8001754:	50040100 	.word	0x50040100
 8001758:	50040200 	.word	0x50040200

0800175c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1c      	ldr	r2, [pc, #112]	@ (80017ec <HAL_TIM_IC_MspInit+0x90>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d131      	bne.n	80017e2 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <HAL_TIM_IC_MspInit+0x94>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001782:	4a1b      	ldr	r2, [pc, #108]	@ (80017f0 <HAL_TIM_IC_MspInit+0x94>)
 8001784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001788:	6613      	str	r3, [r2, #96]	@ 0x60
 800178a:	4b19      	ldr	r3, [pc, #100]	@ (80017f0 <HAL_TIM_IC_MspInit+0x94>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_TIM_IC_MspInit+0x94>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <HAL_TIM_IC_MspInit+0x94>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <HAL_TIM_IC_MspInit+0x94>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = HAND_ENC_A_Pin|HAND_ENC_B_Pin|RADIO_Pin;
 80017ae:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80017b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017bc:	2300      	movs	r3, #0
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c4:	f107 0314 	add.w	r3, r7, #20
 80017c8:	4619      	mov	r1, r3
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ce:	f001 ff63 	bl	8003698 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201b      	movs	r0, #27
 80017d8:	f001 ff27 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80017dc:	201b      	movs	r0, #27
 80017de:	f001 ff40 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40012c00 	.word	0x40012c00
 80017f0:	40021000 	.word	0x40021000

080017f4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001804:	d10b      	bne.n	800181e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	4b09      	ldr	r3, [pc, #36]	@ (800182c <HAL_TIM_PWM_MspInit+0x38>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	4a08      	ldr	r2, [pc, #32]	@ (800182c <HAL_TIM_PWM_MspInit+0x38>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6593      	str	r3, [r2, #88]	@ 0x58
 8001812:	4b06      	ldr	r3, [pc, #24]	@ (800182c <HAL_TIM_PWM_MspInit+0x38>)
 8001814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800181e:	bf00      	nop
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000

08001830 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08a      	sub	sp, #40	@ 0x28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 0314 	add.w	r3, r7, #20
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a17      	ldr	r2, [pc, #92]	@ (80018ac <HAL_TIM_Encoder_MspInit+0x7c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d127      	bne.n	80018a2 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001854:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001856:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001858:	f043 0304 	orr.w	r3, r3, #4
 800185c:	6593      	str	r3, [r2, #88]	@ 0x58
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <HAL_TIM_Encoder_MspInit+0x80>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186e:	4a10      	ldr	r2, [pc, #64]	@ (80018b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001876:	4b0e      	ldr	r3, [pc, #56]	@ (80018b0 <HAL_TIM_Encoder_MspInit+0x80>)
 8001878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_ENC_A_Pin|MOTOR_ENC_B_Pin;
 8001882:	23c0      	movs	r3, #192	@ 0xc0
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001892:	2302      	movs	r3, #2
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4805      	ldr	r0, [pc, #20]	@ (80018b4 <HAL_TIM_Encoder_MspInit+0x84>)
 800189e:	f001 fefb 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018a2:	bf00      	nop
 80018a4:	3728      	adds	r7, #40	@ 0x28
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40000800 	.word	0x40000800
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400

080018b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018d8:	d11c      	bne.n	8001914 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	4b10      	ldr	r3, [pc, #64]	@ (800191c <HAL_TIM_MspPostInit+0x64>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a0f      	ldr	r2, [pc, #60]	@ (800191c <HAL_TIM_MspPostInit+0x64>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b0d      	ldr	r3, [pc, #52]	@ (800191c <HAL_TIM_MspPostInit+0x64>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PWMB_Pin|PWMA_Pin;
 80018f2:	2324      	movs	r3, #36	@ 0x24
 80018f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001902:	2301      	movs	r3, #1
 8001904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 030c 	add.w	r3, r7, #12
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001910:	f001 fec2 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001914:	bf00      	nop
 8001916:	3720      	adds	r7, #32
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40021000 	.word	0x40021000

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b0ac      	sub	sp, #176	@ 0xb0
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	2288      	movs	r2, #136	@ 0x88
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f006 f858 	bl	80079f6 <memset>
  if(huart->Instance==UART4)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a21      	ldr	r2, [pc, #132]	@ (80019d0 <HAL_UART_MspInit+0xb0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d13b      	bne.n	80019c8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001950:	2308      	movs	r3, #8
 8001952:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001954:	2300      	movs	r3, #0
 8001956:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fec1 	bl	80046e4 <HAL_RCCEx_PeriphCLKConfig>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001968:	f7ff fcc2 	bl	80012f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800196c:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <HAL_UART_MspInit+0xb4>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001970:	4a18      	ldr	r2, [pc, #96]	@ (80019d4 <HAL_UART_MspInit+0xb4>)
 8001972:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001976:	6593      	str	r3, [r2, #88]	@ 0x58
 8001978:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <HAL_UART_MspInit+0xb4>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <HAL_UART_MspInit+0xb4>)
 8001986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001988:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <HAL_UART_MspInit+0xb4>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001990:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <HAL_UART_MspInit+0xb4>)
 8001992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800199c:	2303      	movs	r3, #3
 800199e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019b4:	2308      	movs	r3, #8
 80019b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c4:	f001 fe68 	bl	8003698 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	37b0      	adds	r7, #176	@ 0xb0
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40004c00 	.word	0x40004c00
 80019d4:	40021000 	.word	0x40021000

080019d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <NMI_Handler+0x4>

080019e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <MemManage_Handler+0x4>

080019f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <BusFault_Handler+0x4>

080019f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fc:	bf00      	nop
 80019fe:	e7fd      	b.n	80019fc <UsageFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2e:	f000 f941 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <TIM1_CC_IRQHandler+0x10>)
 8001a3e:	f004 f87e 	bl	8005b3e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20000250 	.word	0x20000250

08001a4c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b086      	sub	sp, #24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e00a      	b.n	8001a74 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5e:	f3af 8000 	nop.w
 8001a62:	4601      	mov	r1, r0
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	60ba      	str	r2, [r7, #8]
 8001a6a:	b2ca      	uxtb	r2, r1
 8001a6c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	3301      	adds	r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	dbf0      	blt.n	8001a5e <_read+0x12>
  }

  return len;
 8001a7c:	687b      	ldr	r3, [r7, #4]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	e009      	b.n	8001aac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1c5a      	adds	r2, r3, #1
 8001a9c:	60ba      	str	r2, [r7, #8]
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	697a      	ldr	r2, [r7, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	dbf1      	blt.n	8001a98 <_write+0x12>
  }
  return len;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <_close>:

int _close(int file)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <_isatty>:

int _isatty(int file)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001afe:	2301      	movs	r3, #1
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b30:	4a14      	ldr	r2, [pc, #80]	@ (8001b84 <_sbrk+0x5c>)
 8001b32:	4b15      	ldr	r3, [pc, #84]	@ (8001b88 <_sbrk+0x60>)
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b3c:	4b13      	ldr	r3, [pc, #76]	@ (8001b8c <_sbrk+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d102      	bne.n	8001b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <_sbrk+0x64>)
 8001b46:	4a12      	ldr	r2, [pc, #72]	@ (8001b90 <_sbrk+0x68>)
 8001b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b4a:	4b10      	ldr	r3, [pc, #64]	@ (8001b8c <_sbrk+0x64>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4413      	add	r3, r2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d207      	bcs.n	8001b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b58:	f005 ff9c 	bl	8007a94 <__errno>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	220c      	movs	r2, #12
 8001b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	e009      	b.n	8001b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b68:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <_sbrk+0x64>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	@ (8001b8c <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	4a05      	ldr	r2, [pc, #20]	@ (8001b8c <_sbrk+0x64>)
 8001b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20018000 	.word	0x20018000
 8001b88:	00000400 	.word	0x00000400
 8001b8c:	20000654 	.word	0x20000654
 8001b90:	200007a8 	.word	0x200007a8

08001b94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <SystemInit+0x20>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b9e:	4a05      	ldr	r2, [pc, #20]	@ (8001bb4 <SystemInit+0x20>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ba8:	bf00      	nop
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bbc:	f7ff ffea 	bl	8001b94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480c      	ldr	r0, [pc, #48]	@ (8001bf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc2:	490d      	ldr	r1, [pc, #52]	@ (8001bf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bfc <LoopForever+0xe>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c04 <LoopForever+0x16>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be6:	f005 ff5b 	bl	8007aa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bea:	f7fe ff5d 	bl	8000aa8 <main>

08001bee <LoopForever>:

LoopForever:
    b LoopForever
 8001bee:	e7fe      	b.n	8001bee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf8:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8001bfc:	08008bb8 	.word	0x08008bb8
  ldr r2, =_sbss
 8001c00:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8001c04:	200007a8 	.word	0x200007a8

08001c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c08:	e7fe      	b.n	8001c08 <ADC1_2_IRQHandler>

08001c0a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f001 fcfd 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c1a:	200f      	movs	r0, #15
 8001c1c:	f000 f80e 	bl	8001c3c <HAL_InitTick>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	71fb      	strb	r3, [r7, #7]
 8001c2a:	e001      	b.n	8001c30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2c:	f7ff fcbe 	bl	80015ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c30:	79fb      	ldrb	r3, [r7, #7]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_InitTick+0x70>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f001 fd09 	bl	800367e <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d809      	bhi.n	8001c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f001 fcd3 	bl	800362a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_InitTick+0x74>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e004      	b.n	8001c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e001      	b.n	8001c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000a8 	.word	0x200000a8
 8001cac:	200000a0 	.word	0x200000a0
 8001cb0:	200000a4 	.word	0x200000a4

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	200000a8 	.word	0x200000a8
 8001cd8:	20000658 	.word	0x20000658

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	20000658 	.word	0x20000658

08001cf4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	609a      	str	r2, [r3, #8]
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3360      	adds	r3, #96	@ 0x60
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <LL_ADC_SetOffset+0x44>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr
 8001da0:	03fff000 	.word	0x03fff000

08001da4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3360      	adds	r3, #96	@ 0x60
 8001db2:	461a      	mov	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3360      	adds	r3, #96	@ 0x60
 8001de0:	461a      	mov	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	431a      	orrs	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001dfa:	bf00      	nop
 8001dfc:	371c      	adds	r7, #28
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001e06:	b480      	push	{r7}
 8001e08:	b083      	sub	sp, #12
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e000      	b.n	8001e20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	3330      	adds	r3, #48	@ 0x30
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	211f      	movs	r1, #31
 8001e58:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	401a      	ands	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	0e9b      	lsrs	r3, r3, #26
 8001e64:	f003 011f 	and.w	r1, r3, #31
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	431a      	orrs	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e78:	bf00      	nop
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3314      	adds	r3, #20
 8001e94:	461a      	mov	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	0e5b      	lsrs	r3, r3, #25
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	0d1b      	lsrs	r3, r3, #20
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	401a      	ands	r2, r3
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	0d1b      	lsrs	r3, r3, #20
 8001ebe:	f003 031f 	and.w	r3, r3, #31
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f003 0318 	and.w	r3, r3, #24
 8001efe:	4908      	ldr	r1, [pc, #32]	@ (8001f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001f00:	40d9      	lsrs	r1, r3
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	400b      	ands	r3, r1
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	0007ffff 	.word	0x0007ffff

08001f24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 031f 	and.w	r3, r3, #31
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001f6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6093      	str	r3, [r2, #8]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001f94:	d101      	bne.n	8001f9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001fb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fbc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001fe4:	d101      	bne.n	8001fea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e000      	b.n	8001fec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fea:	2300      	movs	r3, #0
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002008:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800200c:	f043 0201 	orr.w	r2, r3, #1
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002030:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002034:	f043 0202 	orr.w	r2, r3, #2
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <LL_ADC_IsEnabled+0x18>
 800205c:	2301      	movs	r3, #1
 800205e:	e000      	b.n	8002062 <LL_ADC_IsEnabled+0x1a>
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b02      	cmp	r3, #2
 8002080:	d101      	bne.n	8002086 <LL_ADC_IsDisableOngoing+0x18>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <LL_ADC_IsDisableOngoing+0x1a>
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020d0:	f043 0210 	orr.w	r2, r3, #16
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0304 	and.w	r3, r3, #4
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d101      	bne.n	80020fc <LL_ADC_REG_IsConversionOngoing+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800211a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800211e:	f043 0220 	orr.w	r2, r3, #32
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d101      	bne.n	800214a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002158:	b590      	push	{r4, r7, lr}
 800215a:	b089      	sub	sp, #36	@ 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2300      	movs	r3, #0
 8002162:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e130      	b.n	80023d4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	2b00      	cmp	r3, #0
 800217e:	d109      	bne.n	8002194 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f7ff fa37 	bl	80015f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fef1 	bl	8001f80 <LL_ADC_IsDeepPowerDownEnabled>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d004      	beq.n	80021ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fed7 	bl	8001f5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff ff0c 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d115      	bne.n	80021ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff fef0 	bl	8001fa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021c8:	4b84      	ldr	r3, [pc, #528]	@ (80023dc <HAL_ADC_Init+0x284>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	099b      	lsrs	r3, r3, #6
 80021ce:	4a84      	ldr	r2, [pc, #528]	@ (80023e0 <HAL_ADC_Init+0x288>)
 80021d0:	fba2 2303 	umull	r2, r3, r2, r3
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021dc:	e002      	b.n	80021e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f9      	bne.n	80021de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff feee 	bl	8001fd0 <LL_ADC_IsInternalRegulatorEnabled>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10d      	bne.n	8002216 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff ff62 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002220:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002226:	f003 0310 	and.w	r3, r3, #16
 800222a:	2b00      	cmp	r3, #0
 800222c:	f040 80c9 	bne.w	80023c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f040 80c5 	bne.w	80023c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002240:	f043 0202 	orr.w	r2, r3, #2
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fefb 	bl	8002048 <LL_ADC_IsEnabled>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d115      	bne.n	8002284 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002258:	4862      	ldr	r0, [pc, #392]	@ (80023e4 <HAL_ADC_Init+0x28c>)
 800225a:	f7ff fef5 	bl	8002048 <LL_ADC_IsEnabled>
 800225e:	4604      	mov	r4, r0
 8002260:	4861      	ldr	r0, [pc, #388]	@ (80023e8 <HAL_ADC_Init+0x290>)
 8002262:	f7ff fef1 	bl	8002048 <LL_ADC_IsEnabled>
 8002266:	4603      	mov	r3, r0
 8002268:	431c      	orrs	r4, r3
 800226a:	4860      	ldr	r0, [pc, #384]	@ (80023ec <HAL_ADC_Init+0x294>)
 800226c:	f7ff feec 	bl	8002048 <LL_ADC_IsEnabled>
 8002270:	4603      	mov	r3, r0
 8002272:	4323      	orrs	r3, r4
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4619      	mov	r1, r3
 800227e:	485c      	ldr	r0, [pc, #368]	@ (80023f0 <HAL_ADC_Init+0x298>)
 8002280:	f7ff fd38 	bl	8001cf4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7e5b      	ldrb	r3, [r3, #25]
 8002288:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800228e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002294:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800229a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d106      	bne.n	80022c0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b6:	3b01      	subs	r3, #1
 80022b8:	045b      	lsls	r3, r3, #17
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d009      	beq.n	80022dc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	4b44      	ldr	r3, [pc, #272]	@ (80023f4 <HAL_ADC_Init+0x29c>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	69b9      	ldr	r1, [r7, #24]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff1c 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 80022fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d13d      	bne.n	800237e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d13a      	bne.n	800237e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800230c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002314:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002316:	4313      	orrs	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002324:	f023 0302 	bic.w	r3, r3, #2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	430b      	orrs	r3, r1
 8002330:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002338:	2b01      	cmp	r3, #1
 800233a:	d118      	bne.n	800236e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002346:	f023 0304 	bic.w	r3, r3, #4
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002352:	4311      	orrs	r1, r2
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002358:	4311      	orrs	r1, r2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800235e:	430a      	orrs	r2, r1
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	611a      	str	r2, [r3, #16]
 800236c:	e007      	b.n	800237e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d10c      	bne.n	80023a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238c:	f023 010f 	bic.w	r1, r3, #15
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	631a      	str	r2, [r3, #48]	@ 0x30
 800239e:	e007      	b.n	80023b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 020f 	bic.w	r2, r2, #15
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b4:	f023 0303 	bic.w	r3, r3, #3
 80023b8:	f043 0201 	orr.w	r2, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	655a      	str	r2, [r3, #84]	@ 0x54
 80023c0:	e007      	b.n	80023d2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	f043 0210 	orr.w	r2, r3, #16
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80023d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3724      	adds	r7, #36	@ 0x24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd90      	pop	{r4, r7, pc}
 80023dc:	200000a0 	.word	0x200000a0
 80023e0:	053e2d63 	.word	0x053e2d63
 80023e4:	50040000 	.word	0x50040000
 80023e8:	50040100 	.word	0x50040100
 80023ec:	50040200 	.word	0x50040200
 80023f0:	50040300 	.word	0x50040300
 80023f4:	fff0c007 	.word	0xfff0c007

080023f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002400:	4857      	ldr	r0, [pc, #348]	@ (8002560 <HAL_ADC_Start+0x168>)
 8002402:	f7ff fd8f 	bl	8001f24 <LL_ADC_GetMultimode>
 8002406:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fe69 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	f040 809c 	bne.w	8002552 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002420:	2b01      	cmp	r3, #1
 8002422:	d101      	bne.n	8002428 <HAL_ADC_Start+0x30>
 8002424:	2302      	movs	r3, #2
 8002426:	e097      	b.n	8002558 <HAL_ADC_Start+0x160>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 fe63 	bl	80030fc <ADC_Enable>
 8002436:	4603      	mov	r3, r0
 8002438:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800243a:	7dfb      	ldrb	r3, [r7, #23]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f040 8083 	bne.w	8002548 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002446:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800244a:	f023 0301 	bic.w	r3, r3, #1
 800244e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a42      	ldr	r2, [pc, #264]	@ (8002564 <HAL_ADC_Start+0x16c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d002      	beq.n	8002466 <HAL_ADC_Start+0x6e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	e000      	b.n	8002468 <HAL_ADC_Start+0x70>
 8002466:	4b40      	ldr	r3, [pc, #256]	@ (8002568 <HAL_ADC_Start+0x170>)
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	4293      	cmp	r3, r2
 800246e:	d002      	beq.n	8002476 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800248e:	d106      	bne.n	800249e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002494:	f023 0206 	bic.w	r2, r3, #6
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	659a      	str	r2, [r3, #88]	@ 0x58
 800249c:	e002      	b.n	80024a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	221c      	movs	r2, #28
 80024aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a2a      	ldr	r2, [pc, #168]	@ (8002564 <HAL_ADC_Start+0x16c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d002      	beq.n	80024c4 <HAL_ADC_Start+0xcc>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	e000      	b.n	80024c6 <HAL_ADC_Start+0xce>
 80024c4:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <HAL_ADC_Start+0x170>)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6812      	ldr	r2, [r2, #0]
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d008      	beq.n	80024e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d002      	beq.n	80024e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	2b09      	cmp	r3, #9
 80024de:	d114      	bne.n	800250a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff fdc6 	bl	8002094 <LL_ADC_REG_StartConversion>
 8002508:	e025      	b.n	8002556 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800250e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <HAL_ADC_Start+0x16c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d002      	beq.n	8002526 <HAL_ADC_Start+0x12e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	e000      	b.n	8002528 <HAL_ADC_Start+0x130>
 8002526:	4b10      	ldr	r3, [pc, #64]	@ (8002568 <HAL_ADC_Start+0x170>)
 8002528:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00f      	beq.n	8002556 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800253a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800253e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	@ 0x54
 8002546:	e006      	b.n	8002556 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002550:	e001      	b.n	8002556 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002552:	2302      	movs	r3, #2
 8002554:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002556:	7dfb      	ldrb	r3, [r7, #23]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	50040300 	.word	0x50040300
 8002564:	50040100 	.word	0x50040100
 8002568:	50040000 	.word	0x50040000

0800256c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800257a:	2b01      	cmp	r3, #1
 800257c:	d101      	bne.n	8002582 <HAL_ADC_Stop+0x16>
 800257e:	2302      	movs	r3, #2
 8002580:	e023      	b.n	80025ca <HAL_ADC_Stop+0x5e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800258a:	2103      	movs	r1, #3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fcf9 	bl	8002f84 <ADC_ConversionStop>
 8002592:	4603      	mov	r3, r0
 8002594:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fe33 	bl	8003208 <ADC_Disable>
 80025a2:	4603      	mov	r3, r0
 80025a4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d109      	bne.n	80025c0 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	f043 0201 	orr.w	r2, r3, #1
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b088      	sub	sp, #32
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025de:	4866      	ldr	r0, [pc, #408]	@ (8002778 <HAL_ADC_PollForConversion+0x1a4>)
 80025e0:	f7ff fca0 	bl	8001f24 <LL_ADC_GetMultimode>
 80025e4:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d102      	bne.n	80025f4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025ee:	2308      	movs	r3, #8
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e02a      	b.n	800264a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d002      	beq.n	8002606 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b09      	cmp	r3, #9
 8002604:	d111      	bne.n	800262a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d007      	beq.n	8002624 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002618:	f043 0220 	orr.w	r2, r3, #32
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0a4      	b.n	800276e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002624:	2304      	movs	r3, #4
 8002626:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002628:	e00f      	b.n	800264a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800262a:	4853      	ldr	r0, [pc, #332]	@ (8002778 <HAL_ADC_PollForConversion+0x1a4>)
 800262c:	f7ff fc88 	bl	8001f40 <LL_ADC_GetMultiDMATransfer>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d007      	beq.n	8002646 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f043 0220 	orr.w	r2, r3, #32
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e093      	b.n	800276e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002646:	2304      	movs	r3, #4
 8002648:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800264a:	f7ff fb47 	bl	8001cdc <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002650:	e021      	b.n	8002696 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d01d      	beq.n	8002696 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800265a:	f7ff fb3f 	bl	8001cdc <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	429a      	cmp	r2, r3
 8002668:	d302      	bcc.n	8002670 <HAL_ADC_PollForConversion+0x9c>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d112      	bne.n	8002696 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4013      	ands	r3, r2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10b      	bne.n	8002696 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002682:	f043 0204 	orr.w	r2, r3, #4
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e06b      	b.n	800276e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0d6      	beq.n	8002652 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fba6 	bl	8001e06 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01c      	beq.n	80026fa <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	7e5b      	ldrb	r3, [r3, #25]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d118      	bne.n	80026fa <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b08      	cmp	r3, #8
 80026d4:	d111      	bne.n	80026fa <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f2:	f043 0201 	orr.w	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a1f      	ldr	r2, [pc, #124]	@ (800277c <HAL_ADC_PollForConversion+0x1a8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d002      	beq.n	800270a <HAL_ADC_PollForConversion+0x136>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	e000      	b.n	800270c <HAL_ADC_PollForConversion+0x138>
 800270a:	4b1d      	ldr	r3, [pc, #116]	@ (8002780 <HAL_ADC_PollForConversion+0x1ac>)
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	6812      	ldr	r2, [r2, #0]
 8002710:	4293      	cmp	r3, r2
 8002712:	d008      	beq.n	8002726 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b05      	cmp	r3, #5
 800271e:	d002      	beq.n	8002726 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b09      	cmp	r3, #9
 8002724:	d104      	bne.n	8002730 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
 800272e:	e00c      	b.n	800274a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a11      	ldr	r2, [pc, #68]	@ (800277c <HAL_ADC_PollForConversion+0x1a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <HAL_ADC_PollForConversion+0x16c>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e000      	b.n	8002742 <HAL_ADC_PollForConversion+0x16e>
 8002740:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <HAL_ADC_PollForConversion+0x1ac>)
 8002742:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2b08      	cmp	r3, #8
 800274e:	d104      	bne.n	800275a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2208      	movs	r2, #8
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e008      	b.n	800276c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	220c      	movs	r2, #12
 800276a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	50040300 	.word	0x50040300
 800277c:	50040100 	.word	0x50040100
 8002780:	50040000 	.word	0x50040000

08002784 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b0b6      	sub	sp, #216	@ 0xd8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x22>
 80027be:	2302      	movs	r3, #2
 80027c0:	e3c9      	b.n	8002f56 <HAL_ADC_ConfigChannel+0x7b6>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fc88 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 83aa 	bne.w	8002f30 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d824      	bhi.n	8002836 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	3b02      	subs	r3, #2
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d81b      	bhi.n	800282e <HAL_ADC_ConfigChannel+0x8e>
 80027f6:	a201      	add	r2, pc, #4	@ (adr r2, 80027fc <HAL_ADC_ConfigChannel+0x5c>)
 80027f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027fc:	0800280d 	.word	0x0800280d
 8002800:	08002815 	.word	0x08002815
 8002804:	0800281d 	.word	0x0800281d
 8002808:	08002825 	.word	0x08002825
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800280c:	230c      	movs	r3, #12
 800280e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002812:	e010      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002814:	2312      	movs	r3, #18
 8002816:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800281a:	e00c      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800281c:	2318      	movs	r3, #24
 800281e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002822:	e008      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002824:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002828:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800282c:	e003      	b.n	8002836 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800282e:	2306      	movs	r3, #6
 8002830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002834:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002844:	f7ff faf2 	bl	8001e2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fc49 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002852:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fc69 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 8002860:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002864:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002868:	2b00      	cmp	r3, #0
 800286a:	f040 81a4 	bne.w	8002bb6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800286e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 819f 	bne.w	8002bb6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	6819      	ldr	r1, [r3, #0]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	461a      	mov	r2, r3
 8002886:	f7ff fafd 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	08db      	lsrs	r3, r3, #3
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00a      	beq.n	80028c2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	6919      	ldr	r1, [r3, #16]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80028bc:	f7ff fa4e 	bl	8001d5c <LL_ADC_SetOffset>
 80028c0:	e179      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fa6b 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10a      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x14e>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2100      	movs	r1, #0
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff fa60 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 80028e4:	4603      	mov	r3, r0
 80028e6:	0e9b      	lsrs	r3, r3, #26
 80028e8:	f003 021f 	and.w	r2, r3, #31
 80028ec:	e01e      	b.n	800292c <HAL_ADC_ConfigChannel+0x18c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2100      	movs	r1, #0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fa55 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 80028fa:	4603      	mov	r3, r0
 80028fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002904:	fa93 f3a3 	rbit	r3, r3
 8002908:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800290c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002910:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002914:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002918:	2b00      	cmp	r3, #0
 800291a:	d101      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800291c:	2320      	movs	r3, #32
 800291e:	e004      	b.n	800292a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002920:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002924:	fab3 f383 	clz	r3, r3
 8002928:	b2db      	uxtb	r3, r3
 800292a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1a4>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0e9b      	lsrs	r3, r3, #26
 800293e:	f003 031f 	and.w	r3, r3, #31
 8002942:	e018      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1d6>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002950:	fa93 f3a3 	rbit	r3, r3
 8002954:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002958:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800295c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e004      	b.n	8002976 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800296c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002976:	429a      	cmp	r2, r3
 8002978:	d106      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff fa24 	bl	8001dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fa08 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	2b00      	cmp	r3, #0
 800299c:	d10a      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x214>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2101      	movs	r1, #1
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f9fd 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 80029aa:	4603      	mov	r3, r0
 80029ac:	0e9b      	lsrs	r3, r3, #26
 80029ae:	f003 021f 	and.w	r2, r3, #31
 80029b2:	e01e      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x252>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2101      	movs	r1, #1
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f9f2 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80029d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80029da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e004      	b.n	80029f0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80029ea:	fab3 f383 	clz	r3, r3
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x26a>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 031f 	and.w	r3, r3, #31
 8002a08:	e018      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x29c>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002a1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a22:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002a26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e004      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d106      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2200      	movs	r2, #0
 8002a46:	2101      	movs	r1, #1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff f9c1 	bl	8001dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f9a5 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <HAL_ADC_ConfigChannel+0x2da>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2102      	movs	r1, #2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff f99a 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002a70:	4603      	mov	r3, r0
 8002a72:	0e9b      	lsrs	r3, r3, #26
 8002a74:	f003 021f 	and.w	r2, r3, #31
 8002a78:	e01e      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x318>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff f98f 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002a86:	4603      	mov	r3, r0
 8002a88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a90:	fa93 f3a3 	rbit	r3, r3
 8002a94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8002a98:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002a9c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8002aa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	e004      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d105      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x330>
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	0e9b      	lsrs	r3, r3, #26
 8002aca:	f003 031f 	and.w	r3, r3, #31
 8002ace:	e014      	b.n	8002afa <HAL_ADC_ConfigChannel+0x35a>
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002ade:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ae0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002ae4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002aec:	2320      	movs	r3, #32
 8002aee:	e004      	b.n	8002afa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002af0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002af4:	fab3 f383 	clz	r3, r3
 8002af8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d106      	bne.n	8002b0c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2102      	movs	r1, #2
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f962 	bl	8001dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2103      	movs	r1, #3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff f946 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x398>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2103      	movs	r1, #3
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f93b 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	e017      	b.n	8002b68 <HAL_ADC_ConfigChannel+0x3c8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2103      	movs	r1, #3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f930 	bl	8001da4 <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b4a:	fa93 f3a3 	rbit	r3, r3
 8002b4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b52:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002b54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b5a:	2320      	movs	r3, #32
 8002b5c:	e003      	b.n	8002b66 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x3e0>
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	0e9b      	lsrs	r3, r3, #26
 8002b7a:	f003 031f 	and.w	r3, r3, #31
 8002b7e:	e011      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x404>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8002b8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b90:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8002b92:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b9c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d106      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2200      	movs	r2, #0
 8002bae:	2103      	movs	r1, #3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff f90d 	bl	8001dd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fa44 	bl	8002048 <LL_ADC_IsEnabled>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 8140 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6818      	ldr	r0, [r3, #0]
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f7ff f981 	bl	8001edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	4a8f      	ldr	r2, [pc, #572]	@ (8002e1c <HAL_ADC_ConfigChannel+0x67c>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	f040 8131 	bne.w	8002e48 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10b      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x46e>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0e9b      	lsrs	r3, r3, #26
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f003 031f 	and.w	r3, r3, #31
 8002c02:	2b09      	cmp	r3, #9
 8002c04:	bf94      	ite	ls
 8002c06:	2301      	movls	r3, #1
 8002c08:	2300      	movhi	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	e019      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x4a2>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002c26:	2320      	movs	r3, #32
 8002c28:	e003      	b.n	8002c32 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c2c:	fab3 f383 	clz	r3, r3
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	bf94      	ite	ls
 8002c3c:	2301      	movls	r3, #1
 8002c3e:	2300      	movhi	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d079      	beq.n	8002d3a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d107      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x4c2>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	0e9b      	lsrs	r3, r3, #26
 8002c58:	3301      	adds	r3, #1
 8002c5a:	069b      	lsls	r3, r3, #26
 8002c5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c60:	e015      	b.n	8002c8e <HAL_ADC_ConfigChannel+0x4ee>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002c70:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c72:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	e003      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	069b      	lsls	r3, r3, #26
 8002c8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x50e>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	f003 031f 	and.w	r3, r3, #31
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cac:	e017      	b.n	8002cde <HAL_ADC_ConfigChannel+0x53e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8002cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8002cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2101      	movs	r1, #1
 8002cda:	fa01 f303 	lsl.w	r3, r1, r3
 8002cde:	ea42 0103 	orr.w	r1, r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x564>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	0e9b      	lsrs	r3, r3, #26
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	f003 021f 	and.w	r2, r3, #31
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	051b      	lsls	r3, r3, #20
 8002d02:	e018      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x596>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002d1c:	2320      	movs	r3, #32
 8002d1e:	e003      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	3301      	adds	r3, #1
 8002d2a:	f003 021f 	and.w	r2, r3, #31
 8002d2e:	4613      	mov	r3, r2
 8002d30:	005b      	lsls	r3, r3, #1
 8002d32:	4413      	add	r3, r2
 8002d34:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d36:	430b      	orrs	r3, r1
 8002d38:	e081      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x5b6>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	069b      	lsls	r3, r3, #26
 8002d50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d54:	e015      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x5e2>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x602>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	3301      	adds	r3, #1
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	e017      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x632>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	61bb      	str	r3, [r7, #24]
  return result;
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002db4:	6a3b      	ldr	r3, [r7, #32]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e003      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	ea42 0103 	orr.w	r1, r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x65e>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	3b1e      	subs	r3, #30
 8002df6:	051b      	lsls	r3, r3, #20
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dfc:	e01e      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x69c>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	fa93 f3a3 	rbit	r3, r3
 8002e0a:	60fb      	str	r3, [r7, #12]
  return result;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d104      	bne.n	8002e20 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002e16:	2320      	movs	r3, #32
 8002e18:	e006      	b.n	8002e28 <HAL_ADC_ConfigChannel+0x688>
 8002e1a:	bf00      	nop
 8002e1c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fab3 f383 	clz	r3, r3
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	3301      	adds	r3, #1
 8002e2a:	f003 021f 	and.w	r2, r3, #31
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	3b1e      	subs	r3, #30
 8002e36:	051b      	lsls	r3, r3, #20
 8002e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e3c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e42:	4619      	mov	r1, r3
 8002e44:	f7ff f81e 	bl	8001e84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b44      	ldr	r3, [pc, #272]	@ (8002f60 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d07a      	beq.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e54:	4843      	ldr	r0, [pc, #268]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e56:	f7fe ff73 	bl	8001d40 <LL_ADC_GetCommonPathInternalCh>
 8002e5a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a41      	ldr	r2, [pc, #260]	@ (8002f68 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d12c      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d126      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a3c      	ldr	r2, [pc, #240]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7cc>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d004      	beq.n	8002e88 <HAL_ADC_ConfigChannel+0x6e8>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a3b      	ldr	r2, [pc, #236]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d15d      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e8c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e90:	4619      	mov	r1, r3
 8002e92:	4834      	ldr	r0, [pc, #208]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002e94:	f7fe ff41 	bl	8001d1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e98:	4b36      	ldr	r3, [pc, #216]	@ (8002f74 <HAL_ADC_ConfigChannel+0x7d4>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	099b      	lsrs	r3, r3, #6
 8002e9e:	4a36      	ldr	r2, [pc, #216]	@ (8002f78 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002eb2:	e002      	b.n	8002eba <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1f9      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ec0:	e040      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8002f7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d118      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ed0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d112      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a23      	ldr	r2, [pc, #140]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7cc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <HAL_ADC_ConfigChannel+0x74c>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a22      	ldr	r2, [pc, #136]	@ (8002f70 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d12d      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ef0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	481b      	ldr	r0, [pc, #108]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ef8:	f7fe ff0f 	bl	8001d1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002efc:	e024      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1f      	ldr	r2, [pc, #124]	@ (8002f80 <HAL_ADC_ConfigChannel+0x7e0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d120      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11a      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a14      	ldr	r2, [pc, #80]	@ (8002f6c <HAL_ADC_ConfigChannel+0x7cc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d115      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f22:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f26:	4619      	mov	r1, r3
 8002f28:	480e      	ldr	r0, [pc, #56]	@ (8002f64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f2a:	f7fe fef6 	bl	8001d1a <LL_ADC_SetCommonPathInternalCh>
 8002f2e:	e00c      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f34:	f043 0220 	orr.w	r2, r3, #32
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002f42:	e002      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f48:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f52:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	37d8      	adds	r7, #216	@ 0xd8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	80080000 	.word	0x80080000
 8002f64:	50040300 	.word	0x50040300
 8002f68:	c7520000 	.word	0xc7520000
 8002f6c:	50040000 	.word	0x50040000
 8002f70:	50040200 	.word	0x50040200
 8002f74:	200000a0 	.word	0x200000a0
 8002f78:	053e2d63 	.word	0x053e2d63
 8002f7c:	cb840000 	.word	0xcb840000
 8002f80:	80000001 	.word	0x80000001

08002f84 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f7ff f8a2 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8002fa0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff f8c3 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 8002fac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8098 	beq.w	80030ec <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d02a      	beq.n	8003020 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	7e5b      	ldrb	r3, [r3, #25]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d126      	bne.n	8003020 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7e1b      	ldrb	r3, [r3, #24]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d122      	bne.n	8003020 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fde:	e014      	b.n	800300a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4a45      	ldr	r2, [pc, #276]	@ (80030f8 <ADC_ConversionStop+0x174>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d90d      	bls.n	8003004 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	f043 0210 	orr.w	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff8:	f043 0201 	orr.w	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e074      	b.n	80030ee <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	3301      	adds	r3, #1
 8003008:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003014:	2b40      	cmp	r3, #64	@ 0x40
 8003016:	d1e3      	bne.n	8002fe0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2240      	movs	r2, #64	@ 0x40
 800301e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d014      	beq.n	8003050 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff f85a 	bl	80020e4 <LL_ADC_REG_IsConversionOngoing>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f817 	bl	800206e <LL_ADC_IsDisableOngoing>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff f836 	bl	80020bc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d014      	beq.n	8003080 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f869 	bl	8002132 <LL_ADC_INJ_IsConversionOngoing>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00c      	beq.n	8003080 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe ffff 	bl	800206e <LL_ADC_IsDisableOngoing>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff f845 	bl	800210a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d005      	beq.n	8003092 <ADC_ConversionStop+0x10e>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d105      	bne.n	8003098 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800308c:	230c      	movs	r3, #12
 800308e:	617b      	str	r3, [r7, #20]
        break;
 8003090:	e005      	b.n	800309e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003092:	2308      	movs	r3, #8
 8003094:	617b      	str	r3, [r7, #20]
        break;
 8003096:	e002      	b.n	800309e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003098:	2304      	movs	r3, #4
 800309a:	617b      	str	r3, [r7, #20]
        break;
 800309c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800309e:	f7fe fe1d 	bl	8001cdc <HAL_GetTick>
 80030a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030a4:	e01b      	b.n	80030de <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030a6:	f7fe fe19 	bl	8001cdc <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b05      	cmp	r3, #5
 80030b2:	d914      	bls.n	80030de <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e007      	b.n	80030ee <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1dc      	bne.n	80030a6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	a33fffff 	.word	0xa33fffff

080030fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fe ff9b 	bl	8002048 <LL_ADC_IsEnabled>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d169      	bne.n	80031ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	4b36      	ldr	r3, [pc, #216]	@ (80031f8 <ADC_Enable+0xfc>)
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e055      	b.n	80031ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe ff56 	bl	8001ff8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800314c:	482b      	ldr	r0, [pc, #172]	@ (80031fc <ADC_Enable+0x100>)
 800314e:	f7fe fdf7 	bl	8001d40 <LL_ADC_GetCommonPathInternalCh>
 8003152:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003154:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800315c:	4b28      	ldr	r3, [pc, #160]	@ (8003200 <ADC_Enable+0x104>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	099b      	lsrs	r3, r3, #6
 8003162:	4a28      	ldr	r2, [pc, #160]	@ (8003204 <ADC_Enable+0x108>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	099b      	lsrs	r3, r3, #6
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003176:	e002      	b.n	800317e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	3b01      	subs	r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f9      	bne.n	8003178 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003184:	f7fe fdaa 	bl	8001cdc <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800318a:	e028      	b.n	80031de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7fe ff59 	bl	8002048 <LL_ADC_IsEnabled>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d104      	bne.n	80031a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fe ff29 	bl	8001ff8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031a6:	f7fe fd99 	bl	8001cdc <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d914      	bls.n	80031de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d00d      	beq.n	80031de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d2:	f043 0201 	orr.w	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e007      	b.n	80031ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d1cf      	bne.n	800318c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	8000003f 	.word	0x8000003f
 80031fc:	50040300 	.word	0x50040300
 8003200:	200000a0 	.word	0x200000a0
 8003204:	053e2d63 	.word	0x053e2d63

08003208 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7fe ff2a 	bl	800206e <LL_ADC_IsDisableOngoing>
 800321a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe ff11 	bl	8002048 <LL_ADC_IsEnabled>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d047      	beq.n	80032bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d144      	bne.n	80032bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 030d 	and.w	r3, r3, #13
 800323c:	2b01      	cmp	r3, #1
 800323e:	d10c      	bne.n	800325a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe feeb 	bl	8002020 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2203      	movs	r2, #3
 8003250:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003252:	f7fe fd43 	bl	8001cdc <HAL_GetTick>
 8003256:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003258:	e029      	b.n	80032ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e023      	b.n	80032be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003276:	f7fe fd31 	bl	8001cdc <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d914      	bls.n	80032ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003296:	f043 0210 	orr.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	f043 0201 	orr.w	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e007      	b.n	80032be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1dc      	bne.n	8003276 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <LL_ADC_IsEnabled>:
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <LL_ADC_IsEnabled+0x18>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_ADC_IsEnabled+0x1a>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_REG_IsConversionOngoing>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d101      	bne.n	8003304 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b09f      	sub	sp, #124	@ 0x7c
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800331e:	2300      	movs	r3, #0
 8003320:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800332e:	2302      	movs	r3, #2
 8003330:	e093      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800333a:	2300      	movs	r3, #0
 800333c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800333e:	2300      	movs	r3, #0
 8003340:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a47      	ldr	r2, [pc, #284]	@ (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d102      	bne.n	8003352 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800334c:	4b46      	ldr	r3, [pc, #280]	@ (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	e001      	b.n	8003356 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10b      	bne.n	8003374 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e072      	b.n	800345a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ffb8 	bl	80032ec <LL_ADC_REG_IsConversionOngoing>
 800337c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f7ff ffb2 	bl	80032ec <LL_ADC_REG_IsConversionOngoing>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d154      	bne.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800338e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003390:	2b00      	cmp	r3, #0
 8003392:	d151      	bne.n	8003438 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003394:	4b35      	ldr	r3, [pc, #212]	@ (800346c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003396:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02c      	beq.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80033a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80033b2:	035b      	lsls	r3, r3, #13
 80033b4:	430b      	orrs	r3, r1
 80033b6:	431a      	orrs	r2, r3
 80033b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033bc:	4829      	ldr	r0, [pc, #164]	@ (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80033be:	f7ff ff82 	bl	80032c6 <LL_ADC_IsEnabled>
 80033c2:	4604      	mov	r4, r0
 80033c4:	4828      	ldr	r0, [pc, #160]	@ (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033c6:	f7ff ff7e 	bl	80032c6 <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	431c      	orrs	r4, r3
 80033ce:	4828      	ldr	r0, [pc, #160]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80033d0:	f7ff ff79 	bl	80032c6 <LL_ADC_IsEnabled>
 80033d4:	4603      	mov	r3, r0
 80033d6:	4323      	orrs	r3, r4
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d137      	bne.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80033dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80033e4:	f023 030f 	bic.w	r3, r3, #15
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	6811      	ldr	r1, [r2, #0]
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	6892      	ldr	r2, [r2, #8]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	431a      	orrs	r2, r3
 80033f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f6:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	e028      	b.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003404:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003406:	4817      	ldr	r0, [pc, #92]	@ (8003464 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003408:	f7ff ff5d 	bl	80032c6 <LL_ADC_IsEnabled>
 800340c:	4604      	mov	r4, r0
 800340e:	4816      	ldr	r0, [pc, #88]	@ (8003468 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003410:	f7ff ff59 	bl	80032c6 <LL_ADC_IsEnabled>
 8003414:	4603      	mov	r3, r0
 8003416:	431c      	orrs	r4, r3
 8003418:	4815      	ldr	r0, [pc, #84]	@ (8003470 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800341a:	f7ff ff54 	bl	80032c6 <LL_ADC_IsEnabled>
 800341e:	4603      	mov	r3, r0
 8003420:	4323      	orrs	r3, r4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d112      	bne.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800342e:	f023 030f 	bic.w	r3, r3, #15
 8003432:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003434:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003436:	e009      	b.n	800344c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343c:	f043 0220 	orr.w	r2, r3, #32
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800344a:	e000      	b.n	800344e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800344c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003456:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800345a:	4618      	mov	r0, r3
 800345c:	377c      	adds	r7, #124	@ 0x7c
 800345e:	46bd      	mov	sp, r7
 8003460:	bd90      	pop	{r4, r7, pc}
 8003462:	bf00      	nop
 8003464:	50040000 	.word	0x50040000
 8003468:	50040100 	.word	0x50040100
 800346c:	50040300 	.word	0x50040300
 8003470:	50040200 	.word	0x50040200

08003474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	@ (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	@ (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4907      	ldr	r1, [pc, #28]	@ (8003510 <__NVIC_EnableIRQ+0x38>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	@ (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	@ (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	@ 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	@ 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e0:	d301      	bcc.n	80035e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <SysTick_Config+0x40>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ee:	210f      	movs	r1, #15
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	f7ff ff8e 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <SysTick_Config+0x40>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	@ (8003610 <SysTick_Config+0x40>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff29 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800363c:	f7ff ff3e 	bl	80034bc <__NVIC_GetPriorityGrouping>
 8003640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff ff8e 	bl	8003568 <NVIC_EncodePriority>
 800364c:	4602      	mov	r2, r0
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff5d 	bl	8003514 <__NVIC_SetPriority>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff31 	bl	80034d8 <__NVIC_EnableIRQ>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffa2 	bl	80035d0 <SysTick_Config>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036a6:	e17f      	b.n	80039a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	2101      	movs	r1, #1
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	4013      	ands	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8171 	beq.w	80039a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d005      	beq.n	80036d8 <HAL_GPIO_Init+0x40>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d130      	bne.n	800373a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	4313      	orrs	r3, r2
 8003700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800370e:	2201      	movs	r2, #1
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	fa02 f303 	lsl.w	r3, r2, r3
 8003716:	43db      	mvns	r3, r3
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f003 0201 	and.w	r2, r3, #1
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b03      	cmp	r3, #3
 8003744:	d118      	bne.n	8003778 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800374a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800374c:	2201      	movs	r2, #1
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	08db      	lsrs	r3, r3, #3
 8003762:	f003 0201 	and.w	r2, r3, #1
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	2b03      	cmp	r3, #3
 8003782:	d017      	beq.n	80037b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	2203      	movs	r2, #3
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d123      	bne.n	8003808 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	08da      	lsrs	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3208      	adds	r2, #8
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	220f      	movs	r2, #15
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	691a      	ldr	r2, [r3, #16]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f003 0307 	and.w	r3, r3, #7
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	08da      	lsrs	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3208      	adds	r2, #8
 8003802:	6939      	ldr	r1, [r7, #16]
 8003804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 0203 	and.w	r2, r3, #3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80ac 	beq.w	80039a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800384a:	4b5f      	ldr	r3, [pc, #380]	@ (80039c8 <HAL_GPIO_Init+0x330>)
 800384c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384e:	4a5e      	ldr	r2, [pc, #376]	@ (80039c8 <HAL_GPIO_Init+0x330>)
 8003850:	f043 0301 	orr.w	r3, r3, #1
 8003854:	6613      	str	r3, [r2, #96]	@ 0x60
 8003856:	4b5c      	ldr	r3, [pc, #368]	@ (80039c8 <HAL_GPIO_Init+0x330>)
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003862:	4a5a      	ldr	r2, [pc, #360]	@ (80039cc <HAL_GPIO_Init+0x334>)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	4013      	ands	r3, r2
 8003884:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800388c:	d025      	beq.n	80038da <HAL_GPIO_Init+0x242>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	@ (80039d0 <HAL_GPIO_Init+0x338>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01f      	beq.n	80038d6 <HAL_GPIO_Init+0x23e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	@ (80039d4 <HAL_GPIO_Init+0x33c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d019      	beq.n	80038d2 <HAL_GPIO_Init+0x23a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	@ (80039d8 <HAL_GPIO_Init+0x340>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0x236>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	@ (80039dc <HAL_GPIO_Init+0x344>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00d      	beq.n	80038ca <HAL_GPIO_Init+0x232>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	@ (80039e0 <HAL_GPIO_Init+0x348>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <HAL_GPIO_Init+0x22e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4a      	ldr	r2, [pc, #296]	@ (80039e4 <HAL_GPIO_Init+0x34c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_GPIO_Init+0x22a>
 80038be:	2306      	movs	r3, #6
 80038c0:	e00c      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038c2:	2307      	movs	r3, #7
 80038c4:	e00a      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038c6:	2305      	movs	r3, #5
 80038c8:	e008      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038ca:	2304      	movs	r3, #4
 80038cc:	e006      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038ce:	2303      	movs	r3, #3
 80038d0:	e004      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e002      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <HAL_GPIO_Init+0x244>
 80038da:	2300      	movs	r3, #0
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	f002 0203 	and.w	r2, r2, #3
 80038e2:	0092      	lsls	r2, r2, #2
 80038e4:	4093      	lsls	r3, r2
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038ec:	4937      	ldr	r1, [pc, #220]	@ (80039cc <HAL_GPIO_Init+0x334>)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	089b      	lsrs	r3, r3, #2
 80038f2:	3302      	adds	r3, #2
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038fa:	4b3b      	ldr	r3, [pc, #236]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800391e:	4a32      	ldr	r2, [pc, #200]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003924:	4b30      	ldr	r3, [pc, #192]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003948:	4a27      	ldr	r2, [pc, #156]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800394e:	4b26      	ldr	r3, [pc, #152]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003972:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	43db      	mvns	r3, r3
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d003      	beq.n	800399c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4313      	orrs	r3, r2
 800399a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800399c:	4a12      	ldr	r2, [pc, #72]	@ (80039e8 <HAL_GPIO_Init+0x350>)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	3301      	adds	r3, #1
 80039a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	fa22 f303 	lsr.w	r3, r2, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f47f ae78 	bne.w	80036a8 <HAL_GPIO_Init+0x10>
  }
}
 80039b8:	bf00      	nop
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40010000 	.word	0x40010000
 80039d0:	48000400 	.word	0x48000400
 80039d4:	48000800 	.word	0x48000800
 80039d8:	48000c00 	.word	0x48000c00
 80039dc:	48001000 	.word	0x48001000
 80039e0:	48001400 	.word	0x48001400
 80039e4:	48001800 	.word	0x48001800
 80039e8:	40010400 	.word	0x40010400

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a08:	e002      	b.n	8003a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a0a:	887a      	ldrh	r2, [r7, #2]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a20:	4b04      	ldr	r3, [pc, #16]	@ (8003a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40007000 	.word	0x40007000

08003a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a46:	d130      	bne.n	8003aaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a48:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003a50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a54:	d038      	beq.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a56:	4b20      	ldr	r3, [pc, #128]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a66:	4b1d      	ldr	r3, [pc, #116]	@ (8003adc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2232      	movs	r2, #50	@ 0x32
 8003a6c:	fb02 f303 	mul.w	r3, r2, r3
 8003a70:	4a1b      	ldr	r2, [pc, #108]	@ (8003ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a72:	fba2 2303 	umull	r2, r3, r2, r3
 8003a76:	0c9b      	lsrs	r3, r3, #18
 8003a78:	3301      	adds	r3, #1
 8003a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a7c:	e002      	b.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a84:	4b14      	ldr	r3, [pc, #80]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a90:	d102      	bne.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1f2      	bne.n	8003a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aa4:	d110      	bne.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e00f      	b.n	8003aca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ab6:	d007      	beq.n	8003ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ac0:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ac2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ac6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	40007000 	.word	0x40007000
 8003adc:	200000a0 	.word	0x200000a0
 8003ae0:	431bde83 	.word	0x431bde83

08003ae4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e3ca      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af6:	4b97      	ldr	r3, [pc, #604]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b00:	4b94      	ldr	r3, [pc, #592]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f003 0303 	and.w	r3, r3, #3
 8003b08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0310 	and.w	r3, r3, #16
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 80e4 	beq.w	8003ce0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d007      	beq.n	8003b2e <HAL_RCC_OscConfig+0x4a>
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	2b0c      	cmp	r3, #12
 8003b22:	f040 808b 	bne.w	8003c3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	f040 8087 	bne.w	8003c3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2e:	4b89      	ldr	r3, [pc, #548]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x62>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e3a2      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1a      	ldr	r2, [r3, #32]
 8003b4a:	4b82      	ldr	r3, [pc, #520]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d004      	beq.n	8003b60 <HAL_RCC_OscConfig+0x7c>
 8003b56:	4b7f      	ldr	r3, [pc, #508]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b5e:	e005      	b.n	8003b6c <HAL_RCC_OscConfig+0x88>
 8003b60:	4b7c      	ldr	r3, [pc, #496]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d223      	bcs.n	8003bb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fd55 	bl	8004624 <RCC_SetFlashLatencyFromMSIRange>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e383      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b84:	4b73      	ldr	r3, [pc, #460]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a72      	ldr	r2, [pc, #456]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b8a:	f043 0308 	orr.w	r3, r3, #8
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b70      	ldr	r3, [pc, #448]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	496d      	ldr	r1, [pc, #436]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69db      	ldr	r3, [r3, #28]
 8003bae:	021b      	lsls	r3, r3, #8
 8003bb0:	4968      	ldr	r1, [pc, #416]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
 8003bb6:	e025      	b.n	8003c04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb8:	4b66      	ldr	r3, [pc, #408]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a65      	ldr	r2, [pc, #404]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bbe:	f043 0308 	orr.w	r3, r3, #8
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b63      	ldr	r3, [pc, #396]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	4960      	ldr	r1, [pc, #384]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	021b      	lsls	r3, r3, #8
 8003be4:	495b      	ldr	r1, [pc, #364]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fd15 	bl	8004624 <RCC_SetFlashLatencyFromMSIRange>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e343      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c04:	f000 fc4a 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	4b52      	ldr	r3, [pc, #328]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	091b      	lsrs	r3, r3, #4
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	4950      	ldr	r1, [pc, #320]	@ (8003d58 <HAL_RCC_OscConfig+0x274>)
 8003c16:	5ccb      	ldrb	r3, [r1, r3]
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c20:	4a4e      	ldr	r2, [pc, #312]	@ (8003d5c <HAL_RCC_OscConfig+0x278>)
 8003c22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c24:	4b4e      	ldr	r3, [pc, #312]	@ (8003d60 <HAL_RCC_OscConfig+0x27c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe f807 	bl	8001c3c <HAL_InitTick>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d052      	beq.n	8003cde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	e327      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d032      	beq.n	8003caa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c44:	4b43      	ldr	r3, [pc, #268]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a42      	ldr	r2, [pc, #264]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c50:	f7fe f844 	bl	8001cdc <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c58:	f7fe f840 	bl	8001cdc <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e310      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d0f0      	beq.n	8003c58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c76:	4b37      	ldr	r3, [pc, #220]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a36      	ldr	r2, [pc, #216]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b34      	ldr	r3, [pc, #208]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	4931      	ldr	r1, [pc, #196]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c94:	4b2f      	ldr	r3, [pc, #188]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	021b      	lsls	r3, r3, #8
 8003ca2:	492c      	ldr	r1, [pc, #176]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
 8003ca8:	e01a      	b.n	8003ce0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003caa:	4b2a      	ldr	r3, [pc, #168]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a29      	ldr	r2, [pc, #164]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	f023 0301 	bic.w	r3, r3, #1
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe f811 	bl	8001cdc <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cbe:	f7fe f80d 	bl	8001cdc <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e2dd      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0x1da>
 8003cdc:	e000      	b.n	8003ce0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d074      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b08      	cmp	r3, #8
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x21a>
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	2b0c      	cmp	r3, #12
 8003cf6:	d10e      	bne.n	8003d16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d10b      	bne.n	8003d16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d064      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d160      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e2ba      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1e:	d106      	bne.n	8003d2e <HAL_RCC_OscConfig+0x24a>
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a0b      	ldr	r2, [pc, #44]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d2a:	6013      	str	r3, [r2, #0]
 8003d2c:	e026      	b.n	8003d7c <HAL_RCC_OscConfig+0x298>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d36:	d115      	bne.n	8003d64 <HAL_RCC_OscConfig+0x280>
 8003d38:	4b06      	ldr	r3, [pc, #24]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a05      	ldr	r2, [pc, #20]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	4b03      	ldr	r3, [pc, #12]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a02      	ldr	r2, [pc, #8]	@ (8003d54 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	e014      	b.n	8003d7c <HAL_RCC_OscConfig+0x298>
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08008b2c 	.word	0x08008b2c
 8003d5c:	200000a0 	.word	0x200000a0
 8003d60:	200000a4 	.word	0x200000a4
 8003d64:	4ba0      	ldr	r3, [pc, #640]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a9f      	ldr	r2, [pc, #636]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	4b9d      	ldr	r3, [pc, #628]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a9c      	ldr	r2, [pc, #624]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fd ffaa 	bl	8001cdc <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fd ffa6 	bl	8001cdc <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	@ 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e276      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9e:	4b92      	ldr	r3, [pc, #584]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x2a8>
 8003daa:	e014      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dac:	f7fd ff96 	bl	8001cdc <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db4:	f7fd ff92 	bl	8001cdc <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b64      	cmp	r3, #100	@ 0x64
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e262      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc6:	4b88      	ldr	r3, [pc, #544]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1f0      	bne.n	8003db4 <HAL_RCC_OscConfig+0x2d0>
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d060      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_OscConfig+0x310>
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d119      	bne.n	8003e22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d116      	bne.n	8003e22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df4:	4b7c      	ldr	r3, [pc, #496]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_OscConfig+0x328>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e23f      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0c:	4b76      	ldr	r3, [pc, #472]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	061b      	lsls	r3, r3, #24
 8003e1a:	4973      	ldr	r1, [pc, #460]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e20:	e040      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d023      	beq.n	8003e72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2a:	4b6f      	ldr	r3, [pc, #444]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fd ff51 	bl	8001cdc <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fd ff4d 	bl	8001cdc <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e21d      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e50:	4b65      	ldr	r3, [pc, #404]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b62      	ldr	r3, [pc, #392]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	495f      	ldr	r1, [pc, #380]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
 8003e70:	e018      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b5d      	ldr	r3, [pc, #372]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a5c      	ldr	r2, [pc, #368]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd ff2d 	bl	8001cdc <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fd ff29 	bl	8001cdc <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e1f9      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e98:	4b53      	ldr	r3, [pc, #332]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01c      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ebe:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003ec0:	f043 0301 	orr.w	r3, r3, #1
 8003ec4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec8:	f7fd ff08 	bl	8001cdc <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed0:	f7fd ff04 	bl	8001cdc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1d4      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ee2:	4b41      	ldr	r3, [pc, #260]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0ef      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x3ec>
 8003ef0:	e01b      	b.n	8003f2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ef8:	4a3b      	ldr	r2, [pc, #236]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003efa:	f023 0301 	bic.w	r3, r3, #1
 8003efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd feeb 	bl	8001cdc <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fee7 	bl	8001cdc <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1b7      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f1c:	4b32      	ldr	r3, [pc, #200]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d1ef      	bne.n	8003f0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80a6 	beq.w	8004084 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10d      	bne.n	8003f64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	4a26      	ldr	r2, [pc, #152]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f54:	4b24      	ldr	r3, [pc, #144]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f60:	2301      	movs	r3, #1
 8003f62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f64:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d118      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f70:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f7c:	f7fd feae 	bl	8001cdc <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	e008      	b.n	8003f96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f84:	f7fd feaa 	bl	8001cdc <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	2b02      	cmp	r3, #2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e17a      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	4b15      	ldr	r3, [pc, #84]	@ (8003fec <HAL_RCC_OscConfig+0x508>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0f0      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d108      	bne.n	8003fbc <HAL_RCC_OscConfig+0x4d8>
 8003faa:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fba:	e029      	b.n	8004010 <HAL_RCC_OscConfig+0x52c>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d115      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x50c>
 8003fc4:	4b08      	ldr	r3, [pc, #32]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fca:	4a07      	ldr	r2, [pc, #28]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fd4:	4b04      	ldr	r3, [pc, #16]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fda:	4a03      	ldr	r2, [pc, #12]	@ (8003fe8 <HAL_RCC_OscConfig+0x504>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003fe4:	e014      	b.n	8004010 <HAL_RCC_OscConfig+0x52c>
 8003fe6:	bf00      	nop
 8003fe8:	40021000 	.word	0x40021000
 8003fec:	40007000 	.word	0x40007000
 8003ff0:	4b9c      	ldr	r3, [pc, #624]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff6:	4a9b      	ldr	r2, [pc, #620]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004000:	4b98      	ldr	r3, [pc, #608]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004006:	4a97      	ldr	r2, [pc, #604]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d016      	beq.n	8004046 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004018:	f7fd fe60 	bl	8001cdc <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fd fe5c 	bl	8001cdc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e12a      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004036:	4b8b      	ldr	r3, [pc, #556]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ed      	beq.n	8004020 <HAL_RCC_OscConfig+0x53c>
 8004044:	e015      	b.n	8004072 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fd fe49 	bl	8001cdc <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800404c:	e00a      	b.n	8004064 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404e:	f7fd fe45 	bl	8001cdc <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405c:	4293      	cmp	r3, r2
 800405e:	d901      	bls.n	8004064 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e113      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004064:	4b7f      	ldr	r3, [pc, #508]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1ed      	bne.n	800404e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004072:	7ffb      	ldrb	r3, [r7, #31]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d105      	bne.n	8004084 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004078:	4b7a      	ldr	r3, [pc, #488]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800407c:	4a79      	ldr	r2, [pc, #484]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 800407e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004082:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80fe 	beq.w	800428a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	2b02      	cmp	r3, #2
 8004094:	f040 80d0 	bne.w	8004238 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004098:	4b72      	ldr	r3, [pc, #456]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0203 	and.w	r2, r3, #3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d130      	bne.n	800410e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b6:	3b01      	subs	r3, #1
 80040b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d127      	bne.n	800410e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11f      	bne.n	800410e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040d8:	2a07      	cmp	r2, #7
 80040da:	bf14      	ite	ne
 80040dc:	2201      	movne	r2, #1
 80040de:	2200      	moveq	r2, #0
 80040e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d113      	bne.n	800410e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	3b01      	subs	r3, #1
 80040f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d109      	bne.n	800410e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004104:	085b      	lsrs	r3, r3, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d06e      	beq.n	80041ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	2b0c      	cmp	r3, #12
 8004112:	d069      	beq.n	80041e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004114:	4b53      	ldr	r3, [pc, #332]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d105      	bne.n	800412c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004120:	4b50      	ldr	r3, [pc, #320]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0ad      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004130:	4b4c      	ldr	r3, [pc, #304]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a4b      	ldr	r2, [pc, #300]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004136:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800413a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800413c:	f7fd fdce 	bl	8001cdc <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004144:	f7fd fdca 	bl	8001cdc <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e09a      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004156:	4b43      	ldr	r3, [pc, #268]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004162:	4b40      	ldr	r3, [pc, #256]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	4b40      	ldr	r3, [pc, #256]	@ (8004268 <HAL_RCC_OscConfig+0x784>)
 8004168:	4013      	ands	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004172:	3a01      	subs	r2, #1
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	4311      	orrs	r1, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800417c:	0212      	lsls	r2, r2, #8
 800417e:	4311      	orrs	r1, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004184:	0852      	lsrs	r2, r2, #1
 8004186:	3a01      	subs	r2, #1
 8004188:	0552      	lsls	r2, r2, #21
 800418a:	4311      	orrs	r1, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004190:	0852      	lsrs	r2, r2, #1
 8004192:	3a01      	subs	r2, #1
 8004194:	0652      	lsls	r2, r2, #25
 8004196:	4311      	orrs	r1, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800419c:	0912      	lsrs	r2, r2, #4
 800419e:	0452      	lsls	r2, r2, #17
 80041a0:	430a      	orrs	r2, r1
 80041a2:	4930      	ldr	r1, [pc, #192]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041c0:	f7fd fd8c 	bl	8001cdc <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fd fd88 	bl	8001cdc <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e058      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	4b22      	ldr	r3, [pc, #136]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e6:	e050      	b.n	800428a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e04f      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d148      	bne.n	800428a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a19      	ldr	r2, [pc, #100]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004204:	4b17      	ldr	r3, [pc, #92]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a16      	ldr	r2, [pc, #88]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 800420a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800420e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004210:	f7fd fd64 	bl	8001cdc <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fd fd60 	bl	8001cdc <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e030      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	4b0e      	ldr	r3, [pc, #56]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x734>
 8004236:	e028      	b.n	800428a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b0c      	cmp	r3, #12
 800423c:	d023      	beq.n	8004286 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423e:	4b09      	ldr	r3, [pc, #36]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a08      	ldr	r2, [pc, #32]	@ (8004264 <HAL_RCC_OscConfig+0x780>)
 8004244:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424a:	f7fd fd47 	bl	8001cdc <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004250:	e00c      	b.n	800426c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004252:	f7fd fd43 	bl	8001cdc <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	2b02      	cmp	r3, #2
 800425e:	d905      	bls.n	800426c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004260:	2303      	movs	r3, #3
 8004262:	e013      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
 8004264:	40021000 	.word	0x40021000
 8004268:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	4b09      	ldr	r3, [pc, #36]	@ (8004294 <HAL_RCC_OscConfig+0x7b0>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1ec      	bne.n	8004252 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <HAL_RCC_OscConfig+0x7b0>)
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	4905      	ldr	r1, [pc, #20]	@ (8004294 <HAL_RCC_OscConfig+0x7b0>)
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_RCC_OscConfig+0x7b4>)
 8004280:	4013      	ands	r3, r2
 8004282:	60cb      	str	r3, [r1, #12]
 8004284:	e001      	b.n	800428a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000
 8004298:	feeefffc 	.word	0xfeeefffc

0800429c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e0e7      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042b0:	4b75      	ldr	r3, [pc, #468]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d910      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b72      	ldr	r3, [pc, #456]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4970      	ldr	r1, [pc, #448]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0cf      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d010      	beq.n	800430e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	4b66      	ldr	r3, [pc, #408]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d908      	bls.n	800430e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b63      	ldr	r3, [pc, #396]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4960      	ldr	r1, [pc, #384]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d04c      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b03      	cmp	r3, #3
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004322:	4b5a      	ldr	r3, [pc, #360]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d121      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e0a6      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d107      	bne.n	800434a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800433a:	4b54      	ldr	r3, [pc, #336]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d115      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e09a      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d107      	bne.n	8004362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004352:	4b4e      	ldr	r3, [pc, #312]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e08e      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004362:	4b4a      	ldr	r3, [pc, #296]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e086      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b46      	ldr	r3, [pc, #280]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	4943      	ldr	r1, [pc, #268]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004380:	4313      	orrs	r3, r2
 8004382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004384:	f7fd fcaa 	bl	8001cdc <HAL_GetTick>
 8004388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fd fca6 	bl	8001cdc <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e06e      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b3a      	ldr	r3, [pc, #232]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	4b31      	ldr	r3, [pc, #196]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d208      	bcs.n	80043e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043d0:	4b2e      	ldr	r3, [pc, #184]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	492b      	ldr	r1, [pc, #172]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e2:	4b29      	ldr	r3, [pc, #164]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0307 	and.w	r3, r3, #7
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d210      	bcs.n	8004412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f0:	4b25      	ldr	r3, [pc, #148]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f023 0207 	bic.w	r2, r3, #7
 80043f8:	4923      	ldr	r1, [pc, #140]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004400:	4b21      	ldr	r3, [pc, #132]	@ (8004488 <HAL_RCC_ClockConfig+0x1ec>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	683a      	ldr	r2, [r7, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d001      	beq.n	8004412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e036      	b.n	8004480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d008      	beq.n	8004430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4918      	ldr	r1, [pc, #96]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d009      	beq.n	8004450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800443c:	4b13      	ldr	r3, [pc, #76]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4910      	ldr	r1, [pc, #64]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004450:	f000 f824 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b0d      	ldr	r3, [pc, #52]	@ (800448c <HAL_RCC_ClockConfig+0x1f0>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	490b      	ldr	r1, [pc, #44]	@ (8004490 <HAL_RCC_ClockConfig+0x1f4>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	fa22 f303 	lsr.w	r3, r2, r3
 800446c:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <HAL_RCC_ClockConfig+0x1f8>)
 800446e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004470:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_ClockConfig+0x1fc>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7fd fbe1 	bl	8001c3c <HAL_InitTick>
 800447a:	4603      	mov	r3, r0
 800447c:	72fb      	strb	r3, [r7, #11]

  return status;
 800447e:	7afb      	ldrb	r3, [r7, #11]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40022000 	.word	0x40022000
 800448c:	40021000 	.word	0x40021000
 8004490:	08008b2c 	.word	0x08008b2c
 8004494:	200000a0 	.word	0x200000a0
 8004498:	200000a4 	.word	0x200000a4

0800449c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800449c:	b480      	push	{r7}
 800449e:	b089      	sub	sp, #36	@ 0x24
 80044a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	2300      	movs	r3, #0
 80044a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b3e      	ldr	r3, [pc, #248]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044b4:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0303 	and.w	r3, r3, #3
 80044bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_GetSysClockFreq+0x34>
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d121      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d11e      	bne.n	800450e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044d0:	4b34      	ldr	r3, [pc, #208]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044dc:	4b31      	ldr	r3, [pc, #196]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e2:	0a1b      	lsrs	r3, r3, #8
 80044e4:	f003 030f 	and.w	r3, r3, #15
 80044e8:	61fb      	str	r3, [r7, #28]
 80044ea:	e005      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044ec:	4b2d      	ldr	r3, [pc, #180]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	091b      	lsrs	r3, r3, #4
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044f8:	4a2b      	ldr	r2, [pc, #172]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10d      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800450c:	e00a      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	2b04      	cmp	r3, #4
 8004512:	d102      	bne.n	800451a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004514:	4b25      	ldr	r3, [pc, #148]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004516:	61bb      	str	r3, [r7, #24]
 8004518:	e004      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b08      	cmp	r3, #8
 800451e:	d101      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004520:	4b23      	ldr	r3, [pc, #140]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b0c      	cmp	r3, #12
 8004528:	d134      	bne.n	8004594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800452a:	4b1e      	ldr	r3, [pc, #120]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0xa6>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <HAL_RCC_GetSysClockFreq+0xac>
 8004540:	e005      	b.n	800454e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004542:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004544:	617b      	str	r3, [r7, #20]
      break;
 8004546:	e005      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004548:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800454a:	617b      	str	r3, [r7, #20]
      break;
 800454c:	e002      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	617b      	str	r3, [r7, #20]
      break;
 8004552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004554:	4b13      	ldr	r3, [pc, #76]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	091b      	lsrs	r3, r3, #4
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	3301      	adds	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004562:	4b10      	ldr	r3, [pc, #64]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	0a1b      	lsrs	r3, r3, #8
 8004568:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	fb03 f202 	mul.w	r2, r3, r2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800457a:	4b0a      	ldr	r3, [pc, #40]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	0e5b      	lsrs	r3, r3, #25
 8004580:	f003 0303 	and.w	r3, r3, #3
 8004584:	3301      	adds	r3, #1
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004594:	69bb      	ldr	r3, [r7, #24]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3724      	adds	r7, #36	@ 0x24
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08008b44 	.word	0x08008b44
 80045ac:	00f42400 	.word	0x00f42400
 80045b0:	007a1200 	.word	0x007a1200

080045b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	200000a0 	.word	0x200000a0

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045d0:	f7ff fff0 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d4:	4602      	mov	r2, r0
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	0a1b      	lsrs	r3, r3, #8
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	4904      	ldr	r1, [pc, #16]	@ (80045f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045e2:	5ccb      	ldrb	r3, [r1, r3]
 80045e4:	f003 031f 	and.w	r3, r3, #31
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000
 80045f4:	08008b3c 	.word	0x08008b3c

080045f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045fc:	f7ff ffda 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 8004600:	4602      	mov	r2, r0
 8004602:	4b06      	ldr	r3, [pc, #24]	@ (800461c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	0adb      	lsrs	r3, r3, #11
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	4904      	ldr	r1, [pc, #16]	@ (8004620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800460e:	5ccb      	ldrb	r3, [r1, r3]
 8004610:	f003 031f 	and.w	r3, r3, #31
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	08008b3c 	.word	0x08008b3c

08004624 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800462c:	2300      	movs	r3, #0
 800462e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004630:	4b2a      	ldr	r3, [pc, #168]	@ (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800463c:	f7ff f9ee 	bl	8003a1c <HAL_PWREx_GetVoltageRange>
 8004640:	6178      	str	r0, [r7, #20]
 8004642:	e014      	b.n	800466e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004648:	4a24      	ldr	r2, [pc, #144]	@ (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800464e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004650:	4b22      	ldr	r3, [pc, #136]	@ (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800465c:	f7ff f9de 	bl	8003a1c <HAL_PWREx_GetVoltageRange>
 8004660:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004662:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004664:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004666:	4a1d      	ldr	r2, [pc, #116]	@ (80046dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800466c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004674:	d10b      	bne.n	800468e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b80      	cmp	r3, #128	@ 0x80
 800467a:	d919      	bls.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004680:	d902      	bls.n	8004688 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004682:	2302      	movs	r3, #2
 8004684:	613b      	str	r3, [r7, #16]
 8004686:	e013      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	e010      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b80      	cmp	r3, #128	@ 0x80
 8004692:	d902      	bls.n	800469a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004694:	2303      	movs	r3, #3
 8004696:	613b      	str	r3, [r7, #16]
 8004698:	e00a      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b80      	cmp	r3, #128	@ 0x80
 800469e:	d102      	bne.n	80046a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046a0:	2302      	movs	r3, #2
 80046a2:	613b      	str	r3, [r7, #16]
 80046a4:	e004      	b.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b70      	cmp	r3, #112	@ 0x70
 80046aa:	d101      	bne.n	80046b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046ac:	2301      	movs	r3, #1
 80046ae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046b0:	4b0b      	ldr	r3, [pc, #44]	@ (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f023 0207 	bic.w	r2, r3, #7
 80046b8:	4909      	ldr	r1, [pc, #36]	@ (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046c0:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0307 	and.w	r3, r3, #7
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d001      	beq.n	80046d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e000      	b.n	80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40021000 	.word	0x40021000
 80046e0:	40022000 	.word	0x40022000

080046e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046ec:	2300      	movs	r3, #0
 80046ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f0:	2300      	movs	r3, #0
 80046f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d041      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004704:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004708:	d02a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800470a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800470e:	d824      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004710:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004714:	d008      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004716:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800471a:	d81e      	bhi.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00a      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004720:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004724:	d010      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004726:	e018      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004728:	4b86      	ldr	r3, [pc, #536]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a85      	ldr	r2, [pc, #532]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004732:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004734:	e015      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	3304      	adds	r3, #4
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fabb 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004742:	4603      	mov	r3, r0
 8004744:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004746:	e00c      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	3320      	adds	r3, #32
 800474c:	2100      	movs	r1, #0
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fba6 	bl	8004ea0 <RCCEx_PLLSAI2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004758:	e003      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	74fb      	strb	r3, [r7, #19]
      break;
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004762:	7cfb      	ldrb	r3, [r7, #19]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004768:	4b76      	ldr	r3, [pc, #472]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800476e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004776:	4973      	ldr	r1, [pc, #460]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	4313      	orrs	r3, r2
 800477a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800477e:	e001      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	7cfb      	ldrb	r3, [r7, #19]
 8004782:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d041      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004794:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004798:	d02a      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800479a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800479e:	d824      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047a4:	d008      	beq.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80047aa:	d81e      	bhi.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047b4:	d010      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047b6:	e018      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047b8:	4b62      	ldr	r3, [pc, #392]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a61      	ldr	r2, [pc, #388]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047c4:	e015      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2100      	movs	r1, #0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa73 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d6:	e00c      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3320      	adds	r3, #32
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fb5e 	bl	8004ea0 <RCCEx_PLLSAI2_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e8:	e003      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	74fb      	strb	r3, [r7, #19]
      break;
 80047ee:	e000      	b.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047f8:	4b52      	ldr	r3, [pc, #328]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004806:	494f      	ldr	r1, [pc, #316]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	4313      	orrs	r3, r2
 800480a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800480e:	e001      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004810:	7cfb      	ldrb	r3, [r7, #19]
 8004812:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 80a0 	beq.w	8004962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004822:	2300      	movs	r3, #0
 8004824:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004826:	4b47      	ldr	r3, [pc, #284]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004836:	2300      	movs	r3, #0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800483c:	4b41      	ldr	r3, [pc, #260]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004840:	4a40      	ldr	r2, [pc, #256]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004846:	6593      	str	r3, [r2, #88]	@ 0x58
 8004848:	4b3e      	ldr	r3, [pc, #248]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004854:	2301      	movs	r3, #1
 8004856:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004858:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a3a      	ldr	r2, [pc, #232]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800485e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004862:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004864:	f7fd fa3a 	bl	8001cdc <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800486a:	e009      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fd fa36 	bl	8001cdc <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d902      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	74fb      	strb	r3, [r7, #19]
        break;
 800487e:	e005      	b.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004880:	4b31      	ldr	r3, [pc, #196]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004888:	2b00      	cmp	r3, #0
 800488a:	d0ef      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d15c      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004892:	4b2c      	ldr	r3, [pc, #176]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d01f      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d019      	beq.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048b0:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	4a20      	ldr	r2, [pc, #128]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048dc:	4a19      	ldr	r2, [pc, #100]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d016      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ee:	f7fd f9f5 	bl	8001cdc <HAL_GetTick>
 80048f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f4:	e00b      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f6:	f7fd f9f1 	bl	8001cdc <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004904:	4293      	cmp	r3, r2
 8004906:	d902      	bls.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004908:	2303      	movs	r3, #3
 800490a:	74fb      	strb	r3, [r7, #19]
            break;
 800490c:	e006      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490e:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ec      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800491c:	7cfb      	ldrb	r3, [r7, #19]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004922:	4b08      	ldr	r3, [pc, #32]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004932:	4904      	ldr	r1, [pc, #16]	@ (8004944 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800493a:	e009      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800493c:	7cfb      	ldrb	r3, [r7, #19]
 800493e:	74bb      	strb	r3, [r7, #18]
 8004940:	e006      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004942:	bf00      	nop
 8004944:	40021000 	.word	0x40021000
 8004948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004950:	7c7b      	ldrb	r3, [r7, #17]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d105      	bne.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004956:	4b9e      	ldr	r3, [pc, #632]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495a:	4a9d      	ldr	r2, [pc, #628]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004960:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800496e:	4b98      	ldr	r3, [pc, #608]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004974:	f023 0203 	bic.w	r2, r3, #3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497c:	4994      	ldr	r1, [pc, #592]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004990:	4b8f      	ldr	r3, [pc, #572]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004996:	f023 020c 	bic.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800499e:	498c      	ldr	r1, [pc, #560]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049b2:	4b87      	ldr	r3, [pc, #540]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c0:	4983      	ldr	r1, [pc, #524]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049e2:	497b      	ldr	r1, [pc, #492]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049f6:	4b76      	ldr	r3, [pc, #472]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a04:	4972      	ldr	r1, [pc, #456]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0320 	and.w	r3, r3, #32
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a18:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a26:	496a      	ldr	r1, [pc, #424]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a48:	4961      	ldr	r1, [pc, #388]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a5c:	4b5c      	ldr	r3, [pc, #368]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a6a:	4959      	ldr	r1, [pc, #356]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a7e:	4b54      	ldr	r3, [pc, #336]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a8c:	4950      	ldr	r1, [pc, #320]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aae:	4948      	ldr	r1, [pc, #288]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ac2:	4b43      	ldr	r3, [pc, #268]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad0:	493f      	ldr	r1, [pc, #252]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d028      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ae4:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004af2:	4937      	ldr	r1, [pc, #220]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004afe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b02:	d106      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b04:	4b32      	ldr	r3, [pc, #200]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4a31      	ldr	r2, [pc, #196]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b0e:	60d3      	str	r3, [r2, #12]
 8004b10:	e011      	b.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f8c8 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d028      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b42:	4b23      	ldr	r3, [pc, #140]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b50:	491f      	ldr	r1, [pc, #124]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b60:	d106      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b62:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b6c:	60d3      	str	r3, [r2, #12]
 8004b6e:	e011      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b78:	d10c      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2101      	movs	r1, #1
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 f899 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004b86:	4603      	mov	r3, r0
 8004b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d02b      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bae:	4908      	ldr	r1, [pc, #32]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbe:	d109      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc0:	4b03      	ldr	r3, [pc, #12]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a02      	ldr	r2, [pc, #8]	@ (8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bca:	60d3      	str	r3, [r2, #12]
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bce:	bf00      	nop
 8004bd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3304      	adds	r3, #4
 8004be2:	2101      	movs	r1, #1
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 f867 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004bea:	4603      	mov	r3, r0
 8004bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bee:	7cfb      	ldrb	r3, [r7, #19]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02f      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c04:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c12:	4928      	ldr	r1, [pc, #160]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c22:	d10d      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3304      	adds	r3, #4
 8004c28:	2102      	movs	r1, #2
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f000 f844 	bl	8004cb8 <RCCEx_PLLSAI1_Config>
 8004c30:	4603      	mov	r3, r0
 8004c32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d014      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	74bb      	strb	r3, [r7, #18]
 8004c3e:	e011      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3320      	adds	r3, #32
 8004c4e:	2102      	movs	r1, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f925 	bl	8004ea0 <RCCEx_PLLSAI2_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c70:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c7e:	490d      	ldr	r1, [pc, #52]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00b      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c92:	4b08      	ldr	r3, [pc, #32]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ca2:	4904      	ldr	r1, [pc, #16]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004caa:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3718      	adds	r7, #24
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	40021000 	.word	0x40021000

08004cb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cc6:	4b75      	ldr	r3, [pc, #468]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f003 0303 	and.w	r3, r3, #3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d018      	beq.n	8004d04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cd2:	4b72      	ldr	r3, [pc, #456]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0203 	and.w	r2, r3, #3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d10d      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004cea:	4b6c      	ldr	r3, [pc, #432]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	091b      	lsrs	r3, r3, #4
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d047      	beq.n	8004d8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	73fb      	strb	r3, [r7, #15]
 8004d02:	e044      	b.n	8004d8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2b03      	cmp	r3, #3
 8004d0a:	d018      	beq.n	8004d3e <RCCEx_PLLSAI1_Config+0x86>
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d825      	bhi.n	8004d5c <RCCEx_PLLSAI1_Config+0xa4>
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d002      	beq.n	8004d1a <RCCEx_PLLSAI1_Config+0x62>
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d009      	beq.n	8004d2c <RCCEx_PLLSAI1_Config+0x74>
 8004d18:	e020      	b.n	8004d5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d1a:	4b60      	ldr	r3, [pc, #384]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d11d      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d2a:	e01a      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d116      	bne.n	8004d66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3c:	e013      	b.n	8004d66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d3e:	4b57      	ldr	r3, [pc, #348]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d4a:	4b54      	ldr	r3, [pc, #336]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d5a:	e006      	b.n	8004d6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d60:	e004      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d62:	bf00      	nop
 8004d64:	e002      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d66:	bf00      	nop
 8004d68:	e000      	b.n	8004d6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10d      	bne.n	8004d8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d72:	4b4a      	ldr	r3, [pc, #296]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	3b01      	subs	r3, #1
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	430b      	orrs	r3, r1
 8004d88:	4944      	ldr	r1, [pc, #272]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d17d      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d94:	4b41      	ldr	r3, [pc, #260]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a40      	ldr	r2, [pc, #256]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da0:	f7fc ff9c 	bl	8001cdc <HAL_GetTick>
 8004da4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004da6:	e009      	b.n	8004dbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004da8:	f7fc ff98 	bl	8001cdc <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d902      	bls.n	8004dbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dba:	e005      	b.n	8004dc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dbc:	4b37      	ldr	r3, [pc, #220]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ef      	bne.n	8004da8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d160      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d111      	bne.n	8004df8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dd4:	4b31      	ldr	r3, [pc, #196]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ddc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6892      	ldr	r2, [r2, #8]
 8004de4:	0211      	lsls	r1, r2, #8
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	68d2      	ldr	r2, [r2, #12]
 8004dea:	0912      	lsrs	r2, r2, #4
 8004dec:	0452      	lsls	r2, r2, #17
 8004dee:	430a      	orrs	r2, r1
 8004df0:	492a      	ldr	r1, [pc, #168]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	610b      	str	r3, [r1, #16]
 8004df6:	e027      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d112      	bne.n	8004e24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dfe:	4b27      	ldr	r3, [pc, #156]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004e06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6892      	ldr	r2, [r2, #8]
 8004e0e:	0211      	lsls	r1, r2, #8
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6912      	ldr	r2, [r2, #16]
 8004e14:	0852      	lsrs	r2, r2, #1
 8004e16:	3a01      	subs	r2, #1
 8004e18:	0552      	lsls	r2, r2, #21
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	491f      	ldr	r1, [pc, #124]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	610b      	str	r3, [r1, #16]
 8004e22:	e011      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e24:	4b1d      	ldr	r3, [pc, #116]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004e2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6892      	ldr	r2, [r2, #8]
 8004e34:	0211      	lsls	r1, r2, #8
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6952      	ldr	r2, [r2, #20]
 8004e3a:	0852      	lsrs	r2, r2, #1
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	0652      	lsls	r2, r2, #25
 8004e40:	430a      	orrs	r2, r1
 8004e42:	4916      	ldr	r1, [pc, #88]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e48:	4b14      	ldr	r3, [pc, #80]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a13      	ldr	r2, [pc, #76]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e54:	f7fc ff42 	bl	8001cdc <HAL_GetTick>
 8004e58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e5a:	e009      	b.n	8004e70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e5c:	f7fc ff3e 	bl	8001cdc <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d902      	bls.n	8004e70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e6e:	e005      	b.n	8004e7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e70:	4b0a      	ldr	r3, [pc, #40]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d0ef      	beq.n	8004e5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e7c:	7bfb      	ldrb	r3, [r7, #15]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e82:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e84:	691a      	ldr	r2, [r3, #16]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	4904      	ldr	r1, [pc, #16]	@ (8004e9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40021000 	.word	0x40021000

08004ea0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eae:	4b6a      	ldr	r3, [pc, #424]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d018      	beq.n	8004eec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004eba:	4b67      	ldr	r3, [pc, #412]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0203 	and.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d10d      	bne.n	8004ee6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
       ||
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d009      	beq.n	8004ee6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ed2:	4b61      	ldr	r3, [pc, #388]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	091b      	lsrs	r3, r3, #4
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d047      	beq.n	8004f76 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	e044      	b.n	8004f76 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d018      	beq.n	8004f26 <RCCEx_PLLSAI2_Config+0x86>
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d825      	bhi.n	8004f44 <RCCEx_PLLSAI2_Config+0xa4>
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d002      	beq.n	8004f02 <RCCEx_PLLSAI2_Config+0x62>
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d009      	beq.n	8004f14 <RCCEx_PLLSAI2_Config+0x74>
 8004f00:	e020      	b.n	8004f44 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f02:	4b55      	ldr	r3, [pc, #340]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d11d      	bne.n	8004f4a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f12:	e01a      	b.n	8004f4a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f14:	4b50      	ldr	r3, [pc, #320]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d116      	bne.n	8004f4e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f24:	e013      	b.n	8004f4e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f26:	4b4c      	ldr	r3, [pc, #304]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10f      	bne.n	8004f52 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f32:	4b49      	ldr	r3, [pc, #292]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f42:	e006      	b.n	8004f52 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e004      	b.n	8004f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f4a:	bf00      	nop
 8004f4c:	e002      	b.n	8004f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f4e:	bf00      	nop
 8004f50:	e000      	b.n	8004f54 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f52:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f54:	7bfb      	ldrb	r3, [r7, #15]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10d      	bne.n	8004f76 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6819      	ldr	r1, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	011b      	lsls	r3, r3, #4
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	4939      	ldr	r1, [pc, #228]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f76:	7bfb      	ldrb	r3, [r7, #15]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d167      	bne.n	800504c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f7c:	4b36      	ldr	r3, [pc, #216]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a35      	ldr	r2, [pc, #212]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f88:	f7fc fea8 	bl	8001cdc <HAL_GetTick>
 8004f8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f8e:	e009      	b.n	8004fa4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f90:	f7fc fea4 	bl	8001cdc <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d902      	bls.n	8004fa4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	73fb      	strb	r3, [r7, #15]
        break;
 8004fa2:	e005      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fa4:	4b2c      	ldr	r3, [pc, #176]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1ef      	bne.n	8004f90 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d14a      	bne.n	800504c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d111      	bne.n	8004fe0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fbc:	4b26      	ldr	r3, [pc, #152]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6892      	ldr	r2, [r2, #8]
 8004fcc:	0211      	lsls	r1, r2, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68d2      	ldr	r2, [r2, #12]
 8004fd2:	0912      	lsrs	r2, r2, #4
 8004fd4:	0452      	lsls	r2, r2, #17
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	491f      	ldr	r1, [pc, #124]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	614b      	str	r3, [r1, #20]
 8004fde:	e011      	b.n	8005004 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004fe8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6892      	ldr	r2, [r2, #8]
 8004ff0:	0211      	lsls	r1, r2, #8
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6912      	ldr	r2, [r2, #16]
 8004ff6:	0852      	lsrs	r2, r2, #1
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	0652      	lsls	r2, r2, #25
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	4916      	ldr	r1, [pc, #88]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005000:	4313      	orrs	r3, r2
 8005002:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005004:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800500e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fe64 	bl	8001cdc <HAL_GetTick>
 8005014:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005016:	e009      	b.n	800502c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005018:	f7fc fe60 	bl	8001cdc <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d902      	bls.n	800502c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	73fb      	strb	r3, [r7, #15]
          break;
 800502a:	e005      	b.n	8005038 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800502c:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ef      	beq.n	8005018 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005038:	7bfb      	ldrb	r3, [r7, #15]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d106      	bne.n	800504c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800503e:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	4904      	ldr	r1, [pc, #16]	@ (8005058 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005048:	4313      	orrs	r3, r2
 800504a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800504c:	7bfb      	ldrb	r3, [r7, #15]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000

0800505c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e049      	b.n	8005102 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d106      	bne.n	8005088 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fc fbb6 	bl	80017f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3304      	adds	r3, #4
 8005098:	4619      	mov	r1, r3
 800509a:	4610      	mov	r0, r2
 800509c:	f001 f86e 	bl	800617c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_TIM_PWM_Start+0x24>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	e03c      	b.n	80051aa <HAL_TIM_PWM_Start+0x9e>
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b04      	cmp	r3, #4
 8005134:	d109      	bne.n	800514a <HAL_TIM_PWM_Start+0x3e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b01      	cmp	r3, #1
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	e02f      	b.n	80051aa <HAL_TIM_PWM_Start+0x9e>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d109      	bne.n	8005164 <HAL_TIM_PWM_Start+0x58>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005156:	b2db      	uxtb	r3, r3
 8005158:	2b01      	cmp	r3, #1
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	e022      	b.n	80051aa <HAL_TIM_PWM_Start+0x9e>
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2b0c      	cmp	r3, #12
 8005168:	d109      	bne.n	800517e <HAL_TIM_PWM_Start+0x72>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b01      	cmp	r3, #1
 8005174:	bf14      	ite	ne
 8005176:	2301      	movne	r3, #1
 8005178:	2300      	moveq	r3, #0
 800517a:	b2db      	uxtb	r3, r3
 800517c:	e015      	b.n	80051aa <HAL_TIM_PWM_Start+0x9e>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b10      	cmp	r3, #16
 8005182:	d109      	bne.n	8005198 <HAL_TIM_PWM_Start+0x8c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	bf14      	ite	ne
 8005190:	2301      	movne	r3, #1
 8005192:	2300      	moveq	r3, #0
 8005194:	b2db      	uxtb	r3, r3
 8005196:	e008      	b.n	80051aa <HAL_TIM_PWM_Start+0x9e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	bf14      	ite	ne
 80051a4:	2301      	movne	r3, #1
 80051a6:	2300      	moveq	r3, #0
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e09c      	b.n	80052ec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <HAL_TIM_PWM_Start+0xb6>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2202      	movs	r2, #2
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	e023      	b.n	800520a <HAL_TIM_PWM_Start+0xfe>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d104      	bne.n	80051d2 <HAL_TIM_PWM_Start+0xc6>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d0:	e01b      	b.n	800520a <HAL_TIM_PWM_Start+0xfe>
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d104      	bne.n	80051e2 <HAL_TIM_PWM_Start+0xd6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051e0:	e013      	b.n	800520a <HAL_TIM_PWM_Start+0xfe>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0xe6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051f0:	e00b      	b.n	800520a <HAL_TIM_PWM_Start+0xfe>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b10      	cmp	r3, #16
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0xf6>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005200:	e003      	b.n	800520a <HAL_TIM_PWM_Start+0xfe>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2201      	movs	r2, #1
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f001 fc46 	bl	8006aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a35      	ldr	r2, [pc, #212]	@ (80052f4 <HAL_TIM_PWM_Start+0x1e8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_TIM_PWM_Start+0x13e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a34      	ldr	r2, [pc, #208]	@ (80052f8 <HAL_TIM_PWM_Start+0x1ec>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIM_PWM_Start+0x13e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a32      	ldr	r2, [pc, #200]	@ (80052fc <HAL_TIM_PWM_Start+0x1f0>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIM_PWM_Start+0x13e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a31      	ldr	r2, [pc, #196]	@ (8005300 <HAL_TIM_PWM_Start+0x1f4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIM_PWM_Start+0x13e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2f      	ldr	r2, [pc, #188]	@ (8005304 <HAL_TIM_PWM_Start+0x1f8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d101      	bne.n	800524e <HAL_TIM_PWM_Start+0x142>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <HAL_TIM_PWM_Start+0x144>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005262:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a22      	ldr	r2, [pc, #136]	@ (80052f4 <HAL_TIM_PWM_Start+0x1e8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d01d      	beq.n	80052aa <HAL_TIM_PWM_Start+0x19e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005276:	d018      	beq.n	80052aa <HAL_TIM_PWM_Start+0x19e>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a22      	ldr	r2, [pc, #136]	@ (8005308 <HAL_TIM_PWM_Start+0x1fc>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d013      	beq.n	80052aa <HAL_TIM_PWM_Start+0x19e>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a21      	ldr	r2, [pc, #132]	@ (800530c <HAL_TIM_PWM_Start+0x200>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00e      	beq.n	80052aa <HAL_TIM_PWM_Start+0x19e>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	@ (8005310 <HAL_TIM_PWM_Start+0x204>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d009      	beq.n	80052aa <HAL_TIM_PWM_Start+0x19e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a17      	ldr	r2, [pc, #92]	@ (80052f8 <HAL_TIM_PWM_Start+0x1ec>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d004      	beq.n	80052aa <HAL_TIM_PWM_Start+0x19e>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a15      	ldr	r2, [pc, #84]	@ (80052fc <HAL_TIM_PWM_Start+0x1f0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d115      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689a      	ldr	r2, [r3, #8]
 80052b0:	4b18      	ldr	r3, [pc, #96]	@ (8005314 <HAL_TIM_PWM_Start+0x208>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b06      	cmp	r3, #6
 80052ba:	d015      	beq.n	80052e8 <HAL_TIM_PWM_Start+0x1dc>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052c2:	d011      	beq.n	80052e8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d4:	e008      	b.n	80052e8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e000      	b.n	80052ea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	00010007 	.word	0x00010007

08005318 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f001 fbba 	bl	8006aa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a3e      	ldr	r2, [pc, #248]	@ (8005430 <HAL_TIM_PWM_Stop+0x118>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_TIM_PWM_Stop+0x4a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3d      	ldr	r2, [pc, #244]	@ (8005434 <HAL_TIM_PWM_Stop+0x11c>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_TIM_PWM_Stop+0x4a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a3b      	ldr	r2, [pc, #236]	@ (8005438 <HAL_TIM_PWM_Stop+0x120>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIM_PWM_Stop+0x4a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a3a      	ldr	r2, [pc, #232]	@ (800543c <HAL_TIM_PWM_Stop+0x124>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIM_PWM_Stop+0x4a>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a38      	ldr	r2, [pc, #224]	@ (8005440 <HAL_TIM_PWM_Stop+0x128>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_Stop+0x4e>
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_TIM_PWM_Stop+0x50>
 8005366:	2300      	movs	r3, #0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d017      	beq.n	800539c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005376:	4013      	ands	r3, r2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10f      	bne.n	800539c <HAL_TIM_PWM_Stop+0x84>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6a1a      	ldr	r2, [r3, #32]
 8005382:	f240 4344 	movw	r3, #1092	@ 0x444
 8005386:	4013      	ands	r3, r2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <HAL_TIM_PWM_Stop+0x84>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800539a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10f      	bne.n	80053cc <HAL_TIM_PWM_Stop+0xb4>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a1a      	ldr	r2, [r3, #32]
 80053b2:	f240 4344 	movw	r3, #1092	@ 0x444
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <HAL_TIM_PWM_Stop+0xb4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 0201 	bic.w	r2, r2, #1
 80053ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d104      	bne.n	80053dc <HAL_TIM_PWM_Stop+0xc4>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053da:	e023      	b.n	8005424 <HAL_TIM_PWM_Stop+0x10c>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d104      	bne.n	80053ec <HAL_TIM_PWM_Stop+0xd4>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ea:	e01b      	b.n	8005424 <HAL_TIM_PWM_Stop+0x10c>
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	2b08      	cmp	r3, #8
 80053f0:	d104      	bne.n	80053fc <HAL_TIM_PWM_Stop+0xe4>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053fa:	e013      	b.n	8005424 <HAL_TIM_PWM_Stop+0x10c>
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d104      	bne.n	800540c <HAL_TIM_PWM_Stop+0xf4>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800540a:	e00b      	b.n	8005424 <HAL_TIM_PWM_Stop+0x10c>
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	2b10      	cmp	r3, #16
 8005410:	d104      	bne.n	800541c <HAL_TIM_PWM_Stop+0x104>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800541a:	e003      	b.n	8005424 <HAL_TIM_PWM_Stop+0x10c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40012c00 	.word	0x40012c00
 8005434:	40013400 	.word	0x40013400
 8005438:	40014000 	.word	0x40014000
 800543c:	40014400 	.word	0x40014400
 8005440:	40014800 	.word	0x40014800

08005444 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e049      	b.n	80054ea <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d106      	bne.n	8005470 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7fc f976 	bl	800175c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f000 fe7a 	bl	800617c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d104      	bne.n	8005512 <HAL_TIM_IC_Start_IT+0x1e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800550e:	b2db      	uxtb	r3, r3
 8005510:	e023      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2b04      	cmp	r3, #4
 8005516:	d104      	bne.n	8005522 <HAL_TIM_IC_Start_IT+0x2e>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800551e:	b2db      	uxtb	r3, r3
 8005520:	e01b      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0x3e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800552e:	b2db      	uxtb	r3, r3
 8005530:	e013      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b0c      	cmp	r3, #12
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0x4e>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	e00b      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0x5e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e003      	b.n	800555a <HAL_TIM_IC_Start_IT+0x66>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005558:	b2db      	uxtb	r3, r3
 800555a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d104      	bne.n	800556c <HAL_TIM_IC_Start_IT+0x78>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e013      	b.n	8005594 <HAL_TIM_IC_Start_IT+0xa0>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d104      	bne.n	800557c <HAL_TIM_IC_Start_IT+0x88>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005578:	b2db      	uxtb	r3, r3
 800557a:	e00b      	b.n	8005594 <HAL_TIM_IC_Start_IT+0xa0>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b08      	cmp	r3, #8
 8005580:	d104      	bne.n	800558c <HAL_TIM_IC_Start_IT+0x98>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005588:	b2db      	uxtb	r3, r3
 800558a:	e003      	b.n	8005594 <HAL_TIM_IC_Start_IT+0xa0>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005592:	b2db      	uxtb	r3, r3
 8005594:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005596:	7bbb      	ldrb	r3, [r7, #14]
 8005598:	2b01      	cmp	r3, #1
 800559a:	d102      	bne.n	80055a2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800559c:	7b7b      	ldrb	r3, [r7, #13]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d001      	beq.n	80055a6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e0dd      	b.n	8005762 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_IC_Start_IT+0xc2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055b4:	e023      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_IC_Start_IT+0xd2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055c4:	e01b      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IC_Start_IT+0xe2>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055d4:	e013      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b0c      	cmp	r3, #12
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Start_IT+0xf2>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055e4:	e00b      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Start_IT+0x102>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055f4:	e003      	b.n	80055fe <HAL_TIM_IC_Start_IT+0x10a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2202      	movs	r2, #2
 80055fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0x11a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800560c:	e013      	b.n	8005636 <HAL_TIM_IC_Start_IT+0x142>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0x12a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800561c:	e00b      	b.n	8005636 <HAL_TIM_IC_Start_IT+0x142>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Start_IT+0x13a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2202      	movs	r2, #2
 8005628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800562c:	e003      	b.n	8005636 <HAL_TIM_IC_Start_IT+0x142>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2202      	movs	r2, #2
 8005632:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b0c      	cmp	r3, #12
 800563a:	d841      	bhi.n	80056c0 <HAL_TIM_IC_Start_IT+0x1cc>
 800563c:	a201      	add	r2, pc, #4	@ (adr r2, 8005644 <HAL_TIM_IC_Start_IT+0x150>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005679 	.word	0x08005679
 8005648:	080056c1 	.word	0x080056c1
 800564c:	080056c1 	.word	0x080056c1
 8005650:	080056c1 	.word	0x080056c1
 8005654:	0800568b 	.word	0x0800568b
 8005658:	080056c1 	.word	0x080056c1
 800565c:	080056c1 	.word	0x080056c1
 8005660:	080056c1 	.word	0x080056c1
 8005664:	0800569d 	.word	0x0800569d
 8005668:	080056c1 	.word	0x080056c1
 800566c:	080056c1 	.word	0x080056c1
 8005670:	080056c1 	.word	0x080056c1
 8005674:	080056af 	.word	0x080056af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68da      	ldr	r2, [r3, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0202 	orr.w	r2, r2, #2
 8005686:	60da      	str	r2, [r3, #12]
      break;
 8005688:	e01d      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0204 	orr.w	r2, r2, #4
 8005698:	60da      	str	r2, [r3, #12]
      break;
 800569a:	e014      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0208 	orr.w	r2, r2, #8
 80056aa:	60da      	str	r2, [r3, #12]
      break;
 80056ac:	e00b      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f042 0210 	orr.w	r2, r2, #16
 80056bc:	60da      	str	r2, [r3, #12]
      break;
 80056be:	e002      	b.n	80056c6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      break;
 80056c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80056c6:	7bfb      	ldrb	r3, [r7, #15]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d149      	bne.n	8005760 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f001 f9e5 	bl	8006aa4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a23      	ldr	r2, [pc, #140]	@ (800576c <HAL_TIM_IC_Start_IT+0x278>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01d      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x22c>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056ec:	d018      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x22c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005770 <HAL_TIM_IC_Start_IT+0x27c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d013      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x22c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005774 <HAL_TIM_IC_Start_IT+0x280>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d00e      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x22c>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1c      	ldr	r2, [pc, #112]	@ (8005778 <HAL_TIM_IC_Start_IT+0x284>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d009      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x22c>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1a      	ldr	r2, [pc, #104]	@ (800577c <HAL_TIM_IC_Start_IT+0x288>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d004      	beq.n	8005720 <HAL_TIM_IC_Start_IT+0x22c>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a19      	ldr	r2, [pc, #100]	@ (8005780 <HAL_TIM_IC_Start_IT+0x28c>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d115      	bne.n	800574c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	4b17      	ldr	r3, [pc, #92]	@ (8005784 <HAL_TIM_IC_Start_IT+0x290>)
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b06      	cmp	r3, #6
 8005730:	d015      	beq.n	800575e <HAL_TIM_IC_Start_IT+0x26a>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005738:	d011      	beq.n	800575e <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0201 	orr.w	r2, r2, #1
 8005748:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574a:	e008      	b.n	800575e <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0201 	orr.w	r2, r2, #1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e000      	b.n	8005760 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005760:	7bfb      	ldrb	r3, [r7, #15]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3710      	adds	r7, #16
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40013400 	.word	0x40013400
 8005780:	40014000 	.word	0x40014000
 8005784:	00010007 	.word	0x00010007

08005788 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e097      	b.n	80058cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7fc f83d 	bl	8001830 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80057cc:	f023 0307 	bic.w	r3, r3, #7
 80057d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	3304      	adds	r3, #4
 80057da:	4619      	mov	r1, r3
 80057dc:	4610      	mov	r0, r2
 80057de:	f000 fccd 	bl	800617c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800580a:	f023 0303 	bic.w	r3, r3, #3
 800580e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	021b      	lsls	r3, r3, #8
 800581a:	4313      	orrs	r3, r2
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005828:	f023 030c 	bic.w	r3, r3, #12
 800582c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005834:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005838:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	4313      	orrs	r3, r2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	011a      	lsls	r2, r3, #4
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	031b      	lsls	r3, r3, #12
 8005858:	4313      	orrs	r3, r2
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800586e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685a      	ldr	r2, [r3, #4]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	4313      	orrs	r3, r2
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	4313      	orrs	r3, r2
 8005880:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3718      	adds	r7, #24
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d110      	bne.n	8005926 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005904:	7bfb      	ldrb	r3, [r7, #15]
 8005906:	2b01      	cmp	r3, #1
 8005908:	d102      	bne.n	8005910 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800590a:	7b7b      	ldrb	r3, [r7, #13]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d001      	beq.n	8005914 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	e069      	b.n	80059e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005924:	e031      	b.n	800598a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b04      	cmp	r3, #4
 800592a:	d110      	bne.n	800594e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800592c:	7bbb      	ldrb	r3, [r7, #14]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d102      	bne.n	8005938 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005932:	7b3b      	ldrb	r3, [r7, #12]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d001      	beq.n	800593c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e055      	b.n	80059e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800594c:	e01d      	b.n	800598a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d108      	bne.n	8005966 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d105      	bne.n	8005966 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800595a:	7b7b      	ldrb	r3, [r7, #13]
 800595c:	2b01      	cmp	r3, #1
 800595e:	d102      	bne.n	8005966 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005960:	7b3b      	ldrb	r3, [r7, #12]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d001      	beq.n	800596a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e03e      	b.n	80059e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2202      	movs	r2, #2
 8005976:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2202      	movs	r2, #2
 800597e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_Encoder_Start+0xc4>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d008      	beq.n	80059a8 <HAL_TIM_Encoder_Start+0xd4>
 8005996:	e00f      	b.n	80059b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2201      	movs	r2, #1
 800599e:	2100      	movs	r1, #0
 80059a0:	4618      	mov	r0, r3
 80059a2:	f001 f87f 	bl	8006aa4 <TIM_CCxChannelCmd>
      break;
 80059a6:	e016      	b.n	80059d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2201      	movs	r2, #1
 80059ae:	2104      	movs	r1, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 f877 	bl	8006aa4 <TIM_CCxChannelCmd>
      break;
 80059b6:	e00e      	b.n	80059d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 f86f 	bl	8006aa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2201      	movs	r2, #1
 80059cc:	2104      	movs	r1, #4
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 f868 	bl	8006aa4 <TIM_CCxChannelCmd>
      break;
 80059d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0201 	orr.w	r2, r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <HAL_TIM_Encoder_Stop+0x18>
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d008      	beq.n	8005a18 <HAL_TIM_Encoder_Stop+0x28>
 8005a06:	e00f      	b.n	8005a28 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f847 	bl	8006aa4 <TIM_CCxChannelCmd>
      break;
 8005a16:	e016      	b.n	8005a46 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2104      	movs	r1, #4
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f83f 	bl	8006aa4 <TIM_CCxChannelCmd>
      break;
 8005a26:	e00e      	b.n	8005a46 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f001 f837 	bl	8006aa4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2104      	movs	r1, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 f830 	bl	8006aa4 <TIM_CCxChannelCmd>
      break;
 8005a44:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10f      	bne.n	8005a76 <HAL_TIM_Encoder_Stop+0x86>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d107      	bne.n	8005a76 <HAL_TIM_Encoder_Stop+0x86>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_TIM_Encoder_Stop+0x92>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d148      	bne.n	8005b14 <HAL_TIM_Encoder_Stop+0x124>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <HAL_TIM_Encoder_Stop+0xa2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a90:	e023      	b.n	8005ada <HAL_TIM_Encoder_Stop+0xea>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d104      	bne.n	8005aa2 <HAL_TIM_Encoder_Stop+0xb2>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005aa0:	e01b      	b.n	8005ada <HAL_TIM_Encoder_Stop+0xea>
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	2b08      	cmp	r3, #8
 8005aa6:	d104      	bne.n	8005ab2 <HAL_TIM_Encoder_Stop+0xc2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ab0:	e013      	b.n	8005ada <HAL_TIM_Encoder_Stop+0xea>
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2b0c      	cmp	r3, #12
 8005ab6:	d104      	bne.n	8005ac2 <HAL_TIM_Encoder_Stop+0xd2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ac0:	e00b      	b.n	8005ada <HAL_TIM_Encoder_Stop+0xea>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b10      	cmp	r3, #16
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_Encoder_Stop+0xe2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ad0:	e003      	b.n	8005ada <HAL_TIM_Encoder_Stop+0xea>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_Encoder_Stop+0xfa>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ae8:	e024      	b.n	8005b34 <HAL_TIM_Encoder_Stop+0x144>
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d104      	bne.n	8005afa <HAL_TIM_Encoder_Stop+0x10a>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005af8:	e01c      	b.n	8005b34 <HAL_TIM_Encoder_Stop+0x144>
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d104      	bne.n	8005b0a <HAL_TIM_Encoder_Stop+0x11a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b08:	e014      	b.n	8005b34 <HAL_TIM_Encoder_Stop+0x144>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8005b12:	e00f      	b.n	8005b34 <HAL_TIM_Encoder_Stop+0x144>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b084      	sub	sp, #16
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f003 0302 	and.w	r3, r3, #2
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d020      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01b      	beq.n	8005ba2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f06f 0202 	mvn.w	r2, #2
 8005b72:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d003      	beq.n	8005b90 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7fb fb87 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8005b8e:	e005      	b.n	8005b9c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 fad5 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fadc 	bl	8006154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f003 0304 	and.w	r3, r3, #4
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d020      	beq.n	8005bee <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d01b      	beq.n	8005bee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f06f 0204 	mvn.w	r2, #4
 8005bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2202      	movs	r2, #2
 8005bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d003      	beq.n	8005bdc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fb fb61 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8005bda:	e005      	b.n	8005be8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 faaf 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fab6 	bl	8006154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 0308 	and.w	r3, r3, #8
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d01b      	beq.n	8005c3a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f06f 0208 	mvn.w	r2, #8
 8005c0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2204      	movs	r2, #4
 8005c10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	f003 0303 	and.w	r3, r3, #3
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d003      	beq.n	8005c28 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7fb fb3b 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8005c26:	e005      	b.n	8005c34 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fa89 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fa90 	bl	8006154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f003 0310 	and.w	r3, r3, #16
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d020      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0310 	and.w	r3, r3, #16
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01b      	beq.n	8005c86 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f06f 0210 	mvn.w	r2, #16
 8005c56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2208      	movs	r2, #8
 8005c5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f7fb fb15 	bl	800129c <HAL_TIM_IC_CaptureCallback>
 8005c72:	e005      	b.n	8005c80 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fa63 	bl	8006140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa6a 	bl	8006154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00c      	beq.n	8005caa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d007      	beq.n	8005caa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f06f 0201 	mvn.w	r2, #1
 8005ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 fa41 	bl	800612c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00c      	beq.n	8005cce <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d007      	beq.n	8005cce <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 ffa3 	bl	8006c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00c      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d007      	beq.n	8005cf2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 ff9b 	bl	8006c28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00c      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fa29 	bl	8006168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f003 0320 	and.w	r3, r3, #32
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d00c      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f003 0320 	and.w	r3, r3, #32
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d007      	beq.n	8005d3a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f06f 0220 	mvn.w	r2, #32
 8005d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f000 ff63 	bl	8006c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d3a:	bf00      	nop
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	60f8      	str	r0, [r7, #12]
 8005d4a:	60b9      	str	r1, [r7, #8]
 8005d4c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e088      	b.n	8005e72 <HAL_TIM_IC_ConfigChannel+0x130>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d11b      	bne.n	8005da6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005d7e:	f000 fd6d 	bl	800685c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f022 020c 	bic.w	r2, r2, #12
 8005d90:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6999      	ldr	r1, [r3, #24]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	619a      	str	r2, [r3, #24]
 8005da4:	e060      	b.n	8005e68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b04      	cmp	r3, #4
 8005daa:	d11c      	bne.n	8005de6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005dbc:	f000 fdbc 	bl	8006938 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699a      	ldr	r2, [r3, #24]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005dce:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6999      	ldr	r1, [r3, #24]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	021a      	lsls	r2, r3, #8
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	430a      	orrs	r2, r1
 8005de2:	619a      	str	r2, [r3, #24]
 8005de4:	e040      	b.n	8005e68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005dfc:	f000 fdd9 	bl	80069b2 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	69da      	ldr	r2, [r3, #28]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 020c 	bic.w	r2, r2, #12
 8005e0e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	69d9      	ldr	r1, [r3, #28]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	61da      	str	r2, [r3, #28]
 8005e22:	e021      	b.n	8005e68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b0c      	cmp	r3, #12
 8005e28:	d11c      	bne.n	8005e64 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005e3a:	f000 fdf6 	bl	8006a2a <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005e4c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69d9      	ldr	r1, [r3, #28]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	021a      	lsls	r2, r3, #8
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	61da      	str	r2, [r3, #28]
 8005e62:	e001      	b.n	8005e68 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e0ff      	b.n	800609a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2b14      	cmp	r3, #20
 8005ea6:	f200 80f0 	bhi.w	800608a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb0:	08005f05 	.word	0x08005f05
 8005eb4:	0800608b 	.word	0x0800608b
 8005eb8:	0800608b 	.word	0x0800608b
 8005ebc:	0800608b 	.word	0x0800608b
 8005ec0:	08005f45 	.word	0x08005f45
 8005ec4:	0800608b 	.word	0x0800608b
 8005ec8:	0800608b 	.word	0x0800608b
 8005ecc:	0800608b 	.word	0x0800608b
 8005ed0:	08005f87 	.word	0x08005f87
 8005ed4:	0800608b 	.word	0x0800608b
 8005ed8:	0800608b 	.word	0x0800608b
 8005edc:	0800608b 	.word	0x0800608b
 8005ee0:	08005fc7 	.word	0x08005fc7
 8005ee4:	0800608b 	.word	0x0800608b
 8005ee8:	0800608b 	.word	0x0800608b
 8005eec:	0800608b 	.word	0x0800608b
 8005ef0:	08006009 	.word	0x08006009
 8005ef4:	0800608b 	.word	0x0800608b
 8005ef8:	0800608b 	.word	0x0800608b
 8005efc:	0800608b 	.word	0x0800608b
 8005f00:	08006049 	.word	0x08006049
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68b9      	ldr	r1, [r7, #8]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f000 f9d0 	bl	80062b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0208 	orr.w	r2, r2, #8
 8005f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0204 	bic.w	r2, r2, #4
 8005f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6999      	ldr	r1, [r3, #24]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	619a      	str	r2, [r3, #24]
      break;
 8005f42:	e0a5      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68b9      	ldr	r1, [r7, #8]
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fa40 	bl	80063d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	699a      	ldr	r2, [r3, #24]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6999      	ldr	r1, [r3, #24]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	021a      	lsls	r2, r3, #8
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	619a      	str	r2, [r3, #24]
      break;
 8005f84:	e084      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 faa9 	bl	80064e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	69da      	ldr	r2, [r3, #28]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f042 0208 	orr.w	r2, r2, #8
 8005fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 0204 	bic.w	r2, r2, #4
 8005fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69d9      	ldr	r1, [r3, #28]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	61da      	str	r2, [r3, #28]
      break;
 8005fc4:	e064      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 fb11 	bl	80065f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69d9      	ldr	r1, [r3, #28]
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	021a      	lsls	r2, r3, #8
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	61da      	str	r2, [r3, #28]
      break;
 8006006:	e043      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 fb5a 	bl	80066c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0208 	orr.w	r2, r2, #8
 8006022:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0204 	bic.w	r2, r2, #4
 8006032:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	691a      	ldr	r2, [r3, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006046:	e023      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68b9      	ldr	r1, [r7, #8]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 fb9e 	bl	8006790 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006062:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006072:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	021a      	lsls	r2, r3, #8
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006088:	e002      	b.n	8006090 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	75fb      	strb	r3, [r7, #23]
      break;
 800608e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006098:	7dfb      	ldrb	r3, [r7, #23]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3718      	adds	r7, #24
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop

080060a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2b0c      	cmp	r3, #12
 80060b6:	d831      	bhi.n	800611c <HAL_TIM_ReadCapturedValue+0x78>
 80060b8:	a201      	add	r2, pc, #4	@ (adr r2, 80060c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060f5 	.word	0x080060f5
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	0800611d 	.word	0x0800611d
 80060cc:	0800611d 	.word	0x0800611d
 80060d0:	080060ff 	.word	0x080060ff
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	0800611d 	.word	0x0800611d
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	08006109 	.word	0x08006109
 80060e4:	0800611d 	.word	0x0800611d
 80060e8:	0800611d 	.word	0x0800611d
 80060ec:	0800611d 	.word	0x0800611d
 80060f0:	08006113 	.word	0x08006113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fa:	60fb      	str	r3, [r7, #12]

      break;
 80060fc:	e00f      	b.n	800611e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006104:	60fb      	str	r3, [r7, #12]

      break;
 8006106:	e00a      	b.n	800611e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610e:	60fb      	str	r3, [r7, #12]

      break;
 8006110:	e005      	b.n	800611e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	60fb      	str	r3, [r7, #12]

      break;
 800611a:	e000      	b.n	800611e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800611c:	bf00      	nop
  }

  return tmpreg;
 800611e:	68fb      	ldr	r3, [r7, #12]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4a40      	ldr	r2, [pc, #256]	@ (8006290 <TIM_Base_SetConfig+0x114>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d013      	beq.n	80061bc <TIM_Base_SetConfig+0x40>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619a:	d00f      	beq.n	80061bc <TIM_Base_SetConfig+0x40>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a3d      	ldr	r2, [pc, #244]	@ (8006294 <TIM_Base_SetConfig+0x118>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00b      	beq.n	80061bc <TIM_Base_SetConfig+0x40>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a3c      	ldr	r2, [pc, #240]	@ (8006298 <TIM_Base_SetConfig+0x11c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d007      	beq.n	80061bc <TIM_Base_SetConfig+0x40>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a3b      	ldr	r2, [pc, #236]	@ (800629c <TIM_Base_SetConfig+0x120>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_Base_SetConfig+0x40>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a3a      	ldr	r2, [pc, #232]	@ (80062a0 <TIM_Base_SetConfig+0x124>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d108      	bne.n	80061ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a2f      	ldr	r2, [pc, #188]	@ (8006290 <TIM_Base_SetConfig+0x114>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d01f      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061dc:	d01b      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a2c      	ldr	r2, [pc, #176]	@ (8006294 <TIM_Base_SetConfig+0x118>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d017      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006298 <TIM_Base_SetConfig+0x11c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d013      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <TIM_Base_SetConfig+0x120>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d00f      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a29      	ldr	r2, [pc, #164]	@ (80062a0 <TIM_Base_SetConfig+0x124>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00b      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a28      	ldr	r2, [pc, #160]	@ (80062a4 <TIM_Base_SetConfig+0x128>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a27      	ldr	r2, [pc, #156]	@ (80062a8 <TIM_Base_SetConfig+0x12c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_Base_SetConfig+0x9a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a26      	ldr	r2, [pc, #152]	@ (80062ac <TIM_Base_SetConfig+0x130>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d108      	bne.n	8006228 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800621c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	4313      	orrs	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <TIM_Base_SetConfig+0x114>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00f      	beq.n	8006274 <TIM_Base_SetConfig+0xf8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a12      	ldr	r2, [pc, #72]	@ (80062a0 <TIM_Base_SetConfig+0x124>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d00b      	beq.n	8006274 <TIM_Base_SetConfig+0xf8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a11      	ldr	r2, [pc, #68]	@ (80062a4 <TIM_Base_SetConfig+0x128>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d007      	beq.n	8006274 <TIM_Base_SetConfig+0xf8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a10      	ldr	r2, [pc, #64]	@ (80062a8 <TIM_Base_SetConfig+0x12c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_Base_SetConfig+0xf8>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a0f      	ldr	r2, [pc, #60]	@ (80062ac <TIM_Base_SetConfig+0x130>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d103      	bne.n	800627c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	615a      	str	r2, [r3, #20]
}
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	40012c00 	.word	0x40012c00
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f023 0201 	bic.w	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f023 0302 	bic.w	r3, r3, #2
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	697a      	ldr	r2, [r7, #20]
 8006304:	4313      	orrs	r3, r2
 8006306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a2c      	ldr	r2, [pc, #176]	@ (80063bc <TIM_OC1_SetConfig+0x10c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d00f      	beq.n	8006330 <TIM_OC1_SetConfig+0x80>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a2b      	ldr	r2, [pc, #172]	@ (80063c0 <TIM_OC1_SetConfig+0x110>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00b      	beq.n	8006330 <TIM_OC1_SetConfig+0x80>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a2a      	ldr	r2, [pc, #168]	@ (80063c4 <TIM_OC1_SetConfig+0x114>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d007      	beq.n	8006330 <TIM_OC1_SetConfig+0x80>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a29      	ldr	r2, [pc, #164]	@ (80063c8 <TIM_OC1_SetConfig+0x118>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d003      	beq.n	8006330 <TIM_OC1_SetConfig+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a28      	ldr	r2, [pc, #160]	@ (80063cc <TIM_OC1_SetConfig+0x11c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10c      	bne.n	800634a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0308 	bic.w	r3, r3, #8
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 0304 	bic.w	r3, r3, #4
 8006348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <TIM_OC1_SetConfig+0x10c>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00f      	beq.n	8006372 <TIM_OC1_SetConfig+0xc2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a1a      	ldr	r2, [pc, #104]	@ (80063c0 <TIM_OC1_SetConfig+0x110>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00b      	beq.n	8006372 <TIM_OC1_SetConfig+0xc2>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a19      	ldr	r2, [pc, #100]	@ (80063c4 <TIM_OC1_SetConfig+0x114>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <TIM_OC1_SetConfig+0xc2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a18      	ldr	r2, [pc, #96]	@ (80063c8 <TIM_OC1_SetConfig+0x118>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d003      	beq.n	8006372 <TIM_OC1_SetConfig+0xc2>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a17      	ldr	r2, [pc, #92]	@ (80063cc <TIM_OC1_SetConfig+0x11c>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d111      	bne.n	8006396 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40013400 	.word	0x40013400
 80063c4:	40014000 	.word	0x40014000
 80063c8:	40014400 	.word	0x40014400
 80063cc:	40014800 	.word	0x40014800

080063d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b087      	sub	sp, #28
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6a1b      	ldr	r3, [r3, #32]
 80063e4:	f023 0210 	bic.w	r2, r3, #16
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006402:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800640a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0320 	bic.w	r3, r3, #32
 800641e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4313      	orrs	r3, r2
 800642a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a28      	ldr	r2, [pc, #160]	@ (80064d0 <TIM_OC2_SetConfig+0x100>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d003      	beq.n	800643c <TIM_OC2_SetConfig+0x6c>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a27      	ldr	r2, [pc, #156]	@ (80064d4 <TIM_OC2_SetConfig+0x104>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d10d      	bne.n	8006458 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	011b      	lsls	r3, r3, #4
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006456:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a1d      	ldr	r2, [pc, #116]	@ (80064d0 <TIM_OC2_SetConfig+0x100>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00f      	beq.n	8006480 <TIM_OC2_SetConfig+0xb0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a1c      	ldr	r2, [pc, #112]	@ (80064d4 <TIM_OC2_SetConfig+0x104>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_OC2_SetConfig+0xb0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a1b      	ldr	r2, [pc, #108]	@ (80064d8 <TIM_OC2_SetConfig+0x108>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_OC2_SetConfig+0xb0>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a1a      	ldr	r2, [pc, #104]	@ (80064dc <TIM_OC2_SetConfig+0x10c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_OC2_SetConfig+0xb0>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a19      	ldr	r2, [pc, #100]	@ (80064e0 <TIM_OC2_SetConfig+0x110>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d113      	bne.n	80064a8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800648e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	695b      	ldr	r3, [r3, #20]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	4313      	orrs	r3, r2
 800649a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	40012c00 	.word	0x40012c00
 80064d4:	40013400 	.word	0x40013400
 80064d8:	40014000 	.word	0x40014000
 80064dc:	40014400 	.word	0x40014400
 80064e0:	40014800 	.word	0x40014800

080064e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006512:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0303 	bic.w	r3, r3, #3
 800651e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	021b      	lsls	r3, r3, #8
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a27      	ldr	r2, [pc, #156]	@ (80065e0 <TIM_OC3_SetConfig+0xfc>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_OC3_SetConfig+0x6a>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a26      	ldr	r2, [pc, #152]	@ (80065e4 <TIM_OC3_SetConfig+0x100>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10d      	bne.n	800656a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1c      	ldr	r2, [pc, #112]	@ (80065e0 <TIM_OC3_SetConfig+0xfc>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d00f      	beq.n	8006592 <TIM_OC3_SetConfig+0xae>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1b      	ldr	r2, [pc, #108]	@ (80065e4 <TIM_OC3_SetConfig+0x100>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d00b      	beq.n	8006592 <TIM_OC3_SetConfig+0xae>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1a      	ldr	r2, [pc, #104]	@ (80065e8 <TIM_OC3_SetConfig+0x104>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d007      	beq.n	8006592 <TIM_OC3_SetConfig+0xae>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a19      	ldr	r2, [pc, #100]	@ (80065ec <TIM_OC3_SetConfig+0x108>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d003      	beq.n	8006592 <TIM_OC3_SetConfig+0xae>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a18      	ldr	r2, [pc, #96]	@ (80065f0 <TIM_OC3_SetConfig+0x10c>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d113      	bne.n	80065ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006598:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	011b      	lsls	r3, r3, #4
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	011b      	lsls	r3, r3, #4
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40013400 	.word	0x40013400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800

080065f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a1b      	ldr	r3, [r3, #32]
 8006608:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006622:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800662e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	021b      	lsls	r3, r3, #8
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	4313      	orrs	r3, r2
 800663a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	031b      	lsls	r3, r3, #12
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a18      	ldr	r2, [pc, #96]	@ (80066b4 <TIM_OC4_SetConfig+0xc0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00f      	beq.n	8006678 <TIM_OC4_SetConfig+0x84>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a17      	ldr	r2, [pc, #92]	@ (80066b8 <TIM_OC4_SetConfig+0xc4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d00b      	beq.n	8006678 <TIM_OC4_SetConfig+0x84>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a16      	ldr	r2, [pc, #88]	@ (80066bc <TIM_OC4_SetConfig+0xc8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d007      	beq.n	8006678 <TIM_OC4_SetConfig+0x84>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a15      	ldr	r2, [pc, #84]	@ (80066c0 <TIM_OC4_SetConfig+0xcc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d003      	beq.n	8006678 <TIM_OC4_SetConfig+0x84>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a14      	ldr	r2, [pc, #80]	@ (80066c4 <TIM_OC4_SetConfig+0xd0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d109      	bne.n	800668c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800667e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	019b      	lsls	r3, r3, #6
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40013400 	.word	0x40013400
 80066bc:	40014000 	.word	0x40014000
 80066c0:	40014400 	.word	0x40014400
 80066c4:	40014800 	.word	0x40014800

080066c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	4313      	orrs	r3, r2
 8006704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800670c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a17      	ldr	r2, [pc, #92]	@ (800677c <TIM_OC5_SetConfig+0xb4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00f      	beq.n	8006742 <TIM_OC5_SetConfig+0x7a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a16      	ldr	r2, [pc, #88]	@ (8006780 <TIM_OC5_SetConfig+0xb8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d00b      	beq.n	8006742 <TIM_OC5_SetConfig+0x7a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a15      	ldr	r2, [pc, #84]	@ (8006784 <TIM_OC5_SetConfig+0xbc>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d007      	beq.n	8006742 <TIM_OC5_SetConfig+0x7a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a14      	ldr	r2, [pc, #80]	@ (8006788 <TIM_OC5_SetConfig+0xc0>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d003      	beq.n	8006742 <TIM_OC5_SetConfig+0x7a>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a13      	ldr	r2, [pc, #76]	@ (800678c <TIM_OC5_SetConfig+0xc4>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d109      	bne.n	8006756 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006748:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	621a      	str	r2, [r3, #32]
}
 8006770:	bf00      	nop
 8006772:	371c      	adds	r7, #28
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40012c00 	.word	0x40012c00
 8006780:	40013400 	.word	0x40013400
 8006784:	40014000 	.word	0x40014000
 8006788:	40014400 	.word	0x40014400
 800678c:	40014800 	.word	0x40014800

08006790 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80067be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	021b      	lsls	r3, r3, #8
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80067d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	051b      	lsls	r3, r3, #20
 80067de:	693a      	ldr	r2, [r7, #16]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a18      	ldr	r2, [pc, #96]	@ (8006848 <TIM_OC6_SetConfig+0xb8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00f      	beq.n	800680c <TIM_OC6_SetConfig+0x7c>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a17      	ldr	r2, [pc, #92]	@ (800684c <TIM_OC6_SetConfig+0xbc>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00b      	beq.n	800680c <TIM_OC6_SetConfig+0x7c>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a16      	ldr	r2, [pc, #88]	@ (8006850 <TIM_OC6_SetConfig+0xc0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d007      	beq.n	800680c <TIM_OC6_SetConfig+0x7c>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a15      	ldr	r2, [pc, #84]	@ (8006854 <TIM_OC6_SetConfig+0xc4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d003      	beq.n	800680c <TIM_OC6_SetConfig+0x7c>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a14      	ldr	r2, [pc, #80]	@ (8006858 <TIM_OC6_SetConfig+0xc8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d109      	bne.n	8006820 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006812:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	029b      	lsls	r3, r3, #10
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	621a      	str	r2, [r3, #32]
}
 800683a:	bf00      	nop
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40012c00 	.word	0x40012c00
 800684c:	40013400 	.word	0x40013400
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400
 8006858:	40014800 	.word	0x40014800

0800685c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f023 0201 	bic.w	r2, r3, #1
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	4a26      	ldr	r2, [pc, #152]	@ (8006920 <TIM_TI1_SetConfig+0xc4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d017      	beq.n	80068ba <TIM_TI1_SetConfig+0x5e>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006890:	d013      	beq.n	80068ba <TIM_TI1_SetConfig+0x5e>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	4a23      	ldr	r2, [pc, #140]	@ (8006924 <TIM_TI1_SetConfig+0xc8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d00f      	beq.n	80068ba <TIM_TI1_SetConfig+0x5e>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a22      	ldr	r2, [pc, #136]	@ (8006928 <TIM_TI1_SetConfig+0xcc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d00b      	beq.n	80068ba <TIM_TI1_SetConfig+0x5e>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4a21      	ldr	r2, [pc, #132]	@ (800692c <TIM_TI1_SetConfig+0xd0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d007      	beq.n	80068ba <TIM_TI1_SetConfig+0x5e>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4a20      	ldr	r2, [pc, #128]	@ (8006930 <TIM_TI1_SetConfig+0xd4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d003      	beq.n	80068ba <TIM_TI1_SetConfig+0x5e>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a1f      	ldr	r2, [pc, #124]	@ (8006934 <TIM_TI1_SetConfig+0xd8>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d101      	bne.n	80068be <TIM_TI1_SetConfig+0x62>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e000      	b.n	80068c0 <TIM_TI1_SetConfig+0x64>
 80068be:	2300      	movs	r3, #0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d008      	beq.n	80068d6 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80068cc:	697a      	ldr	r2, [r7, #20]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e003      	b.n	80068de <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	f023 030a 	bic.w	r3, r3, #10
 80068f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f003 030a 	and.w	r3, r3, #10
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40012c00 	.word	0x40012c00
 8006924:	40000400 	.word	0x40000400
 8006928:	40000800 	.word	0x40000800
 800692c:	40000c00 	.word	0x40000c00
 8006930:	40013400 	.word	0x40013400
 8006934:	40014000 	.word	0x40014000

08006938 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f023 0210 	bic.w	r2, r3, #16
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	021b      	lsls	r3, r3, #8
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	4313      	orrs	r3, r2
 800696e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	031b      	lsls	r3, r3, #12
 800697c:	b29b      	uxth	r3, r3
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	4313      	orrs	r3, r2
 8006982:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800698a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	621a      	str	r2, [r3, #32]
}
 80069a6:	bf00      	nop
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b087      	sub	sp, #28
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f023 0303 	bic.w	r3, r3, #3
 80069de:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006a02:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006a0c:	697a      	ldr	r2, [r7, #20]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b087      	sub	sp, #28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	69db      	ldr	r3, [r3, #28]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a56:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	021b      	lsls	r3, r3, #8
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	031b      	lsls	r3, r3, #12
 8006a82:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	621a      	str	r2, [r3, #32]
}
 8006a98:	bf00      	nop
 8006a9a:	371c      	adds	r7, #28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b087      	sub	sp, #28
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	60f8      	str	r0, [r7, #12]
 8006aac:	60b9      	str	r1, [r7, #8]
 8006aae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 031f 	and.w	r3, r3, #31
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6a1a      	ldr	r2, [r3, #32]
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	43db      	mvns	r3, r3
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6a1a      	ldr	r2, [r3, #32]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f003 031f 	and.w	r3, r3, #31
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8006adc:	431a      	orrs	r2, r3
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	621a      	str	r2, [r3, #32]
}
 8006ae2:	bf00      	nop
 8006ae4:	371c      	adds	r7, #28
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr
	...

08006af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d101      	bne.n	8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e068      	b.n	8006bda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a2e      	ldr	r2, [pc, #184]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d004      	beq.n	8006b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2d      	ldr	r2, [pc, #180]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d108      	bne.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01d      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b7a:	d018      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d013      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d00e      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a18      	ldr	r2, [pc, #96]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d009      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a13      	ldr	r2, [pc, #76]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d004      	beq.n	8006bae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a14      	ldr	r2, [pc, #80]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d10c      	bne.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68ba      	ldr	r2, [r7, #8]
 8006bc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40012c00 	.word	0x40012c00
 8006bec:	40013400 	.word	0x40013400
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	40000800 	.word	0x40000800
 8006bf8:	40000c00 	.word	0x40000c00
 8006bfc:	40014000 	.word	0x40014000

08006c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr

08006c3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e040      	b.n	8006cd0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d106      	bne.n	8006c64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f7fa fe5e 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2224      	movs	r2, #36	@ 0x24
 8006c68:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f022 0201 	bic.w	r2, r2, #1
 8006c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d002      	beq.n	8006c88 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb6a 	bl	800735c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8af 	bl	8006dec <UART_SetConfig>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c94:	2301      	movs	r3, #1
 8006c96:	e01b      	b.n	8006cd0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f042 0201 	orr.w	r2, r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fbe9 	bl	80074a0 <UART_CheckIdleState>
 8006cce:	4603      	mov	r3, r0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b08a      	sub	sp, #40	@ 0x28
 8006cdc:	af02      	add	r7, sp, #8
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	603b      	str	r3, [r7, #0]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006cec:	2b20      	cmp	r3, #32
 8006cee:	d177      	bne.n	8006de0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <HAL_UART_Transmit+0x24>
 8006cf6:	88fb      	ldrh	r3, [r7, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d101      	bne.n	8006d00 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e070      	b.n	8006de2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2221      	movs	r2, #33	@ 0x21
 8006d0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d0e:	f7fa ffe5 	bl	8001cdc <HAL_GetTick>
 8006d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	88fa      	ldrh	r2, [r7, #6]
 8006d18:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	88fa      	ldrh	r2, [r7, #6]
 8006d20:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d2c:	d108      	bne.n	8006d40 <HAL_UART_Transmit+0x68>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006d36:	2300      	movs	r3, #0
 8006d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	61bb      	str	r3, [r7, #24]
 8006d3e:	e003      	b.n	8006d48 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d44:	2300      	movs	r3, #0
 8006d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d48:	e02f      	b.n	8006daa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	2200      	movs	r2, #0
 8006d52:	2180      	movs	r1, #128	@ 0x80
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f000 fc4b 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d004      	beq.n	8006d6a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e03b      	b.n	8006de2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	881a      	ldrh	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d7c:	b292      	uxth	r2, r2
 8006d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	3302      	adds	r3, #2
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e007      	b.n	8006d98 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	781a      	ldrb	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	3301      	adds	r3, #1
 8006d96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1c9      	bne.n	8006d4a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	9300      	str	r3, [sp, #0]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	2140      	movs	r1, #64	@ 0x40
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 fc15 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d004      	beq.n	8006dd6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e005      	b.n	8006de2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e000      	b.n	8006de2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006de0:	2302      	movs	r3, #2
  }
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3720      	adds	r7, #32
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006df0:	b08a      	sub	sp, #40	@ 0x28
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	431a      	orrs	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	431a      	orrs	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4ba4      	ldr	r3, [pc, #656]	@ (80070ac <UART_SetConfig+0x2c0>)
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e24:	430b      	orrs	r3, r1
 8006e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	430a      	orrs	r2, r1
 8006e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a99      	ldr	r2, [pc, #612]	@ (80070b0 <UART_SetConfig+0x2c4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d004      	beq.n	8006e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6a1b      	ldr	r3, [r3, #32]
 8006e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e54:	4313      	orrs	r3, r2
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a90      	ldr	r2, [pc, #576]	@ (80070b4 <UART_SetConfig+0x2c8>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d126      	bne.n	8006ec4 <UART_SetConfig+0xd8>
 8006e76:	4b90      	ldr	r3, [pc, #576]	@ (80070b8 <UART_SetConfig+0x2cc>)
 8006e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e7c:	f003 0303 	and.w	r3, r3, #3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d81b      	bhi.n	8006ebc <UART_SetConfig+0xd0>
 8006e84:	a201      	add	r2, pc, #4	@ (adr r2, 8006e8c <UART_SetConfig+0xa0>)
 8006e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8a:	bf00      	nop
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006ead 	.word	0x08006ead
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006eb5 	.word	0x08006eb5
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ea2:	e116      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eaa:	e112      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006eac:	2304      	movs	r3, #4
 8006eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eb2:	e10e      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006eba:	e10a      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ec2:	e106      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a7c      	ldr	r2, [pc, #496]	@ (80070bc <UART_SetConfig+0x2d0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d138      	bne.n	8006f40 <UART_SetConfig+0x154>
 8006ece:	4b7a      	ldr	r3, [pc, #488]	@ (80070b8 <UART_SetConfig+0x2cc>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ed4:	f003 030c 	and.w	r3, r3, #12
 8006ed8:	2b0c      	cmp	r3, #12
 8006eda:	d82d      	bhi.n	8006f38 <UART_SetConfig+0x14c>
 8006edc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ee4 <UART_SetConfig+0xf8>)
 8006ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee2:	bf00      	nop
 8006ee4:	08006f19 	.word	0x08006f19
 8006ee8:	08006f39 	.word	0x08006f39
 8006eec:	08006f39 	.word	0x08006f39
 8006ef0:	08006f39 	.word	0x08006f39
 8006ef4:	08006f29 	.word	0x08006f29
 8006ef8:	08006f39 	.word	0x08006f39
 8006efc:	08006f39 	.word	0x08006f39
 8006f00:	08006f39 	.word	0x08006f39
 8006f04:	08006f21 	.word	0x08006f21
 8006f08:	08006f39 	.word	0x08006f39
 8006f0c:	08006f39 	.word	0x08006f39
 8006f10:	08006f39 	.word	0x08006f39
 8006f14:	08006f31 	.word	0x08006f31
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f1e:	e0d8      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f20:	2302      	movs	r3, #2
 8006f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f26:	e0d4      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f28:	2304      	movs	r3, #4
 8006f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f2e:	e0d0      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f30:	2308      	movs	r3, #8
 8006f32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f36:	e0cc      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f3e:	e0c8      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a5e      	ldr	r2, [pc, #376]	@ (80070c0 <UART_SetConfig+0x2d4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d125      	bne.n	8006f96 <UART_SetConfig+0x1aa>
 8006f4a:	4b5b      	ldr	r3, [pc, #364]	@ (80070b8 <UART_SetConfig+0x2cc>)
 8006f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006f54:	2b30      	cmp	r3, #48	@ 0x30
 8006f56:	d016      	beq.n	8006f86 <UART_SetConfig+0x19a>
 8006f58:	2b30      	cmp	r3, #48	@ 0x30
 8006f5a:	d818      	bhi.n	8006f8e <UART_SetConfig+0x1a2>
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d00a      	beq.n	8006f76 <UART_SetConfig+0x18a>
 8006f60:	2b20      	cmp	r3, #32
 8006f62:	d814      	bhi.n	8006f8e <UART_SetConfig+0x1a2>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <UART_SetConfig+0x182>
 8006f68:	2b10      	cmp	r3, #16
 8006f6a:	d008      	beq.n	8006f7e <UART_SetConfig+0x192>
 8006f6c:	e00f      	b.n	8006f8e <UART_SetConfig+0x1a2>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f74:	e0ad      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f76:	2302      	movs	r3, #2
 8006f78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f7c:	e0a9      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f7e:	2304      	movs	r3, #4
 8006f80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f84:	e0a5      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f86:	2308      	movs	r3, #8
 8006f88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f8c:	e0a1      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f8e:	2310      	movs	r3, #16
 8006f90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006f94:	e09d      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a4a      	ldr	r2, [pc, #296]	@ (80070c4 <UART_SetConfig+0x2d8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d125      	bne.n	8006fec <UART_SetConfig+0x200>
 8006fa0:	4b45      	ldr	r3, [pc, #276]	@ (80070b8 <UART_SetConfig+0x2cc>)
 8006fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006faa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fac:	d016      	beq.n	8006fdc <UART_SetConfig+0x1f0>
 8006fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8006fb0:	d818      	bhi.n	8006fe4 <UART_SetConfig+0x1f8>
 8006fb2:	2b80      	cmp	r3, #128	@ 0x80
 8006fb4:	d00a      	beq.n	8006fcc <UART_SetConfig+0x1e0>
 8006fb6:	2b80      	cmp	r3, #128	@ 0x80
 8006fb8:	d814      	bhi.n	8006fe4 <UART_SetConfig+0x1f8>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <UART_SetConfig+0x1d8>
 8006fbe:	2b40      	cmp	r3, #64	@ 0x40
 8006fc0:	d008      	beq.n	8006fd4 <UART_SetConfig+0x1e8>
 8006fc2:	e00f      	b.n	8006fe4 <UART_SetConfig+0x1f8>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fca:	e082      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fd2:	e07e      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fda:	e07a      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fe2:	e076      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006fe4:	2310      	movs	r3, #16
 8006fe6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006fea:	e072      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a35      	ldr	r2, [pc, #212]	@ (80070c8 <UART_SetConfig+0x2dc>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d12a      	bne.n	800704c <UART_SetConfig+0x260>
 8006ff6:	4b30      	ldr	r3, [pc, #192]	@ (80070b8 <UART_SetConfig+0x2cc>)
 8006ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007004:	d01a      	beq.n	800703c <UART_SetConfig+0x250>
 8007006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800700a:	d81b      	bhi.n	8007044 <UART_SetConfig+0x258>
 800700c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007010:	d00c      	beq.n	800702c <UART_SetConfig+0x240>
 8007012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007016:	d815      	bhi.n	8007044 <UART_SetConfig+0x258>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <UART_SetConfig+0x238>
 800701c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007020:	d008      	beq.n	8007034 <UART_SetConfig+0x248>
 8007022:	e00f      	b.n	8007044 <UART_SetConfig+0x258>
 8007024:	2300      	movs	r3, #0
 8007026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800702a:	e052      	b.n	80070d2 <UART_SetConfig+0x2e6>
 800702c:	2302      	movs	r3, #2
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007032:	e04e      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8007034:	2304      	movs	r3, #4
 8007036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800703a:	e04a      	b.n	80070d2 <UART_SetConfig+0x2e6>
 800703c:	2308      	movs	r3, #8
 800703e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007042:	e046      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8007044:	2310      	movs	r3, #16
 8007046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800704a:	e042      	b.n	80070d2 <UART_SetConfig+0x2e6>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a17      	ldr	r2, [pc, #92]	@ (80070b0 <UART_SetConfig+0x2c4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d13a      	bne.n	80070cc <UART_SetConfig+0x2e0>
 8007056:	4b18      	ldr	r3, [pc, #96]	@ (80070b8 <UART_SetConfig+0x2cc>)
 8007058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800705c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007060:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007064:	d01a      	beq.n	800709c <UART_SetConfig+0x2b0>
 8007066:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800706a:	d81b      	bhi.n	80070a4 <UART_SetConfig+0x2b8>
 800706c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007070:	d00c      	beq.n	800708c <UART_SetConfig+0x2a0>
 8007072:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007076:	d815      	bhi.n	80070a4 <UART_SetConfig+0x2b8>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d003      	beq.n	8007084 <UART_SetConfig+0x298>
 800707c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007080:	d008      	beq.n	8007094 <UART_SetConfig+0x2a8>
 8007082:	e00f      	b.n	80070a4 <UART_SetConfig+0x2b8>
 8007084:	2300      	movs	r3, #0
 8007086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800708a:	e022      	b.n	80070d2 <UART_SetConfig+0x2e6>
 800708c:	2302      	movs	r3, #2
 800708e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007092:	e01e      	b.n	80070d2 <UART_SetConfig+0x2e6>
 8007094:	2304      	movs	r3, #4
 8007096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800709a:	e01a      	b.n	80070d2 <UART_SetConfig+0x2e6>
 800709c:	2308      	movs	r3, #8
 800709e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070a2:	e016      	b.n	80070d2 <UART_SetConfig+0x2e6>
 80070a4:	2310      	movs	r3, #16
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80070aa:	e012      	b.n	80070d2 <UART_SetConfig+0x2e6>
 80070ac:	efff69f3 	.word	0xefff69f3
 80070b0:	40008000 	.word	0x40008000
 80070b4:	40013800 	.word	0x40013800
 80070b8:	40021000 	.word	0x40021000
 80070bc:	40004400 	.word	0x40004400
 80070c0:	40004800 	.word	0x40004800
 80070c4:	40004c00 	.word	0x40004c00
 80070c8:	40005000 	.word	0x40005000
 80070cc:	2310      	movs	r3, #16
 80070ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a9f      	ldr	r2, [pc, #636]	@ (8007354 <UART_SetConfig+0x568>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d17a      	bne.n	80071d2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80070e0:	2b08      	cmp	r3, #8
 80070e2:	d824      	bhi.n	800712e <UART_SetConfig+0x342>
 80070e4:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <UART_SetConfig+0x300>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007111 	.word	0x08007111
 80070f0:	0800712f 	.word	0x0800712f
 80070f4:	08007119 	.word	0x08007119
 80070f8:	0800712f 	.word	0x0800712f
 80070fc:	0800711f 	.word	0x0800711f
 8007100:	0800712f 	.word	0x0800712f
 8007104:	0800712f 	.word	0x0800712f
 8007108:	0800712f 	.word	0x0800712f
 800710c:	08007127 	.word	0x08007127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007110:	f7fd fa5c 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8007114:	61f8      	str	r0, [r7, #28]
        break;
 8007116:	e010      	b.n	800713a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007118:	4b8f      	ldr	r3, [pc, #572]	@ (8007358 <UART_SetConfig+0x56c>)
 800711a:	61fb      	str	r3, [r7, #28]
        break;
 800711c:	e00d      	b.n	800713a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800711e:	f7fd f9bd 	bl	800449c <HAL_RCC_GetSysClockFreq>
 8007122:	61f8      	str	r0, [r7, #28]
        break;
 8007124:	e009      	b.n	800713a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800712a:	61fb      	str	r3, [r7, #28]
        break;
 800712c:	e005      	b.n	800713a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800712e:	2300      	movs	r3, #0
 8007130:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007132:	2301      	movs	r3, #1
 8007134:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007138:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80fb 	beq.w	8007338 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	4613      	mov	r3, r2
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	4413      	add	r3, r2
 800714c:	69fa      	ldr	r2, [r7, #28]
 800714e:	429a      	cmp	r2, r3
 8007150:	d305      	bcc.n	800715e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007158:	69fa      	ldr	r2, [r7, #28]
 800715a:	429a      	cmp	r2, r3
 800715c:	d903      	bls.n	8007166 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007164:	e0e8      	b.n	8007338 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	2200      	movs	r2, #0
 800716a:	461c      	mov	r4, r3
 800716c:	4615      	mov	r5, r2
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	022b      	lsls	r3, r5, #8
 8007178:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800717c:	0222      	lsls	r2, r4, #8
 800717e:	68f9      	ldr	r1, [r7, #12]
 8007180:	6849      	ldr	r1, [r1, #4]
 8007182:	0849      	lsrs	r1, r1, #1
 8007184:	2000      	movs	r0, #0
 8007186:	4688      	mov	r8, r1
 8007188:	4681      	mov	r9, r0
 800718a:	eb12 0a08 	adds.w	sl, r2, r8
 800718e:	eb43 0b09 	adc.w	fp, r3, r9
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	603b      	str	r3, [r7, #0]
 800719a:	607a      	str	r2, [r7, #4]
 800719c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071a0:	4650      	mov	r0, sl
 80071a2:	4659      	mov	r1, fp
 80071a4:	f7f9 f864 	bl	8000270 <__aeabi_uldivmod>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	4613      	mov	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071b6:	d308      	bcc.n	80071ca <UART_SetConfig+0x3de>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071be:	d204      	bcs.n	80071ca <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	60da      	str	r2, [r3, #12]
 80071c8:	e0b6      	b.n	8007338 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80071d0:	e0b2      	b.n	8007338 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	69db      	ldr	r3, [r3, #28]
 80071d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071da:	d15e      	bne.n	800729a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80071dc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d828      	bhi.n	8007236 <UART_SetConfig+0x44a>
 80071e4:	a201      	add	r2, pc, #4	@ (adr r2, 80071ec <UART_SetConfig+0x400>)
 80071e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ea:	bf00      	nop
 80071ec:	08007211 	.word	0x08007211
 80071f0:	08007219 	.word	0x08007219
 80071f4:	08007221 	.word	0x08007221
 80071f8:	08007237 	.word	0x08007237
 80071fc:	08007227 	.word	0x08007227
 8007200:	08007237 	.word	0x08007237
 8007204:	08007237 	.word	0x08007237
 8007208:	08007237 	.word	0x08007237
 800720c:	0800722f 	.word	0x0800722f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007210:	f7fd f9dc 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8007214:	61f8      	str	r0, [r7, #28]
        break;
 8007216:	e014      	b.n	8007242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007218:	f7fd f9ee 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 800721c:	61f8      	str	r0, [r7, #28]
        break;
 800721e:	e010      	b.n	8007242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007220:	4b4d      	ldr	r3, [pc, #308]	@ (8007358 <UART_SetConfig+0x56c>)
 8007222:	61fb      	str	r3, [r7, #28]
        break;
 8007224:	e00d      	b.n	8007242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007226:	f7fd f939 	bl	800449c <HAL_RCC_GetSysClockFreq>
 800722a:	61f8      	str	r0, [r7, #28]
        break;
 800722c:	e009      	b.n	8007242 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800722e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007232:	61fb      	str	r3, [r7, #28]
        break;
 8007234:	e005      	b.n	8007242 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007236:	2300      	movs	r3, #0
 8007238:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800723a:	2301      	movs	r3, #1
 800723c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007240:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d077      	beq.n	8007338 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	005a      	lsls	r2, r3, #1
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	085b      	lsrs	r3, r3, #1
 8007252:	441a      	add	r2, r3
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	2b0f      	cmp	r3, #15
 8007262:	d916      	bls.n	8007292 <UART_SetConfig+0x4a6>
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800726a:	d212      	bcs.n	8007292 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	b29b      	uxth	r3, r3
 8007270:	f023 030f 	bic.w	r3, r3, #15
 8007274:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	b29b      	uxth	r3, r3
 800727c:	f003 0307 	and.w	r3, r3, #7
 8007280:	b29a      	uxth	r2, r3
 8007282:	8afb      	ldrh	r3, [r7, #22]
 8007284:	4313      	orrs	r3, r2
 8007286:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	8afa      	ldrh	r2, [r7, #22]
 800728e:	60da      	str	r2, [r3, #12]
 8007290:	e052      	b.n	8007338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007298:	e04e      	b.n	8007338 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800729a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800729e:	2b08      	cmp	r3, #8
 80072a0:	d827      	bhi.n	80072f2 <UART_SetConfig+0x506>
 80072a2:	a201      	add	r2, pc, #4	@ (adr r2, 80072a8 <UART_SetConfig+0x4bc>)
 80072a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a8:	080072cd 	.word	0x080072cd
 80072ac:	080072d5 	.word	0x080072d5
 80072b0:	080072dd 	.word	0x080072dd
 80072b4:	080072f3 	.word	0x080072f3
 80072b8:	080072e3 	.word	0x080072e3
 80072bc:	080072f3 	.word	0x080072f3
 80072c0:	080072f3 	.word	0x080072f3
 80072c4:	080072f3 	.word	0x080072f3
 80072c8:	080072eb 	.word	0x080072eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072cc:	f7fd f97e 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 80072d0:	61f8      	str	r0, [r7, #28]
        break;
 80072d2:	e014      	b.n	80072fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072d4:	f7fd f990 	bl	80045f8 <HAL_RCC_GetPCLK2Freq>
 80072d8:	61f8      	str	r0, [r7, #28]
        break;
 80072da:	e010      	b.n	80072fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072dc:	4b1e      	ldr	r3, [pc, #120]	@ (8007358 <UART_SetConfig+0x56c>)
 80072de:	61fb      	str	r3, [r7, #28]
        break;
 80072e0:	e00d      	b.n	80072fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072e2:	f7fd f8db 	bl	800449c <HAL_RCC_GetSysClockFreq>
 80072e6:	61f8      	str	r0, [r7, #28]
        break;
 80072e8:	e009      	b.n	80072fe <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ee:	61fb      	str	r3, [r7, #28]
        break;
 80072f0:	e005      	b.n	80072fe <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072f6:	2301      	movs	r3, #1
 80072f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80072fc:	bf00      	nop
    }

    if (pclk != 0U)
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d019      	beq.n	8007338 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	085a      	lsrs	r2, r3, #1
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	441a      	add	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	fbb2 f3f3 	udiv	r3, r2, r3
 8007316:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	2b0f      	cmp	r3, #15
 800731c:	d909      	bls.n	8007332 <UART_SetConfig+0x546>
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007324:	d205      	bcs.n	8007332 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	b29a      	uxth	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60da      	str	r2, [r3, #12]
 8007330:	e002      	b.n	8007338 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007344:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007348:	4618      	mov	r0, r3
 800734a:	3728      	adds	r7, #40	@ 0x28
 800734c:	46bd      	mov	sp, r7
 800734e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007352:	bf00      	nop
 8007354:	40008000 	.word	0x40008000
 8007358:	00f42400 	.word	0x00f42400

0800735c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ce:	f003 0304 	and.w	r3, r3, #4
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f0:	f003 0310 	and.w	r3, r3, #16
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d00a      	beq.n	800740e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00a      	beq.n	8007430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007438:	2b00      	cmp	r3, #0
 800743a:	d01a      	beq.n	8007472 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007456:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800745a:	d10a      	bne.n	8007472 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	430a      	orrs	r2, r1
 8007470:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	605a      	str	r2, [r3, #4]
  }
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b098      	sub	sp, #96	@ 0x60
 80074a4:	af02      	add	r7, sp, #8
 80074a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074b0:	f7fa fc14 	bl	8001cdc <HAL_GetTick>
 80074b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d12e      	bne.n	8007522 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074cc:	2200      	movs	r2, #0
 80074ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f88c 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d021      	beq.n	8007522 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074e6:	e853 3f00 	ldrex	r3, [r3]
 80074ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80074fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800750a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e6      	bne.n	80074de <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e062      	b.n	80075e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b04      	cmp	r3, #4
 800752e:	d149      	bne.n	80075c4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007530:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007538:	2200      	movs	r2, #0
 800753a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f856 	bl	80075f0 <UART_WaitOnFlagUntilTimeout>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d03c      	beq.n	80075c4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	e853 3f00 	ldrex	r3, [r3]
 8007556:	623b      	str	r3, [r7, #32]
   return(result);
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800755e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	461a      	mov	r2, r3
 8007566:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007568:	633b      	str	r3, [r7, #48]	@ 0x30
 800756a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800756e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007570:	e841 2300 	strex	r3, r2, [r1]
 8007574:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e6      	bne.n	800754a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	3308      	adds	r3, #8
 8007582:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	e853 3f00 	ldrex	r3, [r3]
 800758a:	60fb      	str	r3, [r7, #12]
   return(result);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3308      	adds	r3, #8
 800759a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800759c:	61fa      	str	r2, [r7, #28]
 800759e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a0:	69b9      	ldr	r1, [r7, #24]
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	e841 2300 	strex	r3, r2, [r1]
 80075a8:	617b      	str	r3, [r7, #20]
   return(result);
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e5      	bne.n	800757c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e011      	b.n	80075e8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2220      	movs	r2, #32
 80075c8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2220      	movs	r2, #32
 80075ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3758      	adds	r7, #88	@ 0x58
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b084      	sub	sp, #16
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	603b      	str	r3, [r7, #0]
 80075fc:	4613      	mov	r3, r2
 80075fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007600:	e049      	b.n	8007696 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d045      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760a:	f7fa fb67 	bl	8001cdc <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	429a      	cmp	r2, r3
 8007618:	d302      	bcc.n	8007620 <UART_WaitOnFlagUntilTimeout+0x30>
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d101      	bne.n	8007624 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e048      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0304 	and.w	r3, r3, #4
 800762e:	2b00      	cmp	r3, #0
 8007630:	d031      	beq.n	8007696 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b08      	cmp	r3, #8
 800763e:	d110      	bne.n	8007662 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2208      	movs	r2, #8
 8007646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 f838 	bl	80076be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2208      	movs	r2, #8
 8007652:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e029      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800766c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007670:	d111      	bne.n	8007696 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800767a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f81e 	bl	80076be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2220      	movs	r2, #32
 8007686:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e00f      	b.n	80076b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69da      	ldr	r2, [r3, #28]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4013      	ands	r3, r2
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	bf0c      	ite	eq
 80076a6:	2301      	moveq	r3, #1
 80076a8:	2300      	movne	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	461a      	mov	r2, r3
 80076ae:	79fb      	ldrb	r3, [r7, #7]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d0a6      	beq.n	8007602 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076be:	b480      	push	{r7}
 80076c0:	b095      	sub	sp, #84	@ 0x54
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ce:	e853 3f00 	ldrex	r3, [r3]
 80076d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	461a      	mov	r2, r3
 80076e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ec:	e841 2300 	strex	r3, r2, [r1]
 80076f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1e6      	bne.n	80076c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3308      	adds	r3, #8
 80076fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	e853 3f00 	ldrex	r3, [r3]
 8007706:	61fb      	str	r3, [r7, #28]
   return(result);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	f023 0301 	bic.w	r3, r3, #1
 800770e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007718:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800771a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800771e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007720:	e841 2300 	strex	r3, r2, [r1]
 8007724:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d1e5      	bne.n	80076f8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007730:	2b01      	cmp	r3, #1
 8007732:	d118      	bne.n	8007766 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	e853 3f00 	ldrex	r3, [r3]
 8007740:	60bb      	str	r3, [r7, #8]
   return(result);
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f023 0310 	bic.w	r3, r3, #16
 8007748:	647b      	str	r3, [r7, #68]	@ 0x44
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	461a      	mov	r2, r3
 8007750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6979      	ldr	r1, [r7, #20]
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	613b      	str	r3, [r7, #16]
   return(result);
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e6      	bne.n	8007734 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2220      	movs	r2, #32
 800776a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800777a:	bf00      	nop
 800777c:	3754      	adds	r7, #84	@ 0x54
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <std>:
 8007788:	2300      	movs	r3, #0
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	e9c0 3300 	strd	r3, r3, [r0]
 8007792:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007796:	6083      	str	r3, [r0, #8]
 8007798:	8181      	strh	r1, [r0, #12]
 800779a:	6643      	str	r3, [r0, #100]	@ 0x64
 800779c:	81c2      	strh	r2, [r0, #14]
 800779e:	6183      	str	r3, [r0, #24]
 80077a0:	4619      	mov	r1, r3
 80077a2:	2208      	movs	r2, #8
 80077a4:	305c      	adds	r0, #92	@ 0x5c
 80077a6:	f000 f926 	bl	80079f6 <memset>
 80077aa:	4b0d      	ldr	r3, [pc, #52]	@ (80077e0 <std+0x58>)
 80077ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80077ae:	4b0d      	ldr	r3, [pc, #52]	@ (80077e4 <std+0x5c>)
 80077b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80077b2:	4b0d      	ldr	r3, [pc, #52]	@ (80077e8 <std+0x60>)
 80077b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80077b6:	4b0d      	ldr	r3, [pc, #52]	@ (80077ec <std+0x64>)
 80077b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80077ba:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <std+0x68>)
 80077bc:	6224      	str	r4, [r4, #32]
 80077be:	429c      	cmp	r4, r3
 80077c0:	d006      	beq.n	80077d0 <std+0x48>
 80077c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077c6:	4294      	cmp	r4, r2
 80077c8:	d002      	beq.n	80077d0 <std+0x48>
 80077ca:	33d0      	adds	r3, #208	@ 0xd0
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d105      	bne.n	80077dc <std+0x54>
 80077d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d8:	f000 b986 	b.w	8007ae8 <__retarget_lock_init_recursive>
 80077dc:	bd10      	pop	{r4, pc}
 80077de:	bf00      	nop
 80077e0:	08007971 	.word	0x08007971
 80077e4:	08007993 	.word	0x08007993
 80077e8:	080079cb 	.word	0x080079cb
 80077ec:	080079ef 	.word	0x080079ef
 80077f0:	2000065c 	.word	0x2000065c

080077f4 <stdio_exit_handler>:
 80077f4:	4a02      	ldr	r2, [pc, #8]	@ (8007800 <stdio_exit_handler+0xc>)
 80077f6:	4903      	ldr	r1, [pc, #12]	@ (8007804 <stdio_exit_handler+0x10>)
 80077f8:	4803      	ldr	r0, [pc, #12]	@ (8007808 <stdio_exit_handler+0x14>)
 80077fa:	f000 b869 	b.w	80078d0 <_fwalk_sglue>
 80077fe:	bf00      	nop
 8007800:	200000ac 	.word	0x200000ac
 8007804:	08008639 	.word	0x08008639
 8007808:	200000bc 	.word	0x200000bc

0800780c <cleanup_stdio>:
 800780c:	6841      	ldr	r1, [r0, #4]
 800780e:	4b0c      	ldr	r3, [pc, #48]	@ (8007840 <cleanup_stdio+0x34>)
 8007810:	4299      	cmp	r1, r3
 8007812:	b510      	push	{r4, lr}
 8007814:	4604      	mov	r4, r0
 8007816:	d001      	beq.n	800781c <cleanup_stdio+0x10>
 8007818:	f000 ff0e 	bl	8008638 <_fflush_r>
 800781c:	68a1      	ldr	r1, [r4, #8]
 800781e:	4b09      	ldr	r3, [pc, #36]	@ (8007844 <cleanup_stdio+0x38>)
 8007820:	4299      	cmp	r1, r3
 8007822:	d002      	beq.n	800782a <cleanup_stdio+0x1e>
 8007824:	4620      	mov	r0, r4
 8007826:	f000 ff07 	bl	8008638 <_fflush_r>
 800782a:	68e1      	ldr	r1, [r4, #12]
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <cleanup_stdio+0x3c>)
 800782e:	4299      	cmp	r1, r3
 8007830:	d004      	beq.n	800783c <cleanup_stdio+0x30>
 8007832:	4620      	mov	r0, r4
 8007834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007838:	f000 befe 	b.w	8008638 <_fflush_r>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	bf00      	nop
 8007840:	2000065c 	.word	0x2000065c
 8007844:	200006c4 	.word	0x200006c4
 8007848:	2000072c 	.word	0x2000072c

0800784c <global_stdio_init.part.0>:
 800784c:	b510      	push	{r4, lr}
 800784e:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <global_stdio_init.part.0+0x30>)
 8007850:	4c0b      	ldr	r4, [pc, #44]	@ (8007880 <global_stdio_init.part.0+0x34>)
 8007852:	4a0c      	ldr	r2, [pc, #48]	@ (8007884 <global_stdio_init.part.0+0x38>)
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	4620      	mov	r0, r4
 8007858:	2200      	movs	r2, #0
 800785a:	2104      	movs	r1, #4
 800785c:	f7ff ff94 	bl	8007788 <std>
 8007860:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007864:	2201      	movs	r2, #1
 8007866:	2109      	movs	r1, #9
 8007868:	f7ff ff8e 	bl	8007788 <std>
 800786c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007870:	2202      	movs	r2, #2
 8007872:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007876:	2112      	movs	r1, #18
 8007878:	f7ff bf86 	b.w	8007788 <std>
 800787c:	20000794 	.word	0x20000794
 8007880:	2000065c 	.word	0x2000065c
 8007884:	080077f5 	.word	0x080077f5

08007888 <__sfp_lock_acquire>:
 8007888:	4801      	ldr	r0, [pc, #4]	@ (8007890 <__sfp_lock_acquire+0x8>)
 800788a:	f000 b92e 	b.w	8007aea <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	2000079d 	.word	0x2000079d

08007894 <__sfp_lock_release>:
 8007894:	4801      	ldr	r0, [pc, #4]	@ (800789c <__sfp_lock_release+0x8>)
 8007896:	f000 b929 	b.w	8007aec <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	2000079d 	.word	0x2000079d

080078a0 <__sinit>:
 80078a0:	b510      	push	{r4, lr}
 80078a2:	4604      	mov	r4, r0
 80078a4:	f7ff fff0 	bl	8007888 <__sfp_lock_acquire>
 80078a8:	6a23      	ldr	r3, [r4, #32]
 80078aa:	b11b      	cbz	r3, 80078b4 <__sinit+0x14>
 80078ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078b0:	f7ff bff0 	b.w	8007894 <__sfp_lock_release>
 80078b4:	4b04      	ldr	r3, [pc, #16]	@ (80078c8 <__sinit+0x28>)
 80078b6:	6223      	str	r3, [r4, #32]
 80078b8:	4b04      	ldr	r3, [pc, #16]	@ (80078cc <__sinit+0x2c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1f5      	bne.n	80078ac <__sinit+0xc>
 80078c0:	f7ff ffc4 	bl	800784c <global_stdio_init.part.0>
 80078c4:	e7f2      	b.n	80078ac <__sinit+0xc>
 80078c6:	bf00      	nop
 80078c8:	0800780d 	.word	0x0800780d
 80078cc:	20000794 	.word	0x20000794

080078d0 <_fwalk_sglue>:
 80078d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d4:	4607      	mov	r7, r0
 80078d6:	4688      	mov	r8, r1
 80078d8:	4614      	mov	r4, r2
 80078da:	2600      	movs	r6, #0
 80078dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078e0:	f1b9 0901 	subs.w	r9, r9, #1
 80078e4:	d505      	bpl.n	80078f2 <_fwalk_sglue+0x22>
 80078e6:	6824      	ldr	r4, [r4, #0]
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	d1f7      	bne.n	80078dc <_fwalk_sglue+0xc>
 80078ec:	4630      	mov	r0, r6
 80078ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078f2:	89ab      	ldrh	r3, [r5, #12]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d907      	bls.n	8007908 <_fwalk_sglue+0x38>
 80078f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078fc:	3301      	adds	r3, #1
 80078fe:	d003      	beq.n	8007908 <_fwalk_sglue+0x38>
 8007900:	4629      	mov	r1, r5
 8007902:	4638      	mov	r0, r7
 8007904:	47c0      	blx	r8
 8007906:	4306      	orrs	r6, r0
 8007908:	3568      	adds	r5, #104	@ 0x68
 800790a:	e7e9      	b.n	80078e0 <_fwalk_sglue+0x10>

0800790c <iprintf>:
 800790c:	b40f      	push	{r0, r1, r2, r3}
 800790e:	b507      	push	{r0, r1, r2, lr}
 8007910:	4906      	ldr	r1, [pc, #24]	@ (800792c <iprintf+0x20>)
 8007912:	ab04      	add	r3, sp, #16
 8007914:	6808      	ldr	r0, [r1, #0]
 8007916:	f853 2b04 	ldr.w	r2, [r3], #4
 800791a:	6881      	ldr	r1, [r0, #8]
 800791c:	9301      	str	r3, [sp, #4]
 800791e:	f000 fb61 	bl	8007fe4 <_vfiprintf_r>
 8007922:	b003      	add	sp, #12
 8007924:	f85d eb04 	ldr.w	lr, [sp], #4
 8007928:	b004      	add	sp, #16
 800792a:	4770      	bx	lr
 800792c:	200000b8 	.word	0x200000b8

08007930 <siprintf>:
 8007930:	b40e      	push	{r1, r2, r3}
 8007932:	b500      	push	{lr}
 8007934:	b09c      	sub	sp, #112	@ 0x70
 8007936:	ab1d      	add	r3, sp, #116	@ 0x74
 8007938:	9002      	str	r0, [sp, #8]
 800793a:	9006      	str	r0, [sp, #24]
 800793c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007940:	4809      	ldr	r0, [pc, #36]	@ (8007968 <siprintf+0x38>)
 8007942:	9107      	str	r1, [sp, #28]
 8007944:	9104      	str	r1, [sp, #16]
 8007946:	4909      	ldr	r1, [pc, #36]	@ (800796c <siprintf+0x3c>)
 8007948:	f853 2b04 	ldr.w	r2, [r3], #4
 800794c:	9105      	str	r1, [sp, #20]
 800794e:	6800      	ldr	r0, [r0, #0]
 8007950:	9301      	str	r3, [sp, #4]
 8007952:	a902      	add	r1, sp, #8
 8007954:	f000 fa20 	bl	8007d98 <_svfiprintf_r>
 8007958:	9b02      	ldr	r3, [sp, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	701a      	strb	r2, [r3, #0]
 800795e:	b01c      	add	sp, #112	@ 0x70
 8007960:	f85d eb04 	ldr.w	lr, [sp], #4
 8007964:	b003      	add	sp, #12
 8007966:	4770      	bx	lr
 8007968:	200000b8 	.word	0x200000b8
 800796c:	ffff0208 	.word	0xffff0208

08007970 <__sread>:
 8007970:	b510      	push	{r4, lr}
 8007972:	460c      	mov	r4, r1
 8007974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007978:	f000 f868 	bl	8007a4c <_read_r>
 800797c:	2800      	cmp	r0, #0
 800797e:	bfab      	itete	ge
 8007980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007982:	89a3      	ldrhlt	r3, [r4, #12]
 8007984:	181b      	addge	r3, r3, r0
 8007986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800798a:	bfac      	ite	ge
 800798c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800798e:	81a3      	strhlt	r3, [r4, #12]
 8007990:	bd10      	pop	{r4, pc}

08007992 <__swrite>:
 8007992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007996:	461f      	mov	r7, r3
 8007998:	898b      	ldrh	r3, [r1, #12]
 800799a:	05db      	lsls	r3, r3, #23
 800799c:	4605      	mov	r5, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	4616      	mov	r6, r2
 80079a2:	d505      	bpl.n	80079b0 <__swrite+0x1e>
 80079a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a8:	2302      	movs	r3, #2
 80079aa:	2200      	movs	r2, #0
 80079ac:	f000 f83c 	bl	8007a28 <_lseek_r>
 80079b0:	89a3      	ldrh	r3, [r4, #12]
 80079b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079ba:	81a3      	strh	r3, [r4, #12]
 80079bc:	4632      	mov	r2, r6
 80079be:	463b      	mov	r3, r7
 80079c0:	4628      	mov	r0, r5
 80079c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c6:	f000 b853 	b.w	8007a70 <_write_r>

080079ca <__sseek>:
 80079ca:	b510      	push	{r4, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d2:	f000 f829 	bl	8007a28 <_lseek_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	89a3      	ldrh	r3, [r4, #12]
 80079da:	bf15      	itete	ne
 80079dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079e6:	81a3      	strheq	r3, [r4, #12]
 80079e8:	bf18      	it	ne
 80079ea:	81a3      	strhne	r3, [r4, #12]
 80079ec:	bd10      	pop	{r4, pc}

080079ee <__sclose>:
 80079ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f2:	f000 b809 	b.w	8007a08 <_close_r>

080079f6 <memset>:
 80079f6:	4402      	add	r2, r0
 80079f8:	4603      	mov	r3, r0
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d100      	bne.n	8007a00 <memset+0xa>
 80079fe:	4770      	bx	lr
 8007a00:	f803 1b01 	strb.w	r1, [r3], #1
 8007a04:	e7f9      	b.n	80079fa <memset+0x4>
	...

08007a08 <_close_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4d06      	ldr	r5, [pc, #24]	@ (8007a24 <_close_r+0x1c>)
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	4604      	mov	r4, r0
 8007a10:	4608      	mov	r0, r1
 8007a12:	602b      	str	r3, [r5, #0]
 8007a14:	f7fa f853 	bl	8001abe <_close>
 8007a18:	1c43      	adds	r3, r0, #1
 8007a1a:	d102      	bne.n	8007a22 <_close_r+0x1a>
 8007a1c:	682b      	ldr	r3, [r5, #0]
 8007a1e:	b103      	cbz	r3, 8007a22 <_close_r+0x1a>
 8007a20:	6023      	str	r3, [r4, #0]
 8007a22:	bd38      	pop	{r3, r4, r5, pc}
 8007a24:	20000798 	.word	0x20000798

08007a28 <_lseek_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	@ (8007a48 <_lseek_r+0x20>)
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	4608      	mov	r0, r1
 8007a30:	4611      	mov	r1, r2
 8007a32:	2200      	movs	r2, #0
 8007a34:	602a      	str	r2, [r5, #0]
 8007a36:	461a      	mov	r2, r3
 8007a38:	f7fa f868 	bl	8001b0c <_lseek>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_lseek_r+0x1e>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_lseek_r+0x1e>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20000798 	.word	0x20000798

08007a4c <_read_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	@ (8007a6c <_read_r+0x20>)
 8007a50:	4604      	mov	r4, r0
 8007a52:	4608      	mov	r0, r1
 8007a54:	4611      	mov	r1, r2
 8007a56:	2200      	movs	r2, #0
 8007a58:	602a      	str	r2, [r5, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f7f9 fff6 	bl	8001a4c <_read>
 8007a60:	1c43      	adds	r3, r0, #1
 8007a62:	d102      	bne.n	8007a6a <_read_r+0x1e>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b103      	cbz	r3, 8007a6a <_read_r+0x1e>
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	bd38      	pop	{r3, r4, r5, pc}
 8007a6c:	20000798 	.word	0x20000798

08007a70 <_write_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d07      	ldr	r5, [pc, #28]	@ (8007a90 <_write_r+0x20>)
 8007a74:	4604      	mov	r4, r0
 8007a76:	4608      	mov	r0, r1
 8007a78:	4611      	mov	r1, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	602a      	str	r2, [r5, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f7fa f801 	bl	8001a86 <_write>
 8007a84:	1c43      	adds	r3, r0, #1
 8007a86:	d102      	bne.n	8007a8e <_write_r+0x1e>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	b103      	cbz	r3, 8007a8e <_write_r+0x1e>
 8007a8c:	6023      	str	r3, [r4, #0]
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	20000798 	.word	0x20000798

08007a94 <__errno>:
 8007a94:	4b01      	ldr	r3, [pc, #4]	@ (8007a9c <__errno+0x8>)
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	200000b8 	.word	0x200000b8

08007aa0 <__libc_init_array>:
 8007aa0:	b570      	push	{r4, r5, r6, lr}
 8007aa2:	4d0d      	ldr	r5, [pc, #52]	@ (8007ad8 <__libc_init_array+0x38>)
 8007aa4:	4c0d      	ldr	r4, [pc, #52]	@ (8007adc <__libc_init_array+0x3c>)
 8007aa6:	1b64      	subs	r4, r4, r5
 8007aa8:	10a4      	asrs	r4, r4, #2
 8007aaa:	2600      	movs	r6, #0
 8007aac:	42a6      	cmp	r6, r4
 8007aae:	d109      	bne.n	8007ac4 <__libc_init_array+0x24>
 8007ab0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ae0 <__libc_init_array+0x40>)
 8007ab2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ae4 <__libc_init_array+0x44>)
 8007ab4:	f000 ff6e 	bl	8008994 <_init>
 8007ab8:	1b64      	subs	r4, r4, r5
 8007aba:	10a4      	asrs	r4, r4, #2
 8007abc:	2600      	movs	r6, #0
 8007abe:	42a6      	cmp	r6, r4
 8007ac0:	d105      	bne.n	8007ace <__libc_init_array+0x2e>
 8007ac2:	bd70      	pop	{r4, r5, r6, pc}
 8007ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ac8:	4798      	blx	r3
 8007aca:	3601      	adds	r6, #1
 8007acc:	e7ee      	b.n	8007aac <__libc_init_array+0xc>
 8007ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad2:	4798      	blx	r3
 8007ad4:	3601      	adds	r6, #1
 8007ad6:	e7f2      	b.n	8007abe <__libc_init_array+0x1e>
 8007ad8:	08008bb0 	.word	0x08008bb0
 8007adc:	08008bb0 	.word	0x08008bb0
 8007ae0:	08008bb0 	.word	0x08008bb0
 8007ae4:	08008bb4 	.word	0x08008bb4

08007ae8 <__retarget_lock_init_recursive>:
 8007ae8:	4770      	bx	lr

08007aea <__retarget_lock_acquire_recursive>:
 8007aea:	4770      	bx	lr

08007aec <__retarget_lock_release_recursive>:
 8007aec:	4770      	bx	lr
	...

08007af0 <_free_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4605      	mov	r5, r0
 8007af4:	2900      	cmp	r1, #0
 8007af6:	d041      	beq.n	8007b7c <_free_r+0x8c>
 8007af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007afc:	1f0c      	subs	r4, r1, #4
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bfb8      	it	lt
 8007b02:	18e4      	addlt	r4, r4, r3
 8007b04:	f000 f8e0 	bl	8007cc8 <__malloc_lock>
 8007b08:	4a1d      	ldr	r2, [pc, #116]	@ (8007b80 <_free_r+0x90>)
 8007b0a:	6813      	ldr	r3, [r2, #0]
 8007b0c:	b933      	cbnz	r3, 8007b1c <_free_r+0x2c>
 8007b0e:	6063      	str	r3, [r4, #4]
 8007b10:	6014      	str	r4, [r2, #0]
 8007b12:	4628      	mov	r0, r5
 8007b14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b18:	f000 b8dc 	b.w	8007cd4 <__malloc_unlock>
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	d908      	bls.n	8007b32 <_free_r+0x42>
 8007b20:	6820      	ldr	r0, [r4, #0]
 8007b22:	1821      	adds	r1, r4, r0
 8007b24:	428b      	cmp	r3, r1
 8007b26:	bf01      	itttt	eq
 8007b28:	6819      	ldreq	r1, [r3, #0]
 8007b2a:	685b      	ldreq	r3, [r3, #4]
 8007b2c:	1809      	addeq	r1, r1, r0
 8007b2e:	6021      	streq	r1, [r4, #0]
 8007b30:	e7ed      	b.n	8007b0e <_free_r+0x1e>
 8007b32:	461a      	mov	r2, r3
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	b10b      	cbz	r3, 8007b3c <_free_r+0x4c>
 8007b38:	42a3      	cmp	r3, r4
 8007b3a:	d9fa      	bls.n	8007b32 <_free_r+0x42>
 8007b3c:	6811      	ldr	r1, [r2, #0]
 8007b3e:	1850      	adds	r0, r2, r1
 8007b40:	42a0      	cmp	r0, r4
 8007b42:	d10b      	bne.n	8007b5c <_free_r+0x6c>
 8007b44:	6820      	ldr	r0, [r4, #0]
 8007b46:	4401      	add	r1, r0
 8007b48:	1850      	adds	r0, r2, r1
 8007b4a:	4283      	cmp	r3, r0
 8007b4c:	6011      	str	r1, [r2, #0]
 8007b4e:	d1e0      	bne.n	8007b12 <_free_r+0x22>
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	6053      	str	r3, [r2, #4]
 8007b56:	4408      	add	r0, r1
 8007b58:	6010      	str	r0, [r2, #0]
 8007b5a:	e7da      	b.n	8007b12 <_free_r+0x22>
 8007b5c:	d902      	bls.n	8007b64 <_free_r+0x74>
 8007b5e:	230c      	movs	r3, #12
 8007b60:	602b      	str	r3, [r5, #0]
 8007b62:	e7d6      	b.n	8007b12 <_free_r+0x22>
 8007b64:	6820      	ldr	r0, [r4, #0]
 8007b66:	1821      	adds	r1, r4, r0
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf04      	itt	eq
 8007b6c:	6819      	ldreq	r1, [r3, #0]
 8007b6e:	685b      	ldreq	r3, [r3, #4]
 8007b70:	6063      	str	r3, [r4, #4]
 8007b72:	bf04      	itt	eq
 8007b74:	1809      	addeq	r1, r1, r0
 8007b76:	6021      	streq	r1, [r4, #0]
 8007b78:	6054      	str	r4, [r2, #4]
 8007b7a:	e7ca      	b.n	8007b12 <_free_r+0x22>
 8007b7c:	bd38      	pop	{r3, r4, r5, pc}
 8007b7e:	bf00      	nop
 8007b80:	200007a4 	.word	0x200007a4

08007b84 <sbrk_aligned>:
 8007b84:	b570      	push	{r4, r5, r6, lr}
 8007b86:	4e0f      	ldr	r6, [pc, #60]	@ (8007bc4 <sbrk_aligned+0x40>)
 8007b88:	460c      	mov	r4, r1
 8007b8a:	6831      	ldr	r1, [r6, #0]
 8007b8c:	4605      	mov	r5, r0
 8007b8e:	b911      	cbnz	r1, 8007b96 <sbrk_aligned+0x12>
 8007b90:	f000 fe28 	bl	80087e4 <_sbrk_r>
 8007b94:	6030      	str	r0, [r6, #0]
 8007b96:	4621      	mov	r1, r4
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 fe23 	bl	80087e4 <_sbrk_r>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d103      	bne.n	8007baa <sbrk_aligned+0x26>
 8007ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8007ba6:	4620      	mov	r0, r4
 8007ba8:	bd70      	pop	{r4, r5, r6, pc}
 8007baa:	1cc4      	adds	r4, r0, #3
 8007bac:	f024 0403 	bic.w	r4, r4, #3
 8007bb0:	42a0      	cmp	r0, r4
 8007bb2:	d0f8      	beq.n	8007ba6 <sbrk_aligned+0x22>
 8007bb4:	1a21      	subs	r1, r4, r0
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	f000 fe14 	bl	80087e4 <_sbrk_r>
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d1f2      	bne.n	8007ba6 <sbrk_aligned+0x22>
 8007bc0:	e7ef      	b.n	8007ba2 <sbrk_aligned+0x1e>
 8007bc2:	bf00      	nop
 8007bc4:	200007a0 	.word	0x200007a0

08007bc8 <_malloc_r>:
 8007bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bcc:	1ccd      	adds	r5, r1, #3
 8007bce:	f025 0503 	bic.w	r5, r5, #3
 8007bd2:	3508      	adds	r5, #8
 8007bd4:	2d0c      	cmp	r5, #12
 8007bd6:	bf38      	it	cc
 8007bd8:	250c      	movcc	r5, #12
 8007bda:	2d00      	cmp	r5, #0
 8007bdc:	4606      	mov	r6, r0
 8007bde:	db01      	blt.n	8007be4 <_malloc_r+0x1c>
 8007be0:	42a9      	cmp	r1, r5
 8007be2:	d904      	bls.n	8007bee <_malloc_r+0x26>
 8007be4:	230c      	movs	r3, #12
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	2000      	movs	r0, #0
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cc4 <_malloc_r+0xfc>
 8007bf2:	f000 f869 	bl	8007cc8 <__malloc_lock>
 8007bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfa:	461c      	mov	r4, r3
 8007bfc:	bb44      	cbnz	r4, 8007c50 <_malloc_r+0x88>
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4630      	mov	r0, r6
 8007c02:	f7ff ffbf 	bl	8007b84 <sbrk_aligned>
 8007c06:	1c43      	adds	r3, r0, #1
 8007c08:	4604      	mov	r4, r0
 8007c0a:	d158      	bne.n	8007cbe <_malloc_r+0xf6>
 8007c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8007c10:	4627      	mov	r7, r4
 8007c12:	2f00      	cmp	r7, #0
 8007c14:	d143      	bne.n	8007c9e <_malloc_r+0xd6>
 8007c16:	2c00      	cmp	r4, #0
 8007c18:	d04b      	beq.n	8007cb2 <_malloc_r+0xea>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	4630      	mov	r0, r6
 8007c20:	eb04 0903 	add.w	r9, r4, r3
 8007c24:	f000 fdde 	bl	80087e4 <_sbrk_r>
 8007c28:	4581      	cmp	r9, r0
 8007c2a:	d142      	bne.n	8007cb2 <_malloc_r+0xea>
 8007c2c:	6821      	ldr	r1, [r4, #0]
 8007c2e:	1a6d      	subs	r5, r5, r1
 8007c30:	4629      	mov	r1, r5
 8007c32:	4630      	mov	r0, r6
 8007c34:	f7ff ffa6 	bl	8007b84 <sbrk_aligned>
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d03a      	beq.n	8007cb2 <_malloc_r+0xea>
 8007c3c:	6823      	ldr	r3, [r4, #0]
 8007c3e:	442b      	add	r3, r5
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	f8d8 3000 	ldr.w	r3, [r8]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	bb62      	cbnz	r2, 8007ca4 <_malloc_r+0xdc>
 8007c4a:	f8c8 7000 	str.w	r7, [r8]
 8007c4e:	e00f      	b.n	8007c70 <_malloc_r+0xa8>
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	1b52      	subs	r2, r2, r5
 8007c54:	d420      	bmi.n	8007c98 <_malloc_r+0xd0>
 8007c56:	2a0b      	cmp	r2, #11
 8007c58:	d917      	bls.n	8007c8a <_malloc_r+0xc2>
 8007c5a:	1961      	adds	r1, r4, r5
 8007c5c:	42a3      	cmp	r3, r4
 8007c5e:	6025      	str	r5, [r4, #0]
 8007c60:	bf18      	it	ne
 8007c62:	6059      	strne	r1, [r3, #4]
 8007c64:	6863      	ldr	r3, [r4, #4]
 8007c66:	bf08      	it	eq
 8007c68:	f8c8 1000 	streq.w	r1, [r8]
 8007c6c:	5162      	str	r2, [r4, r5]
 8007c6e:	604b      	str	r3, [r1, #4]
 8007c70:	4630      	mov	r0, r6
 8007c72:	f000 f82f 	bl	8007cd4 <__malloc_unlock>
 8007c76:	f104 000b 	add.w	r0, r4, #11
 8007c7a:	1d23      	adds	r3, r4, #4
 8007c7c:	f020 0007 	bic.w	r0, r0, #7
 8007c80:	1ac2      	subs	r2, r0, r3
 8007c82:	bf1c      	itt	ne
 8007c84:	1a1b      	subne	r3, r3, r0
 8007c86:	50a3      	strne	r3, [r4, r2]
 8007c88:	e7af      	b.n	8007bea <_malloc_r+0x22>
 8007c8a:	6862      	ldr	r2, [r4, #4]
 8007c8c:	42a3      	cmp	r3, r4
 8007c8e:	bf0c      	ite	eq
 8007c90:	f8c8 2000 	streq.w	r2, [r8]
 8007c94:	605a      	strne	r2, [r3, #4]
 8007c96:	e7eb      	b.n	8007c70 <_malloc_r+0xa8>
 8007c98:	4623      	mov	r3, r4
 8007c9a:	6864      	ldr	r4, [r4, #4]
 8007c9c:	e7ae      	b.n	8007bfc <_malloc_r+0x34>
 8007c9e:	463c      	mov	r4, r7
 8007ca0:	687f      	ldr	r7, [r7, #4]
 8007ca2:	e7b6      	b.n	8007c12 <_malloc_r+0x4a>
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d1fb      	bne.n	8007ca4 <_malloc_r+0xdc>
 8007cac:	2300      	movs	r3, #0
 8007cae:	6053      	str	r3, [r2, #4]
 8007cb0:	e7de      	b.n	8007c70 <_malloc_r+0xa8>
 8007cb2:	230c      	movs	r3, #12
 8007cb4:	6033      	str	r3, [r6, #0]
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f000 f80c 	bl	8007cd4 <__malloc_unlock>
 8007cbc:	e794      	b.n	8007be8 <_malloc_r+0x20>
 8007cbe:	6005      	str	r5, [r0, #0]
 8007cc0:	e7d6      	b.n	8007c70 <_malloc_r+0xa8>
 8007cc2:	bf00      	nop
 8007cc4:	200007a4 	.word	0x200007a4

08007cc8 <__malloc_lock>:
 8007cc8:	4801      	ldr	r0, [pc, #4]	@ (8007cd0 <__malloc_lock+0x8>)
 8007cca:	f7ff bf0e 	b.w	8007aea <__retarget_lock_acquire_recursive>
 8007cce:	bf00      	nop
 8007cd0:	2000079c 	.word	0x2000079c

08007cd4 <__malloc_unlock>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	@ (8007cdc <__malloc_unlock+0x8>)
 8007cd6:	f7ff bf09 	b.w	8007aec <__retarget_lock_release_recursive>
 8007cda:	bf00      	nop
 8007cdc:	2000079c 	.word	0x2000079c

08007ce0 <__ssputs_r>:
 8007ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce4:	688e      	ldr	r6, [r1, #8]
 8007ce6:	461f      	mov	r7, r3
 8007ce8:	42be      	cmp	r6, r7
 8007cea:	680b      	ldr	r3, [r1, #0]
 8007cec:	4682      	mov	sl, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	4690      	mov	r8, r2
 8007cf2:	d82d      	bhi.n	8007d50 <__ssputs_r+0x70>
 8007cf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007cf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007cfc:	d026      	beq.n	8007d4c <__ssputs_r+0x6c>
 8007cfe:	6965      	ldr	r5, [r4, #20]
 8007d00:	6909      	ldr	r1, [r1, #16]
 8007d02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d06:	eba3 0901 	sub.w	r9, r3, r1
 8007d0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d0e:	1c7b      	adds	r3, r7, #1
 8007d10:	444b      	add	r3, r9
 8007d12:	106d      	asrs	r5, r5, #1
 8007d14:	429d      	cmp	r5, r3
 8007d16:	bf38      	it	cc
 8007d18:	461d      	movcc	r5, r3
 8007d1a:	0553      	lsls	r3, r2, #21
 8007d1c:	d527      	bpl.n	8007d6e <__ssputs_r+0x8e>
 8007d1e:	4629      	mov	r1, r5
 8007d20:	f7ff ff52 	bl	8007bc8 <_malloc_r>
 8007d24:	4606      	mov	r6, r0
 8007d26:	b360      	cbz	r0, 8007d82 <__ssputs_r+0xa2>
 8007d28:	6921      	ldr	r1, [r4, #16]
 8007d2a:	464a      	mov	r2, r9
 8007d2c:	f000 fd6a 	bl	8008804 <memcpy>
 8007d30:	89a3      	ldrh	r3, [r4, #12]
 8007d32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d3a:	81a3      	strh	r3, [r4, #12]
 8007d3c:	6126      	str	r6, [r4, #16]
 8007d3e:	6165      	str	r5, [r4, #20]
 8007d40:	444e      	add	r6, r9
 8007d42:	eba5 0509 	sub.w	r5, r5, r9
 8007d46:	6026      	str	r6, [r4, #0]
 8007d48:	60a5      	str	r5, [r4, #8]
 8007d4a:	463e      	mov	r6, r7
 8007d4c:	42be      	cmp	r6, r7
 8007d4e:	d900      	bls.n	8007d52 <__ssputs_r+0x72>
 8007d50:	463e      	mov	r6, r7
 8007d52:	6820      	ldr	r0, [r4, #0]
 8007d54:	4632      	mov	r2, r6
 8007d56:	4641      	mov	r1, r8
 8007d58:	f000 fd2a 	bl	80087b0 <memmove>
 8007d5c:	68a3      	ldr	r3, [r4, #8]
 8007d5e:	1b9b      	subs	r3, r3, r6
 8007d60:	60a3      	str	r3, [r4, #8]
 8007d62:	6823      	ldr	r3, [r4, #0]
 8007d64:	4433      	add	r3, r6
 8007d66:	6023      	str	r3, [r4, #0]
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6e:	462a      	mov	r2, r5
 8007d70:	f000 fd56 	bl	8008820 <_realloc_r>
 8007d74:	4606      	mov	r6, r0
 8007d76:	2800      	cmp	r0, #0
 8007d78:	d1e0      	bne.n	8007d3c <__ssputs_r+0x5c>
 8007d7a:	6921      	ldr	r1, [r4, #16]
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	f7ff feb7 	bl	8007af0 <_free_r>
 8007d82:	230c      	movs	r3, #12
 8007d84:	f8ca 3000 	str.w	r3, [sl]
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8e:	81a3      	strh	r3, [r4, #12]
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e7e9      	b.n	8007d6a <__ssputs_r+0x8a>
	...

08007d98 <_svfiprintf_r>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	4698      	mov	r8, r3
 8007d9e:	898b      	ldrh	r3, [r1, #12]
 8007da0:	061b      	lsls	r3, r3, #24
 8007da2:	b09d      	sub	sp, #116	@ 0x74
 8007da4:	4607      	mov	r7, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	4614      	mov	r4, r2
 8007daa:	d510      	bpl.n	8007dce <_svfiprintf_r+0x36>
 8007dac:	690b      	ldr	r3, [r1, #16]
 8007dae:	b973      	cbnz	r3, 8007dce <_svfiprintf_r+0x36>
 8007db0:	2140      	movs	r1, #64	@ 0x40
 8007db2:	f7ff ff09 	bl	8007bc8 <_malloc_r>
 8007db6:	6028      	str	r0, [r5, #0]
 8007db8:	6128      	str	r0, [r5, #16]
 8007dba:	b930      	cbnz	r0, 8007dca <_svfiprintf_r+0x32>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	b01d      	add	sp, #116	@ 0x74
 8007dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dca:	2340      	movs	r3, #64	@ 0x40
 8007dcc:	616b      	str	r3, [r5, #20]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd2:	2320      	movs	r3, #32
 8007dd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ddc:	2330      	movs	r3, #48	@ 0x30
 8007dde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f7c <_svfiprintf_r+0x1e4>
 8007de2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007de6:	f04f 0901 	mov.w	r9, #1
 8007dea:	4623      	mov	r3, r4
 8007dec:	469a      	mov	sl, r3
 8007dee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007df2:	b10a      	cbz	r2, 8007df8 <_svfiprintf_r+0x60>
 8007df4:	2a25      	cmp	r2, #37	@ 0x25
 8007df6:	d1f9      	bne.n	8007dec <_svfiprintf_r+0x54>
 8007df8:	ebba 0b04 	subs.w	fp, sl, r4
 8007dfc:	d00b      	beq.n	8007e16 <_svfiprintf_r+0x7e>
 8007dfe:	465b      	mov	r3, fp
 8007e00:	4622      	mov	r2, r4
 8007e02:	4629      	mov	r1, r5
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7ff ff6b 	bl	8007ce0 <__ssputs_r>
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	f000 80a7 	beq.w	8007f5e <_svfiprintf_r+0x1c6>
 8007e10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e12:	445a      	add	r2, fp
 8007e14:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e16:	f89a 3000 	ldrb.w	r3, [sl]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 809f 	beq.w	8007f5e <_svfiprintf_r+0x1c6>
 8007e20:	2300      	movs	r3, #0
 8007e22:	f04f 32ff 	mov.w	r2, #4294967295
 8007e26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e2a:	f10a 0a01 	add.w	sl, sl, #1
 8007e2e:	9304      	str	r3, [sp, #16]
 8007e30:	9307      	str	r3, [sp, #28]
 8007e32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e36:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e38:	4654      	mov	r4, sl
 8007e3a:	2205      	movs	r2, #5
 8007e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e40:	484e      	ldr	r0, [pc, #312]	@ (8007f7c <_svfiprintf_r+0x1e4>)
 8007e42:	f7f8 f9c5 	bl	80001d0 <memchr>
 8007e46:	9a04      	ldr	r2, [sp, #16]
 8007e48:	b9d8      	cbnz	r0, 8007e82 <_svfiprintf_r+0xea>
 8007e4a:	06d0      	lsls	r0, r2, #27
 8007e4c:	bf44      	itt	mi
 8007e4e:	2320      	movmi	r3, #32
 8007e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e54:	0711      	lsls	r1, r2, #28
 8007e56:	bf44      	itt	mi
 8007e58:	232b      	movmi	r3, #43	@ 0x2b
 8007e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e64:	d015      	beq.n	8007e92 <_svfiprintf_r+0xfa>
 8007e66:	9a07      	ldr	r2, [sp, #28]
 8007e68:	4654      	mov	r4, sl
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	f04f 0c0a 	mov.w	ip, #10
 8007e70:	4621      	mov	r1, r4
 8007e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e76:	3b30      	subs	r3, #48	@ 0x30
 8007e78:	2b09      	cmp	r3, #9
 8007e7a:	d94b      	bls.n	8007f14 <_svfiprintf_r+0x17c>
 8007e7c:	b1b0      	cbz	r0, 8007eac <_svfiprintf_r+0x114>
 8007e7e:	9207      	str	r2, [sp, #28]
 8007e80:	e014      	b.n	8007eac <_svfiprintf_r+0x114>
 8007e82:	eba0 0308 	sub.w	r3, r0, r8
 8007e86:	fa09 f303 	lsl.w	r3, r9, r3
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	46a2      	mov	sl, r4
 8007e90:	e7d2      	b.n	8007e38 <_svfiprintf_r+0xa0>
 8007e92:	9b03      	ldr	r3, [sp, #12]
 8007e94:	1d19      	adds	r1, r3, #4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	9103      	str	r1, [sp, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	bfbb      	ittet	lt
 8007e9e:	425b      	neglt	r3, r3
 8007ea0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ea4:	9307      	strge	r3, [sp, #28]
 8007ea6:	9307      	strlt	r3, [sp, #28]
 8007ea8:	bfb8      	it	lt
 8007eaa:	9204      	strlt	r2, [sp, #16]
 8007eac:	7823      	ldrb	r3, [r4, #0]
 8007eae:	2b2e      	cmp	r3, #46	@ 0x2e
 8007eb0:	d10a      	bne.n	8007ec8 <_svfiprintf_r+0x130>
 8007eb2:	7863      	ldrb	r3, [r4, #1]
 8007eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eb6:	d132      	bne.n	8007f1e <_svfiprintf_r+0x186>
 8007eb8:	9b03      	ldr	r3, [sp, #12]
 8007eba:	1d1a      	adds	r2, r3, #4
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	9203      	str	r2, [sp, #12]
 8007ec0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ec4:	3402      	adds	r4, #2
 8007ec6:	9305      	str	r3, [sp, #20]
 8007ec8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f8c <_svfiprintf_r+0x1f4>
 8007ecc:	7821      	ldrb	r1, [r4, #0]
 8007ece:	2203      	movs	r2, #3
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	f7f8 f97d 	bl	80001d0 <memchr>
 8007ed6:	b138      	cbz	r0, 8007ee8 <_svfiprintf_r+0x150>
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	eba0 000a 	sub.w	r0, r0, sl
 8007ede:	2240      	movs	r2, #64	@ 0x40
 8007ee0:	4082      	lsls	r2, r0
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	3401      	adds	r4, #1
 8007ee6:	9304      	str	r3, [sp, #16]
 8007ee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eec:	4824      	ldr	r0, [pc, #144]	@ (8007f80 <_svfiprintf_r+0x1e8>)
 8007eee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ef2:	2206      	movs	r2, #6
 8007ef4:	f7f8 f96c 	bl	80001d0 <memchr>
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d036      	beq.n	8007f6a <_svfiprintf_r+0x1d2>
 8007efc:	4b21      	ldr	r3, [pc, #132]	@ (8007f84 <_svfiprintf_r+0x1ec>)
 8007efe:	bb1b      	cbnz	r3, 8007f48 <_svfiprintf_r+0x1b0>
 8007f00:	9b03      	ldr	r3, [sp, #12]
 8007f02:	3307      	adds	r3, #7
 8007f04:	f023 0307 	bic.w	r3, r3, #7
 8007f08:	3308      	adds	r3, #8
 8007f0a:	9303      	str	r3, [sp, #12]
 8007f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0e:	4433      	add	r3, r6
 8007f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f12:	e76a      	b.n	8007dea <_svfiprintf_r+0x52>
 8007f14:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f18:	460c      	mov	r4, r1
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	e7a8      	b.n	8007e70 <_svfiprintf_r+0xd8>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	3401      	adds	r4, #1
 8007f22:	9305      	str	r3, [sp, #20]
 8007f24:	4619      	mov	r1, r3
 8007f26:	f04f 0c0a 	mov.w	ip, #10
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f30:	3a30      	subs	r2, #48	@ 0x30
 8007f32:	2a09      	cmp	r2, #9
 8007f34:	d903      	bls.n	8007f3e <_svfiprintf_r+0x1a6>
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d0c6      	beq.n	8007ec8 <_svfiprintf_r+0x130>
 8007f3a:	9105      	str	r1, [sp, #20]
 8007f3c:	e7c4      	b.n	8007ec8 <_svfiprintf_r+0x130>
 8007f3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f42:	4604      	mov	r4, r0
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7f0      	b.n	8007f2a <_svfiprintf_r+0x192>
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f88 <_svfiprintf_r+0x1f0>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4638      	mov	r0, r7
 8007f54:	f3af 8000 	nop.w
 8007f58:	1c42      	adds	r2, r0, #1
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	d1d6      	bne.n	8007f0c <_svfiprintf_r+0x174>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	065b      	lsls	r3, r3, #25
 8007f62:	f53f af2d 	bmi.w	8007dc0 <_svfiprintf_r+0x28>
 8007f66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f68:	e72c      	b.n	8007dc4 <_svfiprintf_r+0x2c>
 8007f6a:	ab03      	add	r3, sp, #12
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	462a      	mov	r2, r5
 8007f70:	4b05      	ldr	r3, [pc, #20]	@ (8007f88 <_svfiprintf_r+0x1f0>)
 8007f72:	a904      	add	r1, sp, #16
 8007f74:	4638      	mov	r0, r7
 8007f76:	f000 f9bb 	bl	80082f0 <_printf_i>
 8007f7a:	e7ed      	b.n	8007f58 <_svfiprintf_r+0x1c0>
 8007f7c:	08008b74 	.word	0x08008b74
 8007f80:	08008b7e 	.word	0x08008b7e
 8007f84:	00000000 	.word	0x00000000
 8007f88:	08007ce1 	.word	0x08007ce1
 8007f8c:	08008b7a 	.word	0x08008b7a

08007f90 <__sfputc_r>:
 8007f90:	6893      	ldr	r3, [r2, #8]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	b410      	push	{r4}
 8007f98:	6093      	str	r3, [r2, #8]
 8007f9a:	da08      	bge.n	8007fae <__sfputc_r+0x1e>
 8007f9c:	6994      	ldr	r4, [r2, #24]
 8007f9e:	42a3      	cmp	r3, r4
 8007fa0:	db01      	blt.n	8007fa6 <__sfputc_r+0x16>
 8007fa2:	290a      	cmp	r1, #10
 8007fa4:	d103      	bne.n	8007fae <__sfputc_r+0x1e>
 8007fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007faa:	f000 bb6d 	b.w	8008688 <__swbuf_r>
 8007fae:	6813      	ldr	r3, [r2, #0]
 8007fb0:	1c58      	adds	r0, r3, #1
 8007fb2:	6010      	str	r0, [r2, #0]
 8007fb4:	7019      	strb	r1, [r3, #0]
 8007fb6:	4608      	mov	r0, r1
 8007fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fbc:	4770      	bx	lr

08007fbe <__sfputs_r>:
 8007fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	460f      	mov	r7, r1
 8007fc4:	4614      	mov	r4, r2
 8007fc6:	18d5      	adds	r5, r2, r3
 8007fc8:	42ac      	cmp	r4, r5
 8007fca:	d101      	bne.n	8007fd0 <__sfputs_r+0x12>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	e007      	b.n	8007fe0 <__sfputs_r+0x22>
 8007fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd4:	463a      	mov	r2, r7
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff ffda 	bl	8007f90 <__sfputc_r>
 8007fdc:	1c43      	adds	r3, r0, #1
 8007fde:	d1f3      	bne.n	8007fc8 <__sfputs_r+0xa>
 8007fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fe4 <_vfiprintf_r>:
 8007fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	460d      	mov	r5, r1
 8007fea:	b09d      	sub	sp, #116	@ 0x74
 8007fec:	4614      	mov	r4, r2
 8007fee:	4698      	mov	r8, r3
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	b118      	cbz	r0, 8007ffc <_vfiprintf_r+0x18>
 8007ff4:	6a03      	ldr	r3, [r0, #32]
 8007ff6:	b90b      	cbnz	r3, 8007ffc <_vfiprintf_r+0x18>
 8007ff8:	f7ff fc52 	bl	80078a0 <__sinit>
 8007ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ffe:	07d9      	lsls	r1, r3, #31
 8008000:	d405      	bmi.n	800800e <_vfiprintf_r+0x2a>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	059a      	lsls	r2, r3, #22
 8008006:	d402      	bmi.n	800800e <_vfiprintf_r+0x2a>
 8008008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800a:	f7ff fd6e 	bl	8007aea <__retarget_lock_acquire_recursive>
 800800e:	89ab      	ldrh	r3, [r5, #12]
 8008010:	071b      	lsls	r3, r3, #28
 8008012:	d501      	bpl.n	8008018 <_vfiprintf_r+0x34>
 8008014:	692b      	ldr	r3, [r5, #16]
 8008016:	b99b      	cbnz	r3, 8008040 <_vfiprintf_r+0x5c>
 8008018:	4629      	mov	r1, r5
 800801a:	4630      	mov	r0, r6
 800801c:	f000 fb72 	bl	8008704 <__swsetup_r>
 8008020:	b170      	cbz	r0, 8008040 <_vfiprintf_r+0x5c>
 8008022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008024:	07dc      	lsls	r4, r3, #31
 8008026:	d504      	bpl.n	8008032 <_vfiprintf_r+0x4e>
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	b01d      	add	sp, #116	@ 0x74
 800802e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008032:	89ab      	ldrh	r3, [r5, #12]
 8008034:	0598      	lsls	r0, r3, #22
 8008036:	d4f7      	bmi.n	8008028 <_vfiprintf_r+0x44>
 8008038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800803a:	f7ff fd57 	bl	8007aec <__retarget_lock_release_recursive>
 800803e:	e7f3      	b.n	8008028 <_vfiprintf_r+0x44>
 8008040:	2300      	movs	r3, #0
 8008042:	9309      	str	r3, [sp, #36]	@ 0x24
 8008044:	2320      	movs	r3, #32
 8008046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800804a:	f8cd 800c 	str.w	r8, [sp, #12]
 800804e:	2330      	movs	r3, #48	@ 0x30
 8008050:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008200 <_vfiprintf_r+0x21c>
 8008054:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008058:	f04f 0901 	mov.w	r9, #1
 800805c:	4623      	mov	r3, r4
 800805e:	469a      	mov	sl, r3
 8008060:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008064:	b10a      	cbz	r2, 800806a <_vfiprintf_r+0x86>
 8008066:	2a25      	cmp	r2, #37	@ 0x25
 8008068:	d1f9      	bne.n	800805e <_vfiprintf_r+0x7a>
 800806a:	ebba 0b04 	subs.w	fp, sl, r4
 800806e:	d00b      	beq.n	8008088 <_vfiprintf_r+0xa4>
 8008070:	465b      	mov	r3, fp
 8008072:	4622      	mov	r2, r4
 8008074:	4629      	mov	r1, r5
 8008076:	4630      	mov	r0, r6
 8008078:	f7ff ffa1 	bl	8007fbe <__sfputs_r>
 800807c:	3001      	adds	r0, #1
 800807e:	f000 80a7 	beq.w	80081d0 <_vfiprintf_r+0x1ec>
 8008082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008084:	445a      	add	r2, fp
 8008086:	9209      	str	r2, [sp, #36]	@ 0x24
 8008088:	f89a 3000 	ldrb.w	r3, [sl]
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 809f 	beq.w	80081d0 <_vfiprintf_r+0x1ec>
 8008092:	2300      	movs	r3, #0
 8008094:	f04f 32ff 	mov.w	r2, #4294967295
 8008098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800809c:	f10a 0a01 	add.w	sl, sl, #1
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	9307      	str	r3, [sp, #28]
 80080a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80080aa:	4654      	mov	r4, sl
 80080ac:	2205      	movs	r2, #5
 80080ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080b2:	4853      	ldr	r0, [pc, #332]	@ (8008200 <_vfiprintf_r+0x21c>)
 80080b4:	f7f8 f88c 	bl	80001d0 <memchr>
 80080b8:	9a04      	ldr	r2, [sp, #16]
 80080ba:	b9d8      	cbnz	r0, 80080f4 <_vfiprintf_r+0x110>
 80080bc:	06d1      	lsls	r1, r2, #27
 80080be:	bf44      	itt	mi
 80080c0:	2320      	movmi	r3, #32
 80080c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080c6:	0713      	lsls	r3, r2, #28
 80080c8:	bf44      	itt	mi
 80080ca:	232b      	movmi	r3, #43	@ 0x2b
 80080cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080d0:	f89a 3000 	ldrb.w	r3, [sl]
 80080d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80080d6:	d015      	beq.n	8008104 <_vfiprintf_r+0x120>
 80080d8:	9a07      	ldr	r2, [sp, #28]
 80080da:	4654      	mov	r4, sl
 80080dc:	2000      	movs	r0, #0
 80080de:	f04f 0c0a 	mov.w	ip, #10
 80080e2:	4621      	mov	r1, r4
 80080e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080e8:	3b30      	subs	r3, #48	@ 0x30
 80080ea:	2b09      	cmp	r3, #9
 80080ec:	d94b      	bls.n	8008186 <_vfiprintf_r+0x1a2>
 80080ee:	b1b0      	cbz	r0, 800811e <_vfiprintf_r+0x13a>
 80080f0:	9207      	str	r2, [sp, #28]
 80080f2:	e014      	b.n	800811e <_vfiprintf_r+0x13a>
 80080f4:	eba0 0308 	sub.w	r3, r0, r8
 80080f8:	fa09 f303 	lsl.w	r3, r9, r3
 80080fc:	4313      	orrs	r3, r2
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	46a2      	mov	sl, r4
 8008102:	e7d2      	b.n	80080aa <_vfiprintf_r+0xc6>
 8008104:	9b03      	ldr	r3, [sp, #12]
 8008106:	1d19      	adds	r1, r3, #4
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	9103      	str	r1, [sp, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	bfbb      	ittet	lt
 8008110:	425b      	neglt	r3, r3
 8008112:	f042 0202 	orrlt.w	r2, r2, #2
 8008116:	9307      	strge	r3, [sp, #28]
 8008118:	9307      	strlt	r3, [sp, #28]
 800811a:	bfb8      	it	lt
 800811c:	9204      	strlt	r2, [sp, #16]
 800811e:	7823      	ldrb	r3, [r4, #0]
 8008120:	2b2e      	cmp	r3, #46	@ 0x2e
 8008122:	d10a      	bne.n	800813a <_vfiprintf_r+0x156>
 8008124:	7863      	ldrb	r3, [r4, #1]
 8008126:	2b2a      	cmp	r3, #42	@ 0x2a
 8008128:	d132      	bne.n	8008190 <_vfiprintf_r+0x1ac>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	1d1a      	adds	r2, r3, #4
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	9203      	str	r2, [sp, #12]
 8008132:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008136:	3402      	adds	r4, #2
 8008138:	9305      	str	r3, [sp, #20]
 800813a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008210 <_vfiprintf_r+0x22c>
 800813e:	7821      	ldrb	r1, [r4, #0]
 8008140:	2203      	movs	r2, #3
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 f844 	bl	80001d0 <memchr>
 8008148:	b138      	cbz	r0, 800815a <_vfiprintf_r+0x176>
 800814a:	9b04      	ldr	r3, [sp, #16]
 800814c:	eba0 000a 	sub.w	r0, r0, sl
 8008150:	2240      	movs	r2, #64	@ 0x40
 8008152:	4082      	lsls	r2, r0
 8008154:	4313      	orrs	r3, r2
 8008156:	3401      	adds	r4, #1
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815e:	4829      	ldr	r0, [pc, #164]	@ (8008204 <_vfiprintf_r+0x220>)
 8008160:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008164:	2206      	movs	r2, #6
 8008166:	f7f8 f833 	bl	80001d0 <memchr>
 800816a:	2800      	cmp	r0, #0
 800816c:	d03f      	beq.n	80081ee <_vfiprintf_r+0x20a>
 800816e:	4b26      	ldr	r3, [pc, #152]	@ (8008208 <_vfiprintf_r+0x224>)
 8008170:	bb1b      	cbnz	r3, 80081ba <_vfiprintf_r+0x1d6>
 8008172:	9b03      	ldr	r3, [sp, #12]
 8008174:	3307      	adds	r3, #7
 8008176:	f023 0307 	bic.w	r3, r3, #7
 800817a:	3308      	adds	r3, #8
 800817c:	9303      	str	r3, [sp, #12]
 800817e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008180:	443b      	add	r3, r7
 8008182:	9309      	str	r3, [sp, #36]	@ 0x24
 8008184:	e76a      	b.n	800805c <_vfiprintf_r+0x78>
 8008186:	fb0c 3202 	mla	r2, ip, r2, r3
 800818a:	460c      	mov	r4, r1
 800818c:	2001      	movs	r0, #1
 800818e:	e7a8      	b.n	80080e2 <_vfiprintf_r+0xfe>
 8008190:	2300      	movs	r3, #0
 8008192:	3401      	adds	r4, #1
 8008194:	9305      	str	r3, [sp, #20]
 8008196:	4619      	mov	r1, r3
 8008198:	f04f 0c0a 	mov.w	ip, #10
 800819c:	4620      	mov	r0, r4
 800819e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081a2:	3a30      	subs	r2, #48	@ 0x30
 80081a4:	2a09      	cmp	r2, #9
 80081a6:	d903      	bls.n	80081b0 <_vfiprintf_r+0x1cc>
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d0c6      	beq.n	800813a <_vfiprintf_r+0x156>
 80081ac:	9105      	str	r1, [sp, #20]
 80081ae:	e7c4      	b.n	800813a <_vfiprintf_r+0x156>
 80081b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b4:	4604      	mov	r4, r0
 80081b6:	2301      	movs	r3, #1
 80081b8:	e7f0      	b.n	800819c <_vfiprintf_r+0x1b8>
 80081ba:	ab03      	add	r3, sp, #12
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	462a      	mov	r2, r5
 80081c0:	4b12      	ldr	r3, [pc, #72]	@ (800820c <_vfiprintf_r+0x228>)
 80081c2:	a904      	add	r1, sp, #16
 80081c4:	4630      	mov	r0, r6
 80081c6:	f3af 8000 	nop.w
 80081ca:	4607      	mov	r7, r0
 80081cc:	1c78      	adds	r0, r7, #1
 80081ce:	d1d6      	bne.n	800817e <_vfiprintf_r+0x19a>
 80081d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d2:	07d9      	lsls	r1, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_vfiprintf_r+0x1fe>
 80081d6:	89ab      	ldrh	r3, [r5, #12]
 80081d8:	059a      	lsls	r2, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_vfiprintf_r+0x1fe>
 80081dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081de:	f7ff fc85 	bl	8007aec <__retarget_lock_release_recursive>
 80081e2:	89ab      	ldrh	r3, [r5, #12]
 80081e4:	065b      	lsls	r3, r3, #25
 80081e6:	f53f af1f 	bmi.w	8008028 <_vfiprintf_r+0x44>
 80081ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081ec:	e71e      	b.n	800802c <_vfiprintf_r+0x48>
 80081ee:	ab03      	add	r3, sp, #12
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	462a      	mov	r2, r5
 80081f4:	4b05      	ldr	r3, [pc, #20]	@ (800820c <_vfiprintf_r+0x228>)
 80081f6:	a904      	add	r1, sp, #16
 80081f8:	4630      	mov	r0, r6
 80081fa:	f000 f879 	bl	80082f0 <_printf_i>
 80081fe:	e7e4      	b.n	80081ca <_vfiprintf_r+0x1e6>
 8008200:	08008b74 	.word	0x08008b74
 8008204:	08008b7e 	.word	0x08008b7e
 8008208:	00000000 	.word	0x00000000
 800820c:	08007fbf 	.word	0x08007fbf
 8008210:	08008b7a 	.word	0x08008b7a

08008214 <_printf_common>:
 8008214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008218:	4616      	mov	r6, r2
 800821a:	4698      	mov	r8, r3
 800821c:	688a      	ldr	r2, [r1, #8]
 800821e:	690b      	ldr	r3, [r1, #16]
 8008220:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008224:	4293      	cmp	r3, r2
 8008226:	bfb8      	it	lt
 8008228:	4613      	movlt	r3, r2
 800822a:	6033      	str	r3, [r6, #0]
 800822c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008230:	4607      	mov	r7, r0
 8008232:	460c      	mov	r4, r1
 8008234:	b10a      	cbz	r2, 800823a <_printf_common+0x26>
 8008236:	3301      	adds	r3, #1
 8008238:	6033      	str	r3, [r6, #0]
 800823a:	6823      	ldr	r3, [r4, #0]
 800823c:	0699      	lsls	r1, r3, #26
 800823e:	bf42      	ittt	mi
 8008240:	6833      	ldrmi	r3, [r6, #0]
 8008242:	3302      	addmi	r3, #2
 8008244:	6033      	strmi	r3, [r6, #0]
 8008246:	6825      	ldr	r5, [r4, #0]
 8008248:	f015 0506 	ands.w	r5, r5, #6
 800824c:	d106      	bne.n	800825c <_printf_common+0x48>
 800824e:	f104 0a19 	add.w	sl, r4, #25
 8008252:	68e3      	ldr	r3, [r4, #12]
 8008254:	6832      	ldr	r2, [r6, #0]
 8008256:	1a9b      	subs	r3, r3, r2
 8008258:	42ab      	cmp	r3, r5
 800825a:	dc26      	bgt.n	80082aa <_printf_common+0x96>
 800825c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008260:	6822      	ldr	r2, [r4, #0]
 8008262:	3b00      	subs	r3, #0
 8008264:	bf18      	it	ne
 8008266:	2301      	movne	r3, #1
 8008268:	0692      	lsls	r2, r2, #26
 800826a:	d42b      	bmi.n	80082c4 <_printf_common+0xb0>
 800826c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008270:	4641      	mov	r1, r8
 8008272:	4638      	mov	r0, r7
 8008274:	47c8      	blx	r9
 8008276:	3001      	adds	r0, #1
 8008278:	d01e      	beq.n	80082b8 <_printf_common+0xa4>
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	f003 0306 	and.w	r3, r3, #6
 8008282:	2b04      	cmp	r3, #4
 8008284:	bf02      	ittt	eq
 8008286:	68e5      	ldreq	r5, [r4, #12]
 8008288:	6833      	ldreq	r3, [r6, #0]
 800828a:	1aed      	subeq	r5, r5, r3
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	bf0c      	ite	eq
 8008290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008294:	2500      	movne	r5, #0
 8008296:	4293      	cmp	r3, r2
 8008298:	bfc4      	itt	gt
 800829a:	1a9b      	subgt	r3, r3, r2
 800829c:	18ed      	addgt	r5, r5, r3
 800829e:	2600      	movs	r6, #0
 80082a0:	341a      	adds	r4, #26
 80082a2:	42b5      	cmp	r5, r6
 80082a4:	d11a      	bne.n	80082dc <_printf_common+0xc8>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e008      	b.n	80082bc <_printf_common+0xa8>
 80082aa:	2301      	movs	r3, #1
 80082ac:	4652      	mov	r2, sl
 80082ae:	4641      	mov	r1, r8
 80082b0:	4638      	mov	r0, r7
 80082b2:	47c8      	blx	r9
 80082b4:	3001      	adds	r0, #1
 80082b6:	d103      	bne.n	80082c0 <_printf_common+0xac>
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	3501      	adds	r5, #1
 80082c2:	e7c6      	b.n	8008252 <_printf_common+0x3e>
 80082c4:	18e1      	adds	r1, r4, r3
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	2030      	movs	r0, #48	@ 0x30
 80082ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082ce:	4422      	add	r2, r4
 80082d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082d8:	3302      	adds	r3, #2
 80082da:	e7c7      	b.n	800826c <_printf_common+0x58>
 80082dc:	2301      	movs	r3, #1
 80082de:	4622      	mov	r2, r4
 80082e0:	4641      	mov	r1, r8
 80082e2:	4638      	mov	r0, r7
 80082e4:	47c8      	blx	r9
 80082e6:	3001      	adds	r0, #1
 80082e8:	d0e6      	beq.n	80082b8 <_printf_common+0xa4>
 80082ea:	3601      	adds	r6, #1
 80082ec:	e7d9      	b.n	80082a2 <_printf_common+0x8e>
	...

080082f0 <_printf_i>:
 80082f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082f4:	7e0f      	ldrb	r7, [r1, #24]
 80082f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082f8:	2f78      	cmp	r7, #120	@ 0x78
 80082fa:	4691      	mov	r9, r2
 80082fc:	4680      	mov	r8, r0
 80082fe:	460c      	mov	r4, r1
 8008300:	469a      	mov	sl, r3
 8008302:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008306:	d807      	bhi.n	8008318 <_printf_i+0x28>
 8008308:	2f62      	cmp	r7, #98	@ 0x62
 800830a:	d80a      	bhi.n	8008322 <_printf_i+0x32>
 800830c:	2f00      	cmp	r7, #0
 800830e:	f000 80d2 	beq.w	80084b6 <_printf_i+0x1c6>
 8008312:	2f58      	cmp	r7, #88	@ 0x58
 8008314:	f000 80b9 	beq.w	800848a <_printf_i+0x19a>
 8008318:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800831c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008320:	e03a      	b.n	8008398 <_printf_i+0xa8>
 8008322:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008326:	2b15      	cmp	r3, #21
 8008328:	d8f6      	bhi.n	8008318 <_printf_i+0x28>
 800832a:	a101      	add	r1, pc, #4	@ (adr r1, 8008330 <_printf_i+0x40>)
 800832c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008330:	08008389 	.word	0x08008389
 8008334:	0800839d 	.word	0x0800839d
 8008338:	08008319 	.word	0x08008319
 800833c:	08008319 	.word	0x08008319
 8008340:	08008319 	.word	0x08008319
 8008344:	08008319 	.word	0x08008319
 8008348:	0800839d 	.word	0x0800839d
 800834c:	08008319 	.word	0x08008319
 8008350:	08008319 	.word	0x08008319
 8008354:	08008319 	.word	0x08008319
 8008358:	08008319 	.word	0x08008319
 800835c:	0800849d 	.word	0x0800849d
 8008360:	080083c7 	.word	0x080083c7
 8008364:	08008457 	.word	0x08008457
 8008368:	08008319 	.word	0x08008319
 800836c:	08008319 	.word	0x08008319
 8008370:	080084bf 	.word	0x080084bf
 8008374:	08008319 	.word	0x08008319
 8008378:	080083c7 	.word	0x080083c7
 800837c:	08008319 	.word	0x08008319
 8008380:	08008319 	.word	0x08008319
 8008384:	0800845f 	.word	0x0800845f
 8008388:	6833      	ldr	r3, [r6, #0]
 800838a:	1d1a      	adds	r2, r3, #4
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	6032      	str	r2, [r6, #0]
 8008390:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008394:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008398:	2301      	movs	r3, #1
 800839a:	e09d      	b.n	80084d8 <_printf_i+0x1e8>
 800839c:	6833      	ldr	r3, [r6, #0]
 800839e:	6820      	ldr	r0, [r4, #0]
 80083a0:	1d19      	adds	r1, r3, #4
 80083a2:	6031      	str	r1, [r6, #0]
 80083a4:	0606      	lsls	r6, r0, #24
 80083a6:	d501      	bpl.n	80083ac <_printf_i+0xbc>
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	e003      	b.n	80083b4 <_printf_i+0xc4>
 80083ac:	0645      	lsls	r5, r0, #25
 80083ae:	d5fb      	bpl.n	80083a8 <_printf_i+0xb8>
 80083b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	da03      	bge.n	80083c0 <_printf_i+0xd0>
 80083b8:	232d      	movs	r3, #45	@ 0x2d
 80083ba:	426d      	negs	r5, r5
 80083bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c0:	4859      	ldr	r0, [pc, #356]	@ (8008528 <_printf_i+0x238>)
 80083c2:	230a      	movs	r3, #10
 80083c4:	e011      	b.n	80083ea <_printf_i+0xfa>
 80083c6:	6821      	ldr	r1, [r4, #0]
 80083c8:	6833      	ldr	r3, [r6, #0]
 80083ca:	0608      	lsls	r0, r1, #24
 80083cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80083d0:	d402      	bmi.n	80083d8 <_printf_i+0xe8>
 80083d2:	0649      	lsls	r1, r1, #25
 80083d4:	bf48      	it	mi
 80083d6:	b2ad      	uxthmi	r5, r5
 80083d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80083da:	4853      	ldr	r0, [pc, #332]	@ (8008528 <_printf_i+0x238>)
 80083dc:	6033      	str	r3, [r6, #0]
 80083de:	bf14      	ite	ne
 80083e0:	230a      	movne	r3, #10
 80083e2:	2308      	moveq	r3, #8
 80083e4:	2100      	movs	r1, #0
 80083e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083ea:	6866      	ldr	r6, [r4, #4]
 80083ec:	60a6      	str	r6, [r4, #8]
 80083ee:	2e00      	cmp	r6, #0
 80083f0:	bfa2      	ittt	ge
 80083f2:	6821      	ldrge	r1, [r4, #0]
 80083f4:	f021 0104 	bicge.w	r1, r1, #4
 80083f8:	6021      	strge	r1, [r4, #0]
 80083fa:	b90d      	cbnz	r5, 8008400 <_printf_i+0x110>
 80083fc:	2e00      	cmp	r6, #0
 80083fe:	d04b      	beq.n	8008498 <_printf_i+0x1a8>
 8008400:	4616      	mov	r6, r2
 8008402:	fbb5 f1f3 	udiv	r1, r5, r3
 8008406:	fb03 5711 	mls	r7, r3, r1, r5
 800840a:	5dc7      	ldrb	r7, [r0, r7]
 800840c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008410:	462f      	mov	r7, r5
 8008412:	42bb      	cmp	r3, r7
 8008414:	460d      	mov	r5, r1
 8008416:	d9f4      	bls.n	8008402 <_printf_i+0x112>
 8008418:	2b08      	cmp	r3, #8
 800841a:	d10b      	bne.n	8008434 <_printf_i+0x144>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07df      	lsls	r7, r3, #31
 8008420:	d508      	bpl.n	8008434 <_printf_i+0x144>
 8008422:	6923      	ldr	r3, [r4, #16]
 8008424:	6861      	ldr	r1, [r4, #4]
 8008426:	4299      	cmp	r1, r3
 8008428:	bfde      	ittt	le
 800842a:	2330      	movle	r3, #48	@ 0x30
 800842c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008430:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008434:	1b92      	subs	r2, r2, r6
 8008436:	6122      	str	r2, [r4, #16]
 8008438:	f8cd a000 	str.w	sl, [sp]
 800843c:	464b      	mov	r3, r9
 800843e:	aa03      	add	r2, sp, #12
 8008440:	4621      	mov	r1, r4
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff fee6 	bl	8008214 <_printf_common>
 8008448:	3001      	adds	r0, #1
 800844a:	d14a      	bne.n	80084e2 <_printf_i+0x1f2>
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	b004      	add	sp, #16
 8008452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	f043 0320 	orr.w	r3, r3, #32
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	4833      	ldr	r0, [pc, #204]	@ (800852c <_printf_i+0x23c>)
 8008460:	2778      	movs	r7, #120	@ 0x78
 8008462:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	6831      	ldr	r1, [r6, #0]
 800846a:	061f      	lsls	r7, r3, #24
 800846c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008470:	d402      	bmi.n	8008478 <_printf_i+0x188>
 8008472:	065f      	lsls	r7, r3, #25
 8008474:	bf48      	it	mi
 8008476:	b2ad      	uxthmi	r5, r5
 8008478:	6031      	str	r1, [r6, #0]
 800847a:	07d9      	lsls	r1, r3, #31
 800847c:	bf44      	itt	mi
 800847e:	f043 0320 	orrmi.w	r3, r3, #32
 8008482:	6023      	strmi	r3, [r4, #0]
 8008484:	b11d      	cbz	r5, 800848e <_printf_i+0x19e>
 8008486:	2310      	movs	r3, #16
 8008488:	e7ac      	b.n	80083e4 <_printf_i+0xf4>
 800848a:	4827      	ldr	r0, [pc, #156]	@ (8008528 <_printf_i+0x238>)
 800848c:	e7e9      	b.n	8008462 <_printf_i+0x172>
 800848e:	6823      	ldr	r3, [r4, #0]
 8008490:	f023 0320 	bic.w	r3, r3, #32
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	e7f6      	b.n	8008486 <_printf_i+0x196>
 8008498:	4616      	mov	r6, r2
 800849a:	e7bd      	b.n	8008418 <_printf_i+0x128>
 800849c:	6833      	ldr	r3, [r6, #0]
 800849e:	6825      	ldr	r5, [r4, #0]
 80084a0:	6961      	ldr	r1, [r4, #20]
 80084a2:	1d18      	adds	r0, r3, #4
 80084a4:	6030      	str	r0, [r6, #0]
 80084a6:	062e      	lsls	r6, r5, #24
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	d501      	bpl.n	80084b0 <_printf_i+0x1c0>
 80084ac:	6019      	str	r1, [r3, #0]
 80084ae:	e002      	b.n	80084b6 <_printf_i+0x1c6>
 80084b0:	0668      	lsls	r0, r5, #25
 80084b2:	d5fb      	bpl.n	80084ac <_printf_i+0x1bc>
 80084b4:	8019      	strh	r1, [r3, #0]
 80084b6:	2300      	movs	r3, #0
 80084b8:	6123      	str	r3, [r4, #16]
 80084ba:	4616      	mov	r6, r2
 80084bc:	e7bc      	b.n	8008438 <_printf_i+0x148>
 80084be:	6833      	ldr	r3, [r6, #0]
 80084c0:	1d1a      	adds	r2, r3, #4
 80084c2:	6032      	str	r2, [r6, #0]
 80084c4:	681e      	ldr	r6, [r3, #0]
 80084c6:	6862      	ldr	r2, [r4, #4]
 80084c8:	2100      	movs	r1, #0
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7f7 fe80 	bl	80001d0 <memchr>
 80084d0:	b108      	cbz	r0, 80084d6 <_printf_i+0x1e6>
 80084d2:	1b80      	subs	r0, r0, r6
 80084d4:	6060      	str	r0, [r4, #4]
 80084d6:	6863      	ldr	r3, [r4, #4]
 80084d8:	6123      	str	r3, [r4, #16]
 80084da:	2300      	movs	r3, #0
 80084dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084e0:	e7aa      	b.n	8008438 <_printf_i+0x148>
 80084e2:	6923      	ldr	r3, [r4, #16]
 80084e4:	4632      	mov	r2, r6
 80084e6:	4649      	mov	r1, r9
 80084e8:	4640      	mov	r0, r8
 80084ea:	47d0      	blx	sl
 80084ec:	3001      	adds	r0, #1
 80084ee:	d0ad      	beq.n	800844c <_printf_i+0x15c>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	079b      	lsls	r3, r3, #30
 80084f4:	d413      	bmi.n	800851e <_printf_i+0x22e>
 80084f6:	68e0      	ldr	r0, [r4, #12]
 80084f8:	9b03      	ldr	r3, [sp, #12]
 80084fa:	4298      	cmp	r0, r3
 80084fc:	bfb8      	it	lt
 80084fe:	4618      	movlt	r0, r3
 8008500:	e7a6      	b.n	8008450 <_printf_i+0x160>
 8008502:	2301      	movs	r3, #1
 8008504:	4632      	mov	r2, r6
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	47d0      	blx	sl
 800850c:	3001      	adds	r0, #1
 800850e:	d09d      	beq.n	800844c <_printf_i+0x15c>
 8008510:	3501      	adds	r5, #1
 8008512:	68e3      	ldr	r3, [r4, #12]
 8008514:	9903      	ldr	r1, [sp, #12]
 8008516:	1a5b      	subs	r3, r3, r1
 8008518:	42ab      	cmp	r3, r5
 800851a:	dcf2      	bgt.n	8008502 <_printf_i+0x212>
 800851c:	e7eb      	b.n	80084f6 <_printf_i+0x206>
 800851e:	2500      	movs	r5, #0
 8008520:	f104 0619 	add.w	r6, r4, #25
 8008524:	e7f5      	b.n	8008512 <_printf_i+0x222>
 8008526:	bf00      	nop
 8008528:	08008b85 	.word	0x08008b85
 800852c:	08008b96 	.word	0x08008b96

08008530 <__sflush_r>:
 8008530:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008538:	0716      	lsls	r6, r2, #28
 800853a:	4605      	mov	r5, r0
 800853c:	460c      	mov	r4, r1
 800853e:	d454      	bmi.n	80085ea <__sflush_r+0xba>
 8008540:	684b      	ldr	r3, [r1, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	dc02      	bgt.n	800854c <__sflush_r+0x1c>
 8008546:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008548:	2b00      	cmp	r3, #0
 800854a:	dd48      	ble.n	80085de <__sflush_r+0xae>
 800854c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800854e:	2e00      	cmp	r6, #0
 8008550:	d045      	beq.n	80085de <__sflush_r+0xae>
 8008552:	2300      	movs	r3, #0
 8008554:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008558:	682f      	ldr	r7, [r5, #0]
 800855a:	6a21      	ldr	r1, [r4, #32]
 800855c:	602b      	str	r3, [r5, #0]
 800855e:	d030      	beq.n	80085c2 <__sflush_r+0x92>
 8008560:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008562:	89a3      	ldrh	r3, [r4, #12]
 8008564:	0759      	lsls	r1, r3, #29
 8008566:	d505      	bpl.n	8008574 <__sflush_r+0x44>
 8008568:	6863      	ldr	r3, [r4, #4]
 800856a:	1ad2      	subs	r2, r2, r3
 800856c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800856e:	b10b      	cbz	r3, 8008574 <__sflush_r+0x44>
 8008570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008572:	1ad2      	subs	r2, r2, r3
 8008574:	2300      	movs	r3, #0
 8008576:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008578:	6a21      	ldr	r1, [r4, #32]
 800857a:	4628      	mov	r0, r5
 800857c:	47b0      	blx	r6
 800857e:	1c43      	adds	r3, r0, #1
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	d106      	bne.n	8008592 <__sflush_r+0x62>
 8008584:	6829      	ldr	r1, [r5, #0]
 8008586:	291d      	cmp	r1, #29
 8008588:	d82b      	bhi.n	80085e2 <__sflush_r+0xb2>
 800858a:	4a2a      	ldr	r2, [pc, #168]	@ (8008634 <__sflush_r+0x104>)
 800858c:	410a      	asrs	r2, r1
 800858e:	07d6      	lsls	r6, r2, #31
 8008590:	d427      	bmi.n	80085e2 <__sflush_r+0xb2>
 8008592:	2200      	movs	r2, #0
 8008594:	6062      	str	r2, [r4, #4]
 8008596:	04d9      	lsls	r1, r3, #19
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	6022      	str	r2, [r4, #0]
 800859c:	d504      	bpl.n	80085a8 <__sflush_r+0x78>
 800859e:	1c42      	adds	r2, r0, #1
 80085a0:	d101      	bne.n	80085a6 <__sflush_r+0x76>
 80085a2:	682b      	ldr	r3, [r5, #0]
 80085a4:	b903      	cbnz	r3, 80085a8 <__sflush_r+0x78>
 80085a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80085a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085aa:	602f      	str	r7, [r5, #0]
 80085ac:	b1b9      	cbz	r1, 80085de <__sflush_r+0xae>
 80085ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d002      	beq.n	80085bc <__sflush_r+0x8c>
 80085b6:	4628      	mov	r0, r5
 80085b8:	f7ff fa9a 	bl	8007af0 <_free_r>
 80085bc:	2300      	movs	r3, #0
 80085be:	6363      	str	r3, [r4, #52]	@ 0x34
 80085c0:	e00d      	b.n	80085de <__sflush_r+0xae>
 80085c2:	2301      	movs	r3, #1
 80085c4:	4628      	mov	r0, r5
 80085c6:	47b0      	blx	r6
 80085c8:	4602      	mov	r2, r0
 80085ca:	1c50      	adds	r0, r2, #1
 80085cc:	d1c9      	bne.n	8008562 <__sflush_r+0x32>
 80085ce:	682b      	ldr	r3, [r5, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d0c6      	beq.n	8008562 <__sflush_r+0x32>
 80085d4:	2b1d      	cmp	r3, #29
 80085d6:	d001      	beq.n	80085dc <__sflush_r+0xac>
 80085d8:	2b16      	cmp	r3, #22
 80085da:	d11e      	bne.n	800861a <__sflush_r+0xea>
 80085dc:	602f      	str	r7, [r5, #0]
 80085de:	2000      	movs	r0, #0
 80085e0:	e022      	b.n	8008628 <__sflush_r+0xf8>
 80085e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e6:	b21b      	sxth	r3, r3
 80085e8:	e01b      	b.n	8008622 <__sflush_r+0xf2>
 80085ea:	690f      	ldr	r7, [r1, #16]
 80085ec:	2f00      	cmp	r7, #0
 80085ee:	d0f6      	beq.n	80085de <__sflush_r+0xae>
 80085f0:	0793      	lsls	r3, r2, #30
 80085f2:	680e      	ldr	r6, [r1, #0]
 80085f4:	bf08      	it	eq
 80085f6:	694b      	ldreq	r3, [r1, #20]
 80085f8:	600f      	str	r7, [r1, #0]
 80085fa:	bf18      	it	ne
 80085fc:	2300      	movne	r3, #0
 80085fe:	eba6 0807 	sub.w	r8, r6, r7
 8008602:	608b      	str	r3, [r1, #8]
 8008604:	f1b8 0f00 	cmp.w	r8, #0
 8008608:	dde9      	ble.n	80085de <__sflush_r+0xae>
 800860a:	6a21      	ldr	r1, [r4, #32]
 800860c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800860e:	4643      	mov	r3, r8
 8008610:	463a      	mov	r2, r7
 8008612:	4628      	mov	r0, r5
 8008614:	47b0      	blx	r6
 8008616:	2800      	cmp	r0, #0
 8008618:	dc08      	bgt.n	800862c <__sflush_r+0xfc>
 800861a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800861e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008622:	81a3      	strh	r3, [r4, #12]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800862c:	4407      	add	r7, r0
 800862e:	eba8 0800 	sub.w	r8, r8, r0
 8008632:	e7e7      	b.n	8008604 <__sflush_r+0xd4>
 8008634:	dfbffffe 	.word	0xdfbffffe

08008638 <_fflush_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	690b      	ldr	r3, [r1, #16]
 800863c:	4605      	mov	r5, r0
 800863e:	460c      	mov	r4, r1
 8008640:	b913      	cbnz	r3, 8008648 <_fflush_r+0x10>
 8008642:	2500      	movs	r5, #0
 8008644:	4628      	mov	r0, r5
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	b118      	cbz	r0, 8008652 <_fflush_r+0x1a>
 800864a:	6a03      	ldr	r3, [r0, #32]
 800864c:	b90b      	cbnz	r3, 8008652 <_fflush_r+0x1a>
 800864e:	f7ff f927 	bl	80078a0 <__sinit>
 8008652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d0f3      	beq.n	8008642 <_fflush_r+0xa>
 800865a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800865c:	07d0      	lsls	r0, r2, #31
 800865e:	d404      	bmi.n	800866a <_fflush_r+0x32>
 8008660:	0599      	lsls	r1, r3, #22
 8008662:	d402      	bmi.n	800866a <_fflush_r+0x32>
 8008664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008666:	f7ff fa40 	bl	8007aea <__retarget_lock_acquire_recursive>
 800866a:	4628      	mov	r0, r5
 800866c:	4621      	mov	r1, r4
 800866e:	f7ff ff5f 	bl	8008530 <__sflush_r>
 8008672:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008674:	07da      	lsls	r2, r3, #31
 8008676:	4605      	mov	r5, r0
 8008678:	d4e4      	bmi.n	8008644 <_fflush_r+0xc>
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	059b      	lsls	r3, r3, #22
 800867e:	d4e1      	bmi.n	8008644 <_fflush_r+0xc>
 8008680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008682:	f7ff fa33 	bl	8007aec <__retarget_lock_release_recursive>
 8008686:	e7dd      	b.n	8008644 <_fflush_r+0xc>

08008688 <__swbuf_r>:
 8008688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800868a:	460e      	mov	r6, r1
 800868c:	4614      	mov	r4, r2
 800868e:	4605      	mov	r5, r0
 8008690:	b118      	cbz	r0, 800869a <__swbuf_r+0x12>
 8008692:	6a03      	ldr	r3, [r0, #32]
 8008694:	b90b      	cbnz	r3, 800869a <__swbuf_r+0x12>
 8008696:	f7ff f903 	bl	80078a0 <__sinit>
 800869a:	69a3      	ldr	r3, [r4, #24]
 800869c:	60a3      	str	r3, [r4, #8]
 800869e:	89a3      	ldrh	r3, [r4, #12]
 80086a0:	071a      	lsls	r2, r3, #28
 80086a2:	d501      	bpl.n	80086a8 <__swbuf_r+0x20>
 80086a4:	6923      	ldr	r3, [r4, #16]
 80086a6:	b943      	cbnz	r3, 80086ba <__swbuf_r+0x32>
 80086a8:	4621      	mov	r1, r4
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f82a 	bl	8008704 <__swsetup_r>
 80086b0:	b118      	cbz	r0, 80086ba <__swbuf_r+0x32>
 80086b2:	f04f 37ff 	mov.w	r7, #4294967295
 80086b6:	4638      	mov	r0, r7
 80086b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	6922      	ldr	r2, [r4, #16]
 80086be:	1a98      	subs	r0, r3, r2
 80086c0:	6963      	ldr	r3, [r4, #20]
 80086c2:	b2f6      	uxtb	r6, r6
 80086c4:	4283      	cmp	r3, r0
 80086c6:	4637      	mov	r7, r6
 80086c8:	dc05      	bgt.n	80086d6 <__swbuf_r+0x4e>
 80086ca:	4621      	mov	r1, r4
 80086cc:	4628      	mov	r0, r5
 80086ce:	f7ff ffb3 	bl	8008638 <_fflush_r>
 80086d2:	2800      	cmp	r0, #0
 80086d4:	d1ed      	bne.n	80086b2 <__swbuf_r+0x2a>
 80086d6:	68a3      	ldr	r3, [r4, #8]
 80086d8:	3b01      	subs	r3, #1
 80086da:	60a3      	str	r3, [r4, #8]
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	6022      	str	r2, [r4, #0]
 80086e2:	701e      	strb	r6, [r3, #0]
 80086e4:	6962      	ldr	r2, [r4, #20]
 80086e6:	1c43      	adds	r3, r0, #1
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d004      	beq.n	80086f6 <__swbuf_r+0x6e>
 80086ec:	89a3      	ldrh	r3, [r4, #12]
 80086ee:	07db      	lsls	r3, r3, #31
 80086f0:	d5e1      	bpl.n	80086b6 <__swbuf_r+0x2e>
 80086f2:	2e0a      	cmp	r6, #10
 80086f4:	d1df      	bne.n	80086b6 <__swbuf_r+0x2e>
 80086f6:	4621      	mov	r1, r4
 80086f8:	4628      	mov	r0, r5
 80086fa:	f7ff ff9d 	bl	8008638 <_fflush_r>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d0d9      	beq.n	80086b6 <__swbuf_r+0x2e>
 8008702:	e7d6      	b.n	80086b2 <__swbuf_r+0x2a>

08008704 <__swsetup_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4b29      	ldr	r3, [pc, #164]	@ (80087ac <__swsetup_r+0xa8>)
 8008708:	4605      	mov	r5, r0
 800870a:	6818      	ldr	r0, [r3, #0]
 800870c:	460c      	mov	r4, r1
 800870e:	b118      	cbz	r0, 8008718 <__swsetup_r+0x14>
 8008710:	6a03      	ldr	r3, [r0, #32]
 8008712:	b90b      	cbnz	r3, 8008718 <__swsetup_r+0x14>
 8008714:	f7ff f8c4 	bl	80078a0 <__sinit>
 8008718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871c:	0719      	lsls	r1, r3, #28
 800871e:	d422      	bmi.n	8008766 <__swsetup_r+0x62>
 8008720:	06da      	lsls	r2, r3, #27
 8008722:	d407      	bmi.n	8008734 <__swsetup_r+0x30>
 8008724:	2209      	movs	r2, #9
 8008726:	602a      	str	r2, [r5, #0]
 8008728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800872c:	81a3      	strh	r3, [r4, #12]
 800872e:	f04f 30ff 	mov.w	r0, #4294967295
 8008732:	e033      	b.n	800879c <__swsetup_r+0x98>
 8008734:	0758      	lsls	r0, r3, #29
 8008736:	d512      	bpl.n	800875e <__swsetup_r+0x5a>
 8008738:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800873a:	b141      	cbz	r1, 800874e <__swsetup_r+0x4a>
 800873c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008740:	4299      	cmp	r1, r3
 8008742:	d002      	beq.n	800874a <__swsetup_r+0x46>
 8008744:	4628      	mov	r0, r5
 8008746:	f7ff f9d3 	bl	8007af0 <_free_r>
 800874a:	2300      	movs	r3, #0
 800874c:	6363      	str	r3, [r4, #52]	@ 0x34
 800874e:	89a3      	ldrh	r3, [r4, #12]
 8008750:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008754:	81a3      	strh	r3, [r4, #12]
 8008756:	2300      	movs	r3, #0
 8008758:	6063      	str	r3, [r4, #4]
 800875a:	6923      	ldr	r3, [r4, #16]
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	f043 0308 	orr.w	r3, r3, #8
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	6923      	ldr	r3, [r4, #16]
 8008768:	b94b      	cbnz	r3, 800877e <__swsetup_r+0x7a>
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008774:	d003      	beq.n	800877e <__swsetup_r+0x7a>
 8008776:	4621      	mov	r1, r4
 8008778:	4628      	mov	r0, r5
 800877a:	f000 f8a5 	bl	80088c8 <__smakebuf_r>
 800877e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008782:	f013 0201 	ands.w	r2, r3, #1
 8008786:	d00a      	beq.n	800879e <__swsetup_r+0x9a>
 8008788:	2200      	movs	r2, #0
 800878a:	60a2      	str	r2, [r4, #8]
 800878c:	6962      	ldr	r2, [r4, #20]
 800878e:	4252      	negs	r2, r2
 8008790:	61a2      	str	r2, [r4, #24]
 8008792:	6922      	ldr	r2, [r4, #16]
 8008794:	b942      	cbnz	r2, 80087a8 <__swsetup_r+0xa4>
 8008796:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800879a:	d1c5      	bne.n	8008728 <__swsetup_r+0x24>
 800879c:	bd38      	pop	{r3, r4, r5, pc}
 800879e:	0799      	lsls	r1, r3, #30
 80087a0:	bf58      	it	pl
 80087a2:	6962      	ldrpl	r2, [r4, #20]
 80087a4:	60a2      	str	r2, [r4, #8]
 80087a6:	e7f4      	b.n	8008792 <__swsetup_r+0x8e>
 80087a8:	2000      	movs	r0, #0
 80087aa:	e7f7      	b.n	800879c <__swsetup_r+0x98>
 80087ac:	200000b8 	.word	0x200000b8

080087b0 <memmove>:
 80087b0:	4288      	cmp	r0, r1
 80087b2:	b510      	push	{r4, lr}
 80087b4:	eb01 0402 	add.w	r4, r1, r2
 80087b8:	d902      	bls.n	80087c0 <memmove+0x10>
 80087ba:	4284      	cmp	r4, r0
 80087bc:	4623      	mov	r3, r4
 80087be:	d807      	bhi.n	80087d0 <memmove+0x20>
 80087c0:	1e43      	subs	r3, r0, #1
 80087c2:	42a1      	cmp	r1, r4
 80087c4:	d008      	beq.n	80087d8 <memmove+0x28>
 80087c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80087ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80087ce:	e7f8      	b.n	80087c2 <memmove+0x12>
 80087d0:	4402      	add	r2, r0
 80087d2:	4601      	mov	r1, r0
 80087d4:	428a      	cmp	r2, r1
 80087d6:	d100      	bne.n	80087da <memmove+0x2a>
 80087d8:	bd10      	pop	{r4, pc}
 80087da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80087e2:	e7f7      	b.n	80087d4 <memmove+0x24>

080087e4 <_sbrk_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4d06      	ldr	r5, [pc, #24]	@ (8008800 <_sbrk_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4604      	mov	r4, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	602b      	str	r3, [r5, #0]
 80087f0:	f7f9 f99a 	bl	8001b28 <_sbrk>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_sbrk_r+0x1a>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_sbrk_r+0x1a>
 80087fc:	6023      	str	r3, [r4, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000798 	.word	0x20000798

08008804 <memcpy>:
 8008804:	440a      	add	r2, r1
 8008806:	4291      	cmp	r1, r2
 8008808:	f100 33ff 	add.w	r3, r0, #4294967295
 800880c:	d100      	bne.n	8008810 <memcpy+0xc>
 800880e:	4770      	bx	lr
 8008810:	b510      	push	{r4, lr}
 8008812:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008816:	f803 4f01 	strb.w	r4, [r3, #1]!
 800881a:	4291      	cmp	r1, r2
 800881c:	d1f9      	bne.n	8008812 <memcpy+0xe>
 800881e:	bd10      	pop	{r4, pc}

08008820 <_realloc_r>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	4680      	mov	r8, r0
 8008826:	4615      	mov	r5, r2
 8008828:	460c      	mov	r4, r1
 800882a:	b921      	cbnz	r1, 8008836 <_realloc_r+0x16>
 800882c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4611      	mov	r1, r2
 8008832:	f7ff b9c9 	b.w	8007bc8 <_malloc_r>
 8008836:	b92a      	cbnz	r2, 8008844 <_realloc_r+0x24>
 8008838:	f7ff f95a 	bl	8007af0 <_free_r>
 800883c:	2400      	movs	r4, #0
 800883e:	4620      	mov	r0, r4
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	f000 f89e 	bl	8008984 <_malloc_usable_size_r>
 8008848:	4285      	cmp	r5, r0
 800884a:	4606      	mov	r6, r0
 800884c:	d802      	bhi.n	8008854 <_realloc_r+0x34>
 800884e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008852:	d8f4      	bhi.n	800883e <_realloc_r+0x1e>
 8008854:	4629      	mov	r1, r5
 8008856:	4640      	mov	r0, r8
 8008858:	f7ff f9b6 	bl	8007bc8 <_malloc_r>
 800885c:	4607      	mov	r7, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d0ec      	beq.n	800883c <_realloc_r+0x1c>
 8008862:	42b5      	cmp	r5, r6
 8008864:	462a      	mov	r2, r5
 8008866:	4621      	mov	r1, r4
 8008868:	bf28      	it	cs
 800886a:	4632      	movcs	r2, r6
 800886c:	f7ff ffca 	bl	8008804 <memcpy>
 8008870:	4621      	mov	r1, r4
 8008872:	4640      	mov	r0, r8
 8008874:	f7ff f93c 	bl	8007af0 <_free_r>
 8008878:	463c      	mov	r4, r7
 800887a:	e7e0      	b.n	800883e <_realloc_r+0x1e>

0800887c <__swhatbuf_r>:
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	460c      	mov	r4, r1
 8008880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008884:	2900      	cmp	r1, #0
 8008886:	b096      	sub	sp, #88	@ 0x58
 8008888:	4615      	mov	r5, r2
 800888a:	461e      	mov	r6, r3
 800888c:	da0d      	bge.n	80088aa <__swhatbuf_r+0x2e>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008894:	f04f 0100 	mov.w	r1, #0
 8008898:	bf14      	ite	ne
 800889a:	2340      	movne	r3, #64	@ 0x40
 800889c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088a0:	2000      	movs	r0, #0
 80088a2:	6031      	str	r1, [r6, #0]
 80088a4:	602b      	str	r3, [r5, #0]
 80088a6:	b016      	add	sp, #88	@ 0x58
 80088a8:	bd70      	pop	{r4, r5, r6, pc}
 80088aa:	466a      	mov	r2, sp
 80088ac:	f000 f848 	bl	8008940 <_fstat_r>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	dbec      	blt.n	800888e <__swhatbuf_r+0x12>
 80088b4:	9901      	ldr	r1, [sp, #4]
 80088b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088be:	4259      	negs	r1, r3
 80088c0:	4159      	adcs	r1, r3
 80088c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088c6:	e7eb      	b.n	80088a0 <__swhatbuf_r+0x24>

080088c8 <__smakebuf_r>:
 80088c8:	898b      	ldrh	r3, [r1, #12]
 80088ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088cc:	079d      	lsls	r5, r3, #30
 80088ce:	4606      	mov	r6, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	d507      	bpl.n	80088e4 <__smakebuf_r+0x1c>
 80088d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	6123      	str	r3, [r4, #16]
 80088dc:	2301      	movs	r3, #1
 80088de:	6163      	str	r3, [r4, #20]
 80088e0:	b003      	add	sp, #12
 80088e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088e4:	ab01      	add	r3, sp, #4
 80088e6:	466a      	mov	r2, sp
 80088e8:	f7ff ffc8 	bl	800887c <__swhatbuf_r>
 80088ec:	9f00      	ldr	r7, [sp, #0]
 80088ee:	4605      	mov	r5, r0
 80088f0:	4639      	mov	r1, r7
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff f968 	bl	8007bc8 <_malloc_r>
 80088f8:	b948      	cbnz	r0, 800890e <__smakebuf_r+0x46>
 80088fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088fe:	059a      	lsls	r2, r3, #22
 8008900:	d4ee      	bmi.n	80088e0 <__smakebuf_r+0x18>
 8008902:	f023 0303 	bic.w	r3, r3, #3
 8008906:	f043 0302 	orr.w	r3, r3, #2
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	e7e2      	b.n	80088d4 <__smakebuf_r+0xc>
 800890e:	89a3      	ldrh	r3, [r4, #12]
 8008910:	6020      	str	r0, [r4, #0]
 8008912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	9b01      	ldr	r3, [sp, #4]
 800891a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800891e:	b15b      	cbz	r3, 8008938 <__smakebuf_r+0x70>
 8008920:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008924:	4630      	mov	r0, r6
 8008926:	f000 f81d 	bl	8008964 <_isatty_r>
 800892a:	b128      	cbz	r0, 8008938 <__smakebuf_r+0x70>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	f023 0303 	bic.w	r3, r3, #3
 8008932:	f043 0301 	orr.w	r3, r3, #1
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	431d      	orrs	r5, r3
 800893c:	81a5      	strh	r5, [r4, #12]
 800893e:	e7cf      	b.n	80088e0 <__smakebuf_r+0x18>

08008940 <_fstat_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4d07      	ldr	r5, [pc, #28]	@ (8008960 <_fstat_r+0x20>)
 8008944:	2300      	movs	r3, #0
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	4611      	mov	r1, r2
 800894c:	602b      	str	r3, [r5, #0]
 800894e:	f7f9 f8c2 	bl	8001ad6 <_fstat>
 8008952:	1c43      	adds	r3, r0, #1
 8008954:	d102      	bne.n	800895c <_fstat_r+0x1c>
 8008956:	682b      	ldr	r3, [r5, #0]
 8008958:	b103      	cbz	r3, 800895c <_fstat_r+0x1c>
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	bd38      	pop	{r3, r4, r5, pc}
 800895e:	bf00      	nop
 8008960:	20000798 	.word	0x20000798

08008964 <_isatty_r>:
 8008964:	b538      	push	{r3, r4, r5, lr}
 8008966:	4d06      	ldr	r5, [pc, #24]	@ (8008980 <_isatty_r+0x1c>)
 8008968:	2300      	movs	r3, #0
 800896a:	4604      	mov	r4, r0
 800896c:	4608      	mov	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7f9 f8c1 	bl	8001af6 <_isatty>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d102      	bne.n	800897e <_isatty_r+0x1a>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	b103      	cbz	r3, 800897e <_isatty_r+0x1a>
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	bd38      	pop	{r3, r4, r5, pc}
 8008980:	20000798 	.word	0x20000798

08008984 <_malloc_usable_size_r>:
 8008984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008988:	1f18      	subs	r0, r3, #4
 800898a:	2b00      	cmp	r3, #0
 800898c:	bfbc      	itt	lt
 800898e:	580b      	ldrlt	r3, [r1, r0]
 8008990:	18c0      	addlt	r0, r0, r3
 8008992:	4770      	bx	lr

08008994 <_init>:
 8008994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008996:	bf00      	nop
 8008998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899a:	bc08      	pop	{r3}
 800899c:	469e      	mov	lr, r3
 800899e:	4770      	bx	lr

080089a0 <_fini>:
 80089a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a2:	bf00      	nop
 80089a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089a6:	bc08      	pop	{r3}
 80089a8:	469e      	mov	lr, r3
 80089aa:	4770      	bx	lr
